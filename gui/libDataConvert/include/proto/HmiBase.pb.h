// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HmiBase.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HmiBase_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HmiBase_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HmiBase_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HmiBase_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HmiBase_2eproto;
class TDataBinding;
struct TDataBindingDefaultTypeInternal;
extern TDataBindingDefaultTypeInternal _TDataBinding_default_instance_;
class TDataProvider;
struct TDataProviderDefaultTypeInternal;
extern TDataProviderDefaultTypeInternal _TDataProvider_default_instance_;
class TEntryExitAnimation;
struct TEntryExitAnimationDefaultTypeInternal;
extern TEntryExitAnimationDefaultTypeInternal _TEntryExitAnimation_default_instance_;
class TLightweightAnimation;
struct TLightweightAnimationDefaultTypeInternal;
extern TLightweightAnimationDefaultTypeInternal _TLightweightAnimation_default_instance_;
class TLoopAnimation;
struct TLoopAnimationDefaultTypeInternal;
extern TLoopAnimationDefaultTypeInternal _TLoopAnimation_default_instance_;
class TOperation;
struct TOperationDefaultTypeInternal;
extern TOperationDefaultTypeInternal _TOperation_default_instance_;
class TVariantFlag;
struct TVariantFlagDefaultTypeInternal;
extern TVariantFlagDefaultTypeInternal _TVariantFlag_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::TDataBinding* Arena::CreateMaybeMessage<::TDataBinding>(Arena*);
template<> ::TDataProvider* Arena::CreateMaybeMessage<::TDataProvider>(Arena*);
template<> ::TEntryExitAnimation* Arena::CreateMaybeMessage<::TEntryExitAnimation>(Arena*);
template<> ::TLightweightAnimation* Arena::CreateMaybeMessage<::TLightweightAnimation>(Arena*);
template<> ::TLoopAnimation* Arena::CreateMaybeMessage<::TLoopAnimation>(Arena*);
template<> ::TOperation* Arena::CreateMaybeMessage<::TOperation>(Arena*);
template<> ::TVariantFlag* Arena::CreateMaybeMessage<::TVariantFlag>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

enum TEOperatorType : int {
  TEOperatorType_Not = 0,
  TEOperatorType_Neg = 1,
  TEOperatorType_Inv = 2,
  TEOperatorType_Abs = 3,
  TEOperatorType_And = 4,
  TEOperatorType_Or = 5,
  TEOperatorType_Add = 6,
  TEOperatorType_Sub = 7,
  TEOperatorType_Mul = 8,
  TEOperatorType_Div = 9,
  TEOperatorType_Min = 10,
  TEOperatorType_Max = 11,
  TEOperatorType_Equal = 12,
  TEOperatorType_NotEqual = 13,
  TEOperatorType_Less = 14,
  TEOperatorType_Greater = 15,
  TEOperatorType_LessEqual = 16,
  TEOperatorType_GreaterEqual = 17,
  TEOperatorType_IfThenElse = 18,
  TEOperatorType_Clamp = 19,
  TEOperatorType_MuxVec2 = 20,
  TEOperatorType_MuxVec3 = 21,
  TEOperatorType_MuxVec4 = 22,
  TEOperatorType_ColorFade = 23,
  TEOperatorType_NormalizeInRange = 24,
  TEOperatorType_isRessourceValid = 25,
  TEOperatorType_IsEmpty = 26,
  TEOperatorType_MuxAlignment = 27,
  TEOperatorType_Mix = 28,
  TEOperatorType_Step = 29,
  TEOperatorType_SmoothStep = 30,
  TEOperatorType_RemapValue = 31,
  TEOperatorType_Pow = 32,
  TEOperatorType_Switch = 33,
  TEOperatorType_LogBaseE = 34,
  TEOperatorType_Convert = 35,
  TEOperatorType_DebugOutput = 36,
  TEOperatorType_Sin = 37,
  TEOperatorType_Cos = 38,
  TEOperatorType_Tan = 39,
  TEOperatorType_XOr = 40,
  TEOperatorType_DemuxVec = 41,
  TEOperatorType_Mod = 42,
  TEOperatorType_Round = 43,
  TEOperatorType_CubicBezierInterpolation = 44,
  TEOperatorType_IsRessourceType = 45
};
bool TEOperatorType_IsValid(int value);
constexpr TEOperatorType TEOperatorType_MIN = TEOperatorType_Not;
constexpr TEOperatorType TEOperatorType_MAX = TEOperatorType_IsRessourceType;
constexpr int TEOperatorType_ARRAYSIZE = TEOperatorType_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEOperatorType_descriptor();
template<typename T>
inline const std::string& TEOperatorType_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEOperatorType>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEOperatorType_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEOperatorType_descriptor(), enum_t_value);
}
inline bool TEOperatorType_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEOperatorType* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEOperatorType>(
    TEOperatorType_descriptor(), name, value);
}
enum TEProviderSource : int {
  TEProviderSource_ExtModelValue = 0,
  TEProviderSource_IntModelValue = 1,
  TEProviderSource_VariantRegistry = 2,
  TEProviderSource_ColorRegistry = 3,
  TEProviderSource_ConstRegistry = 4,
  TEProviderSource_PropertyModel = 5,
  TEProviderSource_DataModel = 6,
  TEProviderSource_WidgetDataExchange = 7
};
bool TEProviderSource_IsValid(int value);
constexpr TEProviderSource TEProviderSource_MIN = TEProviderSource_ExtModelValue;
constexpr TEProviderSource TEProviderSource_MAX = TEProviderSource_WidgetDataExchange;
constexpr int TEProviderSource_ARRAYSIZE = TEProviderSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEProviderSource_descriptor();
template<typename T>
inline const std::string& TEProviderSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEProviderSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEProviderSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEProviderSource_descriptor(), enum_t_value);
}
inline bool TEProviderSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEProviderSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEProviderSource>(
    TEProviderSource_descriptor(), name, value);
}
enum TEVariantFlagOperation : int {
  TEVariantFlagOperation_Not = 1,
  TEVariantFlagOperation_And = 2,
  TEVariantFlagOperation_Or = 3
};
bool TEVariantFlagOperation_IsValid(int value);
constexpr TEVariantFlagOperation TEVariantFlagOperation_MIN = TEVariantFlagOperation_Not;
constexpr TEVariantFlagOperation TEVariantFlagOperation_MAX = TEVariantFlagOperation_Or;
constexpr int TEVariantFlagOperation_ARRAYSIZE = TEVariantFlagOperation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEVariantFlagOperation_descriptor();
template<typename T>
inline const std::string& TEVariantFlagOperation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEVariantFlagOperation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEVariantFlagOperation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEVariantFlagOperation_descriptor(), enum_t_value);
}
inline bool TEVariantFlagOperation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEVariantFlagOperation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEVariantFlagOperation>(
    TEVariantFlagOperation_descriptor(), name, value);
}
enum TEAnimationInterpolator : int {
  TEAnimationInterpolator_Linear = 0,
  TEAnimationInterpolator_SineIn = 1,
  TEAnimationInterpolator_SineOut = 2,
  TEAnimationInterpolator_Sine = 3,
  TEAnimationInterpolator_Arcsine = 4,
  TEAnimationInterpolator_Step = 5,
  TEAnimationInterpolator_Switch = 6,
  TEAnimationInterpolator_Squared = 7,
  TEAnimationInterpolator_InverseSquared = 8,
  TEAnimationInterpolator_SmoothStep = 9,
  TEAnimationInterpolator_Bump = 10,
  TEAnimationInterpolator_SwitchAtEnd = 11,
  TEAnimationInterpolator_SineX2 = 12
};
bool TEAnimationInterpolator_IsValid(int value);
constexpr TEAnimationInterpolator TEAnimationInterpolator_MIN = TEAnimationInterpolator_Linear;
constexpr TEAnimationInterpolator TEAnimationInterpolator_MAX = TEAnimationInterpolator_SineX2;
constexpr int TEAnimationInterpolator_ARRAYSIZE = TEAnimationInterpolator_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAnimationInterpolator_descriptor();
template<typename T>
inline const std::string& TEAnimationInterpolator_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAnimationInterpolator>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAnimationInterpolator_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAnimationInterpolator_descriptor(), enum_t_value);
}
inline bool TEAnimationInterpolator_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAnimationInterpolator* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAnimationInterpolator>(
    TEAnimationInterpolator_descriptor(), name, value);
}
// ===================================================================

class TVariantFlag final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TVariantFlag) */ {
 public:
  inline TVariantFlag() : TVariantFlag(nullptr) {}
  ~TVariantFlag() override;
  explicit PROTOBUF_CONSTEXPR TVariantFlag(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TVariantFlag(const TVariantFlag& from);
  TVariantFlag(TVariantFlag&& from) noexcept
    : TVariantFlag() {
    *this = ::std::move(from);
  }

  inline TVariantFlag& operator=(const TVariantFlag& from) {
    CopyFrom(from);
    return *this;
  }
  inline TVariantFlag& operator=(TVariantFlag&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TVariantFlag& default_instance() {
    return *internal_default_instance();
  }
  static inline const TVariantFlag* internal_default_instance() {
    return reinterpret_cast<const TVariantFlag*>(
               &_TVariantFlag_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TVariantFlag& a, TVariantFlag& b) {
    a.Swap(&b);
  }
  inline void Swap(TVariantFlag* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TVariantFlag* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TVariantFlag* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TVariantFlag>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TVariantFlag& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TVariantFlag& from) {
    TVariantFlag::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TVariantFlag* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TVariantFlag";
  }
  protected:
  explicit TVariantFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperand1FieldNumber = 3,
    kOperand2FieldNumber = 4,
    kValueFieldNumber = 1,
    kOperationFieldNumber = 2,
  };
  // optional .TVariantFlag operand1 = 3;
  bool has_operand1() const;
  private:
  bool _internal_has_operand1() const;
  public:
  void clear_operand1();
  const ::TVariantFlag& operand1() const;
  PROTOBUF_NODISCARD ::TVariantFlag* release_operand1();
  ::TVariantFlag* mutable_operand1();
  void set_allocated_operand1(::TVariantFlag* operand1);
  private:
  const ::TVariantFlag& _internal_operand1() const;
  ::TVariantFlag* _internal_mutable_operand1();
  public:
  void unsafe_arena_set_allocated_operand1(
      ::TVariantFlag* operand1);
  ::TVariantFlag* unsafe_arena_release_operand1();

  // optional .TVariantFlag operand2 = 4;
  bool has_operand2() const;
  private:
  bool _internal_has_operand2() const;
  public:
  void clear_operand2();
  const ::TVariantFlag& operand2() const;
  PROTOBUF_NODISCARD ::TVariantFlag* release_operand2();
  ::TVariantFlag* mutable_operand2();
  void set_allocated_operand2(::TVariantFlag* operand2);
  private:
  const ::TVariantFlag& _internal_operand2() const;
  ::TVariantFlag* _internal_mutable_operand2();
  public:
  void unsafe_arena_set_allocated_operand2(
      ::TVariantFlag* operand2);
  ::TVariantFlag* unsafe_arena_release_operand2();

  // optional fixed32 value = 1;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  uint32_t value() const;
  void set_value(uint32_t value);
  private:
  uint32_t _internal_value() const;
  void _internal_set_value(uint32_t value);
  public:

  // optional .TEVariantFlagOperation operation = 2;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  ::TEVariantFlagOperation operation() const;
  void set_operation(::TEVariantFlagOperation value);
  private:
  ::TEVariantFlagOperation _internal_operation() const;
  void _internal_set_operation(::TEVariantFlagOperation value);
  public:

  // @@protoc_insertion_point(class_scope:TVariantFlag)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TVariantFlag* operand1_;
    ::TVariantFlag* operand2_;
    uint32_t value_;
    int operation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiBase_2eproto;
};
// -------------------------------------------------------------------

class TDataBinding final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDataBinding) */ {
 public:
  inline TDataBinding() : TDataBinding(nullptr) {}
  ~TDataBinding() override;
  explicit PROTOBUF_CONSTEXPR TDataBinding(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDataBinding(const TDataBinding& from);
  TDataBinding(TDataBinding&& from) noexcept
    : TDataBinding() {
    *this = ::std::move(from);
  }

  inline TDataBinding& operator=(const TDataBinding& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDataBinding& operator=(TDataBinding&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDataBinding& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDataBinding* internal_default_instance() {
    return reinterpret_cast<const TDataBinding*>(
               &_TDataBinding_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TDataBinding& a, TDataBinding& b) {
    a.Swap(&b);
  }
  inline void Swap(TDataBinding* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDataBinding* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDataBinding* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDataBinding>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDataBinding& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDataBinding& from) {
    TDataBinding::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDataBinding* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDataBinding";
  }
  protected:
  explicit TDataBinding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kProviderFieldNumber = 2,
  };
  // optional .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // required .TDataProvider provider = 2;
  bool has_provider() const;
  private:
  bool _internal_has_provider() const;
  public:
  void clear_provider();
  const ::TDataProvider& provider() const;
  PROTOBUF_NODISCARD ::TDataProvider* release_provider();
  ::TDataProvider* mutable_provider();
  void set_allocated_provider(::TDataProvider* provider);
  private:
  const ::TDataProvider& _internal_provider() const;
  ::TDataProvider* _internal_mutable_provider();
  public:
  void unsafe_arena_set_allocated_provider(
      ::TDataProvider* provider);
  ::TDataProvider* unsafe_arena_release_provider();

  // @@protoc_insertion_point(class_scope:TDataBinding)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TDataProvider* provider_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiBase_2eproto;
};
// -------------------------------------------------------------------

class TDataProvider final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TDataProvider) */ {
 public:
  inline TDataProvider() : TDataProvider(nullptr) {}
  ~TDataProvider() override;
  explicit PROTOBUF_CONSTEXPR TDataProvider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDataProvider(const TDataProvider& from);
  TDataProvider(TDataProvider&& from) noexcept
    : TDataProvider() {
    *this = ::std::move(from);
  }

  inline TDataProvider& operator=(const TDataProvider& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDataProvider& operator=(TDataProvider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDataProvider& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDataProvider* internal_default_instance() {
    return reinterpret_cast<const TDataProvider*>(
               &_TDataProvider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TDataProvider& a, TDataProvider& b) {
    a.Swap(&b);
  }
  inline void Swap(TDataProvider* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDataProvider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDataProvider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDataProvider>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDataProvider& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDataProvider& from) {
    TDataProvider::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDataProvider* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TDataProvider";
  }
  protected:
  explicit TDataProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVariantFieldNumber = 1,
    kOperationFieldNumber = 5,
    kLightweightAnimationFieldNumber = 6,
    kEntryExitAnimationFieldNumber = 7,
    kLoopAnimationFieldNumber = 8,
    kSourceFieldNumber = 4,
  };
  // optional .TVariant variant = 1;
  bool has_variant() const;
  private:
  bool _internal_has_variant() const;
  public:
  void clear_variant();
  const ::TVariant& variant() const;
  PROTOBUF_NODISCARD ::TVariant* release_variant();
  ::TVariant* mutable_variant();
  void set_allocated_variant(::TVariant* variant);
  private:
  const ::TVariant& _internal_variant() const;
  ::TVariant* _internal_mutable_variant();
  public:
  void unsafe_arena_set_allocated_variant(
      ::TVariant* variant);
  ::TVariant* unsafe_arena_release_variant();

  // optional .TOperation operation = 5;
  bool has_operation() const;
  private:
  bool _internal_has_operation() const;
  public:
  void clear_operation();
  const ::TOperation& operation() const;
  PROTOBUF_NODISCARD ::TOperation* release_operation();
  ::TOperation* mutable_operation();
  void set_allocated_operation(::TOperation* operation);
  private:
  const ::TOperation& _internal_operation() const;
  ::TOperation* _internal_mutable_operation();
  public:
  void unsafe_arena_set_allocated_operation(
      ::TOperation* operation);
  ::TOperation* unsafe_arena_release_operation();

  // optional .TLightweightAnimation lightweightAnimation = 6;
  bool has_lightweightanimation() const;
  private:
  bool _internal_has_lightweightanimation() const;
  public:
  void clear_lightweightanimation();
  const ::TLightweightAnimation& lightweightanimation() const;
  PROTOBUF_NODISCARD ::TLightweightAnimation* release_lightweightanimation();
  ::TLightweightAnimation* mutable_lightweightanimation();
  void set_allocated_lightweightanimation(::TLightweightAnimation* lightweightanimation);
  private:
  const ::TLightweightAnimation& _internal_lightweightanimation() const;
  ::TLightweightAnimation* _internal_mutable_lightweightanimation();
  public:
  void unsafe_arena_set_allocated_lightweightanimation(
      ::TLightweightAnimation* lightweightanimation);
  ::TLightweightAnimation* unsafe_arena_release_lightweightanimation();

  // optional .TEntryExitAnimation entryExitAnimation = 7;
  bool has_entryexitanimation() const;
  private:
  bool _internal_has_entryexitanimation() const;
  public:
  void clear_entryexitanimation();
  const ::TEntryExitAnimation& entryexitanimation() const;
  PROTOBUF_NODISCARD ::TEntryExitAnimation* release_entryexitanimation();
  ::TEntryExitAnimation* mutable_entryexitanimation();
  void set_allocated_entryexitanimation(::TEntryExitAnimation* entryexitanimation);
  private:
  const ::TEntryExitAnimation& _internal_entryexitanimation() const;
  ::TEntryExitAnimation* _internal_mutable_entryexitanimation();
  public:
  void unsafe_arena_set_allocated_entryexitanimation(
      ::TEntryExitAnimation* entryexitanimation);
  ::TEntryExitAnimation* unsafe_arena_release_entryexitanimation();

  // optional .TLoopAnimation loopAnimation = 8;
  bool has_loopanimation() const;
  private:
  bool _internal_has_loopanimation() const;
  public:
  void clear_loopanimation();
  const ::TLoopAnimation& loopanimation() const;
  PROTOBUF_NODISCARD ::TLoopAnimation* release_loopanimation();
  ::TLoopAnimation* mutable_loopanimation();
  void set_allocated_loopanimation(::TLoopAnimation* loopanimation);
  private:
  const ::TLoopAnimation& _internal_loopanimation() const;
  ::TLoopAnimation* _internal_mutable_loopanimation();
  public:
  void unsafe_arena_set_allocated_loopanimation(
      ::TLoopAnimation* loopanimation);
  ::TLoopAnimation* unsafe_arena_release_loopanimation();

  // optional .TEProviderSource source = 4;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  ::TEProviderSource source() const;
  void set_source(::TEProviderSource value);
  private:
  ::TEProviderSource _internal_source() const;
  void _internal_set_source(::TEProviderSource value);
  public:


  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline bool HasExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.Has(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void ClearExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) {
    _impl_._extensions_.ClearExtension(id.number());

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline int ExtensionSize(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _impl_._extensions_.ExtensionSize(id.number());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_,
                                  id.default_value());
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Mutable(id.number(), _field_type,
                                      &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::ConstType value) {
    _proto_TypeTraits::Set(id.number(), _field_type, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::SetAllocated(id.number(), _field_type, value,
                                    &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void UnsafeArenaSetAllocatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Singular::MutableType value) {
    _proto_TypeTraits::UnsafeArenaSetAllocated(id.number(), _field_type,
                                               value, &_impl_._extensions_);

  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  PROTOBUF_NODISCARD inline
      typename _proto_TypeTraits::Singular::MutableType
      ReleaseExtension(
          const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
              TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::Release(id.number(), _field_type,
                                      &_impl_._extensions_);
  }
  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Singular::MutableType
  UnsafeArenaReleaseExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::UnsafeArenaRelease(id.number(), _field_type,
                                                 &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::ConstType GetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) const {

    return _proto_TypeTraits::Get(id.number(), _impl_._extensions_, index);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType MutableExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index) {

    return _proto_TypeTraits::Mutable(id.number(), index, &_impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void SetExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id,
      int index, typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Set(id.number(), index, value, &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::MutableType AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) {
    typename _proto_TypeTraits::Repeated::MutableType to_add =
        _proto_TypeTraits::Add(id.number(), _field_type, &_impl_._extensions_);

    return to_add;
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline void AddExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id,
      typename _proto_TypeTraits::Repeated::ConstType value) {
    _proto_TypeTraits::Add(id.number(), _field_type, _is_packed, value,
                           &_impl_._extensions_);

  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline const typename _proto_TypeTraits::Repeated::RepeatedFieldType&
  GetRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) const {

    return _proto_TypeTraits::GetRepeated(id.number(), _impl_._extensions_);
  }

  template <typename _proto_TypeTraits,
            ::PROTOBUF_NAMESPACE_ID::internal::FieldType _field_type,
            bool _is_packed>
  inline typename _proto_TypeTraits::Repeated::RepeatedFieldType*
  MutableRepeatedExtension(
      const ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier<
          TDataProvider, _proto_TypeTraits, _field_type, _is_packed>& id) {

    return _proto_TypeTraits::MutableRepeated(id.number(), _field_type,
                                              _is_packed, &_impl_._extensions_);
  }

  // @@protoc_insertion_point(class_scope:TDataProvider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::ExtensionSet _extensions_;

    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TVariant* variant_;
    ::TOperation* operation_;
    ::TLightweightAnimation* lightweightanimation_;
    ::TEntryExitAnimation* entryexitanimation_;
    ::TLoopAnimation* loopanimation_;
    int source_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiBase_2eproto;
};
// -------------------------------------------------------------------

class TOperation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TOperation) */ {
 public:
  inline TOperation() : TOperation(nullptr) {}
  ~TOperation() override;
  explicit PROTOBUF_CONSTEXPR TOperation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TOperation(const TOperation& from);
  TOperation(TOperation&& from) noexcept
    : TOperation() {
    *this = ::std::move(from);
  }

  inline TOperation& operator=(const TOperation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TOperation& operator=(TOperation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TOperation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TOperation* internal_default_instance() {
    return reinterpret_cast<const TOperation*>(
               &_TOperation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TOperation& a, TOperation& b) {
    a.Swap(&b);
  }
  inline void Swap(TOperation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TOperation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TOperation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TOperation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TOperation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TOperation& from) {
    TOperation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TOperation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TOperation";
  }
  protected:
  explicit TOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataTypeFieldNumber = 2,
    kOperandFieldNumber = 3,
    kOperatorFieldNumber = 1,
  };
  // repeated .TEDataType dataType = 2;
  int datatype_size() const;
  private:
  int _internal_datatype_size() const;
  public:
  void clear_datatype();
  private:
  ::TEDataType _internal_datatype(int index) const;
  void _internal_add_datatype(::TEDataType value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_datatype();
  public:
  ::TEDataType datatype(int index) const;
  void set_datatype(int index, ::TEDataType value);
  void add_datatype(::TEDataType value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& datatype() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_datatype();

  // repeated .TDataBinding operand = 3;
  int operand_size() const;
  private:
  int _internal_operand_size() const;
  public:
  void clear_operand();
  ::TDataBinding* mutable_operand(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
      mutable_operand();
  private:
  const ::TDataBinding& _internal_operand(int index) const;
  ::TDataBinding* _internal_add_operand();
  public:
  const ::TDataBinding& operand(int index) const;
  ::TDataBinding* add_operand();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
      operand() const;

  // required .TEOperatorType operator = 1;
  bool has_operator_() const;
  private:
  bool _internal_has_operator_() const;
  public:
  void clear_operator_();
  ::TEOperatorType operator_() const;
  void set_operator_(::TEOperatorType value);
  private:
  ::TEOperatorType _internal_operator_() const;
  void _internal_set_operator_(::TEOperatorType value);
  public:

  // @@protoc_insertion_point(class_scope:TOperation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> datatype_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding > operand_;
    int operator__;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiBase_2eproto;
};
// -------------------------------------------------------------------

class TLightweightAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TLightweightAnimation) */ {
 public:
  inline TLightweightAnimation() : TLightweightAnimation(nullptr) {}
  ~TLightweightAnimation() override;
  explicit PROTOBUF_CONSTEXPR TLightweightAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLightweightAnimation(const TLightweightAnimation& from);
  TLightweightAnimation(TLightweightAnimation&& from) noexcept
    : TLightweightAnimation() {
    *this = ::std::move(from);
  }

  inline TLightweightAnimation& operator=(const TLightweightAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLightweightAnimation& operator=(TLightweightAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLightweightAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLightweightAnimation* internal_default_instance() {
    return reinterpret_cast<const TLightweightAnimation*>(
               &_TLightweightAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TLightweightAnimation& a, TLightweightAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(TLightweightAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLightweightAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLightweightAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLightweightAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLightweightAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLightweightAnimation& from) {
    TLightweightAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLightweightAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TLightweightAnimation";
  }
  protected:
  explicit TLightweightAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTargetFieldNumber = 1,
    kSkipFieldNumber = 6,
    kDurationFieldNumber = 2,
    kInitFieldNumber = 3,
    kDistanceFieldNumber = 4,
    kUpdateIntervalFieldNumber = 5,
    kInterpolatorFieldNumber = 7,
  };
  // optional .TDataBinding target = 1;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::TDataBinding& target() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_target();
  ::TDataBinding* mutable_target();
  void set_allocated_target(::TDataBinding* target);
  private:
  const ::TDataBinding& _internal_target() const;
  ::TDataBinding* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::TDataBinding* target);
  ::TDataBinding* unsafe_arena_release_target();

  // optional .TDataBinding skip = 6;
  bool has_skip() const;
  private:
  bool _internal_has_skip() const;
  public:
  void clear_skip();
  const ::TDataBinding& skip() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_skip();
  ::TDataBinding* mutable_skip();
  void set_allocated_skip(::TDataBinding* skip);
  private:
  const ::TDataBinding& _internal_skip() const;
  ::TDataBinding* _internal_mutable_skip();
  public:
  void unsafe_arena_set_allocated_skip(
      ::TDataBinding* skip);
  ::TDataBinding* unsafe_arena_release_skip();

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional float init = 3;
  bool has_init() const;
  private:
  bool _internal_has_init() const;
  public:
  void clear_init();
  float init() const;
  void set_init(float value);
  private:
  float _internal_init() const;
  void _internal_set_init(float value);
  public:

  // optional float distance = 4;
  bool has_distance() const;
  private:
  bool _internal_has_distance() const;
  public:
  void clear_distance();
  float distance() const;
  void set_distance(float value);
  private:
  float _internal_distance() const;
  void _internal_set_distance(float value);
  public:

  // optional uint32 updateInterval = 5;
  bool has_updateinterval() const;
  private:
  bool _internal_has_updateinterval() const;
  public:
  void clear_updateinterval();
  uint32_t updateinterval() const;
  void set_updateinterval(uint32_t value);
  private:
  uint32_t _internal_updateinterval() const;
  void _internal_set_updateinterval(uint32_t value);
  public:

  // optional .TEAnimationInterpolator interpolator = 7;
  bool has_interpolator() const;
  private:
  bool _internal_has_interpolator() const;
  public:
  void clear_interpolator();
  ::TEAnimationInterpolator interpolator() const;
  void set_interpolator(::TEAnimationInterpolator value);
  private:
  ::TEAnimationInterpolator _internal_interpolator() const;
  void _internal_set_interpolator(::TEAnimationInterpolator value);
  public:

  // @@protoc_insertion_point(class_scope:TLightweightAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* target_;
    ::TDataBinding* skip_;
    uint32_t duration_;
    float init_;
    float distance_;
    uint32_t updateinterval_;
    int interpolator_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiBase_2eproto;
};
// -------------------------------------------------------------------

class TEntryExitAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TEntryExitAnimation) */ {
 public:
  inline TEntryExitAnimation() : TEntryExitAnimation(nullptr) {}
  ~TEntryExitAnimation() override;
  explicit PROTOBUF_CONSTEXPR TEntryExitAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TEntryExitAnimation(const TEntryExitAnimation& from);
  TEntryExitAnimation(TEntryExitAnimation&& from) noexcept
    : TEntryExitAnimation() {
    *this = ::std::move(from);
  }

  inline TEntryExitAnimation& operator=(const TEntryExitAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TEntryExitAnimation& operator=(TEntryExitAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TEntryExitAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TEntryExitAnimation* internal_default_instance() {
    return reinterpret_cast<const TEntryExitAnimation*>(
               &_TEntryExitAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TEntryExitAnimation& a, TEntryExitAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(TEntryExitAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TEntryExitAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TEntryExitAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TEntryExitAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TEntryExitAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TEntryExitAnimation& from) {
    TEntryExitAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TEntryExitAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TEntryExitAnimation";
  }
  protected:
  explicit TEntryExitAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEntryFieldNumber = 1,
    kDurationFieldNumber = 2,
    kUpdateIntervalFieldNumber = 3,
    kThresholdFieldNumber = 4,
  };
  // optional .TDataBinding entry = 1;
  bool has_entry() const;
  private:
  bool _internal_has_entry() const;
  public:
  void clear_entry();
  const ::TDataBinding& entry() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_entry();
  ::TDataBinding* mutable_entry();
  void set_allocated_entry(::TDataBinding* entry);
  private:
  const ::TDataBinding& _internal_entry() const;
  ::TDataBinding* _internal_mutable_entry();
  public:
  void unsafe_arena_set_allocated_entry(
      ::TDataBinding* entry);
  ::TDataBinding* unsafe_arena_release_entry();

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional uint32 updateInterval = 3;
  bool has_updateinterval() const;
  private:
  bool _internal_has_updateinterval() const;
  public:
  void clear_updateinterval();
  uint32_t updateinterval() const;
  void set_updateinterval(uint32_t value);
  private:
  uint32_t _internal_updateinterval() const;
  void _internal_set_updateinterval(uint32_t value);
  public:

  // optional float threshold = 4;
  bool has_threshold() const;
  private:
  bool _internal_has_threshold() const;
  public:
  void clear_threshold();
  float threshold() const;
  void set_threshold(float value);
  private:
  float _internal_threshold() const;
  void _internal_set_threshold(float value);
  public:

  // @@protoc_insertion_point(class_scope:TEntryExitAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* entry_;
    uint32_t duration_;
    uint32_t updateinterval_;
    float threshold_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiBase_2eproto;
};
// -------------------------------------------------------------------

class TLoopAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:TLoopAnimation) */ {
 public:
  inline TLoopAnimation() : TLoopAnimation(nullptr) {}
  ~TLoopAnimation() override;
  explicit PROTOBUF_CONSTEXPR TLoopAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLoopAnimation(const TLoopAnimation& from);
  TLoopAnimation(TLoopAnimation&& from) noexcept
    : TLoopAnimation() {
    *this = ::std::move(from);
  }

  inline TLoopAnimation& operator=(const TLoopAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLoopAnimation& operator=(TLoopAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLoopAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLoopAnimation* internal_default_instance() {
    return reinterpret_cast<const TLoopAnimation*>(
               &_TLoopAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TLoopAnimation& a, TLoopAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(TLoopAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLoopAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLoopAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLoopAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLoopAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLoopAnimation& from) {
    TLoopAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLoopAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "TLoopAnimation";
  }
  protected:
  explicit TLoopAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPlayFieldNumber = 1,
    kDurationFieldNumber = 2,
    kUpdateIntervalFieldNumber = 3,
    kAlternateFieldNumber = 4,
  };
  // optional .TDataBinding play = 1;
  bool has_play() const;
  private:
  bool _internal_has_play() const;
  public:
  void clear_play();
  const ::TDataBinding& play() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_play();
  ::TDataBinding* mutable_play();
  void set_allocated_play(::TDataBinding* play);
  private:
  const ::TDataBinding& _internal_play() const;
  ::TDataBinding* _internal_mutable_play();
  public:
  void unsafe_arena_set_allocated_play(
      ::TDataBinding* play);
  ::TDataBinding* unsafe_arena_release_play();

  // optional uint32 duration = 2;
  bool has_duration() const;
  private:
  bool _internal_has_duration() const;
  public:
  void clear_duration();
  uint32_t duration() const;
  void set_duration(uint32_t value);
  private:
  uint32_t _internal_duration() const;
  void _internal_set_duration(uint32_t value);
  public:

  // optional uint32 updateInterval = 3;
  bool has_updateinterval() const;
  private:
  bool _internal_has_updateinterval() const;
  public:
  void clear_updateinterval();
  uint32_t updateinterval() const;
  void set_updateinterval(uint32_t value);
  private:
  uint32_t _internal_updateinterval() const;
  void _internal_set_updateinterval(uint32_t value);
  public:

  // optional bool alternate = 4;
  bool has_alternate() const;
  private:
  bool _internal_has_alternate() const;
  public:
  void clear_alternate();
  bool alternate() const;
  void set_alternate(bool value);
  private:
  bool _internal_alternate() const;
  void _internal_set_alternate(bool value);
  public:

  // @@protoc_insertion_point(class_scope:TLoopAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* play_;
    uint32_t duration_;
    uint32_t updateinterval_;
    bool alternate_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiBase_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TVariantFlag

// optional fixed32 value = 1;
inline bool TVariantFlag::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TVariantFlag::has_value() const {
  return _internal_has_value();
}
inline void TVariantFlag::clear_value() {
  _impl_.value_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TVariantFlag::_internal_value() const {
  return _impl_.value_;
}
inline uint32_t TVariantFlag::value() const {
  // @@protoc_insertion_point(field_get:TVariantFlag.value)
  return _internal_value();
}
inline void TVariantFlag::_internal_set_value(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.value_ = value;
}
inline void TVariantFlag::set_value(uint32_t value) {
  _internal_set_value(value);
  // @@protoc_insertion_point(field_set:TVariantFlag.value)
}

// optional .TEVariantFlagOperation operation = 2;
inline bool TVariantFlag::_internal_has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TVariantFlag::has_operation() const {
  return _internal_has_operation();
}
inline void TVariantFlag::clear_operation() {
  _impl_.operation_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::TEVariantFlagOperation TVariantFlag::_internal_operation() const {
  return static_cast< ::TEVariantFlagOperation >(_impl_.operation_);
}
inline ::TEVariantFlagOperation TVariantFlag::operation() const {
  // @@protoc_insertion_point(field_get:TVariantFlag.operation)
  return _internal_operation();
}
inline void TVariantFlag::_internal_set_operation(::TEVariantFlagOperation value) {
  assert(::TEVariantFlagOperation_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.operation_ = value;
}
inline void TVariantFlag::set_operation(::TEVariantFlagOperation value) {
  _internal_set_operation(value);
  // @@protoc_insertion_point(field_set:TVariantFlag.operation)
}

// optional .TVariantFlag operand1 = 3;
inline bool TVariantFlag::_internal_has_operand1() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operand1_ != nullptr);
  return value;
}
inline bool TVariantFlag::has_operand1() const {
  return _internal_has_operand1();
}
inline void TVariantFlag::clear_operand1() {
  if (_impl_.operand1_ != nullptr) _impl_.operand1_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TVariantFlag& TVariantFlag::_internal_operand1() const {
  const ::TVariantFlag* p = _impl_.operand1_;
  return p != nullptr ? *p : reinterpret_cast<const ::TVariantFlag&>(
      ::_TVariantFlag_default_instance_);
}
inline const ::TVariantFlag& TVariantFlag::operand1() const {
  // @@protoc_insertion_point(field_get:TVariantFlag.operand1)
  return _internal_operand1();
}
inline void TVariantFlag::unsafe_arena_set_allocated_operand1(
    ::TVariantFlag* operand1) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operand1_);
  }
  _impl_.operand1_ = operand1;
  if (operand1) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TVariantFlag.operand1)
}
inline ::TVariantFlag* TVariantFlag::release_operand1() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TVariantFlag* temp = _impl_.operand1_;
  _impl_.operand1_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TVariantFlag* TVariantFlag::unsafe_arena_release_operand1() {
  // @@protoc_insertion_point(field_release:TVariantFlag.operand1)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TVariantFlag* temp = _impl_.operand1_;
  _impl_.operand1_ = nullptr;
  return temp;
}
inline ::TVariantFlag* TVariantFlag::_internal_mutable_operand1() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.operand1_ == nullptr) {
    auto* p = CreateMaybeMessage<::TVariantFlag>(GetArenaForAllocation());
    _impl_.operand1_ = p;
  }
  return _impl_.operand1_;
}
inline ::TVariantFlag* TVariantFlag::mutable_operand1() {
  ::TVariantFlag* _msg = _internal_mutable_operand1();
  // @@protoc_insertion_point(field_mutable:TVariantFlag.operand1)
  return _msg;
}
inline void TVariantFlag::set_allocated_operand1(::TVariantFlag* operand1) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.operand1_;
  }
  if (operand1) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(operand1);
    if (message_arena != submessage_arena) {
      operand1 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operand1, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.operand1_ = operand1;
  // @@protoc_insertion_point(field_set_allocated:TVariantFlag.operand1)
}

// optional .TVariantFlag operand2 = 4;
inline bool TVariantFlag::_internal_has_operand2() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operand2_ != nullptr);
  return value;
}
inline bool TVariantFlag::has_operand2() const {
  return _internal_has_operand2();
}
inline void TVariantFlag::clear_operand2() {
  if (_impl_.operand2_ != nullptr) _impl_.operand2_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TVariantFlag& TVariantFlag::_internal_operand2() const {
  const ::TVariantFlag* p = _impl_.operand2_;
  return p != nullptr ? *p : reinterpret_cast<const ::TVariantFlag&>(
      ::_TVariantFlag_default_instance_);
}
inline const ::TVariantFlag& TVariantFlag::operand2() const {
  // @@protoc_insertion_point(field_get:TVariantFlag.operand2)
  return _internal_operand2();
}
inline void TVariantFlag::unsafe_arena_set_allocated_operand2(
    ::TVariantFlag* operand2) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operand2_);
  }
  _impl_.operand2_ = operand2;
  if (operand2) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TVariantFlag.operand2)
}
inline ::TVariantFlag* TVariantFlag::release_operand2() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariantFlag* temp = _impl_.operand2_;
  _impl_.operand2_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TVariantFlag* TVariantFlag::unsafe_arena_release_operand2() {
  // @@protoc_insertion_point(field_release:TVariantFlag.operand2)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariantFlag* temp = _impl_.operand2_;
  _impl_.operand2_ = nullptr;
  return temp;
}
inline ::TVariantFlag* TVariantFlag::_internal_mutable_operand2() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.operand2_ == nullptr) {
    auto* p = CreateMaybeMessage<::TVariantFlag>(GetArenaForAllocation());
    _impl_.operand2_ = p;
  }
  return _impl_.operand2_;
}
inline ::TVariantFlag* TVariantFlag::mutable_operand2() {
  ::TVariantFlag* _msg = _internal_mutable_operand2();
  // @@protoc_insertion_point(field_mutable:TVariantFlag.operand2)
  return _msg;
}
inline void TVariantFlag::set_allocated_operand2(::TVariantFlag* operand2) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.operand2_;
  }
  if (operand2) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(operand2);
    if (message_arena != submessage_arena) {
      operand2 = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operand2, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.operand2_ = operand2;
  // @@protoc_insertion_point(field_set_allocated:TVariantFlag.operand2)
}

// -------------------------------------------------------------------

// TDataBinding

// optional .TIdentifier key = 1;
inline bool TDataBinding::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TDataBinding::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TDataBinding::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TDataBinding::key() const {
  // @@protoc_insertion_point(field_get:TDataBinding.key)
  return _internal_key();
}
inline void TDataBinding::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TDataBinding.key)
}
inline ::TIdentifier* TDataBinding::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TDataBinding::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:TDataBinding.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TDataBinding::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TDataBinding::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:TDataBinding.key)
  return _msg;
}
inline void TDataBinding::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:TDataBinding.key)
}

// required .TDataProvider provider = 2;
inline bool TDataBinding::_internal_has_provider() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.provider_ != nullptr);
  return value;
}
inline bool TDataBinding::has_provider() const {
  return _internal_has_provider();
}
inline void TDataBinding::clear_provider() {
  if (_impl_.provider_ != nullptr) _impl_.provider_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TDataProvider& TDataBinding::_internal_provider() const {
  const ::TDataProvider* p = _impl_.provider_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataProvider&>(
      ::_TDataProvider_default_instance_);
}
inline const ::TDataProvider& TDataBinding::provider() const {
  // @@protoc_insertion_point(field_get:TDataBinding.provider)
  return _internal_provider();
}
inline void TDataBinding::unsafe_arena_set_allocated_provider(
    ::TDataProvider* provider) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.provider_);
  }
  _impl_.provider_ = provider;
  if (provider) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TDataBinding.provider)
}
inline ::TDataProvider* TDataBinding::release_provider() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataProvider* temp = _impl_.provider_;
  _impl_.provider_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataProvider* TDataBinding::unsafe_arena_release_provider() {
  // @@protoc_insertion_point(field_release:TDataBinding.provider)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataProvider* temp = _impl_.provider_;
  _impl_.provider_ = nullptr;
  return temp;
}
inline ::TDataProvider* TDataBinding::_internal_mutable_provider() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.provider_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataProvider>(GetArenaForAllocation());
    _impl_.provider_ = p;
  }
  return _impl_.provider_;
}
inline ::TDataProvider* TDataBinding::mutable_provider() {
  ::TDataProvider* _msg = _internal_mutable_provider();
  // @@protoc_insertion_point(field_mutable:TDataBinding.provider)
  return _msg;
}
inline void TDataBinding::set_allocated_provider(::TDataProvider* provider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.provider_;
  }
  if (provider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(provider);
    if (message_arena != submessage_arena) {
      provider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, provider, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.provider_ = provider;
  // @@protoc_insertion_point(field_set_allocated:TDataBinding.provider)
}

// -------------------------------------------------------------------

// TDataProvider

// optional .TVariant variant = 1;
inline bool TDataProvider::_internal_has_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.variant_ != nullptr);
  return value;
}
inline bool TDataProvider::has_variant() const {
  return _internal_has_variant();
}
inline const ::TVariant& TDataProvider::_internal_variant() const {
  const ::TVariant* p = _impl_.variant_;
  return p != nullptr ? *p : reinterpret_cast<const ::TVariant&>(
      ::_TVariant_default_instance_);
}
inline const ::TVariant& TDataProvider::variant() const {
  // @@protoc_insertion_point(field_get:TDataProvider.variant)
  return _internal_variant();
}
inline void TDataProvider::unsafe_arena_set_allocated_variant(
    ::TVariant* variant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variant_);
  }
  _impl_.variant_ = variant;
  if (variant) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TDataProvider.variant)
}
inline ::TVariant* TDataProvider::release_variant() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TVariant* temp = _impl_.variant_;
  _impl_.variant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TVariant* TDataProvider::unsafe_arena_release_variant() {
  // @@protoc_insertion_point(field_release:TDataProvider.variant)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TVariant* temp = _impl_.variant_;
  _impl_.variant_ = nullptr;
  return temp;
}
inline ::TVariant* TDataProvider::_internal_mutable_variant() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.variant_ == nullptr) {
    auto* p = CreateMaybeMessage<::TVariant>(GetArenaForAllocation());
    _impl_.variant_ = p;
  }
  return _impl_.variant_;
}
inline ::TVariant* TDataProvider::mutable_variant() {
  ::TVariant* _msg = _internal_mutable_variant();
  // @@protoc_insertion_point(field_mutable:TDataProvider.variant)
  return _msg;
}
inline void TDataProvider::set_allocated_variant(::TVariant* variant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variant_);
  }
  if (variant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variant));
    if (message_arena != submessage_arena) {
      variant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variant, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.variant_ = variant;
  // @@protoc_insertion_point(field_set_allocated:TDataProvider.variant)
}

// optional .TEProviderSource source = 4;
inline bool TDataProvider::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TDataProvider::has_source() const {
  return _internal_has_source();
}
inline void TDataProvider::clear_source() {
  _impl_.source_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::TEProviderSource TDataProvider::_internal_source() const {
  return static_cast< ::TEProviderSource >(_impl_.source_);
}
inline ::TEProviderSource TDataProvider::source() const {
  // @@protoc_insertion_point(field_get:TDataProvider.source)
  return _internal_source();
}
inline void TDataProvider::_internal_set_source(::TEProviderSource value) {
  assert(::TEProviderSource_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.source_ = value;
}
inline void TDataProvider::set_source(::TEProviderSource value) {
  _internal_set_source(value);
  // @@protoc_insertion_point(field_set:TDataProvider.source)
}

// optional .TOperation operation = 5;
inline bool TDataProvider::_internal_has_operation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.operation_ != nullptr);
  return value;
}
inline bool TDataProvider::has_operation() const {
  return _internal_has_operation();
}
inline void TDataProvider::clear_operation() {
  if (_impl_.operation_ != nullptr) _impl_.operation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TOperation& TDataProvider::_internal_operation() const {
  const ::TOperation* p = _impl_.operation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TOperation&>(
      ::_TOperation_default_instance_);
}
inline const ::TOperation& TDataProvider::operation() const {
  // @@protoc_insertion_point(field_get:TDataProvider.operation)
  return _internal_operation();
}
inline void TDataProvider::unsafe_arena_set_allocated_operation(
    ::TOperation* operation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.operation_);
  }
  _impl_.operation_ = operation;
  if (operation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TDataProvider.operation)
}
inline ::TOperation* TDataProvider::release_operation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TOperation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TOperation* TDataProvider::unsafe_arena_release_operation() {
  // @@protoc_insertion_point(field_release:TDataProvider.operation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TOperation* temp = _impl_.operation_;
  _impl_.operation_ = nullptr;
  return temp;
}
inline ::TOperation* TDataProvider::_internal_mutable_operation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.operation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TOperation>(GetArenaForAllocation());
    _impl_.operation_ = p;
  }
  return _impl_.operation_;
}
inline ::TOperation* TDataProvider::mutable_operation() {
  ::TOperation* _msg = _internal_mutable_operation();
  // @@protoc_insertion_point(field_mutable:TDataProvider.operation)
  return _msg;
}
inline void TDataProvider::set_allocated_operation(::TOperation* operation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.operation_;
  }
  if (operation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(operation);
    if (message_arena != submessage_arena) {
      operation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, operation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.operation_ = operation;
  // @@protoc_insertion_point(field_set_allocated:TDataProvider.operation)
}

// optional .TLightweightAnimation lightweightAnimation = 6;
inline bool TDataProvider::_internal_has_lightweightanimation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lightweightanimation_ != nullptr);
  return value;
}
inline bool TDataProvider::has_lightweightanimation() const {
  return _internal_has_lightweightanimation();
}
inline void TDataProvider::clear_lightweightanimation() {
  if (_impl_.lightweightanimation_ != nullptr) _impl_.lightweightanimation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::TLightweightAnimation& TDataProvider::_internal_lightweightanimation() const {
  const ::TLightweightAnimation* p = _impl_.lightweightanimation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TLightweightAnimation&>(
      ::_TLightweightAnimation_default_instance_);
}
inline const ::TLightweightAnimation& TDataProvider::lightweightanimation() const {
  // @@protoc_insertion_point(field_get:TDataProvider.lightweightAnimation)
  return _internal_lightweightanimation();
}
inline void TDataProvider::unsafe_arena_set_allocated_lightweightanimation(
    ::TLightweightAnimation* lightweightanimation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.lightweightanimation_);
  }
  _impl_.lightweightanimation_ = lightweightanimation;
  if (lightweightanimation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TDataProvider.lightweightAnimation)
}
inline ::TLightweightAnimation* TDataProvider::release_lightweightanimation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TLightweightAnimation* temp = _impl_.lightweightanimation_;
  _impl_.lightweightanimation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TLightweightAnimation* TDataProvider::unsafe_arena_release_lightweightanimation() {
  // @@protoc_insertion_point(field_release:TDataProvider.lightweightAnimation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TLightweightAnimation* temp = _impl_.lightweightanimation_;
  _impl_.lightweightanimation_ = nullptr;
  return temp;
}
inline ::TLightweightAnimation* TDataProvider::_internal_mutable_lightweightanimation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.lightweightanimation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TLightweightAnimation>(GetArenaForAllocation());
    _impl_.lightweightanimation_ = p;
  }
  return _impl_.lightweightanimation_;
}
inline ::TLightweightAnimation* TDataProvider::mutable_lightweightanimation() {
  ::TLightweightAnimation* _msg = _internal_mutable_lightweightanimation();
  // @@protoc_insertion_point(field_mutable:TDataProvider.lightweightAnimation)
  return _msg;
}
inline void TDataProvider::set_allocated_lightweightanimation(::TLightweightAnimation* lightweightanimation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.lightweightanimation_;
  }
  if (lightweightanimation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(lightweightanimation);
    if (message_arena != submessage_arena) {
      lightweightanimation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, lightweightanimation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.lightweightanimation_ = lightweightanimation;
  // @@protoc_insertion_point(field_set_allocated:TDataProvider.lightweightAnimation)
}

// optional .TEntryExitAnimation entryExitAnimation = 7;
inline bool TDataProvider::_internal_has_entryexitanimation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.entryexitanimation_ != nullptr);
  return value;
}
inline bool TDataProvider::has_entryexitanimation() const {
  return _internal_has_entryexitanimation();
}
inline void TDataProvider::clear_entryexitanimation() {
  if (_impl_.entryexitanimation_ != nullptr) _impl_.entryexitanimation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::TEntryExitAnimation& TDataProvider::_internal_entryexitanimation() const {
  const ::TEntryExitAnimation* p = _impl_.entryexitanimation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TEntryExitAnimation&>(
      ::_TEntryExitAnimation_default_instance_);
}
inline const ::TEntryExitAnimation& TDataProvider::entryexitanimation() const {
  // @@protoc_insertion_point(field_get:TDataProvider.entryExitAnimation)
  return _internal_entryexitanimation();
}
inline void TDataProvider::unsafe_arena_set_allocated_entryexitanimation(
    ::TEntryExitAnimation* entryexitanimation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entryexitanimation_);
  }
  _impl_.entryexitanimation_ = entryexitanimation;
  if (entryexitanimation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TDataProvider.entryExitAnimation)
}
inline ::TEntryExitAnimation* TDataProvider::release_entryexitanimation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TEntryExitAnimation* temp = _impl_.entryexitanimation_;
  _impl_.entryexitanimation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TEntryExitAnimation* TDataProvider::unsafe_arena_release_entryexitanimation() {
  // @@protoc_insertion_point(field_release:TDataProvider.entryExitAnimation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TEntryExitAnimation* temp = _impl_.entryexitanimation_;
  _impl_.entryexitanimation_ = nullptr;
  return temp;
}
inline ::TEntryExitAnimation* TDataProvider::_internal_mutable_entryexitanimation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.entryexitanimation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TEntryExitAnimation>(GetArenaForAllocation());
    _impl_.entryexitanimation_ = p;
  }
  return _impl_.entryexitanimation_;
}
inline ::TEntryExitAnimation* TDataProvider::mutable_entryexitanimation() {
  ::TEntryExitAnimation* _msg = _internal_mutable_entryexitanimation();
  // @@protoc_insertion_point(field_mutable:TDataProvider.entryExitAnimation)
  return _msg;
}
inline void TDataProvider::set_allocated_entryexitanimation(::TEntryExitAnimation* entryexitanimation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entryexitanimation_;
  }
  if (entryexitanimation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entryexitanimation);
    if (message_arena != submessage_arena) {
      entryexitanimation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entryexitanimation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.entryexitanimation_ = entryexitanimation;
  // @@protoc_insertion_point(field_set_allocated:TDataProvider.entryExitAnimation)
}

// optional .TLoopAnimation loopAnimation = 8;
inline bool TDataProvider::_internal_has_loopanimation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.loopanimation_ != nullptr);
  return value;
}
inline bool TDataProvider::has_loopanimation() const {
  return _internal_has_loopanimation();
}
inline void TDataProvider::clear_loopanimation() {
  if (_impl_.loopanimation_ != nullptr) _impl_.loopanimation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::TLoopAnimation& TDataProvider::_internal_loopanimation() const {
  const ::TLoopAnimation* p = _impl_.loopanimation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TLoopAnimation&>(
      ::_TLoopAnimation_default_instance_);
}
inline const ::TLoopAnimation& TDataProvider::loopanimation() const {
  // @@protoc_insertion_point(field_get:TDataProvider.loopAnimation)
  return _internal_loopanimation();
}
inline void TDataProvider::unsafe_arena_set_allocated_loopanimation(
    ::TLoopAnimation* loopanimation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.loopanimation_);
  }
  _impl_.loopanimation_ = loopanimation;
  if (loopanimation) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TDataProvider.loopAnimation)
}
inline ::TLoopAnimation* TDataProvider::release_loopanimation() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TLoopAnimation* temp = _impl_.loopanimation_;
  _impl_.loopanimation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TLoopAnimation* TDataProvider::unsafe_arena_release_loopanimation() {
  // @@protoc_insertion_point(field_release:TDataProvider.loopAnimation)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TLoopAnimation* temp = _impl_.loopanimation_;
  _impl_.loopanimation_ = nullptr;
  return temp;
}
inline ::TLoopAnimation* TDataProvider::_internal_mutable_loopanimation() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.loopanimation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TLoopAnimation>(GetArenaForAllocation());
    _impl_.loopanimation_ = p;
  }
  return _impl_.loopanimation_;
}
inline ::TLoopAnimation* TDataProvider::mutable_loopanimation() {
  ::TLoopAnimation* _msg = _internal_mutable_loopanimation();
  // @@protoc_insertion_point(field_mutable:TDataProvider.loopAnimation)
  return _msg;
}
inline void TDataProvider::set_allocated_loopanimation(::TLoopAnimation* loopanimation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.loopanimation_;
  }
  if (loopanimation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(loopanimation);
    if (message_arena != submessage_arena) {
      loopanimation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, loopanimation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.loopanimation_ = loopanimation;
  // @@protoc_insertion_point(field_set_allocated:TDataProvider.loopAnimation)
}

// -------------------------------------------------------------------

// TOperation

// required .TEOperatorType operator = 1;
inline bool TOperation::_internal_has_operator_() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TOperation::has_operator_() const {
  return _internal_has_operator_();
}
inline void TOperation::clear_operator_() {
  _impl_.operator__ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::TEOperatorType TOperation::_internal_operator_() const {
  return static_cast< ::TEOperatorType >(_impl_.operator__);
}
inline ::TEOperatorType TOperation::operator_() const {
  // @@protoc_insertion_point(field_get:TOperation.operator)
  return _internal_operator_();
}
inline void TOperation::_internal_set_operator_(::TEOperatorType value) {
  assert(::TEOperatorType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.operator__ = value;
}
inline void TOperation::set_operator_(::TEOperatorType value) {
  _internal_set_operator_(value);
  // @@protoc_insertion_point(field_set:TOperation.operator)
}

// repeated .TEDataType dataType = 2;
inline int TOperation::_internal_datatype_size() const {
  return _impl_.datatype_.size();
}
inline int TOperation::datatype_size() const {
  return _internal_datatype_size();
}
inline void TOperation::clear_datatype() {
  _impl_.datatype_.Clear();
}
inline ::TEDataType TOperation::_internal_datatype(int index) const {
  return static_cast< ::TEDataType >(_impl_.datatype_.Get(index));
}
inline ::TEDataType TOperation::datatype(int index) const {
  // @@protoc_insertion_point(field_get:TOperation.dataType)
  return _internal_datatype(index);
}
inline void TOperation::set_datatype(int index, ::TEDataType value) {
  assert(::TEDataType_IsValid(value));
  _impl_.datatype_.Set(index, value);
  // @@protoc_insertion_point(field_set:TOperation.dataType)
}
inline void TOperation::_internal_add_datatype(::TEDataType value) {
  assert(::TEDataType_IsValid(value));
  _impl_.datatype_.Add(value);
}
inline void TOperation::add_datatype(::TEDataType value) {
  _internal_add_datatype(value);
  // @@protoc_insertion_point(field_add:TOperation.dataType)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TOperation::datatype() const {
  // @@protoc_insertion_point(field_list:TOperation.dataType)
  return _impl_.datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TOperation::_internal_mutable_datatype() {
  return &_impl_.datatype_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TOperation::mutable_datatype() {
  // @@protoc_insertion_point(field_mutable_list:TOperation.dataType)
  return _internal_mutable_datatype();
}

// repeated .TDataBinding operand = 3;
inline int TOperation::_internal_operand_size() const {
  return _impl_.operand_.size();
}
inline int TOperation::operand_size() const {
  return _internal_operand_size();
}
inline void TOperation::clear_operand() {
  _impl_.operand_.Clear();
}
inline ::TDataBinding* TOperation::mutable_operand(int index) {
  // @@protoc_insertion_point(field_mutable:TOperation.operand)
  return _impl_.operand_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
TOperation::mutable_operand() {
  // @@protoc_insertion_point(field_mutable_list:TOperation.operand)
  return &_impl_.operand_;
}
inline const ::TDataBinding& TOperation::_internal_operand(int index) const {
  return _impl_.operand_.Get(index);
}
inline const ::TDataBinding& TOperation::operand(int index) const {
  // @@protoc_insertion_point(field_get:TOperation.operand)
  return _internal_operand(index);
}
inline ::TDataBinding* TOperation::_internal_add_operand() {
  return _impl_.operand_.Add();
}
inline ::TDataBinding* TOperation::add_operand() {
  ::TDataBinding* _add = _internal_add_operand();
  // @@protoc_insertion_point(field_add:TOperation.operand)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
TOperation::operand() const {
  // @@protoc_insertion_point(field_list:TOperation.operand)
  return _impl_.operand_;
}

// -------------------------------------------------------------------

// TLightweightAnimation

// optional .TDataBinding target = 1;
inline bool TLightweightAnimation::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline bool TLightweightAnimation::has_target() const {
  return _internal_has_target();
}
inline void TLightweightAnimation::clear_target() {
  if (_impl_.target_ != nullptr) _impl_.target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TDataBinding& TLightweightAnimation::_internal_target() const {
  const ::TDataBinding* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLightweightAnimation::target() const {
  // @@protoc_insertion_point(field_get:TLightweightAnimation.target)
  return _internal_target();
}
inline void TLightweightAnimation::unsafe_arena_set_allocated_target(
    ::TDataBinding* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TLightweightAnimation.target)
}
inline ::TDataBinding* TLightweightAnimation::release_target() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLightweightAnimation::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:TLightweightAnimation.target)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLightweightAnimation::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::TDataBinding* TLightweightAnimation::mutable_target() {
  ::TDataBinding* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:TLightweightAnimation.target)
  return _msg;
}
inline void TLightweightAnimation::set_allocated_target(::TDataBinding* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.target_;
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(target);
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:TLightweightAnimation.target)
}

// optional uint32 duration = 2;
inline bool TLightweightAnimation::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TLightweightAnimation::has_duration() const {
  return _internal_has_duration();
}
inline void TLightweightAnimation::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TLightweightAnimation::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t TLightweightAnimation::duration() const {
  // @@protoc_insertion_point(field_get:TLightweightAnimation.duration)
  return _internal_duration();
}
inline void TLightweightAnimation::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.duration_ = value;
}
inline void TLightweightAnimation::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:TLightweightAnimation.duration)
}

// optional float init = 3;
inline bool TLightweightAnimation::_internal_has_init() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TLightweightAnimation::has_init() const {
  return _internal_has_init();
}
inline void TLightweightAnimation::clear_init() {
  _impl_.init_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float TLightweightAnimation::_internal_init() const {
  return _impl_.init_;
}
inline float TLightweightAnimation::init() const {
  // @@protoc_insertion_point(field_get:TLightweightAnimation.init)
  return _internal_init();
}
inline void TLightweightAnimation::_internal_set_init(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.init_ = value;
}
inline void TLightweightAnimation::set_init(float value) {
  _internal_set_init(value);
  // @@protoc_insertion_point(field_set:TLightweightAnimation.init)
}

// optional float distance = 4;
inline bool TLightweightAnimation::_internal_has_distance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TLightweightAnimation::has_distance() const {
  return _internal_has_distance();
}
inline void TLightweightAnimation::clear_distance() {
  _impl_.distance_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline float TLightweightAnimation::_internal_distance() const {
  return _impl_.distance_;
}
inline float TLightweightAnimation::distance() const {
  // @@protoc_insertion_point(field_get:TLightweightAnimation.distance)
  return _internal_distance();
}
inline void TLightweightAnimation::_internal_set_distance(float value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.distance_ = value;
}
inline void TLightweightAnimation::set_distance(float value) {
  _internal_set_distance(value);
  // @@protoc_insertion_point(field_set:TLightweightAnimation.distance)
}

// optional uint32 updateInterval = 5;
inline bool TLightweightAnimation::_internal_has_updateinterval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TLightweightAnimation::has_updateinterval() const {
  return _internal_has_updateinterval();
}
inline void TLightweightAnimation::clear_updateinterval() {
  _impl_.updateinterval_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline uint32_t TLightweightAnimation::_internal_updateinterval() const {
  return _impl_.updateinterval_;
}
inline uint32_t TLightweightAnimation::updateinterval() const {
  // @@protoc_insertion_point(field_get:TLightweightAnimation.updateInterval)
  return _internal_updateinterval();
}
inline void TLightweightAnimation::_internal_set_updateinterval(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.updateinterval_ = value;
}
inline void TLightweightAnimation::set_updateinterval(uint32_t value) {
  _internal_set_updateinterval(value);
  // @@protoc_insertion_point(field_set:TLightweightAnimation.updateInterval)
}

// optional .TDataBinding skip = 6;
inline bool TLightweightAnimation::_internal_has_skip() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.skip_ != nullptr);
  return value;
}
inline bool TLightweightAnimation::has_skip() const {
  return _internal_has_skip();
}
inline void TLightweightAnimation::clear_skip() {
  if (_impl_.skip_ != nullptr) _impl_.skip_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::TDataBinding& TLightweightAnimation::_internal_skip() const {
  const ::TDataBinding* p = _impl_.skip_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLightweightAnimation::skip() const {
  // @@protoc_insertion_point(field_get:TLightweightAnimation.skip)
  return _internal_skip();
}
inline void TLightweightAnimation::unsafe_arena_set_allocated_skip(
    ::TDataBinding* skip) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.skip_);
  }
  _impl_.skip_ = skip;
  if (skip) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TLightweightAnimation.skip)
}
inline ::TDataBinding* TLightweightAnimation::release_skip() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.skip_;
  _impl_.skip_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLightweightAnimation::unsafe_arena_release_skip() {
  // @@protoc_insertion_point(field_release:TLightweightAnimation.skip)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.skip_;
  _impl_.skip_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLightweightAnimation::_internal_mutable_skip() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.skip_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.skip_ = p;
  }
  return _impl_.skip_;
}
inline ::TDataBinding* TLightweightAnimation::mutable_skip() {
  ::TDataBinding* _msg = _internal_mutable_skip();
  // @@protoc_insertion_point(field_mutable:TLightweightAnimation.skip)
  return _msg;
}
inline void TLightweightAnimation::set_allocated_skip(::TDataBinding* skip) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.skip_;
  }
  if (skip) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(skip);
    if (message_arena != submessage_arena) {
      skip = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, skip, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.skip_ = skip;
  // @@protoc_insertion_point(field_set_allocated:TLightweightAnimation.skip)
}

// optional .TEAnimationInterpolator interpolator = 7;
inline bool TLightweightAnimation::_internal_has_interpolator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TLightweightAnimation::has_interpolator() const {
  return _internal_has_interpolator();
}
inline void TLightweightAnimation::clear_interpolator() {
  _impl_.interpolator_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::TEAnimationInterpolator TLightweightAnimation::_internal_interpolator() const {
  return static_cast< ::TEAnimationInterpolator >(_impl_.interpolator_);
}
inline ::TEAnimationInterpolator TLightweightAnimation::interpolator() const {
  // @@protoc_insertion_point(field_get:TLightweightAnimation.interpolator)
  return _internal_interpolator();
}
inline void TLightweightAnimation::_internal_set_interpolator(::TEAnimationInterpolator value) {
  assert(::TEAnimationInterpolator_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.interpolator_ = value;
}
inline void TLightweightAnimation::set_interpolator(::TEAnimationInterpolator value) {
  _internal_set_interpolator(value);
  // @@protoc_insertion_point(field_set:TLightweightAnimation.interpolator)
}

// -------------------------------------------------------------------

// TEntryExitAnimation

// optional .TDataBinding entry = 1;
inline bool TEntryExitAnimation::_internal_has_entry() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.entry_ != nullptr);
  return value;
}
inline bool TEntryExitAnimation::has_entry() const {
  return _internal_has_entry();
}
inline void TEntryExitAnimation::clear_entry() {
  if (_impl_.entry_ != nullptr) _impl_.entry_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TDataBinding& TEntryExitAnimation::_internal_entry() const {
  const ::TDataBinding* p = _impl_.entry_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TEntryExitAnimation::entry() const {
  // @@protoc_insertion_point(field_get:TEntryExitAnimation.entry)
  return _internal_entry();
}
inline void TEntryExitAnimation::unsafe_arena_set_allocated_entry(
    ::TDataBinding* entry) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.entry_);
  }
  _impl_.entry_ = entry;
  if (entry) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TEntryExitAnimation.entry)
}
inline ::TDataBinding* TEntryExitAnimation::release_entry() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.entry_;
  _impl_.entry_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TEntryExitAnimation::unsafe_arena_release_entry() {
  // @@protoc_insertion_point(field_release:TEntryExitAnimation.entry)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.entry_;
  _impl_.entry_ = nullptr;
  return temp;
}
inline ::TDataBinding* TEntryExitAnimation::_internal_mutable_entry() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.entry_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.entry_ = p;
  }
  return _impl_.entry_;
}
inline ::TDataBinding* TEntryExitAnimation::mutable_entry() {
  ::TDataBinding* _msg = _internal_mutable_entry();
  // @@protoc_insertion_point(field_mutable:TEntryExitAnimation.entry)
  return _msg;
}
inline void TEntryExitAnimation::set_allocated_entry(::TDataBinding* entry) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.entry_;
  }
  if (entry) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(entry);
    if (message_arena != submessage_arena) {
      entry = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, entry, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.entry_ = entry;
  // @@protoc_insertion_point(field_set_allocated:TEntryExitAnimation.entry)
}

// optional uint32 duration = 2;
inline bool TEntryExitAnimation::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TEntryExitAnimation::has_duration() const {
  return _internal_has_duration();
}
inline void TEntryExitAnimation::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TEntryExitAnimation::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t TEntryExitAnimation::duration() const {
  // @@protoc_insertion_point(field_get:TEntryExitAnimation.duration)
  return _internal_duration();
}
inline void TEntryExitAnimation::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_ = value;
}
inline void TEntryExitAnimation::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:TEntryExitAnimation.duration)
}

// optional uint32 updateInterval = 3;
inline bool TEntryExitAnimation::_internal_has_updateinterval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TEntryExitAnimation::has_updateinterval() const {
  return _internal_has_updateinterval();
}
inline void TEntryExitAnimation::clear_updateinterval() {
  _impl_.updateinterval_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TEntryExitAnimation::_internal_updateinterval() const {
  return _impl_.updateinterval_;
}
inline uint32_t TEntryExitAnimation::updateinterval() const {
  // @@protoc_insertion_point(field_get:TEntryExitAnimation.updateInterval)
  return _internal_updateinterval();
}
inline void TEntryExitAnimation::_internal_set_updateinterval(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.updateinterval_ = value;
}
inline void TEntryExitAnimation::set_updateinterval(uint32_t value) {
  _internal_set_updateinterval(value);
  // @@protoc_insertion_point(field_set:TEntryExitAnimation.updateInterval)
}

// optional float threshold = 4;
inline bool TEntryExitAnimation::_internal_has_threshold() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TEntryExitAnimation::has_threshold() const {
  return _internal_has_threshold();
}
inline void TEntryExitAnimation::clear_threshold() {
  _impl_.threshold_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline float TEntryExitAnimation::_internal_threshold() const {
  return _impl_.threshold_;
}
inline float TEntryExitAnimation::threshold() const {
  // @@protoc_insertion_point(field_get:TEntryExitAnimation.threshold)
  return _internal_threshold();
}
inline void TEntryExitAnimation::_internal_set_threshold(float value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.threshold_ = value;
}
inline void TEntryExitAnimation::set_threshold(float value) {
  _internal_set_threshold(value);
  // @@protoc_insertion_point(field_set:TEntryExitAnimation.threshold)
}

// -------------------------------------------------------------------

// TLoopAnimation

// optional .TDataBinding play = 1;
inline bool TLoopAnimation::_internal_has_play() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.play_ != nullptr);
  return value;
}
inline bool TLoopAnimation::has_play() const {
  return _internal_has_play();
}
inline void TLoopAnimation::clear_play() {
  if (_impl_.play_ != nullptr) _impl_.play_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::TDataBinding& TLoopAnimation::_internal_play() const {
  const ::TDataBinding* p = _impl_.play_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLoopAnimation::play() const {
  // @@protoc_insertion_point(field_get:TLoopAnimation.play)
  return _internal_play();
}
inline void TLoopAnimation::unsafe_arena_set_allocated_play(
    ::TDataBinding* play) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.play_);
  }
  _impl_.play_ = play;
  if (play) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:TLoopAnimation.play)
}
inline ::TDataBinding* TLoopAnimation::release_play() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.play_;
  _impl_.play_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLoopAnimation::unsafe_arena_release_play() {
  // @@protoc_insertion_point(field_release:TLoopAnimation.play)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.play_;
  _impl_.play_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLoopAnimation::_internal_mutable_play() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.play_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.play_ = p;
  }
  return _impl_.play_;
}
inline ::TDataBinding* TLoopAnimation::mutable_play() {
  ::TDataBinding* _msg = _internal_mutable_play();
  // @@protoc_insertion_point(field_mutable:TLoopAnimation.play)
  return _msg;
}
inline void TLoopAnimation::set_allocated_play(::TDataBinding* play) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.play_;
  }
  if (play) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(play);
    if (message_arena != submessage_arena) {
      play = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, play, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.play_ = play;
  // @@protoc_insertion_point(field_set_allocated:TLoopAnimation.play)
}

// optional uint32 duration = 2;
inline bool TLoopAnimation::_internal_has_duration() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TLoopAnimation::has_duration() const {
  return _internal_has_duration();
}
inline void TLoopAnimation::clear_duration() {
  _impl_.duration_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline uint32_t TLoopAnimation::_internal_duration() const {
  return _impl_.duration_;
}
inline uint32_t TLoopAnimation::duration() const {
  // @@protoc_insertion_point(field_get:TLoopAnimation.duration)
  return _internal_duration();
}
inline void TLoopAnimation::_internal_set_duration(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.duration_ = value;
}
inline void TLoopAnimation::set_duration(uint32_t value) {
  _internal_set_duration(value);
  // @@protoc_insertion_point(field_set:TLoopAnimation.duration)
}

// optional uint32 updateInterval = 3;
inline bool TLoopAnimation::_internal_has_updateinterval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TLoopAnimation::has_updateinterval() const {
  return _internal_has_updateinterval();
}
inline void TLoopAnimation::clear_updateinterval() {
  _impl_.updateinterval_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline uint32_t TLoopAnimation::_internal_updateinterval() const {
  return _impl_.updateinterval_;
}
inline uint32_t TLoopAnimation::updateinterval() const {
  // @@protoc_insertion_point(field_get:TLoopAnimation.updateInterval)
  return _internal_updateinterval();
}
inline void TLoopAnimation::_internal_set_updateinterval(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.updateinterval_ = value;
}
inline void TLoopAnimation::set_updateinterval(uint32_t value) {
  _internal_set_updateinterval(value);
  // @@protoc_insertion_point(field_set:TLoopAnimation.updateInterval)
}

// optional bool alternate = 4;
inline bool TLoopAnimation::_internal_has_alternate() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TLoopAnimation::has_alternate() const {
  return _internal_has_alternate();
}
inline void TLoopAnimation::clear_alternate() {
  _impl_.alternate_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TLoopAnimation::_internal_alternate() const {
  return _impl_.alternate_;
}
inline bool TLoopAnimation::alternate() const {
  // @@protoc_insertion_point(field_get:TLoopAnimation.alternate)
  return _internal_alternate();
}
inline void TLoopAnimation::_internal_set_alternate(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alternate_ = value;
}
inline void TLoopAnimation::set_alternate(bool value) {
  _internal_set_alternate(value);
  // @@protoc_insertion_point(field_set:TLoopAnimation.alternate)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::TEOperatorType> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TEOperatorType>() {
  return ::TEOperatorType_descriptor();
}
template <> struct is_proto_enum< ::TEProviderSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TEProviderSource>() {
  return ::TEProviderSource_descriptor();
}
template <> struct is_proto_enum< ::TEVariantFlagOperation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TEVariantFlagOperation>() {
  return ::TEVariantFlagOperation_descriptor();
}
template <> struct is_proto_enum< ::TEAnimationInterpolator> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::TEAnimationInterpolator>() {
  return ::TEAnimationInterpolator_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HmiBase_2eproto
