// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HmiWidget.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_HmiWidget_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_HmiWidget_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3021000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3021001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "Numeric.pb.h"
#include "Common.pb.h"
#include "HmiBase.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_HmiWidget_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_HmiWidget_2eproto {
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_HmiWidget_2eproto;
namespace HmiWidget {
class TAddModelBindingsToChild;
struct TAddModelBindingsToChildDefaultTypeInternal;
extern TAddModelBindingsToChildDefaultTypeInternal _TAddModelBindingsToChild_default_instance_;
class TAnimationTrigger;
struct TAnimationTriggerDefaultTypeInternal;
extern TAnimationTriggerDefaultTypeInternal _TAnimationTrigger_default_instance_;
class TAppearanceParam;
struct TAppearanceParamDefaultTypeInternal;
extern TAppearanceParamDefaultTypeInternal _TAppearanceParam_default_instance_;
class TBlitPassParam;
struct TBlitPassParamDefaultTypeInternal;
extern TBlitPassParamDefaultTypeInternal _TBlitPassParam_default_instance_;
class TCameraNodeProperties;
struct TCameraNodePropertiesDefaultTypeInternal;
extern TCameraNodePropertiesDefaultTypeInternal _TCameraNodeProperties_default_instance_;
class TChildModelParameter;
struct TChildModelParameterDefaultTypeInternal;
extern TChildModelParameterDefaultTypeInternal _TChildModelParameter_default_instance_;
class TChildWidget;
struct TChildWidgetDefaultTypeInternal;
extern TChildWidgetDefaultTypeInternal _TChildWidget_default_instance_;
class TCommand;
struct TCommandDefaultTypeInternal;
extern TCommandDefaultTypeInternal _TCommand_default_instance_;
class TCompositeAnimation;
struct TCompositeAnimationDefaultTypeInternal;
extern TCompositeAnimationDefaultTypeInternal _TCompositeAnimation_default_instance_;
class TCompositeAnimationElement;
struct TCompositeAnimationElementDefaultTypeInternal;
extern TCompositeAnimationElementDefaultTypeInternal _TCompositeAnimationElement_default_instance_;
class TCompositeAnimationReturnValue;
struct TCompositeAnimationReturnValueDefaultTypeInternal;
extern TCompositeAnimationReturnValueDefaultTypeInternal _TCompositeAnimationReturnValue_default_instance_;
class TCompositeAnimationSubAnimationList;
struct TCompositeAnimationSubAnimationListDefaultTypeInternal;
extern TCompositeAnimationSubAnimationListDefaultTypeInternal _TCompositeAnimationSubAnimationList_default_instance_;
class TCompositeAnimationTrigger;
struct TCompositeAnimationTriggerDefaultTypeInternal;
extern TCompositeAnimationTriggerDefaultTypeInternal _TCompositeAnimationTrigger_default_instance_;
class TConditionalTrigger;
struct TConditionalTriggerDefaultTypeInternal;
extern TConditionalTriggerDefaultTypeInternal _TConditionalTrigger_default_instance_;
class TCurve;
struct TCurveDefaultTypeInternal;
extern TCurveDefaultTypeInternal _TCurve_default_instance_;
class TCurveReference;
struct TCurveReferenceDefaultTypeInternal;
extern TCurveReferenceDefaultTypeInternal _TCurveReference_default_instance_;
class TDataChangeTrigger;
struct TDataChangeTriggerDefaultTypeInternal;
extern TDataChangeTriggerDefaultTypeInternal _TDataChangeTrigger_default_instance_;
class TDebugOutputCommand;
struct TDebugOutputCommandDefaultTypeInternal;
extern TDebugOutputCommandDefaultTypeInternal _TDebugOutputCommand_default_instance_;
class TDefaultChildModelBindings;
struct TDefaultChildModelBindingsDefaultTypeInternal;
extern TDefaultChildModelBindingsDefaultTypeInternal _TDefaultChildModelBindings_default_instance_;
class TExternalModelParameter;
struct TExternalModelParameterDefaultTypeInternal;
extern TExternalModelParameterDefaultTypeInternal _TExternalModelParameter_default_instance_;
class TForwardSignals;
struct TForwardSignalsDefaultTypeInternal;
extern TForwardSignalsDefaultTypeInternal _TForwardSignals_default_instance_;
class THVBaseElement;
struct THVBaseElementDefaultTypeInternal;
extern THVBaseElementDefaultTypeInternal _THVBaseElement_default_instance_;
class THVDynamicBaseElement;
struct THVDynamicBaseElementDefaultTypeInternal;
extern THVDynamicBaseElementDefaultTypeInternal _THVDynamicBaseElement_default_instance_;
class THVListBaseElement;
struct THVListBaseElementDefaultTypeInternal;
extern THVListBaseElementDefaultTypeInternal _THVListBaseElement_default_instance_;
class TImportDefinition;
struct TImportDefinitionDefaultTypeInternal;
extern TImportDefinitionDefaultTypeInternal _TImportDefinition_default_instance_;
class TInputConfig;
struct TInputConfigDefaultTypeInternal;
extern TInputConfigDefaultTypeInternal _TInputConfig_default_instance_;
class TInternalModelParameter;
struct TInternalModelParameterDefaultTypeInternal;
extern TInternalModelParameterDefaultTypeInternal _TInternalModelParameter_default_instance_;
class TLayout;
struct TLayoutDefaultTypeInternal;
extern TLayoutDefaultTypeInternal _TLayout_default_instance_;
class TLayoutCircle;
struct TLayoutCircleDefaultTypeInternal;
extern TLayoutCircleDefaultTypeInternal _TLayoutCircle_default_instance_;
class TLayoutCircleBase;
struct TLayoutCircleBaseDefaultTypeInternal;
extern TLayoutCircleBaseDefaultTypeInternal _TLayoutCircleBase_default_instance_;
class TLayoutCircleBaseElement;
struct TLayoutCircleBaseElementDefaultTypeInternal;
extern TLayoutCircleBaseElementDefaultTypeInternal _TLayoutCircleBaseElement_default_instance_;
class TLayoutCircleElement;
struct TLayoutCircleElementDefaultTypeInternal;
extern TLayoutCircleElementDefaultTypeInternal _TLayoutCircleElement_default_instance_;
class TLayoutCircle_TTemplate;
struct TLayoutCircle_TTemplateDefaultTypeInternal;
extern TLayoutCircle_TTemplateDefaultTypeInternal _TLayoutCircle_TTemplate_default_instance_;
class TLayoutCurvedHVBase;
struct TLayoutCurvedHVBaseDefaultTypeInternal;
extern TLayoutCurvedHVBaseDefaultTypeInternal _TLayoutCurvedHVBase_default_instance_;
class TLayoutGrid;
struct TLayoutGridDefaultTypeInternal;
extern TLayoutGridDefaultTypeInternal _TLayoutGrid_default_instance_;
class TLayoutGridBase;
struct TLayoutGridBaseDefaultTypeInternal;
extern TLayoutGridBaseDefaultTypeInternal _TLayoutGridBase_default_instance_;
class TLayoutGridElement;
struct TLayoutGridElementDefaultTypeInternal;
extern TLayoutGridElementDefaultTypeInternal _TLayoutGridElement_default_instance_;
class TLayoutGrid_TTemplate;
struct TLayoutGrid_TTemplateDefaultTypeInternal;
extern TLayoutGrid_TTemplateDefaultTypeInternal _TLayoutGrid_TTemplate_default_instance_;
class TLayoutHVBase;
struct TLayoutHVBaseDefaultTypeInternal;
extern TLayoutHVBaseDefaultTypeInternal _TLayoutHVBase_default_instance_;
class TLayoutHVRollBase;
struct TLayoutHVRollBaseDefaultTypeInternal;
extern TLayoutHVRollBaseDefaultTypeInternal _TLayoutHVRollBase_default_instance_;
class TLayoutHorizontal;
struct TLayoutHorizontalDefaultTypeInternal;
extern TLayoutHorizontalDefaultTypeInternal _TLayoutHorizontal_default_instance_;
class TLayoutHorizontalDynamic;
struct TLayoutHorizontalDynamicDefaultTypeInternal;
extern TLayoutHorizontalDynamicDefaultTypeInternal _TLayoutHorizontalDynamic_default_instance_;
class TLayoutHorizontalDynamicElement;
struct TLayoutHorizontalDynamicElementDefaultTypeInternal;
extern TLayoutHorizontalDynamicElementDefaultTypeInternal _TLayoutHorizontalDynamicElement_default_instance_;
class TLayoutHorizontalDynamic_TTemplate;
struct TLayoutHorizontalDynamic_TTemplateDefaultTypeInternal;
extern TLayoutHorizontalDynamic_TTemplateDefaultTypeInternal _TLayoutHorizontalDynamic_TTemplate_default_instance_;
class TLayoutHorizontalElement;
struct TLayoutHorizontalElementDefaultTypeInternal;
extern TLayoutHorizontalElementDefaultTypeInternal _TLayoutHorizontalElement_default_instance_;
class TLayoutHorizontalList;
struct TLayoutHorizontalListDefaultTypeInternal;
extern TLayoutHorizontalListDefaultTypeInternal _TLayoutHorizontalList_default_instance_;
class TLayoutHorizontalListElement;
struct TLayoutHorizontalListElementDefaultTypeInternal;
extern TLayoutHorizontalListElementDefaultTypeInternal _TLayoutHorizontalListElement_default_instance_;
class TLayoutHorizontalList_TTemplate;
struct TLayoutHorizontalList_TTemplateDefaultTypeInternal;
extern TLayoutHorizontalList_TTemplateDefaultTypeInternal _TLayoutHorizontalList_TTemplate_default_instance_;
class TLayoutHorizontalPages;
struct TLayoutHorizontalPagesDefaultTypeInternal;
extern TLayoutHorizontalPagesDefaultTypeInternal _TLayoutHorizontalPages_default_instance_;
class TLayoutHorizontalPages_TTemplate;
struct TLayoutHorizontalPages_TTemplateDefaultTypeInternal;
extern TLayoutHorizontalPages_TTemplateDefaultTypeInternal _TLayoutHorizontalPages_TTemplate_default_instance_;
class TLayoutHorizontal_TTemplate;
struct TLayoutHorizontal_TTemplateDefaultTypeInternal;
extern TLayoutHorizontal_TTemplateDefaultTypeInternal _TLayoutHorizontal_TTemplate_default_instance_;
class TLayoutMatrix;
struct TLayoutMatrixDefaultTypeInternal;
extern TLayoutMatrixDefaultTypeInternal _TLayoutMatrix_default_instance_;
class TLayoutMatrixBase;
struct TLayoutMatrixBaseDefaultTypeInternal;
extern TLayoutMatrixBaseDefaultTypeInternal _TLayoutMatrixBase_default_instance_;
class TLayoutMatrixDynamic;
struct TLayoutMatrixDynamicDefaultTypeInternal;
extern TLayoutMatrixDynamicDefaultTypeInternal _TLayoutMatrixDynamic_default_instance_;
class TLayoutMatrixDynamicBase;
struct TLayoutMatrixDynamicBaseDefaultTypeInternal;
extern TLayoutMatrixDynamicBaseDefaultTypeInternal _TLayoutMatrixDynamicBase_default_instance_;
class TLayoutMatrixDynamicElement;
struct TLayoutMatrixDynamicElementDefaultTypeInternal;
extern TLayoutMatrixDynamicElementDefaultTypeInternal _TLayoutMatrixDynamicElement_default_instance_;
class TLayoutMatrixDynamic_TTemplate;
struct TLayoutMatrixDynamic_TTemplateDefaultTypeInternal;
extern TLayoutMatrixDynamic_TTemplateDefaultTypeInternal _TLayoutMatrixDynamic_TTemplate_default_instance_;
class TLayoutMatrixElement;
struct TLayoutMatrixElementDefaultTypeInternal;
extern TLayoutMatrixElementDefaultTypeInternal _TLayoutMatrixElement_default_instance_;
class TLayoutMatrix_TTemplate;
struct TLayoutMatrix_TTemplateDefaultTypeInternal;
extern TLayoutMatrix_TTemplateDefaultTypeInternal _TLayoutMatrix_TTemplate_default_instance_;
class TLayoutMenuBelt;
struct TLayoutMenuBeltDefaultTypeInternal;
extern TLayoutMenuBeltDefaultTypeInternal _TLayoutMenuBelt_default_instance_;
class TLayoutMenuBeltBase;
struct TLayoutMenuBeltBaseDefaultTypeInternal;
extern TLayoutMenuBeltBaseDefaultTypeInternal _TLayoutMenuBeltBase_default_instance_;
class TLayoutMenuBeltElement;
struct TLayoutMenuBeltElementDefaultTypeInternal;
extern TLayoutMenuBeltElementDefaultTypeInternal _TLayoutMenuBeltElement_default_instance_;
class TLayoutMenuBelt_TTemplate;
struct TLayoutMenuBelt_TTemplateDefaultTypeInternal;
extern TLayoutMenuBelt_TTemplateDefaultTypeInternal _TLayoutMenuBelt_TTemplate_default_instance_;
class TLayoutSceneGraph;
struct TLayoutSceneGraphDefaultTypeInternal;
extern TLayoutSceneGraphDefaultTypeInternal _TLayoutSceneGraph_default_instance_;
class TLayoutSceneGraphElement;
struct TLayoutSceneGraphElementDefaultTypeInternal;
extern TLayoutSceneGraphElementDefaultTypeInternal _TLayoutSceneGraphElement_default_instance_;
class TLayoutSceneGraphProject;
struct TLayoutSceneGraphProjectDefaultTypeInternal;
extern TLayoutSceneGraphProjectDefaultTypeInternal _TLayoutSceneGraphProject_default_instance_;
class TLayoutSceneGraphProjectElement;
struct TLayoutSceneGraphProjectElementDefaultTypeInternal;
extern TLayoutSceneGraphProjectElementDefaultTypeInternal _TLayoutSceneGraphProjectElement_default_instance_;
class TLayoutSceneGraph_TTemplate;
struct TLayoutSceneGraph_TTemplateDefaultTypeInternal;
extern TLayoutSceneGraph_TTemplateDefaultTypeInternal _TLayoutSceneGraph_TTemplate_default_instance_;
class TLayoutStatic;
struct TLayoutStaticDefaultTypeInternal;
extern TLayoutStaticDefaultTypeInternal _TLayoutStatic_default_instance_;
class TLayoutStaticBase;
struct TLayoutStaticBaseDefaultTypeInternal;
extern TLayoutStaticBaseDefaultTypeInternal _TLayoutStaticBase_default_instance_;
class TLayoutStaticElement;
struct TLayoutStaticElementDefaultTypeInternal;
extern TLayoutStaticElementDefaultTypeInternal _TLayoutStaticElement_default_instance_;
class TLayoutStatic_TTemplate;
struct TLayoutStatic_TTemplateDefaultTypeInternal;
extern TLayoutStatic_TTemplateDefaultTypeInternal _TLayoutStatic_TTemplate_default_instance_;
class TLayoutVertical;
struct TLayoutVerticalDefaultTypeInternal;
extern TLayoutVerticalDefaultTypeInternal _TLayoutVertical_default_instance_;
class TLayoutVerticalCurvedList;
struct TLayoutVerticalCurvedListDefaultTypeInternal;
extern TLayoutVerticalCurvedListDefaultTypeInternal _TLayoutVerticalCurvedList_default_instance_;
class TLayoutVerticalCurvedList_TTemplate;
struct TLayoutVerticalCurvedList_TTemplateDefaultTypeInternal;
extern TLayoutVerticalCurvedList_TTemplateDefaultTypeInternal _TLayoutVerticalCurvedList_TTemplate_default_instance_;
class TLayoutVerticalDynamic;
struct TLayoutVerticalDynamicDefaultTypeInternal;
extern TLayoutVerticalDynamicDefaultTypeInternal _TLayoutVerticalDynamic_default_instance_;
class TLayoutVerticalDynamicElement;
struct TLayoutVerticalDynamicElementDefaultTypeInternal;
extern TLayoutVerticalDynamicElementDefaultTypeInternal _TLayoutVerticalDynamicElement_default_instance_;
class TLayoutVerticalDynamic_TTemplate;
struct TLayoutVerticalDynamic_TTemplateDefaultTypeInternal;
extern TLayoutVerticalDynamic_TTemplateDefaultTypeInternal _TLayoutVerticalDynamic_TTemplate_default_instance_;
class TLayoutVerticalElement;
struct TLayoutVerticalElementDefaultTypeInternal;
extern TLayoutVerticalElementDefaultTypeInternal _TLayoutVerticalElement_default_instance_;
class TLayoutVerticalList;
struct TLayoutVerticalListDefaultTypeInternal;
extern TLayoutVerticalListDefaultTypeInternal _TLayoutVerticalList_default_instance_;
class TLayoutVerticalListElement;
struct TLayoutVerticalListElementDefaultTypeInternal;
extern TLayoutVerticalListElementDefaultTypeInternal _TLayoutVerticalListElement_default_instance_;
class TLayoutVerticalList_TTemplate;
struct TLayoutVerticalList_TTemplateDefaultTypeInternal;
extern TLayoutVerticalList_TTemplateDefaultTypeInternal _TLayoutVerticalList_TTemplate_default_instance_;
class TLayoutVerticalRoll;
struct TLayoutVerticalRollDefaultTypeInternal;
extern TLayoutVerticalRollDefaultTypeInternal _TLayoutVerticalRoll_default_instance_;
class TLayoutVerticalRoll_TTemplate;
struct TLayoutVerticalRoll_TTemplateDefaultTypeInternal;
extern TLayoutVerticalRoll_TTemplateDefaultTypeInternal _TLayoutVerticalRoll_TTemplate_default_instance_;
class TLayoutVertical_TTemplate;
struct TLayoutVertical_TTemplateDefaultTypeInternal;
extern TLayoutVertical_TTemplateDefaultTypeInternal _TLayoutVertical_TTemplate_default_instance_;
class TMultiCommand;
struct TMultiCommandDefaultTypeInternal;
extern TMultiCommandDefaultTypeInternal _TMultiCommand_default_instance_;
class TNodeParam;
struct TNodeParamDefaultTypeInternal;
extern TNodeParamDefaultTypeInternal _TNodeParam_default_instance_;
class TNodeProperties;
struct TNodePropertiesDefaultTypeInternal;
extern TNodePropertiesDefaultTypeInternal _TNodeProperties_default_instance_;
class TNodeProperties_TBoundingVolume;
struct TNodeProperties_TBoundingVolumeDefaultTypeInternal;
extern TNodeProperties_TBoundingVolumeDefaultTypeInternal _TNodeProperties_TBoundingVolume_default_instance_;
class TNodeProperties_TBoundingVolume_TBoundingBox;
struct TNodeProperties_TBoundingVolume_TBoundingBoxDefaultTypeInternal;
extern TNodeProperties_TBoundingVolume_TBoundingBoxDefaultTypeInternal _TNodeProperties_TBoundingVolume_TBoundingBox_default_instance_;
class TNodeProperties_TBoundingVolume_TBoundingSphere;
struct TNodeProperties_TBoundingVolume_TBoundingSphereDefaultTypeInternal;
extern TNodeProperties_TBoundingVolume_TBoundingSphereDefaultTypeInternal _TNodeProperties_TBoundingVolume_TBoundingSphere_default_instance_;
class TNodeProperties_TRenderPassName;
struct TNodeProperties_TRenderPassNameDefaultTypeInternal;
extern TNodeProperties_TRenderPassNameDefaultTypeInternal _TNodeProperties_TRenderPassName_default_instance_;
class TNodeTransform;
struct TNodeTransformDefaultTypeInternal;
extern TNodeTransformDefaultTypeInternal _TNodeTransform_default_instance_;
class TParameterAssignment;
struct TParameterAssignmentDefaultTypeInternal;
extern TParameterAssignmentDefaultTypeInternal _TParameterAssignment_default_instance_;
class TParameterValueAssignment;
struct TParameterValueAssignmentDefaultTypeInternal;
extern TParameterValueAssignmentDefaultTypeInternal _TParameterValueAssignment_default_instance_;
class TPolyLine;
struct TPolyLineDefaultTypeInternal;
extern TPolyLineDefaultTypeInternal _TPolyLine_default_instance_;
class TRenderLayerProperties;
struct TRenderLayerPropertiesDefaultTypeInternal;
extern TRenderLayerPropertiesDefaultTypeInternal _TRenderLayerProperties_default_instance_;
class TRenderPassParam;
struct TRenderPassParamDefaultTypeInternal;
extern TRenderPassParamDefaultTypeInternal _TRenderPassParam_default_instance_;
class TRequestLayout;
struct TRequestLayoutDefaultTypeInternal;
extern TRequestLayoutDefaultTypeInternal _TRequestLayout_default_instance_;
class TResourceParam;
struct TResourceParamDefaultTypeInternal;
extern TResourceParamDefaultTypeInternal _TResourceParam_default_instance_;
class TScript;
struct TScriptDefaultTypeInternal;
extern TScriptDefaultTypeInternal _TScript_default_instance_;
class TScriptReference;
struct TScriptReferenceDefaultTypeInternal;
extern TScriptReferenceDefaultTypeInternal _TScriptReference_default_instance_;
class TScriptReturnValue;
struct TScriptReturnValueDefaultTypeInternal;
extern TScriptReturnValueDefaultTypeInternal _TScriptReturnValue_default_instance_;
class TSignal;
struct TSignalDefaultTypeInternal;
extern TSignalDefaultTypeInternal _TSignal_default_instance_;
class TSignalParameterValuesExtractor;
struct TSignalParameterValuesExtractorDefaultTypeInternal;
extern TSignalParameterValuesExtractorDefaultTypeInternal _TSignalParameterValuesExtractor_default_instance_;
class TSignalParameterValuesExtractor_TAssignment;
struct TSignalParameterValuesExtractor_TAssignmentDefaultTypeInternal;
extern TSignalParameterValuesExtractor_TAssignmentDefaultTypeInternal _TSignalParameterValuesExtractor_TAssignment_default_instance_;
class TSlot;
struct TSlotDefaultTypeInternal;
extern TSlotDefaultTypeInternal _TSlot_default_instance_;
class TTextNodeProperties;
struct TTextNodePropertiesDefaultTypeInternal;
extern TTextNodePropertiesDefaultTypeInternal _TTextNodeProperties_default_instance_;
class TTrigger;
struct TTriggerDefaultTypeInternal;
extern TTriggerDefaultTypeInternal _TTrigger_default_instance_;
class TTriggeredSlot;
struct TTriggeredSlotDefaultTypeInternal;
extern TTriggeredSlotDefaultTypeInternal _TTriggeredSlot_default_instance_;
class TUniform;
struct TUniformDefaultTypeInternal;
extern TUniformDefaultTypeInternal _TUniform_default_instance_;
class TUpdateDcsmMetadataCommand;
struct TUpdateDcsmMetadataCommandDefaultTypeInternal;
extern TUpdateDcsmMetadataCommandDefaultTypeInternal _TUpdateDcsmMetadataCommand_default_instance_;
class TWidget;
struct TWidgetDefaultTypeInternal;
extern TWidgetDefaultTypeInternal _TWidget_default_instance_;
class TWidgetAnimation;
struct TWidgetAnimationDefaultTypeInternal;
extern TWidgetAnimationDefaultTypeInternal _TWidgetAnimation_default_instance_;
class TWidgetCollection;
struct TWidgetCollectionDefaultTypeInternal;
extern TWidgetCollectionDefaultTypeInternal _TWidgetCollection_default_instance_;
class TWidgetDataObjectCreateConsumer;
struct TWidgetDataObjectCreateConsumerDefaultTypeInternal;
extern TWidgetDataObjectCreateConsumerDefaultTypeInternal _TWidgetDataObjectCreateConsumer_default_instance_;
class TWidgetDataObjectCreateProvider;
struct TWidgetDataObjectCreateProviderDefaultTypeInternal;
extern TWidgetDataObjectCreateProviderDefaultTypeInternal _TWidgetDataObjectCreateProvider_default_instance_;
class TWidgetDataObjectSetValue;
struct TWidgetDataObjectSetValueDefaultTypeInternal;
extern TWidgetDataObjectSetValueDefaultTypeInternal _TWidgetDataObjectSetValue_default_instance_;
class TWidget_TPrototypeAsset;
struct TWidget_TPrototypeAssetDefaultTypeInternal;
extern TWidget_TPrototypeAssetDefaultTypeInternal _TWidget_TPrototypeAsset_default_instance_;
}  // namespace HmiWidget
PROTOBUF_NAMESPACE_OPEN
template<> ::HmiWidget::TAddModelBindingsToChild* Arena::CreateMaybeMessage<::HmiWidget::TAddModelBindingsToChild>(Arena*);
template<> ::HmiWidget::TAnimationTrigger* Arena::CreateMaybeMessage<::HmiWidget::TAnimationTrigger>(Arena*);
template<> ::HmiWidget::TAppearanceParam* Arena::CreateMaybeMessage<::HmiWidget::TAppearanceParam>(Arena*);
template<> ::HmiWidget::TBlitPassParam* Arena::CreateMaybeMessage<::HmiWidget::TBlitPassParam>(Arena*);
template<> ::HmiWidget::TCameraNodeProperties* Arena::CreateMaybeMessage<::HmiWidget::TCameraNodeProperties>(Arena*);
template<> ::HmiWidget::TChildModelParameter* Arena::CreateMaybeMessage<::HmiWidget::TChildModelParameter>(Arena*);
template<> ::HmiWidget::TChildWidget* Arena::CreateMaybeMessage<::HmiWidget::TChildWidget>(Arena*);
template<> ::HmiWidget::TCommand* Arena::CreateMaybeMessage<::HmiWidget::TCommand>(Arena*);
template<> ::HmiWidget::TCompositeAnimation* Arena::CreateMaybeMessage<::HmiWidget::TCompositeAnimation>(Arena*);
template<> ::HmiWidget::TCompositeAnimationElement* Arena::CreateMaybeMessage<::HmiWidget::TCompositeAnimationElement>(Arena*);
template<> ::HmiWidget::TCompositeAnimationReturnValue* Arena::CreateMaybeMessage<::HmiWidget::TCompositeAnimationReturnValue>(Arena*);
template<> ::HmiWidget::TCompositeAnimationSubAnimationList* Arena::CreateMaybeMessage<::HmiWidget::TCompositeAnimationSubAnimationList>(Arena*);
template<> ::HmiWidget::TCompositeAnimationTrigger* Arena::CreateMaybeMessage<::HmiWidget::TCompositeAnimationTrigger>(Arena*);
template<> ::HmiWidget::TConditionalTrigger* Arena::CreateMaybeMessage<::HmiWidget::TConditionalTrigger>(Arena*);
template<> ::HmiWidget::TCurve* Arena::CreateMaybeMessage<::HmiWidget::TCurve>(Arena*);
template<> ::HmiWidget::TCurveReference* Arena::CreateMaybeMessage<::HmiWidget::TCurveReference>(Arena*);
template<> ::HmiWidget::TDataChangeTrigger* Arena::CreateMaybeMessage<::HmiWidget::TDataChangeTrigger>(Arena*);
template<> ::HmiWidget::TDebugOutputCommand* Arena::CreateMaybeMessage<::HmiWidget::TDebugOutputCommand>(Arena*);
template<> ::HmiWidget::TDefaultChildModelBindings* Arena::CreateMaybeMessage<::HmiWidget::TDefaultChildModelBindings>(Arena*);
template<> ::HmiWidget::TExternalModelParameter* Arena::CreateMaybeMessage<::HmiWidget::TExternalModelParameter>(Arena*);
template<> ::HmiWidget::TForwardSignals* Arena::CreateMaybeMessage<::HmiWidget::TForwardSignals>(Arena*);
template<> ::HmiWidget::THVBaseElement* Arena::CreateMaybeMessage<::HmiWidget::THVBaseElement>(Arena*);
template<> ::HmiWidget::THVDynamicBaseElement* Arena::CreateMaybeMessage<::HmiWidget::THVDynamicBaseElement>(Arena*);
template<> ::HmiWidget::THVListBaseElement* Arena::CreateMaybeMessage<::HmiWidget::THVListBaseElement>(Arena*);
template<> ::HmiWidget::TImportDefinition* Arena::CreateMaybeMessage<::HmiWidget::TImportDefinition>(Arena*);
template<> ::HmiWidget::TInputConfig* Arena::CreateMaybeMessage<::HmiWidget::TInputConfig>(Arena*);
template<> ::HmiWidget::TInternalModelParameter* Arena::CreateMaybeMessage<::HmiWidget::TInternalModelParameter>(Arena*);
template<> ::HmiWidget::TLayout* Arena::CreateMaybeMessage<::HmiWidget::TLayout>(Arena*);
template<> ::HmiWidget::TLayoutCircle* Arena::CreateMaybeMessage<::HmiWidget::TLayoutCircle>(Arena*);
template<> ::HmiWidget::TLayoutCircleBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutCircleBase>(Arena*);
template<> ::HmiWidget::TLayoutCircleBaseElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutCircleBaseElement>(Arena*);
template<> ::HmiWidget::TLayoutCircleElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutCircleElement>(Arena*);
template<> ::HmiWidget::TLayoutCircle_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutCircle_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutCurvedHVBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutCurvedHVBase>(Arena*);
template<> ::HmiWidget::TLayoutGrid* Arena::CreateMaybeMessage<::HmiWidget::TLayoutGrid>(Arena*);
template<> ::HmiWidget::TLayoutGridBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutGridBase>(Arena*);
template<> ::HmiWidget::TLayoutGridElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutGridElement>(Arena*);
template<> ::HmiWidget::TLayoutGrid_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutGrid_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutHVBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(Arena*);
template<> ::HmiWidget::TLayoutHVRollBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHVRollBase>(Arena*);
template<> ::HmiWidget::TLayoutHorizontal* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontal>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalDynamic* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalDynamic>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalDynamicElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalDynamicElement>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalDynamic_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalElement>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalList* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalList>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalListElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalListElement>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalList_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalList_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalPages* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalPages>(Arena*);
template<> ::HmiWidget::TLayoutHorizontalPages_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontalPages_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutHorizontal_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutHorizontal_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutMatrix* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrix>(Arena*);
template<> ::HmiWidget::TLayoutMatrixBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrixBase>(Arena*);
template<> ::HmiWidget::TLayoutMatrixDynamic* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrixDynamic>(Arena*);
template<> ::HmiWidget::TLayoutMatrixDynamicBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrixDynamicBase>(Arena*);
template<> ::HmiWidget::TLayoutMatrixDynamicElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrixDynamicElement>(Arena*);
template<> ::HmiWidget::TLayoutMatrixDynamic_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrixDynamic_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutMatrixElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrixElement>(Arena*);
template<> ::HmiWidget::TLayoutMatrix_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMatrix_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutMenuBelt* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMenuBelt>(Arena*);
template<> ::HmiWidget::TLayoutMenuBeltBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMenuBeltBase>(Arena*);
template<> ::HmiWidget::TLayoutMenuBeltElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMenuBeltElement>(Arena*);
template<> ::HmiWidget::TLayoutMenuBelt_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutMenuBelt_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutSceneGraph* Arena::CreateMaybeMessage<::HmiWidget::TLayoutSceneGraph>(Arena*);
template<> ::HmiWidget::TLayoutSceneGraphElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutSceneGraphElement>(Arena*);
template<> ::HmiWidget::TLayoutSceneGraphProject* Arena::CreateMaybeMessage<::HmiWidget::TLayoutSceneGraphProject>(Arena*);
template<> ::HmiWidget::TLayoutSceneGraphProjectElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutSceneGraphProjectElement>(Arena*);
template<> ::HmiWidget::TLayoutSceneGraph_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutSceneGraph_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutStatic* Arena::CreateMaybeMessage<::HmiWidget::TLayoutStatic>(Arena*);
template<> ::HmiWidget::TLayoutStaticBase* Arena::CreateMaybeMessage<::HmiWidget::TLayoutStaticBase>(Arena*);
template<> ::HmiWidget::TLayoutStaticElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutStaticElement>(Arena*);
template<> ::HmiWidget::TLayoutStatic_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutStatic_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutVertical* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVertical>(Arena*);
template<> ::HmiWidget::TLayoutVerticalCurvedList* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalCurvedList>(Arena*);
template<> ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalCurvedList_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutVerticalDynamic* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalDynamic>(Arena*);
template<> ::HmiWidget::TLayoutVerticalDynamicElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalDynamicElement>(Arena*);
template<> ::HmiWidget::TLayoutVerticalDynamic_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalDynamic_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutVerticalElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalElement>(Arena*);
template<> ::HmiWidget::TLayoutVerticalList* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalList>(Arena*);
template<> ::HmiWidget::TLayoutVerticalListElement* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalListElement>(Arena*);
template<> ::HmiWidget::TLayoutVerticalList_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalList_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutVerticalRoll* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalRoll>(Arena*);
template<> ::HmiWidget::TLayoutVerticalRoll_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVerticalRoll_TTemplate>(Arena*);
template<> ::HmiWidget::TLayoutVertical_TTemplate* Arena::CreateMaybeMessage<::HmiWidget::TLayoutVertical_TTemplate>(Arena*);
template<> ::HmiWidget::TMultiCommand* Arena::CreateMaybeMessage<::HmiWidget::TMultiCommand>(Arena*);
template<> ::HmiWidget::TNodeParam* Arena::CreateMaybeMessage<::HmiWidget::TNodeParam>(Arena*);
template<> ::HmiWidget::TNodeProperties* Arena::CreateMaybeMessage<::HmiWidget::TNodeProperties>(Arena*);
template<> ::HmiWidget::TNodeProperties_TBoundingVolume* Arena::CreateMaybeMessage<::HmiWidget::TNodeProperties_TBoundingVolume>(Arena*);
template<> ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* Arena::CreateMaybeMessage<::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox>(Arena*);
template<> ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* Arena::CreateMaybeMessage<::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere>(Arena*);
template<> ::HmiWidget::TNodeProperties_TRenderPassName* Arena::CreateMaybeMessage<::HmiWidget::TNodeProperties_TRenderPassName>(Arena*);
template<> ::HmiWidget::TNodeTransform* Arena::CreateMaybeMessage<::HmiWidget::TNodeTransform>(Arena*);
template<> ::HmiWidget::TParameterAssignment* Arena::CreateMaybeMessage<::HmiWidget::TParameterAssignment>(Arena*);
template<> ::HmiWidget::TParameterValueAssignment* Arena::CreateMaybeMessage<::HmiWidget::TParameterValueAssignment>(Arena*);
template<> ::HmiWidget::TPolyLine* Arena::CreateMaybeMessage<::HmiWidget::TPolyLine>(Arena*);
template<> ::HmiWidget::TRenderLayerProperties* Arena::CreateMaybeMessage<::HmiWidget::TRenderLayerProperties>(Arena*);
template<> ::HmiWidget::TRenderPassParam* Arena::CreateMaybeMessage<::HmiWidget::TRenderPassParam>(Arena*);
template<> ::HmiWidget::TRequestLayout* Arena::CreateMaybeMessage<::HmiWidget::TRequestLayout>(Arena*);
template<> ::HmiWidget::TResourceParam* Arena::CreateMaybeMessage<::HmiWidget::TResourceParam>(Arena*);
template<> ::HmiWidget::TScript* Arena::CreateMaybeMessage<::HmiWidget::TScript>(Arena*);
template<> ::HmiWidget::TScriptReference* Arena::CreateMaybeMessage<::HmiWidget::TScriptReference>(Arena*);
template<> ::HmiWidget::TScriptReturnValue* Arena::CreateMaybeMessage<::HmiWidget::TScriptReturnValue>(Arena*);
template<> ::HmiWidget::TSignal* Arena::CreateMaybeMessage<::HmiWidget::TSignal>(Arena*);
template<> ::HmiWidget::TSignalParameterValuesExtractor* Arena::CreateMaybeMessage<::HmiWidget::TSignalParameterValuesExtractor>(Arena*);
template<> ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* Arena::CreateMaybeMessage<::HmiWidget::TSignalParameterValuesExtractor_TAssignment>(Arena*);
template<> ::HmiWidget::TSlot* Arena::CreateMaybeMessage<::HmiWidget::TSlot>(Arena*);
template<> ::HmiWidget::TTextNodeProperties* Arena::CreateMaybeMessage<::HmiWidget::TTextNodeProperties>(Arena*);
template<> ::HmiWidget::TTrigger* Arena::CreateMaybeMessage<::HmiWidget::TTrigger>(Arena*);
template<> ::HmiWidget::TTriggeredSlot* Arena::CreateMaybeMessage<::HmiWidget::TTriggeredSlot>(Arena*);
template<> ::HmiWidget::TUniform* Arena::CreateMaybeMessage<::HmiWidget::TUniform>(Arena*);
template<> ::HmiWidget::TUpdateDcsmMetadataCommand* Arena::CreateMaybeMessage<::HmiWidget::TUpdateDcsmMetadataCommand>(Arena*);
template<> ::HmiWidget::TWidget* Arena::CreateMaybeMessage<::HmiWidget::TWidget>(Arena*);
template<> ::HmiWidget::TWidgetAnimation* Arena::CreateMaybeMessage<::HmiWidget::TWidgetAnimation>(Arena*);
template<> ::HmiWidget::TWidgetCollection* Arena::CreateMaybeMessage<::HmiWidget::TWidgetCollection>(Arena*);
template<> ::HmiWidget::TWidgetDataObjectCreateConsumer* Arena::CreateMaybeMessage<::HmiWidget::TWidgetDataObjectCreateConsumer>(Arena*);
template<> ::HmiWidget::TWidgetDataObjectCreateProvider* Arena::CreateMaybeMessage<::HmiWidget::TWidgetDataObjectCreateProvider>(Arena*);
template<> ::HmiWidget::TWidgetDataObjectSetValue* Arena::CreateMaybeMessage<::HmiWidget::TWidgetDataObjectSetValue>(Arena*);
template<> ::HmiWidget::TWidget_TPrototypeAsset* Arena::CreateMaybeMessage<::HmiWidget::TWidget_TPrototypeAsset>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace HmiWidget {

enum TETriggerCategory : int {
  TETriggerCategory_OnWidgetUpdate = 0,
  TETriggerCategory_OnControllerInput = 1,
  TETriggerCategory_OnTouchInput = 2,
  TETriggerCategory_OnWidgetRemoved = 3,
  TETriggerCategory_OnWidgetHidden = 4,
  TETriggerCategory_OnWidgetShown = 5,
  TETriggerCategory_OnWidgetRenderingActive = 6,
  TETriggerCategory_OnWidgetRenderingInactive = 7,
  TETriggerCategory_OnWidgetPostLayout = 8
};
bool TETriggerCategory_IsValid(int value);
constexpr TETriggerCategory TETriggerCategory_MIN = TETriggerCategory_OnWidgetUpdate;
constexpr TETriggerCategory TETriggerCategory_MAX = TETriggerCategory_OnWidgetPostLayout;
constexpr int TETriggerCategory_ARRAYSIZE = TETriggerCategory_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETriggerCategory_descriptor();
template<typename T>
inline const std::string& TETriggerCategory_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TETriggerCategory>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TETriggerCategory_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TETriggerCategory_descriptor(), enum_t_value);
}
inline bool TETriggerCategory_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TETriggerCategory* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TETriggerCategory>(
    TETriggerCategory_descriptor(), name, value);
}
enum TETriggerExecMode : int {
  TETriggerExecMode_ConditionDirtyAndTrue = 0,
  TETriggerExecMode_ConditionTrue = 1
};
bool TETriggerExecMode_IsValid(int value);
constexpr TETriggerExecMode TETriggerExecMode_MIN = TETriggerExecMode_ConditionDirtyAndTrue;
constexpr TETriggerExecMode TETriggerExecMode_MAX = TETriggerExecMode_ConditionTrue;
constexpr int TETriggerExecMode_ARRAYSIZE = TETriggerExecMode_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETriggerExecMode_descriptor();
template<typename T>
inline const std::string& TETriggerExecMode_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TETriggerExecMode>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TETriggerExecMode_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TETriggerExecMode_descriptor(), enum_t_value);
}
inline bool TETriggerExecMode_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TETriggerExecMode* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TETriggerExecMode>(
    TETriggerExecMode_descriptor(), name, value);
}
enum TETouchTargetDomain : int {
  TETouchTargetDomain_Hmi = 1,
  TETouchTargetDomain_Navi = 2,
  TETouchTargetDomain_NaviPreview_DEPRECATED = 3,
  TETouchTargetDomain_Browser_DEPRECATED = 4,
  TETouchTargetDomain_CarPlay = 5
};
bool TETouchTargetDomain_IsValid(int value);
constexpr TETouchTargetDomain TETouchTargetDomain_MIN = TETouchTargetDomain_Hmi;
constexpr TETouchTargetDomain TETouchTargetDomain_MAX = TETouchTargetDomain_CarPlay;
constexpr int TETouchTargetDomain_ARRAYSIZE = TETouchTargetDomain_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETouchTargetDomain_descriptor();
template<typename T>
inline const std::string& TETouchTargetDomain_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TETouchTargetDomain>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TETouchTargetDomain_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TETouchTargetDomain_descriptor(), enum_t_value);
}
inline bool TETouchTargetDomain_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TETouchTargetDomain* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TETouchTargetDomain>(
    TETouchTargetDomain_descriptor(), name, value);
}
enum TETouchVolumeSource : int {
  TETouchVolumeSource_LayoutSize = 1,
  TETouchVolumeSource_GeometryBBox_DEPRECATED = 2,
  TETouchVolumeSource_CustomVolume = 3,
  TETouchVolumeSource_Child = 4,
  TETouchVolumeSource_Polygon = 5
};
bool TETouchVolumeSource_IsValid(int value);
constexpr TETouchVolumeSource TETouchVolumeSource_MIN = TETouchVolumeSource_LayoutSize;
constexpr TETouchVolumeSource TETouchVolumeSource_MAX = TETouchVolumeSource_Polygon;
constexpr int TETouchVolumeSource_ARRAYSIZE = TETouchVolumeSource_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETouchVolumeSource_descriptor();
template<typename T>
inline const std::string& TETouchVolumeSource_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TETouchVolumeSource>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TETouchVolumeSource_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TETouchVolumeSource_descriptor(), enum_t_value);
}
inline bool TETouchVolumeSource_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TETouchVolumeSource* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TETouchVolumeSource>(
    TETouchVolumeSource_descriptor(), name, value);
}
enum TELevelSelection : int {
  TELevelSelection_Default = 1,
  TELevelSelection_Current = 2,
  TELevelSelection_Next = 3
};
bool TELevelSelection_IsValid(int value);
constexpr TELevelSelection TELevelSelection_MIN = TELevelSelection_Default;
constexpr TELevelSelection TELevelSelection_MAX = TELevelSelection_Next;
constexpr int TELevelSelection_ARRAYSIZE = TELevelSelection_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TELevelSelection_descriptor();
template<typename T>
inline const std::string& TELevelSelection_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TELevelSelection>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TELevelSelection_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TELevelSelection_descriptor(), enum_t_value);
}
inline bool TELevelSelection_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TELevelSelection* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TELevelSelection>(
    TELevelSelection_descriptor(), name, value);
}
enum TEAssignmentTarget : int {
  TEAssignmentTarget_Local = 1,
  TEAssignmentTarget_DataExchange = 2
};
bool TEAssignmentTarget_IsValid(int value);
constexpr TEAssignmentTarget TEAssignmentTarget_MIN = TEAssignmentTarget_Local;
constexpr TEAssignmentTarget TEAssignmentTarget_MAX = TEAssignmentTarget_DataExchange;
constexpr int TEAssignmentTarget_ARRAYSIZE = TEAssignmentTarget_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAssignmentTarget_descriptor();
template<typename T>
inline const std::string& TEAssignmentTarget_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAssignmentTarget>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAssignmentTarget_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAssignmentTarget_descriptor(), enum_t_value);
}
inline bool TEAssignmentTarget_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAssignmentTarget* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAssignmentTarget>(
    TEAssignmentTarget_descriptor(), name, value);
}
enum TESignalTarget : int {
  TESignalTarget_Self = 0,
  TESignalTarget_Child = 1,
  TESignalTarget_Parent = 2,
  TESignalTarget_Parents = 3,
  TESignalTarget_SelfAndParents = 4
};
bool TESignalTarget_IsValid(int value);
constexpr TESignalTarget TESignalTarget_MIN = TESignalTarget_Self;
constexpr TESignalTarget TESignalTarget_MAX = TESignalTarget_SelfAndParents;
constexpr int TESignalTarget_ARRAYSIZE = TESignalTarget_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TESignalTarget_descriptor();
template<typename T>
inline const std::string& TESignalTarget_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TESignalTarget>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TESignalTarget_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TESignalTarget_descriptor(), enum_t_value);
}
inline bool TESignalTarget_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TESignalTarget* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TESignalTarget>(
    TESignalTarget_descriptor(), name, value);
}
enum TEAnimationAction : int {
  TEAnimationAction_Start = 0,
  TEAnimationAction_Stop = 1,
  TEAnimationAction_GoToEnd = 2
};
bool TEAnimationAction_IsValid(int value);
constexpr TEAnimationAction TEAnimationAction_MIN = TEAnimationAction_Start;
constexpr TEAnimationAction TEAnimationAction_MAX = TEAnimationAction_GoToEnd;
constexpr int TEAnimationAction_ARRAYSIZE = TEAnimationAction_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAnimationAction_descriptor();
template<typename T>
inline const std::string& TEAnimationAction_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAnimationAction>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAnimationAction_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAnimationAction_descriptor(), enum_t_value);
}
inline bool TEAnimationAction_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAnimationAction* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAnimationAction>(
    TEAnimationAction_descriptor(), name, value);
}
enum TEAnimationBindingBehaviour : int {
  TEAnimationBindingBehaviour_Ignore = 0,
  TEAnimationBindingBehaviour_Update = 1,
  TEAnimationBindingBehaviour_Restart = 2
};
bool TEAnimationBindingBehaviour_IsValid(int value);
constexpr TEAnimationBindingBehaviour TEAnimationBindingBehaviour_MIN = TEAnimationBindingBehaviour_Ignore;
constexpr TEAnimationBindingBehaviour TEAnimationBindingBehaviour_MAX = TEAnimationBindingBehaviour_Restart;
constexpr int TEAnimationBindingBehaviour_ARRAYSIZE = TEAnimationBindingBehaviour_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAnimationBindingBehaviour_descriptor();
template<typename T>
inline const std::string& TEAnimationBindingBehaviour_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAnimationBindingBehaviour>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAnimationBindingBehaviour_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAnimationBindingBehaviour_descriptor(), enum_t_value);
}
inline bool TEAnimationBindingBehaviour_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAnimationBindingBehaviour* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAnimationBindingBehaviour>(
    TEAnimationBindingBehaviour_descriptor(), name, value);
}
enum TEAnimationSignal : int {
  TEAnimationSignal_SignalAnimationStarted = 0,
  TEAnimationSignal_SignalAnimationStopped = 1,
  TEAnimationSignal_SignalAnimationEndOfAnimation = 2,
  TEAnimationSignal_SignalAnimationCurrentValueChanged = 3,
  TEAnimationSignal_SignalAnimationReset = 4,
  TEAnimationSignal_SignalAnimationAborted = 5,
  TEAnimationSignal_SignalAnimationResume = 6
};
bool TEAnimationSignal_IsValid(int value);
constexpr TEAnimationSignal TEAnimationSignal_MIN = TEAnimationSignal_SignalAnimationStarted;
constexpr TEAnimationSignal TEAnimationSignal_MAX = TEAnimationSignal_SignalAnimationResume;
constexpr int TEAnimationSignal_ARRAYSIZE = TEAnimationSignal_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAnimationSignal_descriptor();
template<typename T>
inline const std::string& TEAnimationSignal_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAnimationSignal>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAnimationSignal_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAnimationSignal_descriptor(), enum_t_value);
}
inline bool TEAnimationSignal_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAnimationSignal* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAnimationSignal>(
    TEAnimationSignal_descriptor(), name, value);
}
enum TEAnimationSlot : int {
  TEAnimationSlot_SlotAnimationStart = 0,
  TEAnimationSlot_SlotAnimationStop = 1,
  TEAnimationSlot_SlotAnimationGotoEnd = 2,
  TEAnimationSlot_SlotAnimationReset = 3,
  TEAnimationSlot_SlotAnimationAbort = 4,
  TEAnimationSlot_SlotAnimationResume = 5
};
bool TEAnimationSlot_IsValid(int value);
constexpr TEAnimationSlot TEAnimationSlot_MIN = TEAnimationSlot_SlotAnimationStart;
constexpr TEAnimationSlot TEAnimationSlot_MAX = TEAnimationSlot_SlotAnimationResume;
constexpr int TEAnimationSlot_ARRAYSIZE = TEAnimationSlot_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAnimationSlot_descriptor();
template<typename T>
inline const std::string& TEAnimationSlot_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TEAnimationSlot>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TEAnimationSlot_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TEAnimationSlot_descriptor(), enum_t_value);
}
inline bool TEAnimationSlot_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TEAnimationSlot* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TEAnimationSlot>(
    TEAnimationSlot_descriptor(), name, value);
}
enum TELayoutOrientation : int {
  TELayoutOrientation_Left = 0,
  TELayoutOrientation_Right = 1,
  TELayoutOrientation_Top = 2,
  TELayoutOrientation_Bottom = 3
};
bool TELayoutOrientation_IsValid(int value);
constexpr TELayoutOrientation TELayoutOrientation_MIN = TELayoutOrientation_Left;
constexpr TELayoutOrientation TELayoutOrientation_MAX = TELayoutOrientation_Bottom;
constexpr int TELayoutOrientation_ARRAYSIZE = TELayoutOrientation_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TELayoutOrientation_descriptor();
template<typename T>
inline const std::string& TELayoutOrientation_Name(T enum_t_value) {
  static_assert(::std::is_same<T, TELayoutOrientation>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function TELayoutOrientation_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    TELayoutOrientation_descriptor(), enum_t_value);
}
inline bool TELayoutOrientation_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, TELayoutOrientation* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<TELayoutOrientation>(
    TELayoutOrientation_descriptor(), name, value);
}
// ===================================================================

class TNodeParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TNodeParam) */ {
 public:
  inline TNodeParam() : TNodeParam(nullptr) {}
  ~TNodeParam() override;
  explicit PROTOBUF_CONSTEXPR TNodeParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TNodeParam(const TNodeParam& from);
  TNodeParam(TNodeParam&& from) noexcept
    : TNodeParam() {
    *this = ::std::move(from);
  }

  inline TNodeParam& operator=(const TNodeParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNodeParam& operator=(TNodeParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TNodeParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TNodeParam* internal_default_instance() {
    return reinterpret_cast<const TNodeParam*>(
               &_TNodeParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(TNodeParam& a, TNodeParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TNodeParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNodeParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TNodeParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TNodeParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TNodeParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TNodeParam& from) {
    TNodeParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNodeParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TNodeParam";
  }
  protected:
  explicit TNodeParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniformFieldNumber = 4,
    kUseImportFieldNumber = 5,
    kIdentifierFieldNumber = 1,
    kNodeFieldNumber = 2,
    kTransformFieldNumber = 3,
    kRenderLayerPropertiesFieldNumber = 6,
    kNodePropertiesFieldNumber = 7,
    kCameraNodePropertiesFieldNumber = 8,
    kTextNodePropertiesFieldNumber = 9,
  };
  // repeated .HmiWidget.TUniform uniform = 4;
  int uniform_size() const;
  private:
  int _internal_uniform_size() const;
  public:
  void clear_uniform();
  ::HmiWidget::TUniform* mutable_uniform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >*
      mutable_uniform();
  private:
  const ::HmiWidget::TUniform& _internal_uniform(int index) const;
  ::HmiWidget::TUniform* _internal_add_uniform();
  public:
  const ::HmiWidget::TUniform& uniform(int index) const;
  ::HmiWidget::TUniform* add_uniform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >&
      uniform() const;

  // repeated .TIdentifier useImport = 5;
  int useimport_size() const;
  private:
  int _internal_useimport_size() const;
  public:
  void clear_useimport();
  ::TIdentifier* mutable_useimport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_useimport();
  private:
  const ::TIdentifier& _internal_useimport(int index) const;
  ::TIdentifier* _internal_add_useimport();
  public:
  const ::TIdentifier& useimport(int index) const;
  ::TIdentifier* add_useimport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      useimport() const;

  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // optional .TDataBinding node = 2;
  bool has_node() const;
  private:
  bool _internal_has_node() const;
  public:
  void clear_node();
  const ::TDataBinding& node() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_node();
  ::TDataBinding* mutable_node();
  void set_allocated_node(::TDataBinding* node);
  private:
  const ::TDataBinding& _internal_node() const;
  ::TDataBinding* _internal_mutable_node();
  public:
  void unsafe_arena_set_allocated_node(
      ::TDataBinding* node);
  ::TDataBinding* unsafe_arena_release_node();

  // optional .HmiWidget.TNodeTransform transform = 3;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::HmiWidget::TNodeTransform& transform() const;
  PROTOBUF_NODISCARD ::HmiWidget::TNodeTransform* release_transform();
  ::HmiWidget::TNodeTransform* mutable_transform();
  void set_allocated_transform(::HmiWidget::TNodeTransform* transform);
  private:
  const ::HmiWidget::TNodeTransform& _internal_transform() const;
  ::HmiWidget::TNodeTransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::HmiWidget::TNodeTransform* transform);
  ::HmiWidget::TNodeTransform* unsafe_arena_release_transform();

  // optional .HmiWidget.TRenderLayerProperties renderLayerProperties = 6;
  bool has_renderlayerproperties() const;
  private:
  bool _internal_has_renderlayerproperties() const;
  public:
  void clear_renderlayerproperties();
  const ::HmiWidget::TRenderLayerProperties& renderlayerproperties() const;
  PROTOBUF_NODISCARD ::HmiWidget::TRenderLayerProperties* release_renderlayerproperties();
  ::HmiWidget::TRenderLayerProperties* mutable_renderlayerproperties();
  void set_allocated_renderlayerproperties(::HmiWidget::TRenderLayerProperties* renderlayerproperties);
  private:
  const ::HmiWidget::TRenderLayerProperties& _internal_renderlayerproperties() const;
  ::HmiWidget::TRenderLayerProperties* _internal_mutable_renderlayerproperties();
  public:
  void unsafe_arena_set_allocated_renderlayerproperties(
      ::HmiWidget::TRenderLayerProperties* renderlayerproperties);
  ::HmiWidget::TRenderLayerProperties* unsafe_arena_release_renderlayerproperties();

  // optional .HmiWidget.TNodeProperties nodeProperties = 7;
  bool has_nodeproperties() const;
  private:
  bool _internal_has_nodeproperties() const;
  public:
  void clear_nodeproperties();
  const ::HmiWidget::TNodeProperties& nodeproperties() const;
  PROTOBUF_NODISCARD ::HmiWidget::TNodeProperties* release_nodeproperties();
  ::HmiWidget::TNodeProperties* mutable_nodeproperties();
  void set_allocated_nodeproperties(::HmiWidget::TNodeProperties* nodeproperties);
  private:
  const ::HmiWidget::TNodeProperties& _internal_nodeproperties() const;
  ::HmiWidget::TNodeProperties* _internal_mutable_nodeproperties();
  public:
  void unsafe_arena_set_allocated_nodeproperties(
      ::HmiWidget::TNodeProperties* nodeproperties);
  ::HmiWidget::TNodeProperties* unsafe_arena_release_nodeproperties();

  // optional .HmiWidget.TCameraNodeProperties cameraNodeProperties = 8;
  bool has_cameranodeproperties() const;
  private:
  bool _internal_has_cameranodeproperties() const;
  public:
  void clear_cameranodeproperties();
  const ::HmiWidget::TCameraNodeProperties& cameranodeproperties() const;
  PROTOBUF_NODISCARD ::HmiWidget::TCameraNodeProperties* release_cameranodeproperties();
  ::HmiWidget::TCameraNodeProperties* mutable_cameranodeproperties();
  void set_allocated_cameranodeproperties(::HmiWidget::TCameraNodeProperties* cameranodeproperties);
  private:
  const ::HmiWidget::TCameraNodeProperties& _internal_cameranodeproperties() const;
  ::HmiWidget::TCameraNodeProperties* _internal_mutable_cameranodeproperties();
  public:
  void unsafe_arena_set_allocated_cameranodeproperties(
      ::HmiWidget::TCameraNodeProperties* cameranodeproperties);
  ::HmiWidget::TCameraNodeProperties* unsafe_arena_release_cameranodeproperties();

  // optional .HmiWidget.TTextNodeProperties textNodeProperties = 9;
  bool has_textnodeproperties() const;
  private:
  bool _internal_has_textnodeproperties() const;
  public:
  void clear_textnodeproperties();
  const ::HmiWidget::TTextNodeProperties& textnodeproperties() const;
  PROTOBUF_NODISCARD ::HmiWidget::TTextNodeProperties* release_textnodeproperties();
  ::HmiWidget::TTextNodeProperties* mutable_textnodeproperties();
  void set_allocated_textnodeproperties(::HmiWidget::TTextNodeProperties* textnodeproperties);
  private:
  const ::HmiWidget::TTextNodeProperties& _internal_textnodeproperties() const;
  ::HmiWidget::TTextNodeProperties* _internal_mutable_textnodeproperties();
  public:
  void unsafe_arena_set_allocated_textnodeproperties(
      ::HmiWidget::TTextNodeProperties* textnodeproperties);
  ::HmiWidget::TTextNodeProperties* unsafe_arena_release_textnodeproperties();

  // @@protoc_insertion_point(class_scope:HmiWidget.TNodeParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform > uniform_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > useimport_;
    ::TIdentifier* identifier_;
    ::TDataBinding* node_;
    ::HmiWidget::TNodeTransform* transform_;
    ::HmiWidget::TRenderLayerProperties* renderlayerproperties_;
    ::HmiWidget::TNodeProperties* nodeproperties_;
    ::HmiWidget::TCameraNodeProperties* cameranodeproperties_;
    ::HmiWidget::TTextNodeProperties* textnodeproperties_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TUniform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TUniform) */ {
 public:
  inline TUniform() : TUniform(nullptr) {}
  ~TUniform() override;
  explicit PROTOBUF_CONSTEXPR TUniform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TUniform(const TUniform& from);
  TUniform(TUniform&& from) noexcept
    : TUniform() {
    *this = ::std::move(from);
  }

  inline TUniform& operator=(const TUniform& from) {
    CopyFrom(from);
    return *this;
  }
  inline TUniform& operator=(TUniform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TUniform& default_instance() {
    return *internal_default_instance();
  }
  static inline const TUniform* internal_default_instance() {
    return reinterpret_cast<const TUniform*>(
               &_TUniform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(TUniform& a, TUniform& b) {
    a.Swap(&b);
  }
  inline void Swap(TUniform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TUniform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TUniform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TUniform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TUniform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TUniform& from) {
    TUniform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TUniform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TUniform";
  }
  protected:
  explicit TUniform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .TDataBinding name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::TDataBinding& name() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_name();
  ::TDataBinding* mutable_name();
  void set_allocated_name(::TDataBinding* name);
  private:
  const ::TDataBinding& _internal_name() const;
  ::TDataBinding* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::TDataBinding* name);
  ::TDataBinding* unsafe_arena_release_name();

  // optional .TDataBinding value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TDataBinding& value() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_value();
  ::TDataBinding* mutable_value();
  void set_allocated_value(::TDataBinding* value);
  private:
  const ::TDataBinding& _internal_value() const;
  ::TDataBinding* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TDataBinding* value);
  ::TDataBinding* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:HmiWidget.TUniform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* name_;
    ::TDataBinding* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TNodeTransform final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TNodeTransform) */ {
 public:
  inline TNodeTransform() : TNodeTransform(nullptr) {}
  ~TNodeTransform() override;
  explicit PROTOBUF_CONSTEXPR TNodeTransform(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TNodeTransform(const TNodeTransform& from);
  TNodeTransform(TNodeTransform&& from) noexcept
    : TNodeTransform() {
    *this = ::std::move(from);
  }

  inline TNodeTransform& operator=(const TNodeTransform& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNodeTransform& operator=(TNodeTransform&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TNodeTransform& default_instance() {
    return *internal_default_instance();
  }
  static inline const TNodeTransform* internal_default_instance() {
    return reinterpret_cast<const TNodeTransform*>(
               &_TNodeTransform_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(TNodeTransform& a, TNodeTransform& b) {
    a.Swap(&b);
  }
  inline void Swap(TNodeTransform* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNodeTransform* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TNodeTransform* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TNodeTransform>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TNodeTransform& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TNodeTransform& from) {
    TNodeTransform::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNodeTransform* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TNodeTransform";
  }
  protected:
  explicit TNodeTransform(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScaleFieldNumber = 1,
    kRotationFieldNumber = 2,
    kTranslationFieldNumber = 3,
  };
  // optional .TDataBinding scale = 1;
  bool has_scale() const;
  private:
  bool _internal_has_scale() const;
  public:
  void clear_scale();
  const ::TDataBinding& scale() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_scale();
  ::TDataBinding* mutable_scale();
  void set_allocated_scale(::TDataBinding* scale);
  private:
  const ::TDataBinding& _internal_scale() const;
  ::TDataBinding* _internal_mutable_scale();
  public:
  void unsafe_arena_set_allocated_scale(
      ::TDataBinding* scale);
  ::TDataBinding* unsafe_arena_release_scale();

  // optional .TDataBinding rotation = 2;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::TDataBinding& rotation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rotation();
  ::TDataBinding* mutable_rotation();
  void set_allocated_rotation(::TDataBinding* rotation);
  private:
  const ::TDataBinding& _internal_rotation() const;
  ::TDataBinding* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::TDataBinding* rotation);
  ::TDataBinding* unsafe_arena_release_rotation();

  // optional .TDataBinding translation = 3;
  bool has_translation() const;
  private:
  bool _internal_has_translation() const;
  public:
  void clear_translation();
  const ::TDataBinding& translation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_translation();
  ::TDataBinding* mutable_translation();
  void set_allocated_translation(::TDataBinding* translation);
  private:
  const ::TDataBinding& _internal_translation() const;
  ::TDataBinding* _internal_mutable_translation();
  public:
  void unsafe_arena_set_allocated_translation(
      ::TDataBinding* translation);
  ::TDataBinding* unsafe_arena_release_translation();

  // @@protoc_insertion_point(class_scope:HmiWidget.TNodeTransform)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* scale_;
    ::TDataBinding* rotation_;
    ::TDataBinding* translation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TRenderLayerProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TRenderLayerProperties) */ {
 public:
  inline TRenderLayerProperties() : TRenderLayerProperties(nullptr) {}
  ~TRenderLayerProperties() override;
  explicit PROTOBUF_CONSTEXPR TRenderLayerProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRenderLayerProperties(const TRenderLayerProperties& from);
  TRenderLayerProperties(TRenderLayerProperties&& from) noexcept
    : TRenderLayerProperties() {
    *this = ::std::move(from);
  }

  inline TRenderLayerProperties& operator=(const TRenderLayerProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRenderLayerProperties& operator=(TRenderLayerProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRenderLayerProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRenderLayerProperties* internal_default_instance() {
    return reinterpret_cast<const TRenderLayerProperties*>(
               &_TRenderLayerProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(TRenderLayerProperties& a, TRenderLayerProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(TRenderLayerProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRenderLayerProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRenderLayerProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRenderLayerProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRenderLayerProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRenderLayerProperties& from) {
    TRenderLayerProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRenderLayerProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TRenderLayerProperties";
  }
  protected:
  explicit TRenderLayerProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRenderPassEnabledFieldNumber = 1,
    kRenderTargetScaleFieldNumber = 2,
    kBoundingBoxRootNameFieldNumber = 3,
    kBorderSizeFieldNumber = 4,
  };
  // optional .TDataBinding renderPassEnabled = 1;
  bool has_renderpassenabled() const;
  private:
  bool _internal_has_renderpassenabled() const;
  public:
  void clear_renderpassenabled();
  const ::TDataBinding& renderpassenabled() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_renderpassenabled();
  ::TDataBinding* mutable_renderpassenabled();
  void set_allocated_renderpassenabled(::TDataBinding* renderpassenabled);
  private:
  const ::TDataBinding& _internal_renderpassenabled() const;
  ::TDataBinding* _internal_mutable_renderpassenabled();
  public:
  void unsafe_arena_set_allocated_renderpassenabled(
      ::TDataBinding* renderpassenabled);
  ::TDataBinding* unsafe_arena_release_renderpassenabled();

  // optional .TDataBinding renderTargetScale = 2;
  bool has_rendertargetscale() const;
  private:
  bool _internal_has_rendertargetscale() const;
  public:
  void clear_rendertargetscale();
  const ::TDataBinding& rendertargetscale() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rendertargetscale();
  ::TDataBinding* mutable_rendertargetscale();
  void set_allocated_rendertargetscale(::TDataBinding* rendertargetscale);
  private:
  const ::TDataBinding& _internal_rendertargetscale() const;
  ::TDataBinding* _internal_mutable_rendertargetscale();
  public:
  void unsafe_arena_set_allocated_rendertargetscale(
      ::TDataBinding* rendertargetscale);
  ::TDataBinding* unsafe_arena_release_rendertargetscale();

  // optional .TDataBinding boundingBoxRootName = 3;
  bool has_boundingboxrootname() const;
  private:
  bool _internal_has_boundingboxrootname() const;
  public:
  void clear_boundingboxrootname();
  const ::TDataBinding& boundingboxrootname() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_boundingboxrootname();
  ::TDataBinding* mutable_boundingboxrootname();
  void set_allocated_boundingboxrootname(::TDataBinding* boundingboxrootname);
  private:
  const ::TDataBinding& _internal_boundingboxrootname() const;
  ::TDataBinding* _internal_mutable_boundingboxrootname();
  public:
  void unsafe_arena_set_allocated_boundingboxrootname(
      ::TDataBinding* boundingboxrootname);
  ::TDataBinding* unsafe_arena_release_boundingboxrootname();

  // optional .TDataBinding borderSize = 4;
  bool has_bordersize() const;
  private:
  bool _internal_has_bordersize() const;
  public:
  void clear_bordersize();
  const ::TDataBinding& bordersize() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bordersize();
  ::TDataBinding* mutable_bordersize();
  void set_allocated_bordersize(::TDataBinding* bordersize);
  private:
  const ::TDataBinding& _internal_bordersize() const;
  ::TDataBinding* _internal_mutable_bordersize();
  public:
  void unsafe_arena_set_allocated_bordersize(
      ::TDataBinding* bordersize);
  ::TDataBinding* unsafe_arena_release_bordersize();

  // @@protoc_insertion_point(class_scope:HmiWidget.TRenderLayerProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* renderpassenabled_;
    ::TDataBinding* rendertargetscale_;
    ::TDataBinding* boundingboxrootname_;
    ::TDataBinding* bordersize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TNodeProperties_TRenderPassName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TNodeProperties.TRenderPassName) */ {
 public:
  inline TNodeProperties_TRenderPassName() : TNodeProperties_TRenderPassName(nullptr) {}
  ~TNodeProperties_TRenderPassName() override;
  explicit PROTOBUF_CONSTEXPR TNodeProperties_TRenderPassName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TNodeProperties_TRenderPassName(const TNodeProperties_TRenderPassName& from);
  TNodeProperties_TRenderPassName(TNodeProperties_TRenderPassName&& from) noexcept
    : TNodeProperties_TRenderPassName() {
    *this = ::std::move(from);
  }

  inline TNodeProperties_TRenderPassName& operator=(const TNodeProperties_TRenderPassName& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNodeProperties_TRenderPassName& operator=(TNodeProperties_TRenderPassName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TNodeProperties_TRenderPassName& default_instance() {
    return *internal_default_instance();
  }
  static inline const TNodeProperties_TRenderPassName* internal_default_instance() {
    return reinterpret_cast<const TNodeProperties_TRenderPassName*>(
               &_TNodeProperties_TRenderPassName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(TNodeProperties_TRenderPassName& a, TNodeProperties_TRenderPassName& b) {
    a.Swap(&b);
  }
  inline void Swap(TNodeProperties_TRenderPassName* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNodeProperties_TRenderPassName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TNodeProperties_TRenderPassName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TNodeProperties_TRenderPassName>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TNodeProperties_TRenderPassName& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TNodeProperties_TRenderPassName& from) {
    TNodeProperties_TRenderPassName::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNodeProperties_TRenderPassName* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TNodeProperties.TRenderPassName";
  }
  protected:
  explicit TNodeProperties_TRenderPassName(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kEnabledFieldNumber = 2,
  };
  // required .TDataBinding name = 1;
  bool has_name() const;
  private:
  bool _internal_has_name() const;
  public:
  void clear_name();
  const ::TDataBinding& name() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_name();
  ::TDataBinding* mutable_name();
  void set_allocated_name(::TDataBinding* name);
  private:
  const ::TDataBinding& _internal_name() const;
  ::TDataBinding* _internal_mutable_name();
  public:
  void unsafe_arena_set_allocated_name(
      ::TDataBinding* name);
  ::TDataBinding* unsafe_arena_release_name();

  // optional .TDataBinding enabled = 2;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  const ::TDataBinding& enabled() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_enabled();
  ::TDataBinding* mutable_enabled();
  void set_allocated_enabled(::TDataBinding* enabled);
  private:
  const ::TDataBinding& _internal_enabled() const;
  ::TDataBinding* _internal_mutable_enabled();
  public:
  void unsafe_arena_set_allocated_enabled(
      ::TDataBinding* enabled);
  ::TDataBinding* unsafe_arena_release_enabled();

  // @@protoc_insertion_point(class_scope:HmiWidget.TNodeProperties.TRenderPassName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* name_;
    ::TDataBinding* enabled_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TNodeProperties_TBoundingVolume_TBoundingBox final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox) */ {
 public:
  inline TNodeProperties_TBoundingVolume_TBoundingBox() : TNodeProperties_TBoundingVolume_TBoundingBox(nullptr) {}
  ~TNodeProperties_TBoundingVolume_TBoundingBox() override;
  explicit PROTOBUF_CONSTEXPR TNodeProperties_TBoundingVolume_TBoundingBox(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TNodeProperties_TBoundingVolume_TBoundingBox(const TNodeProperties_TBoundingVolume_TBoundingBox& from);
  TNodeProperties_TBoundingVolume_TBoundingBox(TNodeProperties_TBoundingVolume_TBoundingBox&& from) noexcept
    : TNodeProperties_TBoundingVolume_TBoundingBox() {
    *this = ::std::move(from);
  }

  inline TNodeProperties_TBoundingVolume_TBoundingBox& operator=(const TNodeProperties_TBoundingVolume_TBoundingBox& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNodeProperties_TBoundingVolume_TBoundingBox& operator=(TNodeProperties_TBoundingVolume_TBoundingBox&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TNodeProperties_TBoundingVolume_TBoundingBox& default_instance() {
    return *internal_default_instance();
  }
  static inline const TNodeProperties_TBoundingVolume_TBoundingBox* internal_default_instance() {
    return reinterpret_cast<const TNodeProperties_TBoundingVolume_TBoundingBox*>(
               &_TNodeProperties_TBoundingVolume_TBoundingBox_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(TNodeProperties_TBoundingVolume_TBoundingBox& a, TNodeProperties_TBoundingVolume_TBoundingBox& b) {
    a.Swap(&b);
  }
  inline void Swap(TNodeProperties_TBoundingVolume_TBoundingBox* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNodeProperties_TBoundingVolume_TBoundingBox* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TNodeProperties_TBoundingVolume_TBoundingBox* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TNodeProperties_TBoundingVolume_TBoundingBox>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TNodeProperties_TBoundingVolume_TBoundingBox& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TNodeProperties_TBoundingVolume_TBoundingBox& from) {
    TNodeProperties_TBoundingVolume_TBoundingBox::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNodeProperties_TBoundingVolume_TBoundingBox* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox";
  }
  protected:
  explicit TNodeProperties_TBoundingVolume_TBoundingBox(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kMinBoundFieldNumber = 1,
    kMaxBoundFieldNumber = 2,
  };
  // optional .TDataBinding minBound = 1;
  bool has_minbound() const;
  private:
  bool _internal_has_minbound() const;
  public:
  void clear_minbound();
  const ::TDataBinding& minbound() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_minbound();
  ::TDataBinding* mutable_minbound();
  void set_allocated_minbound(::TDataBinding* minbound);
  private:
  const ::TDataBinding& _internal_minbound() const;
  ::TDataBinding* _internal_mutable_minbound();
  public:
  void unsafe_arena_set_allocated_minbound(
      ::TDataBinding* minbound);
  ::TDataBinding* unsafe_arena_release_minbound();

  // optional .TDataBinding maxBound = 2;
  bool has_maxbound() const;
  private:
  bool _internal_has_maxbound() const;
  public:
  void clear_maxbound();
  const ::TDataBinding& maxbound() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_maxbound();
  ::TDataBinding* mutable_maxbound();
  void set_allocated_maxbound(::TDataBinding* maxbound);
  private:
  const ::TDataBinding& _internal_maxbound() const;
  ::TDataBinding* _internal_mutable_maxbound();
  public:
  void unsafe_arena_set_allocated_maxbound(
      ::TDataBinding* maxbound);
  ::TDataBinding* unsafe_arena_release_maxbound();

  // @@protoc_insertion_point(class_scope:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* minbound_;
    ::TDataBinding* maxbound_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TNodeProperties_TBoundingVolume_TBoundingSphere final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere) */ {
 public:
  inline TNodeProperties_TBoundingVolume_TBoundingSphere() : TNodeProperties_TBoundingVolume_TBoundingSphere(nullptr) {}
  ~TNodeProperties_TBoundingVolume_TBoundingSphere() override;
  explicit PROTOBUF_CONSTEXPR TNodeProperties_TBoundingVolume_TBoundingSphere(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TNodeProperties_TBoundingVolume_TBoundingSphere(const TNodeProperties_TBoundingVolume_TBoundingSphere& from);
  TNodeProperties_TBoundingVolume_TBoundingSphere(TNodeProperties_TBoundingVolume_TBoundingSphere&& from) noexcept
    : TNodeProperties_TBoundingVolume_TBoundingSphere() {
    *this = ::std::move(from);
  }

  inline TNodeProperties_TBoundingVolume_TBoundingSphere& operator=(const TNodeProperties_TBoundingVolume_TBoundingSphere& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNodeProperties_TBoundingVolume_TBoundingSphere& operator=(TNodeProperties_TBoundingVolume_TBoundingSphere&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TNodeProperties_TBoundingVolume_TBoundingSphere& default_instance() {
    return *internal_default_instance();
  }
  static inline const TNodeProperties_TBoundingVolume_TBoundingSphere* internal_default_instance() {
    return reinterpret_cast<const TNodeProperties_TBoundingVolume_TBoundingSphere*>(
               &_TNodeProperties_TBoundingVolume_TBoundingSphere_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(TNodeProperties_TBoundingVolume_TBoundingSphere& a, TNodeProperties_TBoundingVolume_TBoundingSphere& b) {
    a.Swap(&b);
  }
  inline void Swap(TNodeProperties_TBoundingVolume_TBoundingSphere* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNodeProperties_TBoundingVolume_TBoundingSphere* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TNodeProperties_TBoundingVolume_TBoundingSphere* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TNodeProperties_TBoundingVolume_TBoundingSphere>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TNodeProperties_TBoundingVolume_TBoundingSphere& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TNodeProperties_TBoundingVolume_TBoundingSphere& from) {
    TNodeProperties_TBoundingVolume_TBoundingSphere::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNodeProperties_TBoundingVolume_TBoundingSphere* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere";
  }
  protected:
  explicit TNodeProperties_TBoundingVolume_TBoundingSphere(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCenterPositionFieldNumber = 1,
    kRadiusFieldNumber = 2,
  };
  // optional .TDataBinding centerPosition = 1;
  bool has_centerposition() const;
  private:
  bool _internal_has_centerposition() const;
  public:
  void clear_centerposition();
  const ::TDataBinding& centerposition() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_centerposition();
  ::TDataBinding* mutable_centerposition();
  void set_allocated_centerposition(::TDataBinding* centerposition);
  private:
  const ::TDataBinding& _internal_centerposition() const;
  ::TDataBinding* _internal_mutable_centerposition();
  public:
  void unsafe_arena_set_allocated_centerposition(
      ::TDataBinding* centerposition);
  ::TDataBinding* unsafe_arena_release_centerposition();

  // optional .TDataBinding radius = 2;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  const ::TDataBinding& radius() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_radius();
  ::TDataBinding* mutable_radius();
  void set_allocated_radius(::TDataBinding* radius);
  private:
  const ::TDataBinding& _internal_radius() const;
  ::TDataBinding* _internal_mutable_radius();
  public:
  void unsafe_arena_set_allocated_radius(
      ::TDataBinding* radius);
  ::TDataBinding* unsafe_arena_release_radius();

  // @@protoc_insertion_point(class_scope:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* centerposition_;
    ::TDataBinding* radius_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TNodeProperties_TBoundingVolume final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TNodeProperties.TBoundingVolume) */ {
 public:
  inline TNodeProperties_TBoundingVolume() : TNodeProperties_TBoundingVolume(nullptr) {}
  ~TNodeProperties_TBoundingVolume() override;
  explicit PROTOBUF_CONSTEXPR TNodeProperties_TBoundingVolume(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TNodeProperties_TBoundingVolume(const TNodeProperties_TBoundingVolume& from);
  TNodeProperties_TBoundingVolume(TNodeProperties_TBoundingVolume&& from) noexcept
    : TNodeProperties_TBoundingVolume() {
    *this = ::std::move(from);
  }

  inline TNodeProperties_TBoundingVolume& operator=(const TNodeProperties_TBoundingVolume& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNodeProperties_TBoundingVolume& operator=(TNodeProperties_TBoundingVolume&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TNodeProperties_TBoundingVolume& default_instance() {
    return *internal_default_instance();
  }
  static inline const TNodeProperties_TBoundingVolume* internal_default_instance() {
    return reinterpret_cast<const TNodeProperties_TBoundingVolume*>(
               &_TNodeProperties_TBoundingVolume_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(TNodeProperties_TBoundingVolume& a, TNodeProperties_TBoundingVolume& b) {
    a.Swap(&b);
  }
  inline void Swap(TNodeProperties_TBoundingVolume* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNodeProperties_TBoundingVolume* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TNodeProperties_TBoundingVolume* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TNodeProperties_TBoundingVolume>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TNodeProperties_TBoundingVolume& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TNodeProperties_TBoundingVolume& from) {
    TNodeProperties_TBoundingVolume::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNodeProperties_TBoundingVolume* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TNodeProperties.TBoundingVolume";
  }
  protected:
  explicit TNodeProperties_TBoundingVolume(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TNodeProperties_TBoundingVolume_TBoundingBox TBoundingBox;
  typedef TNodeProperties_TBoundingVolume_TBoundingSphere TBoundingSphere;

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kBoundingSphereFieldNumber = 2,
  };
  // optional .HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox& boundingbox() const;
  PROTOBUF_NODISCARD ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* release_boundingbox();
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* mutable_boundingbox();
  void set_allocated_boundingbox(::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* boundingbox);
  private:
  const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox& _internal_boundingbox() const;
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* boundingbox);
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* unsafe_arena_release_boundingbox();

  // optional .HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere boundingSphere = 2;
  bool has_boundingsphere() const;
  private:
  bool _internal_has_boundingsphere() const;
  public:
  void clear_boundingsphere();
  const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere& boundingsphere() const;
  PROTOBUF_NODISCARD ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* release_boundingsphere();
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* mutable_boundingsphere();
  void set_allocated_boundingsphere(::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* boundingsphere);
  private:
  const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere& _internal_boundingsphere() const;
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* _internal_mutable_boundingsphere();
  public:
  void unsafe_arena_set_allocated_boundingsphere(
      ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* boundingsphere);
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* unsafe_arena_release_boundingsphere();

  // @@protoc_insertion_point(class_scope:HmiWidget.TNodeProperties.TBoundingVolume)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* boundingbox_;
    ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* boundingsphere_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TNodeProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TNodeProperties) */ {
 public:
  inline TNodeProperties() : TNodeProperties(nullptr) {}
  ~TNodeProperties() override;
  explicit PROTOBUF_CONSTEXPR TNodeProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TNodeProperties(const TNodeProperties& from);
  TNodeProperties(TNodeProperties&& from) noexcept
    : TNodeProperties() {
    *this = ::std::move(from);
  }

  inline TNodeProperties& operator=(const TNodeProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline TNodeProperties& operator=(TNodeProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TNodeProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const TNodeProperties* internal_default_instance() {
    return reinterpret_cast<const TNodeProperties*>(
               &_TNodeProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(TNodeProperties& a, TNodeProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(TNodeProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TNodeProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TNodeProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TNodeProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TNodeProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TNodeProperties& from) {
    TNodeProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TNodeProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TNodeProperties";
  }
  protected:
  explicit TNodeProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TNodeProperties_TRenderPassName TRenderPassName;
  typedef TNodeProperties_TBoundingVolume TBoundingVolume;

  // accessors -------------------------------------------------------

  enum : int {
    kRenderPassNameEXTFieldNumber = 9,
    kRenderPassEnabledEXTFieldNumber = 11,
    kVisibleFieldNumber = 1,
    kRenderOrderRankFieldNumber = 2,
    kChildSortOrderRankFieldNumber = 3,
    kScopeMaskFieldNumber = 4,
    kRenderOrderBinFieldNumber = 5,
    kMaterialFieldNumber = 6,
    kRenderPassNameFieldNumber = 7,
    kRenderPassEnabledFieldNumber = 8,
    kBoundingVolumeFieldNumber = 10,
  };
  // repeated .HmiWidget.TNodeProperties.TRenderPassName renderPassNameEXT = 9;
  int renderpassnameext_size() const;
  private:
  int _internal_renderpassnameext_size() const;
  public:
  void clear_renderpassnameext();
  ::HmiWidget::TNodeProperties_TRenderPassName* mutable_renderpassnameext(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >*
      mutable_renderpassnameext();
  private:
  const ::HmiWidget::TNodeProperties_TRenderPassName& _internal_renderpassnameext(int index) const;
  ::HmiWidget::TNodeProperties_TRenderPassName* _internal_add_renderpassnameext();
  public:
  const ::HmiWidget::TNodeProperties_TRenderPassName& renderpassnameext(int index) const;
  ::HmiWidget::TNodeProperties_TRenderPassName* add_renderpassnameext();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >&
      renderpassnameext() const;

  // repeated .HmiWidget.TNodeProperties.TRenderPassName renderPassEnabledEXT = 11;
  int renderpassenabledext_size() const;
  private:
  int _internal_renderpassenabledext_size() const;
  public:
  void clear_renderpassenabledext();
  ::HmiWidget::TNodeProperties_TRenderPassName* mutable_renderpassenabledext(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >*
      mutable_renderpassenabledext();
  private:
  const ::HmiWidget::TNodeProperties_TRenderPassName& _internal_renderpassenabledext(int index) const;
  ::HmiWidget::TNodeProperties_TRenderPassName* _internal_add_renderpassenabledext();
  public:
  const ::HmiWidget::TNodeProperties_TRenderPassName& renderpassenabledext(int index) const;
  ::HmiWidget::TNodeProperties_TRenderPassName* add_renderpassenabledext();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >&
      renderpassenabledext() const;

  // optional .TDataBinding visible = 1;
  bool has_visible() const;
  private:
  bool _internal_has_visible() const;
  public:
  void clear_visible();
  const ::TDataBinding& visible() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_visible();
  ::TDataBinding* mutable_visible();
  void set_allocated_visible(::TDataBinding* visible);
  private:
  const ::TDataBinding& _internal_visible() const;
  ::TDataBinding* _internal_mutable_visible();
  public:
  void unsafe_arena_set_allocated_visible(
      ::TDataBinding* visible);
  ::TDataBinding* unsafe_arena_release_visible();

  // optional .TDataBinding renderOrderRank = 2;
  bool has_renderorderrank() const;
  private:
  bool _internal_has_renderorderrank() const;
  public:
  void clear_renderorderrank();
  const ::TDataBinding& renderorderrank() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_renderorderrank();
  ::TDataBinding* mutable_renderorderrank();
  void set_allocated_renderorderrank(::TDataBinding* renderorderrank);
  private:
  const ::TDataBinding& _internal_renderorderrank() const;
  ::TDataBinding* _internal_mutable_renderorderrank();
  public:
  void unsafe_arena_set_allocated_renderorderrank(
      ::TDataBinding* renderorderrank);
  ::TDataBinding* unsafe_arena_release_renderorderrank();

  // optional .TDataBinding childSortOrderRank = 3;
  bool has_childsortorderrank() const;
  private:
  bool _internal_has_childsortorderrank() const;
  public:
  void clear_childsortorderrank();
  const ::TDataBinding& childsortorderrank() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_childsortorderrank();
  ::TDataBinding* mutable_childsortorderrank();
  void set_allocated_childsortorderrank(::TDataBinding* childsortorderrank);
  private:
  const ::TDataBinding& _internal_childsortorderrank() const;
  ::TDataBinding* _internal_mutable_childsortorderrank();
  public:
  void unsafe_arena_set_allocated_childsortorderrank(
      ::TDataBinding* childsortorderrank);
  ::TDataBinding* unsafe_arena_release_childsortorderrank();

  // optional .TDataBinding scopeMask = 4 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_scopemask() const;
  private:
  bool _internal_has_scopemask() const;
  public:
  PROTOBUF_DEPRECATED void clear_scopemask();
  PROTOBUF_DEPRECATED const ::TDataBinding& scopemask() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::TDataBinding* release_scopemask();
  PROTOBUF_DEPRECATED ::TDataBinding* mutable_scopemask();
  PROTOBUF_DEPRECATED void set_allocated_scopemask(::TDataBinding* scopemask);
  private:
  const ::TDataBinding& _internal_scopemask() const;
  ::TDataBinding* _internal_mutable_scopemask();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_scopemask(
      ::TDataBinding* scopemask);
  PROTOBUF_DEPRECATED ::TDataBinding* unsafe_arena_release_scopemask();

  // optional .TDataBinding renderOrderBin = 5;
  bool has_renderorderbin() const;
  private:
  bool _internal_has_renderorderbin() const;
  public:
  void clear_renderorderbin();
  const ::TDataBinding& renderorderbin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_renderorderbin();
  ::TDataBinding* mutable_renderorderbin();
  void set_allocated_renderorderbin(::TDataBinding* renderorderbin);
  private:
  const ::TDataBinding& _internal_renderorderbin() const;
  ::TDataBinding* _internal_mutable_renderorderbin();
  public:
  void unsafe_arena_set_allocated_renderorderbin(
      ::TDataBinding* renderorderbin);
  ::TDataBinding* unsafe_arena_release_renderorderbin();

  // optional .TDataBinding material = 6;
  bool has_material() const;
  private:
  bool _internal_has_material() const;
  public:
  void clear_material();
  const ::TDataBinding& material() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_material();
  ::TDataBinding* mutable_material();
  void set_allocated_material(::TDataBinding* material);
  private:
  const ::TDataBinding& _internal_material() const;
  ::TDataBinding* _internal_mutable_material();
  public:
  void unsafe_arena_set_allocated_material(
      ::TDataBinding* material);
  ::TDataBinding* unsafe_arena_release_material();

  // optional .TDataBinding renderPassName = 7 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_renderpassname() const;
  private:
  bool _internal_has_renderpassname() const;
  public:
  PROTOBUF_DEPRECATED void clear_renderpassname();
  PROTOBUF_DEPRECATED const ::TDataBinding& renderpassname() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::TDataBinding* release_renderpassname();
  PROTOBUF_DEPRECATED ::TDataBinding* mutable_renderpassname();
  PROTOBUF_DEPRECATED void set_allocated_renderpassname(::TDataBinding* renderpassname);
  private:
  const ::TDataBinding& _internal_renderpassname() const;
  ::TDataBinding* _internal_mutable_renderpassname();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_renderpassname(
      ::TDataBinding* renderpassname);
  PROTOBUF_DEPRECATED ::TDataBinding* unsafe_arena_release_renderpassname();

  // optional .TDataBinding renderPassEnabled = 8 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_renderpassenabled() const;
  private:
  bool _internal_has_renderpassenabled() const;
  public:
  PROTOBUF_DEPRECATED void clear_renderpassenabled();
  PROTOBUF_DEPRECATED const ::TDataBinding& renderpassenabled() const;
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED ::TDataBinding* release_renderpassenabled();
  PROTOBUF_DEPRECATED ::TDataBinding* mutable_renderpassenabled();
  PROTOBUF_DEPRECATED void set_allocated_renderpassenabled(::TDataBinding* renderpassenabled);
  private:
  const ::TDataBinding& _internal_renderpassenabled() const;
  ::TDataBinding* _internal_mutable_renderpassenabled();
  public:
  PROTOBUF_DEPRECATED void unsafe_arena_set_allocated_renderpassenabled(
      ::TDataBinding* renderpassenabled);
  PROTOBUF_DEPRECATED ::TDataBinding* unsafe_arena_release_renderpassenabled();

  // optional .HmiWidget.TNodeProperties.TBoundingVolume boundingVolume = 10;
  bool has_boundingvolume() const;
  private:
  bool _internal_has_boundingvolume() const;
  public:
  void clear_boundingvolume();
  const ::HmiWidget::TNodeProperties_TBoundingVolume& boundingvolume() const;
  PROTOBUF_NODISCARD ::HmiWidget::TNodeProperties_TBoundingVolume* release_boundingvolume();
  ::HmiWidget::TNodeProperties_TBoundingVolume* mutable_boundingvolume();
  void set_allocated_boundingvolume(::HmiWidget::TNodeProperties_TBoundingVolume* boundingvolume);
  private:
  const ::HmiWidget::TNodeProperties_TBoundingVolume& _internal_boundingvolume() const;
  ::HmiWidget::TNodeProperties_TBoundingVolume* _internal_mutable_boundingvolume();
  public:
  void unsafe_arena_set_allocated_boundingvolume(
      ::HmiWidget::TNodeProperties_TBoundingVolume* boundingvolume);
  ::HmiWidget::TNodeProperties_TBoundingVolume* unsafe_arena_release_boundingvolume();

  // @@protoc_insertion_point(class_scope:HmiWidget.TNodeProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName > renderpassnameext_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName > renderpassenabledext_;
    ::TDataBinding* visible_;
    ::TDataBinding* renderorderrank_;
    ::TDataBinding* childsortorderrank_;
    ::TDataBinding* scopemask_;
    ::TDataBinding* renderorderbin_;
    ::TDataBinding* material_;
    ::TDataBinding* renderpassname_;
    ::TDataBinding* renderpassenabled_;
    ::HmiWidget::TNodeProperties_TBoundingVolume* boundingvolume_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TTextNodeProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TTextNodeProperties) */ {
 public:
  inline TTextNodeProperties() : TTextNodeProperties(nullptr) {}
  ~TTextNodeProperties() override;
  explicit PROTOBUF_CONSTEXPR TTextNodeProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TTextNodeProperties(const TTextNodeProperties& from);
  TTextNodeProperties(TTextNodeProperties&& from) noexcept
    : TTextNodeProperties() {
    *this = ::std::move(from);
  }

  inline TTextNodeProperties& operator=(const TTextNodeProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTextNodeProperties& operator=(TTextNodeProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TTextNodeProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const TTextNodeProperties* internal_default_instance() {
    return reinterpret_cast<const TTextNodeProperties*>(
               &_TTextNodeProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(TTextNodeProperties& a, TTextNodeProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(TTextNodeProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTextNodeProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TTextNodeProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TTextNodeProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TTextNodeProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TTextNodeProperties& from) {
    TTextNodeProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTextNodeProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TTextNodeProperties";
  }
  protected:
  explicit TTextNodeProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTextContentFieldNumber = 1,
  };
  // optional .TDataBinding textContent = 1;
  bool has_textcontent() const;
  private:
  bool _internal_has_textcontent() const;
  public:
  void clear_textcontent();
  const ::TDataBinding& textcontent() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_textcontent();
  ::TDataBinding* mutable_textcontent();
  void set_allocated_textcontent(::TDataBinding* textcontent);
  private:
  const ::TDataBinding& _internal_textcontent() const;
  ::TDataBinding* _internal_mutable_textcontent();
  public:
  void unsafe_arena_set_allocated_textcontent(
      ::TDataBinding* textcontent);
  ::TDataBinding* unsafe_arena_release_textcontent();

  // @@protoc_insertion_point(class_scope:HmiWidget.TTextNodeProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* textcontent_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCameraNodeProperties final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCameraNodeProperties) */ {
 public:
  inline TCameraNodeProperties() : TCameraNodeProperties(nullptr) {}
  ~TCameraNodeProperties() override;
  explicit PROTOBUF_CONSTEXPR TCameraNodeProperties(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCameraNodeProperties(const TCameraNodeProperties& from);
  TCameraNodeProperties(TCameraNodeProperties&& from) noexcept
    : TCameraNodeProperties() {
    *this = ::std::move(from);
  }

  inline TCameraNodeProperties& operator=(const TCameraNodeProperties& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCameraNodeProperties& operator=(TCameraNodeProperties&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCameraNodeProperties& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCameraNodeProperties* internal_default_instance() {
    return reinterpret_cast<const TCameraNodeProperties*>(
               &_TCameraNodeProperties_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(TCameraNodeProperties& a, TCameraNodeProperties& b) {
    a.Swap(&b);
  }
  inline void Swap(TCameraNodeProperties* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCameraNodeProperties* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCameraNodeProperties* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCameraNodeProperties>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCameraNodeProperties& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCameraNodeProperties& from) {
    TCameraNodeProperties::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCameraNodeProperties* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCameraNodeProperties";
  }
  protected:
  explicit TCameraNodeProperties(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kProjectionTypeFieldNumber = 1,
    kHorizontalFOVFieldNumber = 2,
    kAspectRatioFieldNumber = 3,
    kHorizontalFocalLengthFieldNumber = 4,
    kViewportFieldNumber = 5,
    kNearPlaneFieldNumber = 6,
    kFarPlaneFieldNumber = 7,
    kRightPlaneFieldNumber = 8,
    kLeftPlaneFieldNumber = 9,
    kTopPlaneFieldNumber = 10,
    kBottomPlaneFieldNumber = 11,
  };
  // optional .TDataBinding projectionType = 1;
  bool has_projectiontype() const;
  private:
  bool _internal_has_projectiontype() const;
  public:
  void clear_projectiontype();
  const ::TDataBinding& projectiontype() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_projectiontype();
  ::TDataBinding* mutable_projectiontype();
  void set_allocated_projectiontype(::TDataBinding* projectiontype);
  private:
  const ::TDataBinding& _internal_projectiontype() const;
  ::TDataBinding* _internal_mutable_projectiontype();
  public:
  void unsafe_arena_set_allocated_projectiontype(
      ::TDataBinding* projectiontype);
  ::TDataBinding* unsafe_arena_release_projectiontype();

  // optional .TDataBinding horizontalFOV = 2;
  bool has_horizontalfov() const;
  private:
  bool _internal_has_horizontalfov() const;
  public:
  void clear_horizontalfov();
  const ::TDataBinding& horizontalfov() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_horizontalfov();
  ::TDataBinding* mutable_horizontalfov();
  void set_allocated_horizontalfov(::TDataBinding* horizontalfov);
  private:
  const ::TDataBinding& _internal_horizontalfov() const;
  ::TDataBinding* _internal_mutable_horizontalfov();
  public:
  void unsafe_arena_set_allocated_horizontalfov(
      ::TDataBinding* horizontalfov);
  ::TDataBinding* unsafe_arena_release_horizontalfov();

  // optional .TDataBinding aspectRatio = 3;
  bool has_aspectratio() const;
  private:
  bool _internal_has_aspectratio() const;
  public:
  void clear_aspectratio();
  const ::TDataBinding& aspectratio() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_aspectratio();
  ::TDataBinding* mutable_aspectratio();
  void set_allocated_aspectratio(::TDataBinding* aspectratio);
  private:
  const ::TDataBinding& _internal_aspectratio() const;
  ::TDataBinding* _internal_mutable_aspectratio();
  public:
  void unsafe_arena_set_allocated_aspectratio(
      ::TDataBinding* aspectratio);
  ::TDataBinding* unsafe_arena_release_aspectratio();

  // optional .TDataBinding horizontalFocalLength = 4;
  bool has_horizontalfocallength() const;
  private:
  bool _internal_has_horizontalfocallength() const;
  public:
  void clear_horizontalfocallength();
  const ::TDataBinding& horizontalfocallength() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_horizontalfocallength();
  ::TDataBinding* mutable_horizontalfocallength();
  void set_allocated_horizontalfocallength(::TDataBinding* horizontalfocallength);
  private:
  const ::TDataBinding& _internal_horizontalfocallength() const;
  ::TDataBinding* _internal_mutable_horizontalfocallength();
  public:
  void unsafe_arena_set_allocated_horizontalfocallength(
      ::TDataBinding* horizontalfocallength);
  ::TDataBinding* unsafe_arena_release_horizontalfocallength();

  // optional .TDataBinding viewport = 5;
  bool has_viewport() const;
  private:
  bool _internal_has_viewport() const;
  public:
  void clear_viewport();
  const ::TDataBinding& viewport() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_viewport();
  ::TDataBinding* mutable_viewport();
  void set_allocated_viewport(::TDataBinding* viewport);
  private:
  const ::TDataBinding& _internal_viewport() const;
  ::TDataBinding* _internal_mutable_viewport();
  public:
  void unsafe_arena_set_allocated_viewport(
      ::TDataBinding* viewport);
  ::TDataBinding* unsafe_arena_release_viewport();

  // optional .TDataBinding nearPlane = 6;
  bool has_nearplane() const;
  private:
  bool _internal_has_nearplane() const;
  public:
  void clear_nearplane();
  const ::TDataBinding& nearplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_nearplane();
  ::TDataBinding* mutable_nearplane();
  void set_allocated_nearplane(::TDataBinding* nearplane);
  private:
  const ::TDataBinding& _internal_nearplane() const;
  ::TDataBinding* _internal_mutable_nearplane();
  public:
  void unsafe_arena_set_allocated_nearplane(
      ::TDataBinding* nearplane);
  ::TDataBinding* unsafe_arena_release_nearplane();

  // optional .TDataBinding farPlane = 7;
  bool has_farplane() const;
  private:
  bool _internal_has_farplane() const;
  public:
  void clear_farplane();
  const ::TDataBinding& farplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_farplane();
  ::TDataBinding* mutable_farplane();
  void set_allocated_farplane(::TDataBinding* farplane);
  private:
  const ::TDataBinding& _internal_farplane() const;
  ::TDataBinding* _internal_mutable_farplane();
  public:
  void unsafe_arena_set_allocated_farplane(
      ::TDataBinding* farplane);
  ::TDataBinding* unsafe_arena_release_farplane();

  // optional .TDataBinding rightPlane = 8;
  bool has_rightplane() const;
  private:
  bool _internal_has_rightplane() const;
  public:
  void clear_rightplane();
  const ::TDataBinding& rightplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightplane();
  ::TDataBinding* mutable_rightplane();
  void set_allocated_rightplane(::TDataBinding* rightplane);
  private:
  const ::TDataBinding& _internal_rightplane() const;
  ::TDataBinding* _internal_mutable_rightplane();
  public:
  void unsafe_arena_set_allocated_rightplane(
      ::TDataBinding* rightplane);
  ::TDataBinding* unsafe_arena_release_rightplane();

  // optional .TDataBinding leftPlane = 9;
  bool has_leftplane() const;
  private:
  bool _internal_has_leftplane() const;
  public:
  void clear_leftplane();
  const ::TDataBinding& leftplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftplane();
  ::TDataBinding* mutable_leftplane();
  void set_allocated_leftplane(::TDataBinding* leftplane);
  private:
  const ::TDataBinding& _internal_leftplane() const;
  ::TDataBinding* _internal_mutable_leftplane();
  public:
  void unsafe_arena_set_allocated_leftplane(
      ::TDataBinding* leftplane);
  ::TDataBinding* unsafe_arena_release_leftplane();

  // optional .TDataBinding topPlane = 10;
  bool has_topplane() const;
  private:
  bool _internal_has_topplane() const;
  public:
  void clear_topplane();
  const ::TDataBinding& topplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topplane();
  ::TDataBinding* mutable_topplane();
  void set_allocated_topplane(::TDataBinding* topplane);
  private:
  const ::TDataBinding& _internal_topplane() const;
  ::TDataBinding* _internal_mutable_topplane();
  public:
  void unsafe_arena_set_allocated_topplane(
      ::TDataBinding* topplane);
  ::TDataBinding* unsafe_arena_release_topplane();

  // optional .TDataBinding bottomPlane = 11;
  bool has_bottomplane() const;
  private:
  bool _internal_has_bottomplane() const;
  public:
  void clear_bottomplane();
  const ::TDataBinding& bottomplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottomplane();
  ::TDataBinding* mutable_bottomplane();
  void set_allocated_bottomplane(::TDataBinding* bottomplane);
  private:
  const ::TDataBinding& _internal_bottomplane() const;
  ::TDataBinding* _internal_mutable_bottomplane();
  public:
  void unsafe_arena_set_allocated_bottomplane(
      ::TDataBinding* bottomplane);
  ::TDataBinding* unsafe_arena_release_bottomplane();

  // @@protoc_insertion_point(class_scope:HmiWidget.TCameraNodeProperties)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* projectiontype_;
    ::TDataBinding* horizontalfov_;
    ::TDataBinding* aspectratio_;
    ::TDataBinding* horizontalfocallength_;
    ::TDataBinding* viewport_;
    ::TDataBinding* nearplane_;
    ::TDataBinding* farplane_;
    ::TDataBinding* rightplane_;
    ::TDataBinding* leftplane_;
    ::TDataBinding* topplane_;
    ::TDataBinding* bottomplane_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TResourceParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TResourceParam) */ {
 public:
  inline TResourceParam() : TResourceParam(nullptr) {}
  ~TResourceParam() override;
  explicit PROTOBUF_CONSTEXPR TResourceParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TResourceParam(const TResourceParam& from);
  TResourceParam(TResourceParam&& from) noexcept
    : TResourceParam() {
    *this = ::std::move(from);
  }

  inline TResourceParam& operator=(const TResourceParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TResourceParam& operator=(TResourceParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TResourceParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TResourceParam* internal_default_instance() {
    return reinterpret_cast<const TResourceParam*>(
               &_TResourceParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(TResourceParam& a, TResourceParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TResourceParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TResourceParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TResourceParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TResourceParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TResourceParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TResourceParam& from) {
    TResourceParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TResourceParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TResourceParam";
  }
  protected:
  explicit TResourceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kResourceFieldNumber = 2,
    kAppearanceFieldNumber = 3,
    kRenderPassFieldNumber = 4,
    kBlitPassFieldNumber = 5,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // optional .TDataBinding resource = 2;
  bool has_resource() const;
  private:
  bool _internal_has_resource() const;
  public:
  void clear_resource();
  const ::TDataBinding& resource() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_resource();
  ::TDataBinding* mutable_resource();
  void set_allocated_resource(::TDataBinding* resource);
  private:
  const ::TDataBinding& _internal_resource() const;
  ::TDataBinding* _internal_mutable_resource();
  public:
  void unsafe_arena_set_allocated_resource(
      ::TDataBinding* resource);
  ::TDataBinding* unsafe_arena_release_resource();

  // optional .HmiWidget.TAppearanceParam appearance = 3;
  bool has_appearance() const;
  private:
  bool _internal_has_appearance() const;
  public:
  void clear_appearance();
  const ::HmiWidget::TAppearanceParam& appearance() const;
  PROTOBUF_NODISCARD ::HmiWidget::TAppearanceParam* release_appearance();
  ::HmiWidget::TAppearanceParam* mutable_appearance();
  void set_allocated_appearance(::HmiWidget::TAppearanceParam* appearance);
  private:
  const ::HmiWidget::TAppearanceParam& _internal_appearance() const;
  ::HmiWidget::TAppearanceParam* _internal_mutable_appearance();
  public:
  void unsafe_arena_set_allocated_appearance(
      ::HmiWidget::TAppearanceParam* appearance);
  ::HmiWidget::TAppearanceParam* unsafe_arena_release_appearance();

  // optional .HmiWidget.TRenderPassParam renderPass = 4;
  bool has_renderpass() const;
  private:
  bool _internal_has_renderpass() const;
  public:
  void clear_renderpass();
  const ::HmiWidget::TRenderPassParam& renderpass() const;
  PROTOBUF_NODISCARD ::HmiWidget::TRenderPassParam* release_renderpass();
  ::HmiWidget::TRenderPassParam* mutable_renderpass();
  void set_allocated_renderpass(::HmiWidget::TRenderPassParam* renderpass);
  private:
  const ::HmiWidget::TRenderPassParam& _internal_renderpass() const;
  ::HmiWidget::TRenderPassParam* _internal_mutable_renderpass();
  public:
  void unsafe_arena_set_allocated_renderpass(
      ::HmiWidget::TRenderPassParam* renderpass);
  ::HmiWidget::TRenderPassParam* unsafe_arena_release_renderpass();

  // optional .HmiWidget.TBlitPassParam blitPass = 5;
  bool has_blitpass() const;
  private:
  bool _internal_has_blitpass() const;
  public:
  void clear_blitpass();
  const ::HmiWidget::TBlitPassParam& blitpass() const;
  PROTOBUF_NODISCARD ::HmiWidget::TBlitPassParam* release_blitpass();
  ::HmiWidget::TBlitPassParam* mutable_blitpass();
  void set_allocated_blitpass(::HmiWidget::TBlitPassParam* blitpass);
  private:
  const ::HmiWidget::TBlitPassParam& _internal_blitpass() const;
  ::HmiWidget::TBlitPassParam* _internal_mutable_blitpass();
  public:
  void unsafe_arena_set_allocated_blitpass(
      ::HmiWidget::TBlitPassParam* blitpass);
  ::HmiWidget::TBlitPassParam* unsafe_arena_release_blitpass();

  // @@protoc_insertion_point(class_scope:HmiWidget.TResourceParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::TDataBinding* resource_;
    ::HmiWidget::TAppearanceParam* appearance_;
    ::HmiWidget::TRenderPassParam* renderpass_;
    ::HmiWidget::TBlitPassParam* blitpass_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TAppearanceParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TAppearanceParam) */ {
 public:
  inline TAppearanceParam() : TAppearanceParam(nullptr) {}
  ~TAppearanceParam() override;
  explicit PROTOBUF_CONSTEXPR TAppearanceParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TAppearanceParam(const TAppearanceParam& from);
  TAppearanceParam(TAppearanceParam&& from) noexcept
    : TAppearanceParam() {
    *this = ::std::move(from);
  }

  inline TAppearanceParam& operator=(const TAppearanceParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAppearanceParam& operator=(TAppearanceParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAppearanceParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TAppearanceParam* internal_default_instance() {
    return reinterpret_cast<const TAppearanceParam*>(
               &_TAppearanceParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(TAppearanceParam& a, TAppearanceParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TAppearanceParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAppearanceParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAppearanceParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TAppearanceParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TAppearanceParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TAppearanceParam& from) {
    TAppearanceParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TAppearanceParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TAppearanceParam";
  }
  protected:
  explicit TAppearanceParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUniformFieldNumber = 1,
  };
  // repeated .HmiWidget.TUniform uniform = 1;
  int uniform_size() const;
  private:
  int _internal_uniform_size() const;
  public:
  void clear_uniform();
  ::HmiWidget::TUniform* mutable_uniform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >*
      mutable_uniform();
  private:
  const ::HmiWidget::TUniform& _internal_uniform(int index) const;
  ::HmiWidget::TUniform* _internal_add_uniform();
  public:
  const ::HmiWidget::TUniform& uniform(int index) const;
  ::HmiWidget::TUniform* add_uniform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >&
      uniform() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TAppearanceParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform > uniform_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TRenderPassParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TRenderPassParam) */ {
 public:
  inline TRenderPassParam() : TRenderPassParam(nullptr) {}
  ~TRenderPassParam() override;
  explicit PROTOBUF_CONSTEXPR TRenderPassParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRenderPassParam(const TRenderPassParam& from);
  TRenderPassParam(TRenderPassParam&& from) noexcept
    : TRenderPassParam() {
    *this = ::std::move(from);
  }

  inline TRenderPassParam& operator=(const TRenderPassParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRenderPassParam& operator=(TRenderPassParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRenderPassParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRenderPassParam* internal_default_instance() {
    return reinterpret_cast<const TRenderPassParam*>(
               &_TRenderPassParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(TRenderPassParam& a, TRenderPassParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TRenderPassParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRenderPassParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRenderPassParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRenderPassParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRenderPassParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRenderPassParam& from) {
    TRenderPassParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRenderPassParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TRenderPassParam";
  }
  protected:
  explicit TRenderPassParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kRenderOrderRankFieldNumber = 2,
    kViewportOffsetFieldNumber = 3,
    kViewportSizeFieldNumber = 4,
  };
  // optional .TDataBinding enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  const ::TDataBinding& enabled() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_enabled();
  ::TDataBinding* mutable_enabled();
  void set_allocated_enabled(::TDataBinding* enabled);
  private:
  const ::TDataBinding& _internal_enabled() const;
  ::TDataBinding* _internal_mutable_enabled();
  public:
  void unsafe_arena_set_allocated_enabled(
      ::TDataBinding* enabled);
  ::TDataBinding* unsafe_arena_release_enabled();

  // optional .TDataBinding renderOrderRank = 2;
  bool has_renderorderrank() const;
  private:
  bool _internal_has_renderorderrank() const;
  public:
  void clear_renderorderrank();
  const ::TDataBinding& renderorderrank() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_renderorderrank();
  ::TDataBinding* mutable_renderorderrank();
  void set_allocated_renderorderrank(::TDataBinding* renderorderrank);
  private:
  const ::TDataBinding& _internal_renderorderrank() const;
  ::TDataBinding* _internal_mutable_renderorderrank();
  public:
  void unsafe_arena_set_allocated_renderorderrank(
      ::TDataBinding* renderorderrank);
  ::TDataBinding* unsafe_arena_release_renderorderrank();

  // optional .TDataBinding viewportOffset = 3;
  bool has_viewportoffset() const;
  private:
  bool _internal_has_viewportoffset() const;
  public:
  void clear_viewportoffset();
  const ::TDataBinding& viewportoffset() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_viewportoffset();
  ::TDataBinding* mutable_viewportoffset();
  void set_allocated_viewportoffset(::TDataBinding* viewportoffset);
  private:
  const ::TDataBinding& _internal_viewportoffset() const;
  ::TDataBinding* _internal_mutable_viewportoffset();
  public:
  void unsafe_arena_set_allocated_viewportoffset(
      ::TDataBinding* viewportoffset);
  ::TDataBinding* unsafe_arena_release_viewportoffset();

  // optional .TDataBinding viewportSize = 4;
  bool has_viewportsize() const;
  private:
  bool _internal_has_viewportsize() const;
  public:
  void clear_viewportsize();
  const ::TDataBinding& viewportsize() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_viewportsize();
  ::TDataBinding* mutable_viewportsize();
  void set_allocated_viewportsize(::TDataBinding* viewportsize);
  private:
  const ::TDataBinding& _internal_viewportsize() const;
  ::TDataBinding* _internal_mutable_viewportsize();
  public:
  void unsafe_arena_set_allocated_viewportsize(
      ::TDataBinding* viewportsize);
  ::TDataBinding* unsafe_arena_release_viewportsize();

  // @@protoc_insertion_point(class_scope:HmiWidget.TRenderPassParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* enabled_;
    ::TDataBinding* renderorderrank_;
    ::TDataBinding* viewportoffset_;
    ::TDataBinding* viewportsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TBlitPassParam final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TBlitPassParam) */ {
 public:
  inline TBlitPassParam() : TBlitPassParam(nullptr) {}
  ~TBlitPassParam() override;
  explicit PROTOBUF_CONSTEXPR TBlitPassParam(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TBlitPassParam(const TBlitPassParam& from);
  TBlitPassParam(TBlitPassParam&& from) noexcept
    : TBlitPassParam() {
    *this = ::std::move(from);
  }

  inline TBlitPassParam& operator=(const TBlitPassParam& from) {
    CopyFrom(from);
    return *this;
  }
  inline TBlitPassParam& operator=(TBlitPassParam&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TBlitPassParam& default_instance() {
    return *internal_default_instance();
  }
  static inline const TBlitPassParam* internal_default_instance() {
    return reinterpret_cast<const TBlitPassParam*>(
               &_TBlitPassParam_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(TBlitPassParam& a, TBlitPassParam& b) {
    a.Swap(&b);
  }
  inline void Swap(TBlitPassParam* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TBlitPassParam* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TBlitPassParam* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TBlitPassParam>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TBlitPassParam& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TBlitPassParam& from) {
    TBlitPassParam::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TBlitPassParam* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TBlitPassParam";
  }
  protected:
  explicit TBlitPassParam(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEnabledFieldNumber = 1,
    kRenderOrderRankFieldNumber = 2,
  };
  // optional .TDataBinding enabled = 1;
  bool has_enabled() const;
  private:
  bool _internal_has_enabled() const;
  public:
  void clear_enabled();
  const ::TDataBinding& enabled() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_enabled();
  ::TDataBinding* mutable_enabled();
  void set_allocated_enabled(::TDataBinding* enabled);
  private:
  const ::TDataBinding& _internal_enabled() const;
  ::TDataBinding* _internal_mutable_enabled();
  public:
  void unsafe_arena_set_allocated_enabled(
      ::TDataBinding* enabled);
  ::TDataBinding* unsafe_arena_release_enabled();

  // optional .TDataBinding renderOrderRank = 2;
  bool has_renderorderrank() const;
  private:
  bool _internal_has_renderorderrank() const;
  public:
  void clear_renderorderrank();
  const ::TDataBinding& renderorderrank() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_renderorderrank();
  ::TDataBinding* mutable_renderorderrank();
  void set_allocated_renderorderrank(::TDataBinding* renderorderrank);
  private:
  const ::TDataBinding& _internal_renderorderrank() const;
  ::TDataBinding* _internal_mutable_renderorderrank();
  public:
  void unsafe_arena_set_allocated_renderorderrank(
      ::TDataBinding* renderorderrank);
  ::TDataBinding* unsafe_arena_release_renderorderrank();

  // @@protoc_insertion_point(class_scope:HmiWidget.TBlitPassParam)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* enabled_;
    ::TDataBinding* renderorderrank_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TDataChangeTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TDataChangeTrigger) */ {
 public:
  inline TDataChangeTrigger() : TDataChangeTrigger(nullptr) {}
  ~TDataChangeTrigger() override;
  explicit PROTOBUF_CONSTEXPR TDataChangeTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDataChangeTrigger(const TDataChangeTrigger& from);
  TDataChangeTrigger(TDataChangeTrigger&& from) noexcept
    : TDataChangeTrigger() {
    *this = ::std::move(from);
  }

  inline TDataChangeTrigger& operator=(const TDataChangeTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDataChangeTrigger& operator=(TDataChangeTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDataChangeTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDataChangeTrigger* internal_default_instance() {
    return reinterpret_cast<const TDataChangeTrigger*>(
               &_TDataChangeTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(TDataChangeTrigger& a, TDataChangeTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(TDataChangeTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDataChangeTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDataChangeTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDataChangeTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDataChangeTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDataChangeTrigger& from) {
    TDataChangeTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDataChangeTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TDataChangeTrigger";
  }
  protected:
  explicit TDataChangeTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueFieldNumber = 1,
    kCommandFieldNumber = 2,
  };
  // repeated .TDataBinding value = 1;
  int value_size() const;
  private:
  int _internal_value_size() const;
  public:
  void clear_value();
  ::TDataBinding* mutable_value(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
      mutable_value();
  private:
  const ::TDataBinding& _internal_value(int index) const;
  ::TDataBinding* _internal_add_value();
  public:
  const ::TDataBinding& value(int index) const;
  ::TDataBinding* add_value();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
      value() const;

  // required .HmiWidget.TCommand command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::HmiWidget::TCommand& command() const;
  PROTOBUF_NODISCARD ::HmiWidget::TCommand* release_command();
  ::HmiWidget::TCommand* mutable_command();
  void set_allocated_command(::HmiWidget::TCommand* command);
  private:
  const ::HmiWidget::TCommand& _internal_command() const;
  ::HmiWidget::TCommand* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::HmiWidget::TCommand* command);
  ::HmiWidget::TCommand* unsafe_arena_release_command();

  // @@protoc_insertion_point(class_scope:HmiWidget.TDataChangeTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding > value_;
    ::HmiWidget::TCommand* command_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TConditionalTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TConditionalTrigger) */ {
 public:
  inline TConditionalTrigger() : TConditionalTrigger(nullptr) {}
  ~TConditionalTrigger() override;
  explicit PROTOBUF_CONSTEXPR TConditionalTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TConditionalTrigger(const TConditionalTrigger& from);
  TConditionalTrigger(TConditionalTrigger&& from) noexcept
    : TConditionalTrigger() {
    *this = ::std::move(from);
  }

  inline TConditionalTrigger& operator=(const TConditionalTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TConditionalTrigger& operator=(TConditionalTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TConditionalTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const TConditionalTrigger* internal_default_instance() {
    return reinterpret_cast<const TConditionalTrigger*>(
               &_TConditionalTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(TConditionalTrigger& a, TConditionalTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(TConditionalTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TConditionalTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TConditionalTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TConditionalTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TConditionalTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TConditionalTrigger& from) {
    TConditionalTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TConditionalTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TConditionalTrigger";
  }
  protected:
  explicit TConditionalTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kConditionFieldNumber = 1,
    kCommandFieldNumber = 2,
    kElseCommandFieldNumber = 3,
    kExecModeFieldNumber = 4,
    kElseCommandOnFallBackOnlyFieldNumber = 5,
  };
  // required .TDataBinding condition = 1;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::TDataBinding& condition() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_condition();
  ::TDataBinding* mutable_condition();
  void set_allocated_condition(::TDataBinding* condition);
  private:
  const ::TDataBinding& _internal_condition() const;
  ::TDataBinding* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::TDataBinding* condition);
  ::TDataBinding* unsafe_arena_release_condition();

  // optional .HmiWidget.TCommand command = 2;
  bool has_command() const;
  private:
  bool _internal_has_command() const;
  public:
  void clear_command();
  const ::HmiWidget::TCommand& command() const;
  PROTOBUF_NODISCARD ::HmiWidget::TCommand* release_command();
  ::HmiWidget::TCommand* mutable_command();
  void set_allocated_command(::HmiWidget::TCommand* command);
  private:
  const ::HmiWidget::TCommand& _internal_command() const;
  ::HmiWidget::TCommand* _internal_mutable_command();
  public:
  void unsafe_arena_set_allocated_command(
      ::HmiWidget::TCommand* command);
  ::HmiWidget::TCommand* unsafe_arena_release_command();

  // optional .HmiWidget.TCommand elseCommand = 3;
  bool has_elsecommand() const;
  private:
  bool _internal_has_elsecommand() const;
  public:
  void clear_elsecommand();
  const ::HmiWidget::TCommand& elsecommand() const;
  PROTOBUF_NODISCARD ::HmiWidget::TCommand* release_elsecommand();
  ::HmiWidget::TCommand* mutable_elsecommand();
  void set_allocated_elsecommand(::HmiWidget::TCommand* elsecommand);
  private:
  const ::HmiWidget::TCommand& _internal_elsecommand() const;
  ::HmiWidget::TCommand* _internal_mutable_elsecommand();
  public:
  void unsafe_arena_set_allocated_elsecommand(
      ::HmiWidget::TCommand* elsecommand);
  ::HmiWidget::TCommand* unsafe_arena_release_elsecommand();

  // optional .HmiWidget.TETriggerExecMode execMode = 4;
  bool has_execmode() const;
  private:
  bool _internal_has_execmode() const;
  public:
  void clear_execmode();
  ::HmiWidget::TETriggerExecMode execmode() const;
  void set_execmode(::HmiWidget::TETriggerExecMode value);
  private:
  ::HmiWidget::TETriggerExecMode _internal_execmode() const;
  void _internal_set_execmode(::HmiWidget::TETriggerExecMode value);
  public:

  // optional bool elseCommandOnFallBackOnly = 5;
  bool has_elsecommandonfallbackonly() const;
  private:
  bool _internal_has_elsecommandonfallbackonly() const;
  public:
  void clear_elsecommandonfallbackonly();
  bool elsecommandonfallbackonly() const;
  void set_elsecommandonfallbackonly(bool value);
  private:
  bool _internal_elsecommandonfallbackonly() const;
  void _internal_set_elsecommandonfallbackonly(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TConditionalTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* condition_;
    ::HmiWidget::TCommand* command_;
    ::HmiWidget::TCommand* elsecommand_;
    int execmode_;
    bool elsecommandonfallbackonly_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TTrigger) */ {
 public:
  inline TTrigger() : TTrigger(nullptr) {}
  ~TTrigger() override;
  explicit PROTOBUF_CONSTEXPR TTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TTrigger(const TTrigger& from);
  TTrigger(TTrigger&& from) noexcept
    : TTrigger() {
    *this = ::std::move(from);
  }

  inline TTrigger& operator=(const TTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTrigger& operator=(TTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const TTrigger* internal_default_instance() {
    return reinterpret_cast<const TTrigger*>(
               &_TTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(TTrigger& a, TTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(TTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TTrigger& from) {
    TTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TTrigger";
  }
  protected:
  explicit TTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kDataChangeTriggerFieldNumber = 3,
    kConditionalTriggerFieldNumber = 4,
    kCategoryFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // optional .HmiWidget.TDataChangeTrigger dataChangeTrigger = 3;
  bool has_datachangetrigger() const;
  private:
  bool _internal_has_datachangetrigger() const;
  public:
  void clear_datachangetrigger();
  const ::HmiWidget::TDataChangeTrigger& datachangetrigger() const;
  PROTOBUF_NODISCARD ::HmiWidget::TDataChangeTrigger* release_datachangetrigger();
  ::HmiWidget::TDataChangeTrigger* mutable_datachangetrigger();
  void set_allocated_datachangetrigger(::HmiWidget::TDataChangeTrigger* datachangetrigger);
  private:
  const ::HmiWidget::TDataChangeTrigger& _internal_datachangetrigger() const;
  ::HmiWidget::TDataChangeTrigger* _internal_mutable_datachangetrigger();
  public:
  void unsafe_arena_set_allocated_datachangetrigger(
      ::HmiWidget::TDataChangeTrigger* datachangetrigger);
  ::HmiWidget::TDataChangeTrigger* unsafe_arena_release_datachangetrigger();

  // optional .HmiWidget.TConditionalTrigger conditionalTrigger = 4;
  bool has_conditionaltrigger() const;
  private:
  bool _internal_has_conditionaltrigger() const;
  public:
  void clear_conditionaltrigger();
  const ::HmiWidget::TConditionalTrigger& conditionaltrigger() const;
  PROTOBUF_NODISCARD ::HmiWidget::TConditionalTrigger* release_conditionaltrigger();
  ::HmiWidget::TConditionalTrigger* mutable_conditionaltrigger();
  void set_allocated_conditionaltrigger(::HmiWidget::TConditionalTrigger* conditionaltrigger);
  private:
  const ::HmiWidget::TConditionalTrigger& _internal_conditionaltrigger() const;
  ::HmiWidget::TConditionalTrigger* _internal_mutable_conditionaltrigger();
  public:
  void unsafe_arena_set_allocated_conditionaltrigger(
      ::HmiWidget::TConditionalTrigger* conditionaltrigger);
  ::HmiWidget::TConditionalTrigger* unsafe_arena_release_conditionaltrigger();

  // optional .HmiWidget.TETriggerCategory category = 2;
  bool has_category() const;
  private:
  bool _internal_has_category() const;
  public:
  void clear_category();
  ::HmiWidget::TETriggerCategory category() const;
  void set_category(::HmiWidget::TETriggerCategory value);
  private:
  ::HmiWidget::TETriggerCategory _internal_category() const;
  void _internal_set_category(::HmiWidget::TETriggerCategory value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TDataChangeTrigger* datachangetrigger_;
    ::HmiWidget::TConditionalTrigger* conditionaltrigger_;
    int category_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TPolyLine final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TPolyLine) */ {
 public:
  inline TPolyLine() : TPolyLine(nullptr) {}
  ~TPolyLine() override;
  explicit PROTOBUF_CONSTEXPR TPolyLine(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TPolyLine(const TPolyLine& from);
  TPolyLine(TPolyLine&& from) noexcept
    : TPolyLine() {
    *this = ::std::move(from);
  }

  inline TPolyLine& operator=(const TPolyLine& from) {
    CopyFrom(from);
    return *this;
  }
  inline TPolyLine& operator=(TPolyLine&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TPolyLine& default_instance() {
    return *internal_default_instance();
  }
  static inline const TPolyLine* internal_default_instance() {
    return reinterpret_cast<const TPolyLine*>(
               &_TPolyLine_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(TPolyLine& a, TPolyLine& b) {
    a.Swap(&b);
  }
  inline void Swap(TPolyLine* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TPolyLine* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TPolyLine* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TPolyLine>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TPolyLine& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TPolyLine& from) {
    TPolyLine::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TPolyLine* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TPolyLine";
  }
  protected:
  explicit TPolyLine(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPointFieldNumber = 1,
    kPointBindingFieldNumber = 2,
  };
  // repeated .TVector3f point = 1;
  int point_size() const;
  private:
  int _internal_point_size() const;
  public:
  void clear_point();
  ::TVector3f* mutable_point(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TVector3f >*
      mutable_point();
  private:
  const ::TVector3f& _internal_point(int index) const;
  ::TVector3f* _internal_add_point();
  public:
  const ::TVector3f& point(int index) const;
  ::TVector3f* add_point();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TVector3f >&
      point() const;

  // repeated .TDataBinding pointBinding = 2;
  int pointbinding_size() const;
  private:
  int _internal_pointbinding_size() const;
  public:
  void clear_pointbinding();
  ::TDataBinding* mutable_pointbinding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
      mutable_pointbinding();
  private:
  const ::TDataBinding& _internal_pointbinding(int index) const;
  ::TDataBinding* _internal_add_pointbinding();
  public:
  const ::TDataBinding& pointbinding(int index) const;
  ::TDataBinding* add_pointbinding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
      pointbinding() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TPolyLine)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TVector3f > point_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding > pointbinding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TInputConfig final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TInputConfig) */ {
 public:
  inline TInputConfig() : TInputConfig(nullptr) {}
  ~TInputConfig() override;
  explicit PROTOBUF_CONSTEXPR TInputConfig(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TInputConfig(const TInputConfig& from);
  TInputConfig(TInputConfig&& from) noexcept
    : TInputConfig() {
    *this = ::std::move(from);
  }

  inline TInputConfig& operator=(const TInputConfig& from) {
    CopyFrom(from);
    return *this;
  }
  inline TInputConfig& operator=(TInputConfig&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TInputConfig& default_instance() {
    return *internal_default_instance();
  }
  static inline const TInputConfig* internal_default_instance() {
    return reinterpret_cast<const TInputConfig*>(
               &_TInputConfig_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(TInputConfig& a, TInputConfig& b) {
    a.Swap(&b);
  }
  inline void Swap(TInputConfig* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TInputConfig* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TInputConfig* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TInputConfig>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TInputConfig& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TInputConfig& from) {
    TInputConfig::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TInputConfig* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TInputConfig";
  }
  protected:
  explicit TInputConfig(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReceiveGestureFieldNumber = 2,
    kIgnoreTouchFieldNumber = 3,
    kReceiveGesturePadFieldNumber = 8,
    kReceiveGestureScreenFieldNumber = 9,
    kTouchVolumeChildIdentifierFieldNumber = 10,
    kTouchAreaPolygonFieldNumber = 15,
    kReceiveDirectInputFieldNumber = 1,
    kPassTouchFieldNumber = 6,
    kAlwaysTouchFieldNumber = 13,
    kDefaultTouchHandledFieldNumber = 11,
    kIgnoreControllerFieldNumber = 12,
    kIgnoreFocusOnTouchFieldNumber = 14,
    kBlockTouchToParentsFieldNumber = 17,
    kSignificantMovementOverwriteFieldNumber = 16,
    kTouchVolumeSourceFieldNumber = 7,
    kTouchScreenTargetDomainFieldNumber = 4,
    kTouchControllerTargetDomainFieldNumber = 5,
  };
  // repeated .TETouchGesture receiveGesture = 2;
  int receivegesture_size() const;
  private:
  int _internal_receivegesture_size() const;
  public:
  void clear_receivegesture();
  private:
  ::TETouchGesture _internal_receivegesture(int index) const;
  void _internal_add_receivegesture(::TETouchGesture value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_receivegesture();
  public:
  ::TETouchGesture receivegesture(int index) const;
  void set_receivegesture(int index, ::TETouchGesture value);
  void add_receivegesture(::TETouchGesture value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& receivegesture() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_receivegesture();

  // repeated .TETouchDevice ignoreTouch = 3;
  int ignoretouch_size() const;
  private:
  int _internal_ignoretouch_size() const;
  public:
  void clear_ignoretouch();
  private:
  ::TETouchDevice _internal_ignoretouch(int index) const;
  void _internal_add_ignoretouch(::TETouchDevice value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_ignoretouch();
  public:
  ::TETouchDevice ignoretouch(int index) const;
  void set_ignoretouch(int index, ::TETouchDevice value);
  void add_ignoretouch(::TETouchDevice value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& ignoretouch() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_ignoretouch();

  // repeated .TETouchGesture receiveGesturePad = 8;
  int receivegesturepad_size() const;
  private:
  int _internal_receivegesturepad_size() const;
  public:
  void clear_receivegesturepad();
  private:
  ::TETouchGesture _internal_receivegesturepad(int index) const;
  void _internal_add_receivegesturepad(::TETouchGesture value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_receivegesturepad();
  public:
  ::TETouchGesture receivegesturepad(int index) const;
  void set_receivegesturepad(int index, ::TETouchGesture value);
  void add_receivegesturepad(::TETouchGesture value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& receivegesturepad() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_receivegesturepad();

  // repeated .TETouchGesture receiveGestureScreen = 9;
  int receivegesturescreen_size() const;
  private:
  int _internal_receivegesturescreen_size() const;
  public:
  void clear_receivegesturescreen();
  private:
  ::TETouchGesture _internal_receivegesturescreen(int index) const;
  void _internal_add_receivegesturescreen(::TETouchGesture value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* _internal_mutable_receivegesturescreen();
  public:
  ::TETouchGesture receivegesturescreen(int index) const;
  void set_receivegesturescreen(int index, ::TETouchGesture value);
  void add_receivegesturescreen(::TETouchGesture value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>& receivegesturescreen() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>* mutable_receivegesturescreen();

  // repeated .TIdentifier touchVolumeChildIdentifier = 10;
  int touchvolumechildidentifier_size() const;
  private:
  int _internal_touchvolumechildidentifier_size() const;
  public:
  void clear_touchvolumechildidentifier();
  ::TIdentifier* mutable_touchvolumechildidentifier(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_touchvolumechildidentifier();
  private:
  const ::TIdentifier& _internal_touchvolumechildidentifier(int index) const;
  ::TIdentifier* _internal_add_touchvolumechildidentifier();
  public:
  const ::TIdentifier& touchvolumechildidentifier(int index) const;
  ::TIdentifier* add_touchvolumechildidentifier();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      touchvolumechildidentifier() const;

  // optional .HmiWidget.TPolyLine touchAreaPolygon = 15;
  bool has_touchareapolygon() const;
  private:
  bool _internal_has_touchareapolygon() const;
  public:
  void clear_touchareapolygon();
  const ::HmiWidget::TPolyLine& touchareapolygon() const;
  PROTOBUF_NODISCARD ::HmiWidget::TPolyLine* release_touchareapolygon();
  ::HmiWidget::TPolyLine* mutable_touchareapolygon();
  void set_allocated_touchareapolygon(::HmiWidget::TPolyLine* touchareapolygon);
  private:
  const ::HmiWidget::TPolyLine& _internal_touchareapolygon() const;
  ::HmiWidget::TPolyLine* _internal_mutable_touchareapolygon();
  public:
  void unsafe_arena_set_allocated_touchareapolygon(
      ::HmiWidget::TPolyLine* touchareapolygon);
  ::HmiWidget::TPolyLine* unsafe_arena_release_touchareapolygon();

  // optional bool receiveDirectInput = 1;
  bool has_receivedirectinput() const;
  private:
  bool _internal_has_receivedirectinput() const;
  public:
  void clear_receivedirectinput();
  bool receivedirectinput() const;
  void set_receivedirectinput(bool value);
  private:
  bool _internal_receivedirectinput() const;
  void _internal_set_receivedirectinput(bool value);
  public:

  // optional bool passTouch = 6;
  bool has_passtouch() const;
  private:
  bool _internal_has_passtouch() const;
  public:
  void clear_passtouch();
  bool passtouch() const;
  void set_passtouch(bool value);
  private:
  bool _internal_passtouch() const;
  void _internal_set_passtouch(bool value);
  public:

  // optional bool alwaysTouch = 13;
  bool has_alwaystouch() const;
  private:
  bool _internal_has_alwaystouch() const;
  public:
  void clear_alwaystouch();
  bool alwaystouch() const;
  void set_alwaystouch(bool value);
  private:
  bool _internal_alwaystouch() const;
  void _internal_set_alwaystouch(bool value);
  public:

  // optional bool defaultTouchHandled = 11;
  bool has_defaulttouchhandled() const;
  private:
  bool _internal_has_defaulttouchhandled() const;
  public:
  void clear_defaulttouchhandled();
  bool defaulttouchhandled() const;
  void set_defaulttouchhandled(bool value);
  private:
  bool _internal_defaulttouchhandled() const;
  void _internal_set_defaulttouchhandled(bool value);
  public:

  // optional bool ignoreController = 12;
  bool has_ignorecontroller() const;
  private:
  bool _internal_has_ignorecontroller() const;
  public:
  void clear_ignorecontroller();
  bool ignorecontroller() const;
  void set_ignorecontroller(bool value);
  private:
  bool _internal_ignorecontroller() const;
  void _internal_set_ignorecontroller(bool value);
  public:

  // optional bool ignoreFocusOnTouch = 14;
  bool has_ignorefocusontouch() const;
  private:
  bool _internal_has_ignorefocusontouch() const;
  public:
  void clear_ignorefocusontouch();
  bool ignorefocusontouch() const;
  void set_ignorefocusontouch(bool value);
  private:
  bool _internal_ignorefocusontouch() const;
  void _internal_set_ignorefocusontouch(bool value);
  public:

  // optional bool blockTouchToParents = 17;
  bool has_blocktouchtoparents() const;
  private:
  bool _internal_has_blocktouchtoparents() const;
  public:
  void clear_blocktouchtoparents();
  bool blocktouchtoparents() const;
  void set_blocktouchtoparents(bool value);
  private:
  bool _internal_blocktouchtoparents() const;
  void _internal_set_blocktouchtoparents(bool value);
  public:

  // optional int32 significantMovementOverwrite = 16;
  bool has_significantmovementoverwrite() const;
  private:
  bool _internal_has_significantmovementoverwrite() const;
  public:
  void clear_significantmovementoverwrite();
  int32_t significantmovementoverwrite() const;
  void set_significantmovementoverwrite(int32_t value);
  private:
  int32_t _internal_significantmovementoverwrite() const;
  void _internal_set_significantmovementoverwrite(int32_t value);
  public:

  // optional .HmiWidget.TETouchVolumeSource touchVolumeSource = 7;
  bool has_touchvolumesource() const;
  private:
  bool _internal_has_touchvolumesource() const;
  public:
  void clear_touchvolumesource();
  ::HmiWidget::TETouchVolumeSource touchvolumesource() const;
  void set_touchvolumesource(::HmiWidget::TETouchVolumeSource value);
  private:
  ::HmiWidget::TETouchVolumeSource _internal_touchvolumesource() const;
  void _internal_set_touchvolumesource(::HmiWidget::TETouchVolumeSource value);
  public:

  // optional .HmiWidget.TETouchTargetDomain touchScreenTargetDomain = 4;
  bool has_touchscreentargetdomain() const;
  private:
  bool _internal_has_touchscreentargetdomain() const;
  public:
  void clear_touchscreentargetdomain();
  ::HmiWidget::TETouchTargetDomain touchscreentargetdomain() const;
  void set_touchscreentargetdomain(::HmiWidget::TETouchTargetDomain value);
  private:
  ::HmiWidget::TETouchTargetDomain _internal_touchscreentargetdomain() const;
  void _internal_set_touchscreentargetdomain(::HmiWidget::TETouchTargetDomain value);
  public:

  // optional .HmiWidget.TETouchTargetDomain touchControllerTargetDomain = 5;
  bool has_touchcontrollertargetdomain() const;
  private:
  bool _internal_has_touchcontrollertargetdomain() const;
  public:
  void clear_touchcontrollertargetdomain();
  ::HmiWidget::TETouchTargetDomain touchcontrollertargetdomain() const;
  void set_touchcontrollertargetdomain(::HmiWidget::TETouchTargetDomain value);
  private:
  ::HmiWidget::TETouchTargetDomain _internal_touchcontrollertargetdomain() const;
  void _internal_set_touchcontrollertargetdomain(::HmiWidget::TETouchTargetDomain value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TInputConfig)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> receivegesture_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> ignoretouch_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> receivegesturepad_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedField<int> receivegesturescreen_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > touchvolumechildidentifier_;
    ::HmiWidget::TPolyLine* touchareapolygon_;
    bool receivedirectinput_;
    bool passtouch_;
    bool alwaystouch_;
    bool defaulttouchhandled_;
    bool ignorecontroller_;
    bool ignorefocusontouch_;
    bool blocktouchtoparents_;
    int32_t significantmovementoverwrite_;
    int touchvolumesource_;
    int touchscreentargetdomain_;
    int touchcontrollertargetdomain_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TImportDefinition final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TImportDefinition) */ {
 public:
  inline TImportDefinition() : TImportDefinition(nullptr) {}
  ~TImportDefinition() override;
  explicit PROTOBUF_CONSTEXPR TImportDefinition(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TImportDefinition(const TImportDefinition& from);
  TImportDefinition(TImportDefinition&& from) noexcept
    : TImportDefinition() {
    *this = ::std::move(from);
  }

  inline TImportDefinition& operator=(const TImportDefinition& from) {
    CopyFrom(from);
    return *this;
  }
  inline TImportDefinition& operator=(TImportDefinition&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TImportDefinition& default_instance() {
    return *internal_default_instance();
  }
  static inline const TImportDefinition* internal_default_instance() {
    return reinterpret_cast<const TImportDefinition*>(
               &_TImportDefinition_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(TImportDefinition& a, TImportDefinition& b) {
    a.Swap(&b);
  }
  inline void Swap(TImportDefinition* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TImportDefinition* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TImportDefinition* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TImportDefinition>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TImportDefinition& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TImportDefinition& from) {
    TImportDefinition::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TImportDefinition* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TImportDefinition";
  }
  protected:
  explicit TImportDefinition(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseImportFieldNumber = 10,
    kChildFieldNumber = 20,
    kExternalModelValueFieldNumber = 21,
    kInternalModelValueFieldNumber = 22,
    kNodeParamFieldNumber = 24,
    kSlotFieldNumber = 25,
    kLayoutFieldNumber = 26,
    kScriptFieldNumber = 27,
    kTriggeredSlotFieldNumber = 28,
    kCompositeAnimationFieldNumber = 30,
    kTriggerFieldNumber = 31,
    kCurveFieldNumber = 34,
    kAddModelBindingsToChildFieldNumber = 37,
    kResourceParamFieldNumber = 38,
    kModelbindingFieldNumber = 100,
    kUniformFieldNumber = 200,
    kIdentifierFieldNumber = 1,
    kForwardSignalsFieldNumber = 32,
    kInputFieldNumber = 33,
    kRequestLayoutFieldNumber = 35,
    kDefaultChildModelBindingsFieldNumber = 36,
    kTransformFieldNumber = 201,
    kRenderLayerPropertiesFieldNumber = 202,
    kNodePropertiesFieldNumber = 203,
    kCameraNodePropertiesFieldNumber = 204,
    kWidgetAnimationFieldNumber = 300,
  };
  // repeated .TIdentifier useImport = 10;
  int useimport_size() const;
  private:
  int _internal_useimport_size() const;
  public:
  void clear_useimport();
  ::TIdentifier* mutable_useimport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_useimport();
  private:
  const ::TIdentifier& _internal_useimport(int index) const;
  ::TIdentifier* _internal_add_useimport();
  public:
  const ::TIdentifier& useimport(int index) const;
  ::TIdentifier* add_useimport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      useimport() const;

  // repeated .HmiWidget.TChildWidget child = 20;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::HmiWidget::TChildWidget* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >*
      mutable_child();
  private:
  const ::HmiWidget::TChildWidget& _internal_child(int index) const;
  ::HmiWidget::TChildWidget* _internal_add_child();
  public:
  const ::HmiWidget::TChildWidget& child(int index) const;
  ::HmiWidget::TChildWidget* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >&
      child() const;

  // repeated .HmiWidget.TExternalModelParameter externalModelValue = 21;
  int externalmodelvalue_size() const;
  private:
  int _internal_externalmodelvalue_size() const;
  public:
  void clear_externalmodelvalue();
  ::HmiWidget::TExternalModelParameter* mutable_externalmodelvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >*
      mutable_externalmodelvalue();
  private:
  const ::HmiWidget::TExternalModelParameter& _internal_externalmodelvalue(int index) const;
  ::HmiWidget::TExternalModelParameter* _internal_add_externalmodelvalue();
  public:
  const ::HmiWidget::TExternalModelParameter& externalmodelvalue(int index) const;
  ::HmiWidget::TExternalModelParameter* add_externalmodelvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >&
      externalmodelvalue() const;

  // repeated .HmiWidget.TInternalModelParameter internalModelValue = 22;
  int internalmodelvalue_size() const;
  private:
  int _internal_internalmodelvalue_size() const;
  public:
  void clear_internalmodelvalue();
  ::HmiWidget::TInternalModelParameter* mutable_internalmodelvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >*
      mutable_internalmodelvalue();
  private:
  const ::HmiWidget::TInternalModelParameter& _internal_internalmodelvalue(int index) const;
  ::HmiWidget::TInternalModelParameter* _internal_add_internalmodelvalue();
  public:
  const ::HmiWidget::TInternalModelParameter& internalmodelvalue(int index) const;
  ::HmiWidget::TInternalModelParameter* add_internalmodelvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >&
      internalmodelvalue() const;

  // repeated .HmiWidget.TNodeParam nodeParam = 24;
  int nodeparam_size() const;
  private:
  int _internal_nodeparam_size() const;
  public:
  void clear_nodeparam();
  ::HmiWidget::TNodeParam* mutable_nodeparam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >*
      mutable_nodeparam();
  private:
  const ::HmiWidget::TNodeParam& _internal_nodeparam(int index) const;
  ::HmiWidget::TNodeParam* _internal_add_nodeparam();
  public:
  const ::HmiWidget::TNodeParam& nodeparam(int index) const;
  ::HmiWidget::TNodeParam* add_nodeparam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >&
      nodeparam() const;

  // repeated .HmiWidget.TSlot slot = 25;
  int slot_size() const;
  private:
  int _internal_slot_size() const;
  public:
  void clear_slot();
  ::HmiWidget::TSlot* mutable_slot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >*
      mutable_slot();
  private:
  const ::HmiWidget::TSlot& _internal_slot(int index) const;
  ::HmiWidget::TSlot* _internal_add_slot();
  public:
  const ::HmiWidget::TSlot& slot(int index) const;
  ::HmiWidget::TSlot* add_slot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >&
      slot() const;

  // repeated .HmiWidget.TLayout layout = 26;
  int layout_size() const;
  private:
  int _internal_layout_size() const;
  public:
  void clear_layout();
  ::HmiWidget::TLayout* mutable_layout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >*
      mutable_layout();
  private:
  const ::HmiWidget::TLayout& _internal_layout(int index) const;
  ::HmiWidget::TLayout* _internal_add_layout();
  public:
  const ::HmiWidget::TLayout& layout(int index) const;
  ::HmiWidget::TLayout* add_layout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >&
      layout() const;

  // repeated .HmiWidget.TScript script = 27;
  int script_size() const;
  private:
  int _internal_script_size() const;
  public:
  void clear_script();
  ::HmiWidget::TScript* mutable_script(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >*
      mutable_script();
  private:
  const ::HmiWidget::TScript& _internal_script(int index) const;
  ::HmiWidget::TScript* _internal_add_script();
  public:
  const ::HmiWidget::TScript& script(int index) const;
  ::HmiWidget::TScript* add_script();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >&
      script() const;

  // repeated .HmiWidget.TTriggeredSlot triggeredSlot = 28;
  int triggeredslot_size() const;
  private:
  int _internal_triggeredslot_size() const;
  public:
  void clear_triggeredslot();
  ::HmiWidget::TTriggeredSlot* mutable_triggeredslot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >*
      mutable_triggeredslot();
  private:
  const ::HmiWidget::TTriggeredSlot& _internal_triggeredslot(int index) const;
  ::HmiWidget::TTriggeredSlot* _internal_add_triggeredslot();
  public:
  const ::HmiWidget::TTriggeredSlot& triggeredslot(int index) const;
  ::HmiWidget::TTriggeredSlot* add_triggeredslot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >&
      triggeredslot() const;

  // repeated .HmiWidget.TCompositeAnimation compositeAnimation = 30;
  int compositeanimation_size() const;
  private:
  int _internal_compositeanimation_size() const;
  public:
  void clear_compositeanimation();
  ::HmiWidget::TCompositeAnimation* mutable_compositeanimation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >*
      mutable_compositeanimation();
  private:
  const ::HmiWidget::TCompositeAnimation& _internal_compositeanimation(int index) const;
  ::HmiWidget::TCompositeAnimation* _internal_add_compositeanimation();
  public:
  const ::HmiWidget::TCompositeAnimation& compositeanimation(int index) const;
  ::HmiWidget::TCompositeAnimation* add_compositeanimation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >&
      compositeanimation() const;

  // repeated .HmiWidget.TTrigger trigger = 31;
  int trigger_size() const;
  private:
  int _internal_trigger_size() const;
  public:
  void clear_trigger();
  ::HmiWidget::TTrigger* mutable_trigger(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >*
      mutable_trigger();
  private:
  const ::HmiWidget::TTrigger& _internal_trigger(int index) const;
  ::HmiWidget::TTrigger* _internal_add_trigger();
  public:
  const ::HmiWidget::TTrigger& trigger(int index) const;
  ::HmiWidget::TTrigger* add_trigger();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >&
      trigger() const;

  // repeated .HmiWidget.TCurve curve = 34;
  int curve_size() const;
  private:
  int _internal_curve_size() const;
  public:
  void clear_curve();
  ::HmiWidget::TCurve* mutable_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >*
      mutable_curve();
  private:
  const ::HmiWidget::TCurve& _internal_curve(int index) const;
  ::HmiWidget::TCurve* _internal_add_curve();
  public:
  const ::HmiWidget::TCurve& curve(int index) const;
  ::HmiWidget::TCurve* add_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >&
      curve() const;

  // repeated .HmiWidget.TAddModelBindingsToChild addModelBindingsToChild = 37;
  int addmodelbindingstochild_size() const;
  private:
  int _internal_addmodelbindingstochild_size() const;
  public:
  void clear_addmodelbindingstochild();
  ::HmiWidget::TAddModelBindingsToChild* mutable_addmodelbindingstochild(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >*
      mutable_addmodelbindingstochild();
  private:
  const ::HmiWidget::TAddModelBindingsToChild& _internal_addmodelbindingstochild(int index) const;
  ::HmiWidget::TAddModelBindingsToChild* _internal_add_addmodelbindingstochild();
  public:
  const ::HmiWidget::TAddModelBindingsToChild& addmodelbindingstochild(int index) const;
  ::HmiWidget::TAddModelBindingsToChild* add_addmodelbindingstochild();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >&
      addmodelbindingstochild() const;

  // repeated .HmiWidget.TResourceParam resourceParam = 38;
  int resourceparam_size() const;
  private:
  int _internal_resourceparam_size() const;
  public:
  void clear_resourceparam();
  ::HmiWidget::TResourceParam* mutable_resourceparam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >*
      mutable_resourceparam();
  private:
  const ::HmiWidget::TResourceParam& _internal_resourceparam(int index) const;
  ::HmiWidget::TResourceParam* _internal_add_resourceparam();
  public:
  const ::HmiWidget::TResourceParam& resourceparam(int index) const;
  ::HmiWidget::TResourceParam* add_resourceparam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >&
      resourceparam() const;

  // repeated .HmiWidget.TChildModelParameter modelbinding = 100;
  int modelbinding_size() const;
  private:
  int _internal_modelbinding_size() const;
  public:
  void clear_modelbinding();
  ::HmiWidget::TChildModelParameter* mutable_modelbinding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
      mutable_modelbinding();
  private:
  const ::HmiWidget::TChildModelParameter& _internal_modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* _internal_add_modelbinding();
  public:
  const ::HmiWidget::TChildModelParameter& modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* add_modelbinding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
      modelbinding() const;

  // repeated .HmiWidget.TUniform uniform = 200;
  int uniform_size() const;
  private:
  int _internal_uniform_size() const;
  public:
  void clear_uniform();
  ::HmiWidget::TUniform* mutable_uniform(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >*
      mutable_uniform();
  private:
  const ::HmiWidget::TUniform& _internal_uniform(int index) const;
  ::HmiWidget::TUniform* _internal_add_uniform();
  public:
  const ::HmiWidget::TUniform& uniform(int index) const;
  ::HmiWidget::TUniform* add_uniform();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >&
      uniform() const;

  // optional .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // optional .HmiWidget.TForwardSignals forwardSignals = 32;
  bool has_forwardsignals() const;
  private:
  bool _internal_has_forwardsignals() const;
  public:
  void clear_forwardsignals();
  const ::HmiWidget::TForwardSignals& forwardsignals() const;
  PROTOBUF_NODISCARD ::HmiWidget::TForwardSignals* release_forwardsignals();
  ::HmiWidget::TForwardSignals* mutable_forwardsignals();
  void set_allocated_forwardsignals(::HmiWidget::TForwardSignals* forwardsignals);
  private:
  const ::HmiWidget::TForwardSignals& _internal_forwardsignals() const;
  ::HmiWidget::TForwardSignals* _internal_mutable_forwardsignals();
  public:
  void unsafe_arena_set_allocated_forwardsignals(
      ::HmiWidget::TForwardSignals* forwardsignals);
  ::HmiWidget::TForwardSignals* unsafe_arena_release_forwardsignals();

  // optional .HmiWidget.TInputConfig input = 33;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::HmiWidget::TInputConfig& input() const;
  PROTOBUF_NODISCARD ::HmiWidget::TInputConfig* release_input();
  ::HmiWidget::TInputConfig* mutable_input();
  void set_allocated_input(::HmiWidget::TInputConfig* input);
  private:
  const ::HmiWidget::TInputConfig& _internal_input() const;
  ::HmiWidget::TInputConfig* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::HmiWidget::TInputConfig* input);
  ::HmiWidget::TInputConfig* unsafe_arena_release_input();

  // optional .HmiWidget.TRequestLayout requestLayout = 35;
  bool has_requestlayout() const;
  private:
  bool _internal_has_requestlayout() const;
  public:
  void clear_requestlayout();
  const ::HmiWidget::TRequestLayout& requestlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TRequestLayout* release_requestlayout();
  ::HmiWidget::TRequestLayout* mutable_requestlayout();
  void set_allocated_requestlayout(::HmiWidget::TRequestLayout* requestlayout);
  private:
  const ::HmiWidget::TRequestLayout& _internal_requestlayout() const;
  ::HmiWidget::TRequestLayout* _internal_mutable_requestlayout();
  public:
  void unsafe_arena_set_allocated_requestlayout(
      ::HmiWidget::TRequestLayout* requestlayout);
  ::HmiWidget::TRequestLayout* unsafe_arena_release_requestlayout();

  // optional .HmiWidget.TDefaultChildModelBindings defaultChildModelBindings = 36;
  bool has_defaultchildmodelbindings() const;
  private:
  bool _internal_has_defaultchildmodelbindings() const;
  public:
  void clear_defaultchildmodelbindings();
  const ::HmiWidget::TDefaultChildModelBindings& defaultchildmodelbindings() const;
  PROTOBUF_NODISCARD ::HmiWidget::TDefaultChildModelBindings* release_defaultchildmodelbindings();
  ::HmiWidget::TDefaultChildModelBindings* mutable_defaultchildmodelbindings();
  void set_allocated_defaultchildmodelbindings(::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings);
  private:
  const ::HmiWidget::TDefaultChildModelBindings& _internal_defaultchildmodelbindings() const;
  ::HmiWidget::TDefaultChildModelBindings* _internal_mutable_defaultchildmodelbindings();
  public:
  void unsafe_arena_set_allocated_defaultchildmodelbindings(
      ::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings);
  ::HmiWidget::TDefaultChildModelBindings* unsafe_arena_release_defaultchildmodelbindings();

  // optional .HmiWidget.TNodeTransform transform = 201;
  bool has_transform() const;
  private:
  bool _internal_has_transform() const;
  public:
  void clear_transform();
  const ::HmiWidget::TNodeTransform& transform() const;
  PROTOBUF_NODISCARD ::HmiWidget::TNodeTransform* release_transform();
  ::HmiWidget::TNodeTransform* mutable_transform();
  void set_allocated_transform(::HmiWidget::TNodeTransform* transform);
  private:
  const ::HmiWidget::TNodeTransform& _internal_transform() const;
  ::HmiWidget::TNodeTransform* _internal_mutable_transform();
  public:
  void unsafe_arena_set_allocated_transform(
      ::HmiWidget::TNodeTransform* transform);
  ::HmiWidget::TNodeTransform* unsafe_arena_release_transform();

  // optional .HmiWidget.TRenderLayerProperties renderLayerProperties = 202;
  bool has_renderlayerproperties() const;
  private:
  bool _internal_has_renderlayerproperties() const;
  public:
  void clear_renderlayerproperties();
  const ::HmiWidget::TRenderLayerProperties& renderlayerproperties() const;
  PROTOBUF_NODISCARD ::HmiWidget::TRenderLayerProperties* release_renderlayerproperties();
  ::HmiWidget::TRenderLayerProperties* mutable_renderlayerproperties();
  void set_allocated_renderlayerproperties(::HmiWidget::TRenderLayerProperties* renderlayerproperties);
  private:
  const ::HmiWidget::TRenderLayerProperties& _internal_renderlayerproperties() const;
  ::HmiWidget::TRenderLayerProperties* _internal_mutable_renderlayerproperties();
  public:
  void unsafe_arena_set_allocated_renderlayerproperties(
      ::HmiWidget::TRenderLayerProperties* renderlayerproperties);
  ::HmiWidget::TRenderLayerProperties* unsafe_arena_release_renderlayerproperties();

  // optional .HmiWidget.TNodeProperties nodeProperties = 203;
  bool has_nodeproperties() const;
  private:
  bool _internal_has_nodeproperties() const;
  public:
  void clear_nodeproperties();
  const ::HmiWidget::TNodeProperties& nodeproperties() const;
  PROTOBUF_NODISCARD ::HmiWidget::TNodeProperties* release_nodeproperties();
  ::HmiWidget::TNodeProperties* mutable_nodeproperties();
  void set_allocated_nodeproperties(::HmiWidget::TNodeProperties* nodeproperties);
  private:
  const ::HmiWidget::TNodeProperties& _internal_nodeproperties() const;
  ::HmiWidget::TNodeProperties* _internal_mutable_nodeproperties();
  public:
  void unsafe_arena_set_allocated_nodeproperties(
      ::HmiWidget::TNodeProperties* nodeproperties);
  ::HmiWidget::TNodeProperties* unsafe_arena_release_nodeproperties();

  // optional .HmiWidget.TCameraNodeProperties cameraNodeProperties = 204;
  bool has_cameranodeproperties() const;
  private:
  bool _internal_has_cameranodeproperties() const;
  public:
  void clear_cameranodeproperties();
  const ::HmiWidget::TCameraNodeProperties& cameranodeproperties() const;
  PROTOBUF_NODISCARD ::HmiWidget::TCameraNodeProperties* release_cameranodeproperties();
  ::HmiWidget::TCameraNodeProperties* mutable_cameranodeproperties();
  void set_allocated_cameranodeproperties(::HmiWidget::TCameraNodeProperties* cameranodeproperties);
  private:
  const ::HmiWidget::TCameraNodeProperties& _internal_cameranodeproperties() const;
  ::HmiWidget::TCameraNodeProperties* _internal_mutable_cameranodeproperties();
  public:
  void unsafe_arena_set_allocated_cameranodeproperties(
      ::HmiWidget::TCameraNodeProperties* cameranodeproperties);
  ::HmiWidget::TCameraNodeProperties* unsafe_arena_release_cameranodeproperties();

  // optional .HmiWidget.TWidgetAnimation widgetAnimation = 300;
  bool has_widgetanimation() const;
  private:
  bool _internal_has_widgetanimation() const;
  public:
  void clear_widgetanimation();
  const ::HmiWidget::TWidgetAnimation& widgetanimation() const;
  PROTOBUF_NODISCARD ::HmiWidget::TWidgetAnimation* release_widgetanimation();
  ::HmiWidget::TWidgetAnimation* mutable_widgetanimation();
  void set_allocated_widgetanimation(::HmiWidget::TWidgetAnimation* widgetanimation);
  private:
  const ::HmiWidget::TWidgetAnimation& _internal_widgetanimation() const;
  ::HmiWidget::TWidgetAnimation* _internal_mutable_widgetanimation();
  public:
  void unsafe_arena_set_allocated_widgetanimation(
      ::HmiWidget::TWidgetAnimation* widgetanimation);
  ::HmiWidget::TWidgetAnimation* unsafe_arena_release_widgetanimation();

  // @@protoc_insertion_point(class_scope:HmiWidget.TImportDefinition)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > useimport_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget > child_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter > externalmodelvalue_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter > internalmodelvalue_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam > nodeparam_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot > slot_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout > layout_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript > script_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot > triggeredslot_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation > compositeanimation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger > trigger_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve > curve_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild > addmodelbindingstochild_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam > resourceparam_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter > modelbinding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform > uniform_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TForwardSignals* forwardsignals_;
    ::HmiWidget::TInputConfig* input_;
    ::HmiWidget::TRequestLayout* requestlayout_;
    ::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings_;
    ::HmiWidget::TNodeTransform* transform_;
    ::HmiWidget::TRenderLayerProperties* renderlayerproperties_;
    ::HmiWidget::TNodeProperties* nodeproperties_;
    ::HmiWidget::TCameraNodeProperties* cameranodeproperties_;
    ::HmiWidget::TWidgetAnimation* widgetanimation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TDefaultChildModelBindings final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TDefaultChildModelBindings) */ {
 public:
  inline TDefaultChildModelBindings() : TDefaultChildModelBindings(nullptr) {}
  ~TDefaultChildModelBindings() override;
  explicit PROTOBUF_CONSTEXPR TDefaultChildModelBindings(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDefaultChildModelBindings(const TDefaultChildModelBindings& from);
  TDefaultChildModelBindings(TDefaultChildModelBindings&& from) noexcept
    : TDefaultChildModelBindings() {
    *this = ::std::move(from);
  }

  inline TDefaultChildModelBindings& operator=(const TDefaultChildModelBindings& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDefaultChildModelBindings& operator=(TDefaultChildModelBindings&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDefaultChildModelBindings& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDefaultChildModelBindings* internal_default_instance() {
    return reinterpret_cast<const TDefaultChildModelBindings*>(
               &_TDefaultChildModelBindings_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(TDefaultChildModelBindings& a, TDefaultChildModelBindings& b) {
    a.Swap(&b);
  }
  inline void Swap(TDefaultChildModelBindings* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDefaultChildModelBindings* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDefaultChildModelBindings* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDefaultChildModelBindings>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDefaultChildModelBindings& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDefaultChildModelBindings& from) {
    TDefaultChildModelBindings::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDefaultChildModelBindings* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TDefaultChildModelBindings";
  }
  protected:
  explicit TDefaultChildModelBindings(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelbindingFieldNumber = 1,
    kUseImportFieldNumber = 2,
  };
  // repeated .HmiWidget.TChildModelParameter modelbinding = 1;
  int modelbinding_size() const;
  private:
  int _internal_modelbinding_size() const;
  public:
  void clear_modelbinding();
  ::HmiWidget::TChildModelParameter* mutable_modelbinding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
      mutable_modelbinding();
  private:
  const ::HmiWidget::TChildModelParameter& _internal_modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* _internal_add_modelbinding();
  public:
  const ::HmiWidget::TChildModelParameter& modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* add_modelbinding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
      modelbinding() const;

  // repeated .TIdentifier useImport = 2;
  int useimport_size() const;
  private:
  int _internal_useimport_size() const;
  public:
  void clear_useimport();
  ::TIdentifier* mutable_useimport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_useimport();
  private:
  const ::TIdentifier& _internal_useimport(int index) const;
  ::TIdentifier* _internal_add_useimport();
  public:
  const ::TIdentifier& useimport(int index) const;
  ::TIdentifier* add_useimport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      useimport() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TDefaultChildModelBindings)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter > modelbinding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > useimport_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TAddModelBindingsToChild final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TAddModelBindingsToChild) */ {
 public:
  inline TAddModelBindingsToChild() : TAddModelBindingsToChild(nullptr) {}
  ~TAddModelBindingsToChild() override;
  explicit PROTOBUF_CONSTEXPR TAddModelBindingsToChild(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TAddModelBindingsToChild(const TAddModelBindingsToChild& from);
  TAddModelBindingsToChild(TAddModelBindingsToChild&& from) noexcept
    : TAddModelBindingsToChild() {
    *this = ::std::move(from);
  }

  inline TAddModelBindingsToChild& operator=(const TAddModelBindingsToChild& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAddModelBindingsToChild& operator=(TAddModelBindingsToChild&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAddModelBindingsToChild& default_instance() {
    return *internal_default_instance();
  }
  static inline const TAddModelBindingsToChild* internal_default_instance() {
    return reinterpret_cast<const TAddModelBindingsToChild*>(
               &_TAddModelBindingsToChild_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(TAddModelBindingsToChild& a, TAddModelBindingsToChild& b) {
    a.Swap(&b);
  }
  inline void Swap(TAddModelBindingsToChild* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAddModelBindingsToChild* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAddModelBindingsToChild* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TAddModelBindingsToChild>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TAddModelBindingsToChild& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TAddModelBindingsToChild& from) {
    TAddModelBindingsToChild::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TAddModelBindingsToChild* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TAddModelBindingsToChild";
  }
  protected:
  explicit TAddModelBindingsToChild(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelbindingFieldNumber = 2,
    kExemptedExternalKeyFieldNumber = 4,
    kChildIdentifierFieldNumber = 1,
    kAutoBindAllExternalsFieldNumber = 3,
  };
  // repeated .HmiWidget.TChildModelParameter modelbinding = 2;
  int modelbinding_size() const;
  private:
  int _internal_modelbinding_size() const;
  public:
  void clear_modelbinding();
  ::HmiWidget::TChildModelParameter* mutable_modelbinding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
      mutable_modelbinding();
  private:
  const ::HmiWidget::TChildModelParameter& _internal_modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* _internal_add_modelbinding();
  public:
  const ::HmiWidget::TChildModelParameter& modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* add_modelbinding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
      modelbinding() const;

  // repeated .TIdentifier exemptedExternalKey = 4;
  int exemptedexternalkey_size() const;
  private:
  int _internal_exemptedexternalkey_size() const;
  public:
  void clear_exemptedexternalkey();
  ::TIdentifier* mutable_exemptedexternalkey(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_exemptedexternalkey();
  private:
  const ::TIdentifier& _internal_exemptedexternalkey(int index) const;
  ::TIdentifier* _internal_add_exemptedexternalkey();
  public:
  const ::TIdentifier& exemptedexternalkey(int index) const;
  ::TIdentifier* add_exemptedexternalkey();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      exemptedexternalkey() const;

  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional bool autoBindAllExternals = 3 [default = false];
  bool has_autobindallexternals() const;
  private:
  bool _internal_has_autobindallexternals() const;
  public:
  void clear_autobindallexternals();
  bool autobindallexternals() const;
  void set_autobindallexternals(bool value);
  private:
  bool _internal_autobindallexternals() const;
  void _internal_set_autobindallexternals(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TAddModelBindingsToChild)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter > modelbinding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > exemptedexternalkey_;
    ::TIdentifier* childidentifier_;
    bool autobindallexternals_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TWidget_TPrototypeAsset final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TWidget.TPrototypeAsset) */ {
 public:
  inline TWidget_TPrototypeAsset() : TWidget_TPrototypeAsset(nullptr) {}
  ~TWidget_TPrototypeAsset() override;
  explicit PROTOBUF_CONSTEXPR TWidget_TPrototypeAsset(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWidget_TPrototypeAsset(const TWidget_TPrototypeAsset& from);
  TWidget_TPrototypeAsset(TWidget_TPrototypeAsset&& from) noexcept
    : TWidget_TPrototypeAsset() {
    *this = ::std::move(from);
  }

  inline TWidget_TPrototypeAsset& operator=(const TWidget_TPrototypeAsset& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWidget_TPrototypeAsset& operator=(TWidget_TPrototypeAsset&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWidget_TPrototypeAsset& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWidget_TPrototypeAsset* internal_default_instance() {
    return reinterpret_cast<const TWidget_TPrototypeAsset*>(
               &_TWidget_TPrototypeAsset_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(TWidget_TPrototypeAsset& a, TWidget_TPrototypeAsset& b) {
    a.Swap(&b);
  }
  inline void Swap(TWidget_TPrototypeAsset* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWidget_TPrototypeAsset* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWidget_TPrototypeAsset* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWidget_TPrototypeAsset>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWidget_TPrototypeAsset& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWidget_TPrototypeAsset& from) {
    TWidget_TPrototypeAsset::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWidget_TPrototypeAsset* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TWidget.TPrototypeAsset";
  }
  protected:
  explicit TWidget_TPrototypeAsset(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kResourceIdFieldNumber = 1,
    kAssetIdLegacyFieldNumber = 2,
    kBindingFieldNumber = 4,
    kResourceIdNumericFieldNumber = 5,
    kResourceIdNumericLegacyFieldNumber = 3,
  };
  // optional string ResourceId = 1;
  bool has_resourceid() const;
  private:
  bool _internal_has_resourceid() const;
  public:
  void clear_resourceid();
  const std::string& resourceid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_resourceid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_resourceid();
  PROTOBUF_NODISCARD std::string* release_resourceid();
  void set_allocated_resourceid(std::string* resourceid);
  private:
  const std::string& _internal_resourceid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_resourceid(const std::string& value);
  std::string* _internal_mutable_resourceid();
  public:

  // optional string AssetIdLegacy = 2 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_assetidlegacy() const;
  private:
  bool _internal_has_assetidlegacy() const;
  public:
  PROTOBUF_DEPRECATED void clear_assetidlegacy();
  PROTOBUF_DEPRECATED const std::string& assetidlegacy() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  PROTOBUF_DEPRECATED void set_assetidlegacy(ArgT0&& arg0, ArgT... args);
  PROTOBUF_DEPRECATED std::string* mutable_assetidlegacy();
  PROTOBUF_NODISCARD PROTOBUF_DEPRECATED std::string* release_assetidlegacy();
  PROTOBUF_DEPRECATED void set_allocated_assetidlegacy(std::string* assetidlegacy);
  private:
  const std::string& _internal_assetidlegacy() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_assetidlegacy(const std::string& value);
  std::string* _internal_mutable_assetidlegacy();
  public:

  // optional .TDataBinding binding = 4;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::TDataBinding& binding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_binding();
  ::TDataBinding* mutable_binding();
  void set_allocated_binding(::TDataBinding* binding);
  private:
  const ::TDataBinding& _internal_binding() const;
  ::TDataBinding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::TDataBinding* binding);
  ::TDataBinding* unsafe_arena_release_binding();

  // optional fixed64 ResourceIdNumeric = 5;
  bool has_resourceidnumeric() const;
  private:
  bool _internal_has_resourceidnumeric() const;
  public:
  void clear_resourceidnumeric();
  uint64_t resourceidnumeric() const;
  void set_resourceidnumeric(uint64_t value);
  private:
  uint64_t _internal_resourceidnumeric() const;
  void _internal_set_resourceidnumeric(uint64_t value);
  public:

  // optional fixed32 ResourceIdNumericLegacy = 3 [deprecated = true];
  PROTOBUF_DEPRECATED bool has_resourceidnumericlegacy() const;
  private:
  bool _internal_has_resourceidnumericlegacy() const;
  public:
  PROTOBUF_DEPRECATED void clear_resourceidnumericlegacy();
  PROTOBUF_DEPRECATED uint32_t resourceidnumericlegacy() const;
  PROTOBUF_DEPRECATED void set_resourceidnumericlegacy(uint32_t value);
  private:
  uint32_t _internal_resourceidnumericlegacy() const;
  void _internal_set_resourceidnumericlegacy(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TWidget.TPrototypeAsset)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr resourceid_;
    ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr assetidlegacy_;
    ::TDataBinding* binding_;
    uint64_t resourceidnumeric_;
    uint32_t resourceidnumericlegacy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TWidget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TWidget) */ {
 public:
  inline TWidget() : TWidget(nullptr) {}
  ~TWidget() override;
  explicit PROTOBUF_CONSTEXPR TWidget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWidget(const TWidget& from);
  TWidget(TWidget&& from) noexcept
    : TWidget() {
    *this = ::std::move(from);
  }

  inline TWidget& operator=(const TWidget& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWidget& operator=(TWidget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWidget& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWidget* internal_default_instance() {
    return reinterpret_cast<const TWidget*>(
               &_TWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    24;

  friend void swap(TWidget& a, TWidget& b) {
    a.Swap(&b);
  }
  inline void Swap(TWidget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWidget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWidget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWidget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWidget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWidget& from) {
    TWidget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWidget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TWidget";
  }
  protected:
  explicit TWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TWidget_TPrototypeAsset TPrototypeAsset;

  // accessors -------------------------------------------------------

  enum : int {
    kChildFieldNumber = 3,
    kExternalModelValueFieldNumber = 4,
    kInternalModelValueFieldNumber = 5,
    kNodeParamFieldNumber = 7,
    kSlotFieldNumber = 8,
    kLayoutFieldNumber = 9,
    kScriptFieldNumber = 10,
    kTriggeredSlotFieldNumber = 11,
    kCompositeAnimationFieldNumber = 12,
    kTriggerFieldNumber = 13,
    kUseImportFieldNumber = 14,
    kCurveFieldNumber = 19,
    kAddModelBindingsToChildFieldNumber = 22,
    kResourceParamFieldNumber = 23,
    kTypeFieldNumber = 1,
    kPrototypeFieldNumber = 2,
    kPrototypeAssetFieldNumber = 6,
    kDefaultChildModelBindingsFieldNumber = 15,
    kInputFieldNumber = 16,
    kForwardSignalsFieldNumber = 18,
    kRequestLayoutFieldNumber = 20,
    kPrototypeLevelSelectionFieldNumber = 21,
  };
  // repeated .HmiWidget.TChildWidget child = 3;
  int child_size() const;
  private:
  int _internal_child_size() const;
  public:
  void clear_child();
  ::HmiWidget::TChildWidget* mutable_child(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >*
      mutable_child();
  private:
  const ::HmiWidget::TChildWidget& _internal_child(int index) const;
  ::HmiWidget::TChildWidget* _internal_add_child();
  public:
  const ::HmiWidget::TChildWidget& child(int index) const;
  ::HmiWidget::TChildWidget* add_child();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >&
      child() const;

  // repeated .HmiWidget.TExternalModelParameter externalModelValue = 4;
  int externalmodelvalue_size() const;
  private:
  int _internal_externalmodelvalue_size() const;
  public:
  void clear_externalmodelvalue();
  ::HmiWidget::TExternalModelParameter* mutable_externalmodelvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >*
      mutable_externalmodelvalue();
  private:
  const ::HmiWidget::TExternalModelParameter& _internal_externalmodelvalue(int index) const;
  ::HmiWidget::TExternalModelParameter* _internal_add_externalmodelvalue();
  public:
  const ::HmiWidget::TExternalModelParameter& externalmodelvalue(int index) const;
  ::HmiWidget::TExternalModelParameter* add_externalmodelvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >&
      externalmodelvalue() const;

  // repeated .HmiWidget.TInternalModelParameter internalModelValue = 5;
  int internalmodelvalue_size() const;
  private:
  int _internal_internalmodelvalue_size() const;
  public:
  void clear_internalmodelvalue();
  ::HmiWidget::TInternalModelParameter* mutable_internalmodelvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >*
      mutable_internalmodelvalue();
  private:
  const ::HmiWidget::TInternalModelParameter& _internal_internalmodelvalue(int index) const;
  ::HmiWidget::TInternalModelParameter* _internal_add_internalmodelvalue();
  public:
  const ::HmiWidget::TInternalModelParameter& internalmodelvalue(int index) const;
  ::HmiWidget::TInternalModelParameter* add_internalmodelvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >&
      internalmodelvalue() const;

  // repeated .HmiWidget.TNodeParam nodeParam = 7;
  int nodeparam_size() const;
  private:
  int _internal_nodeparam_size() const;
  public:
  void clear_nodeparam();
  ::HmiWidget::TNodeParam* mutable_nodeparam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >*
      mutable_nodeparam();
  private:
  const ::HmiWidget::TNodeParam& _internal_nodeparam(int index) const;
  ::HmiWidget::TNodeParam* _internal_add_nodeparam();
  public:
  const ::HmiWidget::TNodeParam& nodeparam(int index) const;
  ::HmiWidget::TNodeParam* add_nodeparam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >&
      nodeparam() const;

  // repeated .HmiWidget.TSlot slot = 8;
  int slot_size() const;
  private:
  int _internal_slot_size() const;
  public:
  void clear_slot();
  ::HmiWidget::TSlot* mutable_slot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >*
      mutable_slot();
  private:
  const ::HmiWidget::TSlot& _internal_slot(int index) const;
  ::HmiWidget::TSlot* _internal_add_slot();
  public:
  const ::HmiWidget::TSlot& slot(int index) const;
  ::HmiWidget::TSlot* add_slot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >&
      slot() const;

  // repeated .HmiWidget.TLayout layout = 9;
  int layout_size() const;
  private:
  int _internal_layout_size() const;
  public:
  void clear_layout();
  ::HmiWidget::TLayout* mutable_layout(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >*
      mutable_layout();
  private:
  const ::HmiWidget::TLayout& _internal_layout(int index) const;
  ::HmiWidget::TLayout* _internal_add_layout();
  public:
  const ::HmiWidget::TLayout& layout(int index) const;
  ::HmiWidget::TLayout* add_layout();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >&
      layout() const;

  // repeated .HmiWidget.TScript script = 10;
  int script_size() const;
  private:
  int _internal_script_size() const;
  public:
  void clear_script();
  ::HmiWidget::TScript* mutable_script(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >*
      mutable_script();
  private:
  const ::HmiWidget::TScript& _internal_script(int index) const;
  ::HmiWidget::TScript* _internal_add_script();
  public:
  const ::HmiWidget::TScript& script(int index) const;
  ::HmiWidget::TScript* add_script();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >&
      script() const;

  // repeated .HmiWidget.TTriggeredSlot triggeredSlot = 11;
  int triggeredslot_size() const;
  private:
  int _internal_triggeredslot_size() const;
  public:
  void clear_triggeredslot();
  ::HmiWidget::TTriggeredSlot* mutable_triggeredslot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >*
      mutable_triggeredslot();
  private:
  const ::HmiWidget::TTriggeredSlot& _internal_triggeredslot(int index) const;
  ::HmiWidget::TTriggeredSlot* _internal_add_triggeredslot();
  public:
  const ::HmiWidget::TTriggeredSlot& triggeredslot(int index) const;
  ::HmiWidget::TTriggeredSlot* add_triggeredslot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >&
      triggeredslot() const;

  // repeated .HmiWidget.TCompositeAnimation compositeAnimation = 12;
  int compositeanimation_size() const;
  private:
  int _internal_compositeanimation_size() const;
  public:
  void clear_compositeanimation();
  ::HmiWidget::TCompositeAnimation* mutable_compositeanimation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >*
      mutable_compositeanimation();
  private:
  const ::HmiWidget::TCompositeAnimation& _internal_compositeanimation(int index) const;
  ::HmiWidget::TCompositeAnimation* _internal_add_compositeanimation();
  public:
  const ::HmiWidget::TCompositeAnimation& compositeanimation(int index) const;
  ::HmiWidget::TCompositeAnimation* add_compositeanimation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >&
      compositeanimation() const;

  // repeated .HmiWidget.TTrigger trigger = 13;
  int trigger_size() const;
  private:
  int _internal_trigger_size() const;
  public:
  void clear_trigger();
  ::HmiWidget::TTrigger* mutable_trigger(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >*
      mutable_trigger();
  private:
  const ::HmiWidget::TTrigger& _internal_trigger(int index) const;
  ::HmiWidget::TTrigger* _internal_add_trigger();
  public:
  const ::HmiWidget::TTrigger& trigger(int index) const;
  ::HmiWidget::TTrigger* add_trigger();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >&
      trigger() const;

  // repeated .TIdentifier useImport = 14;
  int useimport_size() const;
  private:
  int _internal_useimport_size() const;
  public:
  void clear_useimport();
  ::TIdentifier* mutable_useimport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_useimport();
  private:
  const ::TIdentifier& _internal_useimport(int index) const;
  ::TIdentifier* _internal_add_useimport();
  public:
  const ::TIdentifier& useimport(int index) const;
  ::TIdentifier* add_useimport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      useimport() const;

  // repeated .HmiWidget.TCurve curve = 19;
  int curve_size() const;
  private:
  int _internal_curve_size() const;
  public:
  void clear_curve();
  ::HmiWidget::TCurve* mutable_curve(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >*
      mutable_curve();
  private:
  const ::HmiWidget::TCurve& _internal_curve(int index) const;
  ::HmiWidget::TCurve* _internal_add_curve();
  public:
  const ::HmiWidget::TCurve& curve(int index) const;
  ::HmiWidget::TCurve* add_curve();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >&
      curve() const;

  // repeated .HmiWidget.TAddModelBindingsToChild addModelBindingsToChild = 22;
  int addmodelbindingstochild_size() const;
  private:
  int _internal_addmodelbindingstochild_size() const;
  public:
  void clear_addmodelbindingstochild();
  ::HmiWidget::TAddModelBindingsToChild* mutable_addmodelbindingstochild(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >*
      mutable_addmodelbindingstochild();
  private:
  const ::HmiWidget::TAddModelBindingsToChild& _internal_addmodelbindingstochild(int index) const;
  ::HmiWidget::TAddModelBindingsToChild* _internal_add_addmodelbindingstochild();
  public:
  const ::HmiWidget::TAddModelBindingsToChild& addmodelbindingstochild(int index) const;
  ::HmiWidget::TAddModelBindingsToChild* add_addmodelbindingstochild();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >&
      addmodelbindingstochild() const;

  // repeated .HmiWidget.TResourceParam resourceParam = 23;
  int resourceparam_size() const;
  private:
  int _internal_resourceparam_size() const;
  public:
  void clear_resourceparam();
  ::HmiWidget::TResourceParam* mutable_resourceparam(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >*
      mutable_resourceparam();
  private:
  const ::HmiWidget::TResourceParam& _internal_resourceparam(int index) const;
  ::HmiWidget::TResourceParam* _internal_add_resourceparam();
  public:
  const ::HmiWidget::TResourceParam& resourceparam(int index) const;
  ::HmiWidget::TResourceParam* add_resourceparam();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >&
      resourceparam() const;

  // optional .TIdentifier type = 1;
  bool has_type() const;
  private:
  bool _internal_has_type() const;
  public:
  void clear_type();
  const ::TIdentifier& type() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_type();
  ::TIdentifier* mutable_type();
  void set_allocated_type(::TIdentifier* type);
  private:
  const ::TIdentifier& _internal_type() const;
  ::TIdentifier* _internal_mutable_type();
  public:
  void unsafe_arena_set_allocated_type(
      ::TIdentifier* type);
  ::TIdentifier* unsafe_arena_release_type();

  // optional .TIdentifier prototype = 2;
  bool has_prototype() const;
  private:
  bool _internal_has_prototype() const;
  public:
  void clear_prototype();
  const ::TIdentifier& prototype() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_prototype();
  ::TIdentifier* mutable_prototype();
  void set_allocated_prototype(::TIdentifier* prototype);
  private:
  const ::TIdentifier& _internal_prototype() const;
  ::TIdentifier* _internal_mutable_prototype();
  public:
  void unsafe_arena_set_allocated_prototype(
      ::TIdentifier* prototype);
  ::TIdentifier* unsafe_arena_release_prototype();

  // optional .HmiWidget.TWidget.TPrototypeAsset prototypeAsset = 6;
  bool has_prototypeasset() const;
  private:
  bool _internal_has_prototypeasset() const;
  public:
  void clear_prototypeasset();
  const ::HmiWidget::TWidget_TPrototypeAsset& prototypeasset() const;
  PROTOBUF_NODISCARD ::HmiWidget::TWidget_TPrototypeAsset* release_prototypeasset();
  ::HmiWidget::TWidget_TPrototypeAsset* mutable_prototypeasset();
  void set_allocated_prototypeasset(::HmiWidget::TWidget_TPrototypeAsset* prototypeasset);
  private:
  const ::HmiWidget::TWidget_TPrototypeAsset& _internal_prototypeasset() const;
  ::HmiWidget::TWidget_TPrototypeAsset* _internal_mutable_prototypeasset();
  public:
  void unsafe_arena_set_allocated_prototypeasset(
      ::HmiWidget::TWidget_TPrototypeAsset* prototypeasset);
  ::HmiWidget::TWidget_TPrototypeAsset* unsafe_arena_release_prototypeasset();

  // optional .HmiWidget.TDefaultChildModelBindings defaultChildModelBindings = 15;
  bool has_defaultchildmodelbindings() const;
  private:
  bool _internal_has_defaultchildmodelbindings() const;
  public:
  void clear_defaultchildmodelbindings();
  const ::HmiWidget::TDefaultChildModelBindings& defaultchildmodelbindings() const;
  PROTOBUF_NODISCARD ::HmiWidget::TDefaultChildModelBindings* release_defaultchildmodelbindings();
  ::HmiWidget::TDefaultChildModelBindings* mutable_defaultchildmodelbindings();
  void set_allocated_defaultchildmodelbindings(::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings);
  private:
  const ::HmiWidget::TDefaultChildModelBindings& _internal_defaultchildmodelbindings() const;
  ::HmiWidget::TDefaultChildModelBindings* _internal_mutable_defaultchildmodelbindings();
  public:
  void unsafe_arena_set_allocated_defaultchildmodelbindings(
      ::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings);
  ::HmiWidget::TDefaultChildModelBindings* unsafe_arena_release_defaultchildmodelbindings();

  // optional .HmiWidget.TInputConfig input = 16;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::HmiWidget::TInputConfig& input() const;
  PROTOBUF_NODISCARD ::HmiWidget::TInputConfig* release_input();
  ::HmiWidget::TInputConfig* mutable_input();
  void set_allocated_input(::HmiWidget::TInputConfig* input);
  private:
  const ::HmiWidget::TInputConfig& _internal_input() const;
  ::HmiWidget::TInputConfig* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::HmiWidget::TInputConfig* input);
  ::HmiWidget::TInputConfig* unsafe_arena_release_input();

  // optional .HmiWidget.TForwardSignals forwardSignals = 18;
  bool has_forwardsignals() const;
  private:
  bool _internal_has_forwardsignals() const;
  public:
  void clear_forwardsignals();
  const ::HmiWidget::TForwardSignals& forwardsignals() const;
  PROTOBUF_NODISCARD ::HmiWidget::TForwardSignals* release_forwardsignals();
  ::HmiWidget::TForwardSignals* mutable_forwardsignals();
  void set_allocated_forwardsignals(::HmiWidget::TForwardSignals* forwardsignals);
  private:
  const ::HmiWidget::TForwardSignals& _internal_forwardsignals() const;
  ::HmiWidget::TForwardSignals* _internal_mutable_forwardsignals();
  public:
  void unsafe_arena_set_allocated_forwardsignals(
      ::HmiWidget::TForwardSignals* forwardsignals);
  ::HmiWidget::TForwardSignals* unsafe_arena_release_forwardsignals();

  // optional .HmiWidget.TRequestLayout requestLayout = 20;
  bool has_requestlayout() const;
  private:
  bool _internal_has_requestlayout() const;
  public:
  void clear_requestlayout();
  const ::HmiWidget::TRequestLayout& requestlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TRequestLayout* release_requestlayout();
  ::HmiWidget::TRequestLayout* mutable_requestlayout();
  void set_allocated_requestlayout(::HmiWidget::TRequestLayout* requestlayout);
  private:
  const ::HmiWidget::TRequestLayout& _internal_requestlayout() const;
  ::HmiWidget::TRequestLayout* _internal_mutable_requestlayout();
  public:
  void unsafe_arena_set_allocated_requestlayout(
      ::HmiWidget::TRequestLayout* requestlayout);
  ::HmiWidget::TRequestLayout* unsafe_arena_release_requestlayout();

  // optional .HmiWidget.TELevelSelection prototypeLevelSelection = 21 [default = TELevelSelection_Default];
  bool has_prototypelevelselection() const;
  private:
  bool _internal_has_prototypelevelselection() const;
  public:
  void clear_prototypelevelselection();
  ::HmiWidget::TELevelSelection prototypelevelselection() const;
  void set_prototypelevelselection(::HmiWidget::TELevelSelection value);
  private:
  ::HmiWidget::TELevelSelection _internal_prototypelevelselection() const;
  void _internal_set_prototypelevelselection(::HmiWidget::TELevelSelection value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TWidget)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget > child_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter > externalmodelvalue_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter > internalmodelvalue_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam > nodeparam_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot > slot_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout > layout_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript > script_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot > triggeredslot_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation > compositeanimation_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger > trigger_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > useimport_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve > curve_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild > addmodelbindingstochild_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam > resourceparam_;
    ::TIdentifier* type_;
    ::TIdentifier* prototype_;
    ::HmiWidget::TWidget_TPrototypeAsset* prototypeasset_;
    ::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings_;
    ::HmiWidget::TInputConfig* input_;
    ::HmiWidget::TForwardSignals* forwardsignals_;
    ::HmiWidget::TRequestLayout* requestlayout_;
    int prototypelevelselection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TWidgetCollection final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TWidgetCollection) */ {
 public:
  inline TWidgetCollection() : TWidgetCollection(nullptr) {}
  ~TWidgetCollection() override;
  explicit PROTOBUF_CONSTEXPR TWidgetCollection(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWidgetCollection(const TWidgetCollection& from);
  TWidgetCollection(TWidgetCollection&& from) noexcept
    : TWidgetCollection() {
    *this = ::std::move(from);
  }

  inline TWidgetCollection& operator=(const TWidgetCollection& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWidgetCollection& operator=(TWidgetCollection&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWidgetCollection& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWidgetCollection* internal_default_instance() {
    return reinterpret_cast<const TWidgetCollection*>(
               &_TWidgetCollection_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    25;

  friend void swap(TWidgetCollection& a, TWidgetCollection& b) {
    a.Swap(&b);
  }
  inline void Swap(TWidgetCollection* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWidgetCollection* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWidgetCollection* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWidgetCollection>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWidgetCollection& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWidgetCollection& from) {
    TWidgetCollection::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWidgetCollection* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TWidgetCollection";
  }
  protected:
  explicit TWidgetCollection(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kWidgetFieldNumber = 1,
    kImportDefinitionFieldNumber = 2,
  };
  // repeated .HmiWidget.TWidget widget = 1;
  int widget_size() const;
  private:
  int _internal_widget_size() const;
  public:
  void clear_widget();
  ::HmiWidget::TWidget* mutable_widget(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TWidget >*
      mutable_widget();
  private:
  const ::HmiWidget::TWidget& _internal_widget(int index) const;
  ::HmiWidget::TWidget* _internal_add_widget();
  public:
  const ::HmiWidget::TWidget& widget(int index) const;
  ::HmiWidget::TWidget* add_widget();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TWidget >&
      widget() const;

  // repeated .HmiWidget.TImportDefinition importDefinition = 2;
  int importdefinition_size() const;
  private:
  int _internal_importdefinition_size() const;
  public:
  void clear_importdefinition();
  ::HmiWidget::TImportDefinition* mutable_importdefinition(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TImportDefinition >*
      mutable_importdefinition();
  private:
  const ::HmiWidget::TImportDefinition& _internal_importdefinition(int index) const;
  ::HmiWidget::TImportDefinition* _internal_add_importdefinition();
  public:
  const ::HmiWidget::TImportDefinition& importdefinition(int index) const;
  ::HmiWidget::TImportDefinition* add_importdefinition();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TImportDefinition >&
      importdefinition() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TWidgetCollection)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TWidget > widget_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TImportDefinition > importdefinition_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TChildWidget final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TChildWidget) */ {
 public:
  inline TChildWidget() : TChildWidget(nullptr) {}
  ~TChildWidget() override;
  explicit PROTOBUF_CONSTEXPR TChildWidget(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TChildWidget(const TChildWidget& from);
  TChildWidget(TChildWidget&& from) noexcept
    : TChildWidget() {
    *this = ::std::move(from);
  }

  inline TChildWidget& operator=(const TChildWidget& from) {
    CopyFrom(from);
    return *this;
  }
  inline TChildWidget& operator=(TChildWidget&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TChildWidget& default_instance() {
    return *internal_default_instance();
  }
  static inline const TChildWidget* internal_default_instance() {
    return reinterpret_cast<const TChildWidget*>(
               &_TChildWidget_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    26;

  friend void swap(TChildWidget& a, TChildWidget& b) {
    a.Swap(&b);
  }
  inline void Swap(TChildWidget* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TChildWidget* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TChildWidget* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TChildWidget>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TChildWidget& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TChildWidget& from) {
    TChildWidget::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TChildWidget* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TChildWidget";
  }
  protected:
  explicit TChildWidget(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kModelbindingFieldNumber = 3,
    kUseImportFieldNumber = 4,
    kIdentifierFieldNumber = 1,
    kWidgetTypeFieldNumber = 2,
    kForwardSignalsFieldNumber = 5,
    kInputFieldNumber = 6,
    kWidgetLevelSelectionFieldNumber = 7,
  };
  // repeated .HmiWidget.TChildModelParameter modelbinding = 3;
  int modelbinding_size() const;
  private:
  int _internal_modelbinding_size() const;
  public:
  void clear_modelbinding();
  ::HmiWidget::TChildModelParameter* mutable_modelbinding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
      mutable_modelbinding();
  private:
  const ::HmiWidget::TChildModelParameter& _internal_modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* _internal_add_modelbinding();
  public:
  const ::HmiWidget::TChildModelParameter& modelbinding(int index) const;
  ::HmiWidget::TChildModelParameter* add_modelbinding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
      modelbinding() const;

  // repeated .TIdentifier useImport = 4;
  int useimport_size() const;
  private:
  int _internal_useimport_size() const;
  public:
  void clear_useimport();
  ::TIdentifier* mutable_useimport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_useimport();
  private:
  const ::TIdentifier& _internal_useimport(int index) const;
  ::TIdentifier* _internal_add_useimport();
  public:
  const ::TIdentifier& useimport(int index) const;
  ::TIdentifier* add_useimport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      useimport() const;

  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .TIdentifier widgetType = 2;
  bool has_widgettype() const;
  private:
  bool _internal_has_widgettype() const;
  public:
  void clear_widgettype();
  const ::TIdentifier& widgettype() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_widgettype();
  ::TIdentifier* mutable_widgettype();
  void set_allocated_widgettype(::TIdentifier* widgettype);
  private:
  const ::TIdentifier& _internal_widgettype() const;
  ::TIdentifier* _internal_mutable_widgettype();
  public:
  void unsafe_arena_set_allocated_widgettype(
      ::TIdentifier* widgettype);
  ::TIdentifier* unsafe_arena_release_widgettype();

  // optional .HmiWidget.TForwardSignals forwardSignals = 5;
  bool has_forwardsignals() const;
  private:
  bool _internal_has_forwardsignals() const;
  public:
  void clear_forwardsignals();
  const ::HmiWidget::TForwardSignals& forwardsignals() const;
  PROTOBUF_NODISCARD ::HmiWidget::TForwardSignals* release_forwardsignals();
  ::HmiWidget::TForwardSignals* mutable_forwardsignals();
  void set_allocated_forwardsignals(::HmiWidget::TForwardSignals* forwardsignals);
  private:
  const ::HmiWidget::TForwardSignals& _internal_forwardsignals() const;
  ::HmiWidget::TForwardSignals* _internal_mutable_forwardsignals();
  public:
  void unsafe_arena_set_allocated_forwardsignals(
      ::HmiWidget::TForwardSignals* forwardsignals);
  ::HmiWidget::TForwardSignals* unsafe_arena_release_forwardsignals();

  // optional .HmiWidget.TInputConfig input = 6;
  bool has_input() const;
  private:
  bool _internal_has_input() const;
  public:
  void clear_input();
  const ::HmiWidget::TInputConfig& input() const;
  PROTOBUF_NODISCARD ::HmiWidget::TInputConfig* release_input();
  ::HmiWidget::TInputConfig* mutable_input();
  void set_allocated_input(::HmiWidget::TInputConfig* input);
  private:
  const ::HmiWidget::TInputConfig& _internal_input() const;
  ::HmiWidget::TInputConfig* _internal_mutable_input();
  public:
  void unsafe_arena_set_allocated_input(
      ::HmiWidget::TInputConfig* input);
  ::HmiWidget::TInputConfig* unsafe_arena_release_input();

  // optional .HmiWidget.TELevelSelection widgetLevelSelection = 7 [default = TELevelSelection_Default];
  bool has_widgetlevelselection() const;
  private:
  bool _internal_has_widgetlevelselection() const;
  public:
  void clear_widgetlevelselection();
  ::HmiWidget::TELevelSelection widgetlevelselection() const;
  void set_widgetlevelselection(::HmiWidget::TELevelSelection value);
  private:
  ::HmiWidget::TELevelSelection _internal_widgetlevelselection() const;
  void _internal_set_widgetlevelselection(::HmiWidget::TELevelSelection value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TChildWidget)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter > modelbinding_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > useimport_;
    ::TIdentifier* identifier_;
    ::TIdentifier* widgettype_;
    ::HmiWidget::TForwardSignals* forwardsignals_;
    ::HmiWidget::TInputConfig* input_;
    int widgetlevelselection_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TChildModelParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TChildModelParameter) */ {
 public:
  inline TChildModelParameter() : TChildModelParameter(nullptr) {}
  ~TChildModelParameter() override;
  explicit PROTOBUF_CONSTEXPR TChildModelParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TChildModelParameter(const TChildModelParameter& from);
  TChildModelParameter(TChildModelParameter&& from) noexcept
    : TChildModelParameter() {
    *this = ::std::move(from);
  }

  inline TChildModelParameter& operator=(const TChildModelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TChildModelParameter& operator=(TChildModelParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TChildModelParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TChildModelParameter* internal_default_instance() {
    return reinterpret_cast<const TChildModelParameter*>(
               &_TChildModelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    27;

  friend void swap(TChildModelParameter& a, TChildModelParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TChildModelParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TChildModelParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TChildModelParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TChildModelParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TChildModelParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TChildModelParameter& from) {
    TChildModelParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TChildModelParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TChildModelParameter";
  }
  protected:
  explicit TChildModelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kBindingFieldNumber = 2,
  };
  // required .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // required .TDataBinding binding = 2;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::TDataBinding& binding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_binding();
  ::TDataBinding* mutable_binding();
  void set_allocated_binding(::TDataBinding* binding);
  private:
  const ::TDataBinding& _internal_binding() const;
  ::TDataBinding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::TDataBinding* binding);
  ::TDataBinding* unsafe_arena_release_binding();

  // @@protoc_insertion_point(class_scope:HmiWidget.TChildModelParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TDataBinding* binding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TExternalModelParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TExternalModelParameter) */ {
 public:
  inline TExternalModelParameter() : TExternalModelParameter(nullptr) {}
  ~TExternalModelParameter() override;
  explicit PROTOBUF_CONSTEXPR TExternalModelParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TExternalModelParameter(const TExternalModelParameter& from);
  TExternalModelParameter(TExternalModelParameter&& from) noexcept
    : TExternalModelParameter() {
    *this = ::std::move(from);
  }

  inline TExternalModelParameter& operator=(const TExternalModelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TExternalModelParameter& operator=(TExternalModelParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TExternalModelParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TExternalModelParameter* internal_default_instance() {
    return reinterpret_cast<const TExternalModelParameter*>(
               &_TExternalModelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    28;

  friend void swap(TExternalModelParameter& a, TExternalModelParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TExternalModelParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TExternalModelParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TExternalModelParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TExternalModelParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TExternalModelParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TExternalModelParameter& from) {
    TExternalModelParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TExternalModelParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TExternalModelParameter";
  }
  protected:
  explicit TExternalModelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kVariantFieldNumber = 2,
    kBindingFieldNumber = 3,
  };
  // required .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // optional .TVariant variant = 2;
  bool has_variant() const;
  private:
  bool _internal_has_variant() const;
  public:
  void clear_variant();
  const ::TVariant& variant() const;
  PROTOBUF_NODISCARD ::TVariant* release_variant();
  ::TVariant* mutable_variant();
  void set_allocated_variant(::TVariant* variant);
  private:
  const ::TVariant& _internal_variant() const;
  ::TVariant* _internal_mutable_variant();
  public:
  void unsafe_arena_set_allocated_variant(
      ::TVariant* variant);
  ::TVariant* unsafe_arena_release_variant();

  // optional .TDataBinding binding = 3;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::TDataBinding& binding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_binding();
  ::TDataBinding* mutable_binding();
  void set_allocated_binding(::TDataBinding* binding);
  private:
  const ::TDataBinding& _internal_binding() const;
  ::TDataBinding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::TDataBinding* binding);
  ::TDataBinding* unsafe_arena_release_binding();

  // @@protoc_insertion_point(class_scope:HmiWidget.TExternalModelParameter)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TVariant* variant_;
    ::TDataBinding* binding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TInternalModelParameter final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TInternalModelParameter) */ {
 public:
  inline TInternalModelParameter() : TInternalModelParameter(nullptr) {}
  ~TInternalModelParameter() override;
  explicit PROTOBUF_CONSTEXPR TInternalModelParameter(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TInternalModelParameter(const TInternalModelParameter& from);
  TInternalModelParameter(TInternalModelParameter&& from) noexcept
    : TInternalModelParameter() {
    *this = ::std::move(from);
  }

  inline TInternalModelParameter& operator=(const TInternalModelParameter& from) {
    CopyFrom(from);
    return *this;
  }
  inline TInternalModelParameter& operator=(TInternalModelParameter&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TInternalModelParameter& default_instance() {
    return *internal_default_instance();
  }
  static inline const TInternalModelParameter* internal_default_instance() {
    return reinterpret_cast<const TInternalModelParameter*>(
               &_TInternalModelParameter_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    29;

  friend void swap(TInternalModelParameter& a, TInternalModelParameter& b) {
    a.Swap(&b);
  }
  inline void Swap(TInternalModelParameter* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TInternalModelParameter* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TInternalModelParameter* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TInternalModelParameter>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TInternalModelParameter& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TInternalModelParameter& from) {
    TInternalModelParameter::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TInternalModelParameter* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TInternalModelParameter";
  }
  protected:
  explicit TInternalModelParameter(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kBindingFieldNumber = 2,
  };
  // required .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // required .TDataBinding binding = 2;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::TDataBinding& binding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_binding();
  ::TDataBinding* mutable_binding();
  void set_allocated_binding(::TDataBinding* binding);
  private:
  const ::TDataBinding& _internal_binding() const;
  ::TDataBinding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::TDataBinding* binding);
  ::TDataBinding* unsafe_arena_release_binding();

  // @@protoc_insertion_point(class_scope:HmiWidget.TInternalModelParameter)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TDataBinding* binding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TSlot) */ {
 public:
  inline TSlot() : TSlot(nullptr) {}
  ~TSlot() override;
  explicit PROTOBUF_CONSTEXPR TSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSlot(const TSlot& from);
  TSlot(TSlot&& from) noexcept
    : TSlot() {
    *this = ::std::move(from);
  }

  inline TSlot& operator=(const TSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSlot& operator=(TSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSlot* internal_default_instance() {
    return reinterpret_cast<const TSlot*>(
               &_TSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    30;

  friend void swap(TSlot& a, TSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(TSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSlot& from) {
    TSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TSlot";
  }
  protected:
  explicit TSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 2,
    kIdentifierFieldNumber = 1,
  };
  // repeated .HmiWidget.TCommand command = 2;
  int command_size() const;
  private:
  int _internal_command_size() const;
  public:
  void clear_command();
  ::HmiWidget::TCommand* mutable_command(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >*
      mutable_command();
  private:
  const ::HmiWidget::TCommand& _internal_command(int index) const;
  ::HmiWidget::TCommand* _internal_add_command();
  public:
  const ::HmiWidget::TCommand& command(int index) const;
  ::HmiWidget::TCommand* add_command();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >&
      command() const;

  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // @@protoc_insertion_point(class_scope:HmiWidget.TSlot)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand > command_;
    ::TIdentifier* identifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCommand) */ {
 public:
  inline TCommand() : TCommand(nullptr) {}
  ~TCommand() override;
  explicit PROTOBUF_CONSTEXPR TCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCommand(const TCommand& from);
  TCommand(TCommand&& from) noexcept
    : TCommand() {
    *this = ::std::move(from);
  }

  inline TCommand& operator=(const TCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCommand& operator=(TCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCommand* internal_default_instance() {
    return reinterpret_cast<const TCommand*>(
               &_TCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    31;

  friend void swap(TCommand& a, TCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCommand& from) {
    TCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCommand";
  }
  protected:
  explicit TCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
    kValueAssignmentFieldNumber = 2,
    kSignalFieldNumber = 4,
    kAnimationTriggerFieldNumber = 5,
    kMultiCommandFieldNumber = 6,
    kConditionFieldNumber = 7,
    kRequestLayoutFieldNumber = 8,
    kDebugOutputFieldNumber = 9,
    kWidgetDataObjectSetValueFieldNumber = 10,
    kWidgetDataObjectCreateProviderFieldNumber = 11,
    kWidgetDataObjectCreateConsumerFieldNumber = 12,
    kUpdateDcsmMetadataFieldNumber = 13,
    kSignalParameterValuesExtractorFieldNumber = 14,
  };
  // optional .HmiWidget.TParameterAssignment assignment = 1;
  bool has_assignment() const;
  private:
  bool _internal_has_assignment() const;
  public:
  void clear_assignment();
  const ::HmiWidget::TParameterAssignment& assignment() const;
  PROTOBUF_NODISCARD ::HmiWidget::TParameterAssignment* release_assignment();
  ::HmiWidget::TParameterAssignment* mutable_assignment();
  void set_allocated_assignment(::HmiWidget::TParameterAssignment* assignment);
  private:
  const ::HmiWidget::TParameterAssignment& _internal_assignment() const;
  ::HmiWidget::TParameterAssignment* _internal_mutable_assignment();
  public:
  void unsafe_arena_set_allocated_assignment(
      ::HmiWidget::TParameterAssignment* assignment);
  ::HmiWidget::TParameterAssignment* unsafe_arena_release_assignment();

  // optional .HmiWidget.TParameterValueAssignment valueAssignment = 2;
  bool has_valueassignment() const;
  private:
  bool _internal_has_valueassignment() const;
  public:
  void clear_valueassignment();
  const ::HmiWidget::TParameterValueAssignment& valueassignment() const;
  PROTOBUF_NODISCARD ::HmiWidget::TParameterValueAssignment* release_valueassignment();
  ::HmiWidget::TParameterValueAssignment* mutable_valueassignment();
  void set_allocated_valueassignment(::HmiWidget::TParameterValueAssignment* valueassignment);
  private:
  const ::HmiWidget::TParameterValueAssignment& _internal_valueassignment() const;
  ::HmiWidget::TParameterValueAssignment* _internal_mutable_valueassignment();
  public:
  void unsafe_arena_set_allocated_valueassignment(
      ::HmiWidget::TParameterValueAssignment* valueassignment);
  ::HmiWidget::TParameterValueAssignment* unsafe_arena_release_valueassignment();

  // optional .HmiWidget.TSignal signal = 4;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  const ::HmiWidget::TSignal& signal() const;
  PROTOBUF_NODISCARD ::HmiWidget::TSignal* release_signal();
  ::HmiWidget::TSignal* mutable_signal();
  void set_allocated_signal(::HmiWidget::TSignal* signal);
  private:
  const ::HmiWidget::TSignal& _internal_signal() const;
  ::HmiWidget::TSignal* _internal_mutable_signal();
  public:
  void unsafe_arena_set_allocated_signal(
      ::HmiWidget::TSignal* signal);
  ::HmiWidget::TSignal* unsafe_arena_release_signal();

  // optional .HmiWidget.TAnimationTrigger animationTrigger = 5;
  bool has_animationtrigger() const;
  private:
  bool _internal_has_animationtrigger() const;
  public:
  void clear_animationtrigger();
  const ::HmiWidget::TAnimationTrigger& animationtrigger() const;
  PROTOBUF_NODISCARD ::HmiWidget::TAnimationTrigger* release_animationtrigger();
  ::HmiWidget::TAnimationTrigger* mutable_animationtrigger();
  void set_allocated_animationtrigger(::HmiWidget::TAnimationTrigger* animationtrigger);
  private:
  const ::HmiWidget::TAnimationTrigger& _internal_animationtrigger() const;
  ::HmiWidget::TAnimationTrigger* _internal_mutable_animationtrigger();
  public:
  void unsafe_arena_set_allocated_animationtrigger(
      ::HmiWidget::TAnimationTrigger* animationtrigger);
  ::HmiWidget::TAnimationTrigger* unsafe_arena_release_animationtrigger();

  // optional .HmiWidget.TMultiCommand multiCommand = 6;
  bool has_multicommand() const;
  private:
  bool _internal_has_multicommand() const;
  public:
  void clear_multicommand();
  const ::HmiWidget::TMultiCommand& multicommand() const;
  PROTOBUF_NODISCARD ::HmiWidget::TMultiCommand* release_multicommand();
  ::HmiWidget::TMultiCommand* mutable_multicommand();
  void set_allocated_multicommand(::HmiWidget::TMultiCommand* multicommand);
  private:
  const ::HmiWidget::TMultiCommand& _internal_multicommand() const;
  ::HmiWidget::TMultiCommand* _internal_mutable_multicommand();
  public:
  void unsafe_arena_set_allocated_multicommand(
      ::HmiWidget::TMultiCommand* multicommand);
  ::HmiWidget::TMultiCommand* unsafe_arena_release_multicommand();

  // optional .TDataBinding condition = 7;
  bool has_condition() const;
  private:
  bool _internal_has_condition() const;
  public:
  void clear_condition();
  const ::TDataBinding& condition() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_condition();
  ::TDataBinding* mutable_condition();
  void set_allocated_condition(::TDataBinding* condition);
  private:
  const ::TDataBinding& _internal_condition() const;
  ::TDataBinding* _internal_mutable_condition();
  public:
  void unsafe_arena_set_allocated_condition(
      ::TDataBinding* condition);
  ::TDataBinding* unsafe_arena_release_condition();

  // optional .HmiWidget.TRequestLayout requestLayout = 8;
  bool has_requestlayout() const;
  private:
  bool _internal_has_requestlayout() const;
  public:
  void clear_requestlayout();
  const ::HmiWidget::TRequestLayout& requestlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TRequestLayout* release_requestlayout();
  ::HmiWidget::TRequestLayout* mutable_requestlayout();
  void set_allocated_requestlayout(::HmiWidget::TRequestLayout* requestlayout);
  private:
  const ::HmiWidget::TRequestLayout& _internal_requestlayout() const;
  ::HmiWidget::TRequestLayout* _internal_mutable_requestlayout();
  public:
  void unsafe_arena_set_allocated_requestlayout(
      ::HmiWidget::TRequestLayout* requestlayout);
  ::HmiWidget::TRequestLayout* unsafe_arena_release_requestlayout();

  // optional .HmiWidget.TDebugOutputCommand debugOutput = 9;
  bool has_debugoutput() const;
  private:
  bool _internal_has_debugoutput() const;
  public:
  void clear_debugoutput();
  const ::HmiWidget::TDebugOutputCommand& debugoutput() const;
  PROTOBUF_NODISCARD ::HmiWidget::TDebugOutputCommand* release_debugoutput();
  ::HmiWidget::TDebugOutputCommand* mutable_debugoutput();
  void set_allocated_debugoutput(::HmiWidget::TDebugOutputCommand* debugoutput);
  private:
  const ::HmiWidget::TDebugOutputCommand& _internal_debugoutput() const;
  ::HmiWidget::TDebugOutputCommand* _internal_mutable_debugoutput();
  public:
  void unsafe_arena_set_allocated_debugoutput(
      ::HmiWidget::TDebugOutputCommand* debugoutput);
  ::HmiWidget::TDebugOutputCommand* unsafe_arena_release_debugoutput();

  // optional .HmiWidget.TWidgetDataObjectSetValue widgetDataObjectSetValue = 10;
  bool has_widgetdataobjectsetvalue() const;
  private:
  bool _internal_has_widgetdataobjectsetvalue() const;
  public:
  void clear_widgetdataobjectsetvalue();
  const ::HmiWidget::TWidgetDataObjectSetValue& widgetdataobjectsetvalue() const;
  PROTOBUF_NODISCARD ::HmiWidget::TWidgetDataObjectSetValue* release_widgetdataobjectsetvalue();
  ::HmiWidget::TWidgetDataObjectSetValue* mutable_widgetdataobjectsetvalue();
  void set_allocated_widgetdataobjectsetvalue(::HmiWidget::TWidgetDataObjectSetValue* widgetdataobjectsetvalue);
  private:
  const ::HmiWidget::TWidgetDataObjectSetValue& _internal_widgetdataobjectsetvalue() const;
  ::HmiWidget::TWidgetDataObjectSetValue* _internal_mutable_widgetdataobjectsetvalue();
  public:
  void unsafe_arena_set_allocated_widgetdataobjectsetvalue(
      ::HmiWidget::TWidgetDataObjectSetValue* widgetdataobjectsetvalue);
  ::HmiWidget::TWidgetDataObjectSetValue* unsafe_arena_release_widgetdataobjectsetvalue();

  // optional .HmiWidget.TWidgetDataObjectCreateProvider widgetDataObjectCreateProvider = 11;
  bool has_widgetdataobjectcreateprovider() const;
  private:
  bool _internal_has_widgetdataobjectcreateprovider() const;
  public:
  void clear_widgetdataobjectcreateprovider();
  const ::HmiWidget::TWidgetDataObjectCreateProvider& widgetdataobjectcreateprovider() const;
  PROTOBUF_NODISCARD ::HmiWidget::TWidgetDataObjectCreateProvider* release_widgetdataobjectcreateprovider();
  ::HmiWidget::TWidgetDataObjectCreateProvider* mutable_widgetdataobjectcreateprovider();
  void set_allocated_widgetdataobjectcreateprovider(::HmiWidget::TWidgetDataObjectCreateProvider* widgetdataobjectcreateprovider);
  private:
  const ::HmiWidget::TWidgetDataObjectCreateProvider& _internal_widgetdataobjectcreateprovider() const;
  ::HmiWidget::TWidgetDataObjectCreateProvider* _internal_mutable_widgetdataobjectcreateprovider();
  public:
  void unsafe_arena_set_allocated_widgetdataobjectcreateprovider(
      ::HmiWidget::TWidgetDataObjectCreateProvider* widgetdataobjectcreateprovider);
  ::HmiWidget::TWidgetDataObjectCreateProvider* unsafe_arena_release_widgetdataobjectcreateprovider();

  // optional .HmiWidget.TWidgetDataObjectCreateConsumer widgetDataObjectCreateConsumer = 12;
  bool has_widgetdataobjectcreateconsumer() const;
  private:
  bool _internal_has_widgetdataobjectcreateconsumer() const;
  public:
  void clear_widgetdataobjectcreateconsumer();
  const ::HmiWidget::TWidgetDataObjectCreateConsumer& widgetdataobjectcreateconsumer() const;
  PROTOBUF_NODISCARD ::HmiWidget::TWidgetDataObjectCreateConsumer* release_widgetdataobjectcreateconsumer();
  ::HmiWidget::TWidgetDataObjectCreateConsumer* mutable_widgetdataobjectcreateconsumer();
  void set_allocated_widgetdataobjectcreateconsumer(::HmiWidget::TWidgetDataObjectCreateConsumer* widgetdataobjectcreateconsumer);
  private:
  const ::HmiWidget::TWidgetDataObjectCreateConsumer& _internal_widgetdataobjectcreateconsumer() const;
  ::HmiWidget::TWidgetDataObjectCreateConsumer* _internal_mutable_widgetdataobjectcreateconsumer();
  public:
  void unsafe_arena_set_allocated_widgetdataobjectcreateconsumer(
      ::HmiWidget::TWidgetDataObjectCreateConsumer* widgetdataobjectcreateconsumer);
  ::HmiWidget::TWidgetDataObjectCreateConsumer* unsafe_arena_release_widgetdataobjectcreateconsumer();

  // optional .HmiWidget.TUpdateDcsmMetadataCommand updateDcsmMetadata = 13;
  bool has_updatedcsmmetadata() const;
  private:
  bool _internal_has_updatedcsmmetadata() const;
  public:
  void clear_updatedcsmmetadata();
  const ::HmiWidget::TUpdateDcsmMetadataCommand& updatedcsmmetadata() const;
  PROTOBUF_NODISCARD ::HmiWidget::TUpdateDcsmMetadataCommand* release_updatedcsmmetadata();
  ::HmiWidget::TUpdateDcsmMetadataCommand* mutable_updatedcsmmetadata();
  void set_allocated_updatedcsmmetadata(::HmiWidget::TUpdateDcsmMetadataCommand* updatedcsmmetadata);
  private:
  const ::HmiWidget::TUpdateDcsmMetadataCommand& _internal_updatedcsmmetadata() const;
  ::HmiWidget::TUpdateDcsmMetadataCommand* _internal_mutable_updatedcsmmetadata();
  public:
  void unsafe_arena_set_allocated_updatedcsmmetadata(
      ::HmiWidget::TUpdateDcsmMetadataCommand* updatedcsmmetadata);
  ::HmiWidget::TUpdateDcsmMetadataCommand* unsafe_arena_release_updatedcsmmetadata();

  // optional .HmiWidget.TSignalParameterValuesExtractor signalParameterValuesExtractor = 14;
  bool has_signalparametervaluesextractor() const;
  private:
  bool _internal_has_signalparametervaluesextractor() const;
  public:
  void clear_signalparametervaluesextractor();
  const ::HmiWidget::TSignalParameterValuesExtractor& signalparametervaluesextractor() const;
  PROTOBUF_NODISCARD ::HmiWidget::TSignalParameterValuesExtractor* release_signalparametervaluesextractor();
  ::HmiWidget::TSignalParameterValuesExtractor* mutable_signalparametervaluesextractor();
  void set_allocated_signalparametervaluesextractor(::HmiWidget::TSignalParameterValuesExtractor* signalparametervaluesextractor);
  private:
  const ::HmiWidget::TSignalParameterValuesExtractor& _internal_signalparametervaluesextractor() const;
  ::HmiWidget::TSignalParameterValuesExtractor* _internal_mutable_signalparametervaluesextractor();
  public:
  void unsafe_arena_set_allocated_signalparametervaluesextractor(
      ::HmiWidget::TSignalParameterValuesExtractor* signalparametervaluesextractor);
  ::HmiWidget::TSignalParameterValuesExtractor* unsafe_arena_release_signalparametervaluesextractor();

  // @@protoc_insertion_point(class_scope:HmiWidget.TCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::TParameterAssignment* assignment_;
    ::HmiWidget::TParameterValueAssignment* valueassignment_;
    ::HmiWidget::TSignal* signal_;
    ::HmiWidget::TAnimationTrigger* animationtrigger_;
    ::HmiWidget::TMultiCommand* multicommand_;
    ::TDataBinding* condition_;
    ::HmiWidget::TRequestLayout* requestlayout_;
    ::HmiWidget::TDebugOutputCommand* debugoutput_;
    ::HmiWidget::TWidgetDataObjectSetValue* widgetdataobjectsetvalue_;
    ::HmiWidget::TWidgetDataObjectCreateProvider* widgetdataobjectcreateprovider_;
    ::HmiWidget::TWidgetDataObjectCreateConsumer* widgetdataobjectcreateconsumer_;
    ::HmiWidget::TUpdateDcsmMetadataCommand* updatedcsmmetadata_;
    ::HmiWidget::TSignalParameterValuesExtractor* signalparametervaluesextractor_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TMultiCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TMultiCommand) */ {
 public:
  inline TMultiCommand() : TMultiCommand(nullptr) {}
  ~TMultiCommand() override;
  explicit PROTOBUF_CONSTEXPR TMultiCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TMultiCommand(const TMultiCommand& from);
  TMultiCommand(TMultiCommand&& from) noexcept
    : TMultiCommand() {
    *this = ::std::move(from);
  }

  inline TMultiCommand& operator=(const TMultiCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TMultiCommand& operator=(TMultiCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TMultiCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TMultiCommand* internal_default_instance() {
    return reinterpret_cast<const TMultiCommand*>(
               &_TMultiCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    32;

  friend void swap(TMultiCommand& a, TMultiCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TMultiCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TMultiCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TMultiCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TMultiCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TMultiCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TMultiCommand& from) {
    TMultiCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TMultiCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TMultiCommand";
  }
  protected:
  explicit TMultiCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCommandFieldNumber = 1,
  };
  // repeated .HmiWidget.TCommand command = 1;
  int command_size() const;
  private:
  int _internal_command_size() const;
  public:
  void clear_command();
  ::HmiWidget::TCommand* mutable_command(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >*
      mutable_command();
  private:
  const ::HmiWidget::TCommand& _internal_command(int index) const;
  ::HmiWidget::TCommand* _internal_add_command();
  public:
  const ::HmiWidget::TCommand& command(int index) const;
  ::HmiWidget::TCommand* add_command();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >&
      command() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TMultiCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand > command_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TParameterAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TParameterAssignment) */ {
 public:
  inline TParameterAssignment() : TParameterAssignment(nullptr) {}
  ~TParameterAssignment() override;
  explicit PROTOBUF_CONSTEXPR TParameterAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TParameterAssignment(const TParameterAssignment& from);
  TParameterAssignment(TParameterAssignment&& from) noexcept
    : TParameterAssignment() {
    *this = ::std::move(from);
  }

  inline TParameterAssignment& operator=(const TParameterAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TParameterAssignment& operator=(TParameterAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TParameterAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const TParameterAssignment* internal_default_instance() {
    return reinterpret_cast<const TParameterAssignment*>(
               &_TParameterAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    33;

  friend void swap(TParameterAssignment& a, TParameterAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(TParameterAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TParameterAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TParameterAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TParameterAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TParameterAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TParameterAssignment& from) {
    TParameterAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TParameterAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TParameterAssignment";
  }
  protected:
  explicit TParameterAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kBindingFieldNumber = 2,
    kTargetFieldNumber = 3,
    kTargetTypeFieldNumber = 4,
  };
  // required .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // required .TDataBinding binding = 2;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::TDataBinding& binding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_binding();
  ::TDataBinding* mutable_binding();
  void set_allocated_binding(::TDataBinding* binding);
  private:
  const ::TDataBinding& _internal_binding() const;
  ::TDataBinding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::TDataBinding* binding);
  ::TDataBinding* unsafe_arena_release_binding();

  // optional .TIdentifier target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::TIdentifier& target() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_target();
  ::TIdentifier* mutable_target();
  void set_allocated_target(::TIdentifier* target);
  private:
  const ::TIdentifier& _internal_target() const;
  ::TIdentifier* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::TIdentifier* target);
  ::TIdentifier* unsafe_arena_release_target();

  // optional .HmiWidget.TEAssignmentTarget targetType = 4 [default = TEAssignmentTarget_Local];
  bool has_targettype() const;
  private:
  bool _internal_has_targettype() const;
  public:
  void clear_targettype();
  ::HmiWidget::TEAssignmentTarget targettype() const;
  void set_targettype(::HmiWidget::TEAssignmentTarget value);
  private:
  ::HmiWidget::TEAssignmentTarget _internal_targettype() const;
  void _internal_set_targettype(::HmiWidget::TEAssignmentTarget value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TParameterAssignment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TDataBinding* binding_;
    ::TIdentifier* target_;
    int targettype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TParameterValueAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TParameterValueAssignment) */ {
 public:
  inline TParameterValueAssignment() : TParameterValueAssignment(nullptr) {}
  ~TParameterValueAssignment() override;
  explicit PROTOBUF_CONSTEXPR TParameterValueAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TParameterValueAssignment(const TParameterValueAssignment& from);
  TParameterValueAssignment(TParameterValueAssignment&& from) noexcept
    : TParameterValueAssignment() {
    *this = ::std::move(from);
  }

  inline TParameterValueAssignment& operator=(const TParameterValueAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TParameterValueAssignment& operator=(TParameterValueAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TParameterValueAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const TParameterValueAssignment* internal_default_instance() {
    return reinterpret_cast<const TParameterValueAssignment*>(
               &_TParameterValueAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    34;

  friend void swap(TParameterValueAssignment& a, TParameterValueAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(TParameterValueAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TParameterValueAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TParameterValueAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TParameterValueAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TParameterValueAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TParameterValueAssignment& from) {
    TParameterValueAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TParameterValueAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TParameterValueAssignment";
  }
  protected:
  explicit TParameterValueAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kBindingFieldNumber = 2,
    kTargetFieldNumber = 3,
    kTargetTypeFieldNumber = 4,
  };
  // required .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // required .TDataBinding binding = 2;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::TDataBinding& binding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_binding();
  ::TDataBinding* mutable_binding();
  void set_allocated_binding(::TDataBinding* binding);
  private:
  const ::TDataBinding& _internal_binding() const;
  ::TDataBinding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::TDataBinding* binding);
  ::TDataBinding* unsafe_arena_release_binding();

  // optional .TIdentifier target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::TIdentifier& target() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_target();
  ::TIdentifier* mutable_target();
  void set_allocated_target(::TIdentifier* target);
  private:
  const ::TIdentifier& _internal_target() const;
  ::TIdentifier* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::TIdentifier* target);
  ::TIdentifier* unsafe_arena_release_target();

  // optional .HmiWidget.TEAssignmentTarget targetType = 4 [default = TEAssignmentTarget_Local];
  bool has_targettype() const;
  private:
  bool _internal_has_targettype() const;
  public:
  void clear_targettype();
  ::HmiWidget::TEAssignmentTarget targettype() const;
  void set_targettype(::HmiWidget::TEAssignmentTarget value);
  private:
  ::HmiWidget::TEAssignmentTarget _internal_targettype() const;
  void _internal_set_targettype(::HmiWidget::TEAssignmentTarget value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TParameterValueAssignment)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TDataBinding* binding_;
    ::TIdentifier* target_;
    int targettype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TSignalParameterValuesExtractor_TAssignment final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TSignalParameterValuesExtractor.TAssignment) */ {
 public:
  inline TSignalParameterValuesExtractor_TAssignment() : TSignalParameterValuesExtractor_TAssignment(nullptr) {}
  ~TSignalParameterValuesExtractor_TAssignment() override;
  explicit PROTOBUF_CONSTEXPR TSignalParameterValuesExtractor_TAssignment(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSignalParameterValuesExtractor_TAssignment(const TSignalParameterValuesExtractor_TAssignment& from);
  TSignalParameterValuesExtractor_TAssignment(TSignalParameterValuesExtractor_TAssignment&& from) noexcept
    : TSignalParameterValuesExtractor_TAssignment() {
    *this = ::std::move(from);
  }

  inline TSignalParameterValuesExtractor_TAssignment& operator=(const TSignalParameterValuesExtractor_TAssignment& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSignalParameterValuesExtractor_TAssignment& operator=(TSignalParameterValuesExtractor_TAssignment&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSignalParameterValuesExtractor_TAssignment& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSignalParameterValuesExtractor_TAssignment* internal_default_instance() {
    return reinterpret_cast<const TSignalParameterValuesExtractor_TAssignment*>(
               &_TSignalParameterValuesExtractor_TAssignment_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    35;

  friend void swap(TSignalParameterValuesExtractor_TAssignment& a, TSignalParameterValuesExtractor_TAssignment& b) {
    a.Swap(&b);
  }
  inline void Swap(TSignalParameterValuesExtractor_TAssignment* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSignalParameterValuesExtractor_TAssignment* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSignalParameterValuesExtractor_TAssignment* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSignalParameterValuesExtractor_TAssignment>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSignalParameterValuesExtractor_TAssignment& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSignalParameterValuesExtractor_TAssignment& from) {
    TSignalParameterValuesExtractor_TAssignment::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSignalParameterValuesExtractor_TAssignment* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TSignalParameterValuesExtractor.TAssignment";
  }
  protected:
  explicit TSignalParameterValuesExtractor_TAssignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kParameterKeyFieldNumber = 2,
    kTargetFieldNumber = 3,
    kTargetTypeFieldNumber = 4,
  };
  // optional .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // optional .TIdentifier parameterKey = 2;
  bool has_parameterkey() const;
  private:
  bool _internal_has_parameterkey() const;
  public:
  void clear_parameterkey();
  const ::TIdentifier& parameterkey() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_parameterkey();
  ::TIdentifier* mutable_parameterkey();
  void set_allocated_parameterkey(::TIdentifier* parameterkey);
  private:
  const ::TIdentifier& _internal_parameterkey() const;
  ::TIdentifier* _internal_mutable_parameterkey();
  public:
  void unsafe_arena_set_allocated_parameterkey(
      ::TIdentifier* parameterkey);
  ::TIdentifier* unsafe_arena_release_parameterkey();

  // optional .TIdentifier target = 3;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  const ::TIdentifier& target() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_target();
  ::TIdentifier* mutable_target();
  void set_allocated_target(::TIdentifier* target);
  private:
  const ::TIdentifier& _internal_target() const;
  ::TIdentifier* _internal_mutable_target();
  public:
  void unsafe_arena_set_allocated_target(
      ::TIdentifier* target);
  ::TIdentifier* unsafe_arena_release_target();

  // optional .HmiWidget.TEAssignmentTarget targetType = 4 [default = TEAssignmentTarget_Local];
  bool has_targettype() const;
  private:
  bool _internal_has_targettype() const;
  public:
  void clear_targettype();
  ::HmiWidget::TEAssignmentTarget targettype() const;
  void set_targettype(::HmiWidget::TEAssignmentTarget value);
  private:
  ::HmiWidget::TEAssignmentTarget _internal_targettype() const;
  void _internal_set_targettype(::HmiWidget::TEAssignmentTarget value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TSignalParameterValuesExtractor.TAssignment)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TIdentifier* parameterkey_;
    ::TIdentifier* target_;
    int targettype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TSignalParameterValuesExtractor final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TSignalParameterValuesExtractor) */ {
 public:
  inline TSignalParameterValuesExtractor() : TSignalParameterValuesExtractor(nullptr) {}
  ~TSignalParameterValuesExtractor() override;
  explicit PROTOBUF_CONSTEXPR TSignalParameterValuesExtractor(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSignalParameterValuesExtractor(const TSignalParameterValuesExtractor& from);
  TSignalParameterValuesExtractor(TSignalParameterValuesExtractor&& from) noexcept
    : TSignalParameterValuesExtractor() {
    *this = ::std::move(from);
  }

  inline TSignalParameterValuesExtractor& operator=(const TSignalParameterValuesExtractor& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSignalParameterValuesExtractor& operator=(TSignalParameterValuesExtractor&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSignalParameterValuesExtractor& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSignalParameterValuesExtractor* internal_default_instance() {
    return reinterpret_cast<const TSignalParameterValuesExtractor*>(
               &_TSignalParameterValuesExtractor_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    36;

  friend void swap(TSignalParameterValuesExtractor& a, TSignalParameterValuesExtractor& b) {
    a.Swap(&b);
  }
  inline void Swap(TSignalParameterValuesExtractor* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSignalParameterValuesExtractor* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSignalParameterValuesExtractor* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSignalParameterValuesExtractor>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSignalParameterValuesExtractor& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSignalParameterValuesExtractor& from) {
    TSignalParameterValuesExtractor::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSignalParameterValuesExtractor* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TSignalParameterValuesExtractor";
  }
  protected:
  explicit TSignalParameterValuesExtractor(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TSignalParameterValuesExtractor_TAssignment TAssignment;

  // accessors -------------------------------------------------------

  enum : int {
    kAssignmentFieldNumber = 1,
  };
  // repeated .HmiWidget.TSignalParameterValuesExtractor.TAssignment assignment = 1;
  int assignment_size() const;
  private:
  int _internal_assignment_size() const;
  public:
  void clear_assignment();
  ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* mutable_assignment(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSignalParameterValuesExtractor_TAssignment >*
      mutable_assignment();
  private:
  const ::HmiWidget::TSignalParameterValuesExtractor_TAssignment& _internal_assignment(int index) const;
  ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* _internal_add_assignment();
  public:
  const ::HmiWidget::TSignalParameterValuesExtractor_TAssignment& assignment(int index) const;
  ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* add_assignment();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSignalParameterValuesExtractor_TAssignment >&
      assignment() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TSignalParameterValuesExtractor)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSignalParameterValuesExtractor_TAssignment > assignment_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TSignal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TSignal) */ {
 public:
  inline TSignal() : TSignal(nullptr) {}
  ~TSignal() override;
  explicit PROTOBUF_CONSTEXPR TSignal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TSignal(const TSignal& from);
  TSignal(TSignal&& from) noexcept
    : TSignal() {
    *this = ::std::move(from);
  }

  inline TSignal& operator=(const TSignal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TSignal& operator=(TSignal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TSignal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TSignal* internal_default_instance() {
    return reinterpret_cast<const TSignal*>(
               &_TSignal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    37;

  friend void swap(TSignal& a, TSignal& b) {
    a.Swap(&b);
  }
  inline void Swap(TSignal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TSignal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TSignal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TSignal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TSignal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TSignal& from) {
    TSignal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TSignal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TSignal";
  }
  protected:
  explicit TSignal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 3,
    kSignalIdFieldNumber = 1,
    kTargetChildIdFieldNumber = 2,
    kTargetFieldNumber = 4,
    kTargetLevelFieldNumber = 5,
  };
  // repeated .TDataBinding parameter = 3;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;
  public:
  void clear_parameter();
  ::TDataBinding* mutable_parameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
      mutable_parameter();
  private:
  const ::TDataBinding& _internal_parameter(int index) const;
  ::TDataBinding* _internal_add_parameter();
  public:
  const ::TDataBinding& parameter(int index) const;
  ::TDataBinding* add_parameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
      parameter() const;

  // required .TIdentifier signalId = 1;
  bool has_signalid() const;
  private:
  bool _internal_has_signalid() const;
  public:
  void clear_signalid();
  const ::TIdentifier& signalid() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_signalid();
  ::TIdentifier* mutable_signalid();
  void set_allocated_signalid(::TIdentifier* signalid);
  private:
  const ::TIdentifier& _internal_signalid() const;
  ::TIdentifier* _internal_mutable_signalid();
  public:
  void unsafe_arena_set_allocated_signalid(
      ::TIdentifier* signalid);
  ::TIdentifier* unsafe_arena_release_signalid();

  // optional .TIdentifier targetChildId = 2;
  bool has_targetchildid() const;
  private:
  bool _internal_has_targetchildid() const;
  public:
  void clear_targetchildid();
  const ::TIdentifier& targetchildid() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_targetchildid();
  ::TIdentifier* mutable_targetchildid();
  void set_allocated_targetchildid(::TIdentifier* targetchildid);
  private:
  const ::TIdentifier& _internal_targetchildid() const;
  ::TIdentifier* _internal_mutable_targetchildid();
  public:
  void unsafe_arena_set_allocated_targetchildid(
      ::TIdentifier* targetchildid);
  ::TIdentifier* unsafe_arena_release_targetchildid();

  // optional .HmiWidget.TESignalTarget target = 4;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  ::HmiWidget::TESignalTarget target() const;
  void set_target(::HmiWidget::TESignalTarget value);
  private:
  ::HmiWidget::TESignalTarget _internal_target() const;
  void _internal_set_target(::HmiWidget::TESignalTarget value);
  public:

  // optional uint32 targetLevel = 5;
  bool has_targetlevel() const;
  private:
  bool _internal_has_targetlevel() const;
  public:
  void clear_targetlevel();
  uint32_t targetlevel() const;
  void set_targetlevel(uint32_t value);
  private:
  uint32_t _internal_targetlevel() const;
  void _internal_set_targetlevel(uint32_t value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TSignal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding > parameter_;
    ::TIdentifier* signalid_;
    ::TIdentifier* targetchildid_;
    int target_;
    uint32_t targetlevel_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TRequestLayout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TRequestLayout) */ {
 public:
  inline TRequestLayout() : TRequestLayout(nullptr) {}
  ~TRequestLayout() override;
  explicit PROTOBUF_CONSTEXPR TRequestLayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TRequestLayout(const TRequestLayout& from);
  TRequestLayout(TRequestLayout&& from) noexcept
    : TRequestLayout() {
    *this = ::std::move(from);
  }

  inline TRequestLayout& operator=(const TRequestLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline TRequestLayout& operator=(TRequestLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TRequestLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const TRequestLayout* internal_default_instance() {
    return reinterpret_cast<const TRequestLayout*>(
               &_TRequestLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    38;

  friend void swap(TRequestLayout& a, TRequestLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(TRequestLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TRequestLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TRequestLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TRequestLayout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TRequestLayout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TRequestLayout& from) {
    TRequestLayout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TRequestLayout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TRequestLayout";
  }
  protected:
  explicit TRequestLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kBindingFieldNumber = 2,
  };
  // optional .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // optional .TDataBinding binding = 2;
  bool has_binding() const;
  private:
  bool _internal_has_binding() const;
  public:
  void clear_binding();
  const ::TDataBinding& binding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_binding();
  ::TDataBinding* mutable_binding();
  void set_allocated_binding(::TDataBinding* binding);
  private:
  const ::TDataBinding& _internal_binding() const;
  ::TDataBinding* _internal_mutable_binding();
  public:
  void unsafe_arena_set_allocated_binding(
      ::TDataBinding* binding);
  ::TDataBinding* unsafe_arena_release_binding();

  // @@protoc_insertion_point(class_scope:HmiWidget.TRequestLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::TDataBinding* binding_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TDebugOutputCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TDebugOutputCommand) */ {
 public:
  inline TDebugOutputCommand() : TDebugOutputCommand(nullptr) {}
  ~TDebugOutputCommand() override;
  explicit PROTOBUF_CONSTEXPR TDebugOutputCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TDebugOutputCommand(const TDebugOutputCommand& from);
  TDebugOutputCommand(TDebugOutputCommand&& from) noexcept
    : TDebugOutputCommand() {
    *this = ::std::move(from);
  }

  inline TDebugOutputCommand& operator=(const TDebugOutputCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TDebugOutputCommand& operator=(TDebugOutputCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TDebugOutputCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TDebugOutputCommand* internal_default_instance() {
    return reinterpret_cast<const TDebugOutputCommand*>(
               &_TDebugOutputCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    39;

  friend void swap(TDebugOutputCommand& a, TDebugOutputCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TDebugOutputCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TDebugOutputCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TDebugOutputCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TDebugOutputCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TDebugOutputCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TDebugOutputCommand& from) {
    TDebugOutputCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TDebugOutputCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TDebugOutputCommand";
  }
  protected:
  explicit TDebugOutputCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBindingFieldNumber = 1,
  };
  // repeated .TDataBinding binding = 1;
  int binding_size() const;
  private:
  int _internal_binding_size() const;
  public:
  void clear_binding();
  ::TDataBinding* mutable_binding(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
      mutable_binding();
  private:
  const ::TDataBinding& _internal_binding(int index) const;
  ::TDataBinding* _internal_add_binding();
  public:
  const ::TDataBinding& binding(int index) const;
  ::TDataBinding* add_binding();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
      binding() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TDebugOutputCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding > binding_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TWidgetDataObjectSetValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TWidgetDataObjectSetValue) */ {
 public:
  inline TWidgetDataObjectSetValue() : TWidgetDataObjectSetValue(nullptr) {}
  ~TWidgetDataObjectSetValue() override;
  explicit PROTOBUF_CONSTEXPR TWidgetDataObjectSetValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWidgetDataObjectSetValue(const TWidgetDataObjectSetValue& from);
  TWidgetDataObjectSetValue(TWidgetDataObjectSetValue&& from) noexcept
    : TWidgetDataObjectSetValue() {
    *this = ::std::move(from);
  }

  inline TWidgetDataObjectSetValue& operator=(const TWidgetDataObjectSetValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWidgetDataObjectSetValue& operator=(TWidgetDataObjectSetValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWidgetDataObjectSetValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWidgetDataObjectSetValue* internal_default_instance() {
    return reinterpret_cast<const TWidgetDataObjectSetValue*>(
               &_TWidgetDataObjectSetValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    40;

  friend void swap(TWidgetDataObjectSetValue& a, TWidgetDataObjectSetValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TWidgetDataObjectSetValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWidgetDataObjectSetValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWidgetDataObjectSetValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWidgetDataObjectSetValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWidgetDataObjectSetValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWidgetDataObjectSetValue& from) {
    TWidgetDataObjectSetValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWidgetDataObjectSetValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TWidgetDataObjectSetValue";
  }
  protected:
  explicit TWidgetDataObjectSetValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataObjectFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // optional .TDataBinding dataObject = 1;
  bool has_dataobject() const;
  private:
  bool _internal_has_dataobject() const;
  public:
  void clear_dataobject();
  const ::TDataBinding& dataobject() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_dataobject();
  ::TDataBinding* mutable_dataobject();
  void set_allocated_dataobject(::TDataBinding* dataobject);
  private:
  const ::TDataBinding& _internal_dataobject() const;
  ::TDataBinding* _internal_mutable_dataobject();
  public:
  void unsafe_arena_set_allocated_dataobject(
      ::TDataBinding* dataobject);
  ::TDataBinding* unsafe_arena_release_dataobject();

  // optional .TDataBinding value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TDataBinding& value() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_value();
  ::TDataBinding* mutable_value();
  void set_allocated_value(::TDataBinding* value);
  private:
  const ::TDataBinding& _internal_value() const;
  ::TDataBinding* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TDataBinding* value);
  ::TDataBinding* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:HmiWidget.TWidgetDataObjectSetValue)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* dataobject_;
    ::TDataBinding* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TWidgetDataObjectCreateProvider final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TWidgetDataObjectCreateProvider) */ {
 public:
  inline TWidgetDataObjectCreateProvider() : TWidgetDataObjectCreateProvider(nullptr) {}
  ~TWidgetDataObjectCreateProvider() override;
  explicit PROTOBUF_CONSTEXPR TWidgetDataObjectCreateProvider(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWidgetDataObjectCreateProvider(const TWidgetDataObjectCreateProvider& from);
  TWidgetDataObjectCreateProvider(TWidgetDataObjectCreateProvider&& from) noexcept
    : TWidgetDataObjectCreateProvider() {
    *this = ::std::move(from);
  }

  inline TWidgetDataObjectCreateProvider& operator=(const TWidgetDataObjectCreateProvider& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWidgetDataObjectCreateProvider& operator=(TWidgetDataObjectCreateProvider&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWidgetDataObjectCreateProvider& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWidgetDataObjectCreateProvider* internal_default_instance() {
    return reinterpret_cast<const TWidgetDataObjectCreateProvider*>(
               &_TWidgetDataObjectCreateProvider_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    41;

  friend void swap(TWidgetDataObjectCreateProvider& a, TWidgetDataObjectCreateProvider& b) {
    a.Swap(&b);
  }
  inline void Swap(TWidgetDataObjectCreateProvider* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWidgetDataObjectCreateProvider* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWidgetDataObjectCreateProvider* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWidgetDataObjectCreateProvider>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWidgetDataObjectCreateProvider& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWidgetDataObjectCreateProvider& from) {
    TWidgetDataObjectCreateProvider::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWidgetDataObjectCreateProvider* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TWidgetDataObjectCreateProvider";
  }
  protected:
  explicit TWidgetDataObjectCreateProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataObjectFieldNumber = 1,
    kProviderIdFieldNumber = 2,
  };
  // optional .TDataBinding dataObject = 1;
  bool has_dataobject() const;
  private:
  bool _internal_has_dataobject() const;
  public:
  void clear_dataobject();
  const ::TDataBinding& dataobject() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_dataobject();
  ::TDataBinding* mutable_dataobject();
  void set_allocated_dataobject(::TDataBinding* dataobject);
  private:
  const ::TDataBinding& _internal_dataobject() const;
  ::TDataBinding* _internal_mutable_dataobject();
  public:
  void unsafe_arena_set_allocated_dataobject(
      ::TDataBinding* dataobject);
  ::TDataBinding* unsafe_arena_release_dataobject();

  // optional .TDataBinding providerId = 2;
  bool has_providerid() const;
  private:
  bool _internal_has_providerid() const;
  public:
  void clear_providerid();
  const ::TDataBinding& providerid() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_providerid();
  ::TDataBinding* mutable_providerid();
  void set_allocated_providerid(::TDataBinding* providerid);
  private:
  const ::TDataBinding& _internal_providerid() const;
  ::TDataBinding* _internal_mutable_providerid();
  public:
  void unsafe_arena_set_allocated_providerid(
      ::TDataBinding* providerid);
  ::TDataBinding* unsafe_arena_release_providerid();

  // @@protoc_insertion_point(class_scope:HmiWidget.TWidgetDataObjectCreateProvider)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* dataobject_;
    ::TDataBinding* providerid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TWidgetDataObjectCreateConsumer final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TWidgetDataObjectCreateConsumer) */ {
 public:
  inline TWidgetDataObjectCreateConsumer() : TWidgetDataObjectCreateConsumer(nullptr) {}
  ~TWidgetDataObjectCreateConsumer() override;
  explicit PROTOBUF_CONSTEXPR TWidgetDataObjectCreateConsumer(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWidgetDataObjectCreateConsumer(const TWidgetDataObjectCreateConsumer& from);
  TWidgetDataObjectCreateConsumer(TWidgetDataObjectCreateConsumer&& from) noexcept
    : TWidgetDataObjectCreateConsumer() {
    *this = ::std::move(from);
  }

  inline TWidgetDataObjectCreateConsumer& operator=(const TWidgetDataObjectCreateConsumer& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWidgetDataObjectCreateConsumer& operator=(TWidgetDataObjectCreateConsumer&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWidgetDataObjectCreateConsumer& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWidgetDataObjectCreateConsumer* internal_default_instance() {
    return reinterpret_cast<const TWidgetDataObjectCreateConsumer*>(
               &_TWidgetDataObjectCreateConsumer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    42;

  friend void swap(TWidgetDataObjectCreateConsumer& a, TWidgetDataObjectCreateConsumer& b) {
    a.Swap(&b);
  }
  inline void Swap(TWidgetDataObjectCreateConsumer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWidgetDataObjectCreateConsumer* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWidgetDataObjectCreateConsumer* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWidgetDataObjectCreateConsumer>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWidgetDataObjectCreateConsumer& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWidgetDataObjectCreateConsumer& from) {
    TWidgetDataObjectCreateConsumer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWidgetDataObjectCreateConsumer* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TWidgetDataObjectCreateConsumer";
  }
  protected:
  explicit TWidgetDataObjectCreateConsumer(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kDataObjectFieldNumber = 1,
    kConsumerIdFieldNumber = 2,
  };
  // optional .TDataBinding dataObject = 1;
  bool has_dataobject() const;
  private:
  bool _internal_has_dataobject() const;
  public:
  void clear_dataobject();
  const ::TDataBinding& dataobject() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_dataobject();
  ::TDataBinding* mutable_dataobject();
  void set_allocated_dataobject(::TDataBinding* dataobject);
  private:
  const ::TDataBinding& _internal_dataobject() const;
  ::TDataBinding* _internal_mutable_dataobject();
  public:
  void unsafe_arena_set_allocated_dataobject(
      ::TDataBinding* dataobject);
  ::TDataBinding* unsafe_arena_release_dataobject();

  // optional .TDataBinding consumerId = 2;
  bool has_consumerid() const;
  private:
  bool _internal_has_consumerid() const;
  public:
  void clear_consumerid();
  const ::TDataBinding& consumerid() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_consumerid();
  ::TDataBinding* mutable_consumerid();
  void set_allocated_consumerid(::TDataBinding* consumerid);
  private:
  const ::TDataBinding& _internal_consumerid() const;
  ::TDataBinding* _internal_mutable_consumerid();
  public:
  void unsafe_arena_set_allocated_consumerid(
      ::TDataBinding* consumerid);
  ::TDataBinding* unsafe_arena_release_consumerid();

  // @@protoc_insertion_point(class_scope:HmiWidget.TWidgetDataObjectCreateConsumer)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* dataobject_;
    ::TDataBinding* consumerid_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TUpdateDcsmMetadataCommand final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TUpdateDcsmMetadataCommand) */ {
 public:
  inline TUpdateDcsmMetadataCommand() : TUpdateDcsmMetadataCommand(nullptr) {}
  ~TUpdateDcsmMetadataCommand() override;
  explicit PROTOBUF_CONSTEXPR TUpdateDcsmMetadataCommand(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TUpdateDcsmMetadataCommand(const TUpdateDcsmMetadataCommand& from);
  TUpdateDcsmMetadataCommand(TUpdateDcsmMetadataCommand&& from) noexcept
    : TUpdateDcsmMetadataCommand() {
    *this = ::std::move(from);
  }

  inline TUpdateDcsmMetadataCommand& operator=(const TUpdateDcsmMetadataCommand& from) {
    CopyFrom(from);
    return *this;
  }
  inline TUpdateDcsmMetadataCommand& operator=(TUpdateDcsmMetadataCommand&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TUpdateDcsmMetadataCommand& default_instance() {
    return *internal_default_instance();
  }
  static inline const TUpdateDcsmMetadataCommand* internal_default_instance() {
    return reinterpret_cast<const TUpdateDcsmMetadataCommand*>(
               &_TUpdateDcsmMetadataCommand_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    43;

  friend void swap(TUpdateDcsmMetadataCommand& a, TUpdateDcsmMetadataCommand& b) {
    a.Swap(&b);
  }
  inline void Swap(TUpdateDcsmMetadataCommand* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TUpdateDcsmMetadataCommand* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TUpdateDcsmMetadataCommand* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TUpdateDcsmMetadataCommand>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TUpdateDcsmMetadataCommand& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TUpdateDcsmMetadataCommand& from) {
    TUpdateDcsmMetadataCommand::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TUpdateDcsmMetadataCommand* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TUpdateDcsmMetadataCommand";
  }
  protected:
  explicit TUpdateDcsmMetadataCommand(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kContentIdFieldNumber = 1,
    kVehicleVisibleFieldNumber = 2,
    kVehicleModelIdFieldNumber = 3,
    kCameraPitchFieldNumber = 4,
    kCameraYawFieldNumber = 5,
    kCameraFovHFieldNumber = 6,
    kCameraDistanceFieldNumber = 7,
    kCameraOriginFieldNumber = 8,
    kCameraNearPlaneFieldNumber = 9,
    kCameraFarPlaneFieldNumber = 10,
  };
  // optional .TDataBinding contentId = 1;
  bool has_contentid() const;
  private:
  bool _internal_has_contentid() const;
  public:
  void clear_contentid();
  const ::TDataBinding& contentid() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_contentid();
  ::TDataBinding* mutable_contentid();
  void set_allocated_contentid(::TDataBinding* contentid);
  private:
  const ::TDataBinding& _internal_contentid() const;
  ::TDataBinding* _internal_mutable_contentid();
  public:
  void unsafe_arena_set_allocated_contentid(
      ::TDataBinding* contentid);
  ::TDataBinding* unsafe_arena_release_contentid();

  // optional .TDataBinding vehicleVisible = 2;
  bool has_vehiclevisible() const;
  private:
  bool _internal_has_vehiclevisible() const;
  public:
  void clear_vehiclevisible();
  const ::TDataBinding& vehiclevisible() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_vehiclevisible();
  ::TDataBinding* mutable_vehiclevisible();
  void set_allocated_vehiclevisible(::TDataBinding* vehiclevisible);
  private:
  const ::TDataBinding& _internal_vehiclevisible() const;
  ::TDataBinding* _internal_mutable_vehiclevisible();
  public:
  void unsafe_arena_set_allocated_vehiclevisible(
      ::TDataBinding* vehiclevisible);
  ::TDataBinding* unsafe_arena_release_vehiclevisible();

  // optional .TDataBinding vehicleModelId = 3;
  bool has_vehiclemodelid() const;
  private:
  bool _internal_has_vehiclemodelid() const;
  public:
  void clear_vehiclemodelid();
  const ::TDataBinding& vehiclemodelid() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_vehiclemodelid();
  ::TDataBinding* mutable_vehiclemodelid();
  void set_allocated_vehiclemodelid(::TDataBinding* vehiclemodelid);
  private:
  const ::TDataBinding& _internal_vehiclemodelid() const;
  ::TDataBinding* _internal_mutable_vehiclemodelid();
  public:
  void unsafe_arena_set_allocated_vehiclemodelid(
      ::TDataBinding* vehiclemodelid);
  ::TDataBinding* unsafe_arena_release_vehiclemodelid();

  // optional .TDataBinding cameraPitch = 4;
  bool has_camerapitch() const;
  private:
  bool _internal_has_camerapitch() const;
  public:
  void clear_camerapitch();
  const ::TDataBinding& camerapitch() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_camerapitch();
  ::TDataBinding* mutable_camerapitch();
  void set_allocated_camerapitch(::TDataBinding* camerapitch);
  private:
  const ::TDataBinding& _internal_camerapitch() const;
  ::TDataBinding* _internal_mutable_camerapitch();
  public:
  void unsafe_arena_set_allocated_camerapitch(
      ::TDataBinding* camerapitch);
  ::TDataBinding* unsafe_arena_release_camerapitch();

  // optional .TDataBinding cameraYaw = 5;
  bool has_camerayaw() const;
  private:
  bool _internal_has_camerayaw() const;
  public:
  void clear_camerayaw();
  const ::TDataBinding& camerayaw() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_camerayaw();
  ::TDataBinding* mutable_camerayaw();
  void set_allocated_camerayaw(::TDataBinding* camerayaw);
  private:
  const ::TDataBinding& _internal_camerayaw() const;
  ::TDataBinding* _internal_mutable_camerayaw();
  public:
  void unsafe_arena_set_allocated_camerayaw(
      ::TDataBinding* camerayaw);
  ::TDataBinding* unsafe_arena_release_camerayaw();

  // optional .TDataBinding cameraFovH = 6;
  bool has_camerafovh() const;
  private:
  bool _internal_has_camerafovh() const;
  public:
  void clear_camerafovh();
  const ::TDataBinding& camerafovh() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_camerafovh();
  ::TDataBinding* mutable_camerafovh();
  void set_allocated_camerafovh(::TDataBinding* camerafovh);
  private:
  const ::TDataBinding& _internal_camerafovh() const;
  ::TDataBinding* _internal_mutable_camerafovh();
  public:
  void unsafe_arena_set_allocated_camerafovh(
      ::TDataBinding* camerafovh);
  ::TDataBinding* unsafe_arena_release_camerafovh();

  // optional .TDataBinding cameraDistance = 7;
  bool has_cameradistance() const;
  private:
  bool _internal_has_cameradistance() const;
  public:
  void clear_cameradistance();
  const ::TDataBinding& cameradistance() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_cameradistance();
  ::TDataBinding* mutable_cameradistance();
  void set_allocated_cameradistance(::TDataBinding* cameradistance);
  private:
  const ::TDataBinding& _internal_cameradistance() const;
  ::TDataBinding* _internal_mutable_cameradistance();
  public:
  void unsafe_arena_set_allocated_cameradistance(
      ::TDataBinding* cameradistance);
  ::TDataBinding* unsafe_arena_release_cameradistance();

  // optional .TDataBinding cameraOrigin = 8;
  bool has_cameraorigin() const;
  private:
  bool _internal_has_cameraorigin() const;
  public:
  void clear_cameraorigin();
  const ::TDataBinding& cameraorigin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_cameraorigin();
  ::TDataBinding* mutable_cameraorigin();
  void set_allocated_cameraorigin(::TDataBinding* cameraorigin);
  private:
  const ::TDataBinding& _internal_cameraorigin() const;
  ::TDataBinding* _internal_mutable_cameraorigin();
  public:
  void unsafe_arena_set_allocated_cameraorigin(
      ::TDataBinding* cameraorigin);
  ::TDataBinding* unsafe_arena_release_cameraorigin();

  // optional .TDataBinding cameraNearPlane = 9;
  bool has_cameranearplane() const;
  private:
  bool _internal_has_cameranearplane() const;
  public:
  void clear_cameranearplane();
  const ::TDataBinding& cameranearplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_cameranearplane();
  ::TDataBinding* mutable_cameranearplane();
  void set_allocated_cameranearplane(::TDataBinding* cameranearplane);
  private:
  const ::TDataBinding& _internal_cameranearplane() const;
  ::TDataBinding* _internal_mutable_cameranearplane();
  public:
  void unsafe_arena_set_allocated_cameranearplane(
      ::TDataBinding* cameranearplane);
  ::TDataBinding* unsafe_arena_release_cameranearplane();

  // optional .TDataBinding cameraFarPlane = 10;
  bool has_camerafarplane() const;
  private:
  bool _internal_has_camerafarplane() const;
  public:
  void clear_camerafarplane();
  const ::TDataBinding& camerafarplane() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_camerafarplane();
  ::TDataBinding* mutable_camerafarplane();
  void set_allocated_camerafarplane(::TDataBinding* camerafarplane);
  private:
  const ::TDataBinding& _internal_camerafarplane() const;
  ::TDataBinding* _internal_mutable_camerafarplane();
  public:
  void unsafe_arena_set_allocated_camerafarplane(
      ::TDataBinding* camerafarplane);
  ::TDataBinding* unsafe_arena_release_camerafarplane();

  // @@protoc_insertion_point(class_scope:HmiWidget.TUpdateDcsmMetadataCommand)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* contentid_;
    ::TDataBinding* vehiclevisible_;
    ::TDataBinding* vehiclemodelid_;
    ::TDataBinding* camerapitch_;
    ::TDataBinding* camerayaw_;
    ::TDataBinding* camerafovh_;
    ::TDataBinding* cameradistance_;
    ::TDataBinding* cameraorigin_;
    ::TDataBinding* cameranearplane_;
    ::TDataBinding* camerafarplane_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TAnimationTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TAnimationTrigger) */ {
 public:
  inline TAnimationTrigger() : TAnimationTrigger(nullptr) {}
  ~TAnimationTrigger() override;
  explicit PROTOBUF_CONSTEXPR TAnimationTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TAnimationTrigger(const TAnimationTrigger& from);
  TAnimationTrigger(TAnimationTrigger&& from) noexcept
    : TAnimationTrigger() {
    *this = ::std::move(from);
  }

  inline TAnimationTrigger& operator=(const TAnimationTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TAnimationTrigger& operator=(TAnimationTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TAnimationTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const TAnimationTrigger* internal_default_instance() {
    return reinterpret_cast<const TAnimationTrigger*>(
               &_TAnimationTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    44;

  friend void swap(TAnimationTrigger& a, TAnimationTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(TAnimationTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TAnimationTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TAnimationTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TAnimationTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TAnimationTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TAnimationTrigger& from) {
    TAnimationTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TAnimationTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TAnimationTrigger";
  }
  protected:
  explicit TAnimationTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationFieldNumber = 1,
    kActionFieldNumber = 2,
  };
  // required .TIdentifier animation = 1;
  bool has_animation() const;
  private:
  bool _internal_has_animation() const;
  public:
  void clear_animation();
  const ::TIdentifier& animation() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_animation();
  ::TIdentifier* mutable_animation();
  void set_allocated_animation(::TIdentifier* animation);
  private:
  const ::TIdentifier& _internal_animation() const;
  ::TIdentifier* _internal_mutable_animation();
  public:
  void unsafe_arena_set_allocated_animation(
      ::TIdentifier* animation);
  ::TIdentifier* unsafe_arena_release_animation();

  // required .HmiWidget.TEAnimationAction action = 2;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::HmiWidget::TEAnimationAction action() const;
  void set_action(::HmiWidget::TEAnimationAction value);
  private:
  ::HmiWidget::TEAnimationAction _internal_action() const;
  void _internal_set_action(::HmiWidget::TEAnimationAction value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TAnimationTrigger)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* animation_;
    int action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TScriptReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TScriptReference) */ {
 public:
  inline TScriptReference() : TScriptReference(nullptr) {}
  ~TScriptReference() override;
  explicit PROTOBUF_CONSTEXPR TScriptReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TScriptReference(const TScriptReference& from);
  TScriptReference(TScriptReference&& from) noexcept
    : TScriptReference() {
    *this = ::std::move(from);
  }

  inline TScriptReference& operator=(const TScriptReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline TScriptReference& operator=(TScriptReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TScriptReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const TScriptReference* internal_default_instance() {
    return reinterpret_cast<const TScriptReference*>(
               &_TScriptReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    45;

  friend void swap(TScriptReference& a, TScriptReference& b) {
    a.Swap(&b);
  }
  inline void Swap(TScriptReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TScriptReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TScriptReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TScriptReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TScriptReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TScriptReference& from) {
    TScriptReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TScriptReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TScriptReference";
  }
  protected:
  explicit TScriptReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kScriptReferenceFieldNumber = 1,
  };
  // required .TIdentifier scriptReference = 1;
  bool has_scriptreference() const;
  private:
  bool _internal_has_scriptreference() const;
  public:
  void clear_scriptreference();
  const ::TIdentifier& scriptreference() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_scriptreference();
  ::TIdentifier* mutable_scriptreference();
  void set_allocated_scriptreference(::TIdentifier* scriptreference);
  private:
  const ::TIdentifier& _internal_scriptreference() const;
  ::TIdentifier* _internal_mutable_scriptreference();
  public:
  void unsafe_arena_set_allocated_scriptreference(
      ::TIdentifier* scriptreference);
  ::TIdentifier* unsafe_arena_release_scriptreference();

  // @@protoc_insertion_point(class_scope:HmiWidget.TScriptReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* scriptreference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCurveReference final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCurveReference) */ {
 public:
  inline TCurveReference() : TCurveReference(nullptr) {}
  ~TCurveReference() override;
  explicit PROTOBUF_CONSTEXPR TCurveReference(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCurveReference(const TCurveReference& from);
  TCurveReference(TCurveReference&& from) noexcept
    : TCurveReference() {
    *this = ::std::move(from);
  }

  inline TCurveReference& operator=(const TCurveReference& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCurveReference& operator=(TCurveReference&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCurveReference& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCurveReference* internal_default_instance() {
    return reinterpret_cast<const TCurveReference*>(
               &_TCurveReference_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    46;

  friend void swap(TCurveReference& a, TCurveReference& b) {
    a.Swap(&b);
  }
  inline void Swap(TCurveReference* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCurveReference* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCurveReference* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCurveReference>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCurveReference& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCurveReference& from) {
    TCurveReference::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCurveReference* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCurveReference";
  }
  protected:
  explicit TCurveReference(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurveReferenceFieldNumber = 1,
  };
  // required .TIdentifier curveReference = 1;
  bool has_curvereference() const;
  private:
  bool _internal_has_curvereference() const;
  public:
  void clear_curvereference();
  const ::TIdentifier& curvereference() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_curvereference();
  ::TIdentifier* mutable_curvereference();
  void set_allocated_curvereference(::TIdentifier* curvereference);
  private:
  const ::TIdentifier& _internal_curvereference() const;
  ::TIdentifier* _internal_mutable_curvereference();
  public:
  void unsafe_arena_set_allocated_curvereference(
      ::TIdentifier* curvereference);
  ::TIdentifier* unsafe_arena_release_curvereference();

  // @@protoc_insertion_point(class_scope:HmiWidget.TCurveReference)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* curvereference_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TScript final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TScript) */ {
 public:
  inline TScript() : TScript(nullptr) {}
  ~TScript() override;
  explicit PROTOBUF_CONSTEXPR TScript(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TScript(const TScript& from);
  TScript(TScript&& from) noexcept
    : TScript() {
    *this = ::std::move(from);
  }

  inline TScript& operator=(const TScript& from) {
    CopyFrom(from);
    return *this;
  }
  inline TScript& operator=(TScript&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TScript& default_instance() {
    return *internal_default_instance();
  }
  static inline const TScript* internal_default_instance() {
    return reinterpret_cast<const TScript*>(
               &_TScript_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    47;

  friend void swap(TScript& a, TScript& b) {
    a.Swap(&b);
  }
  inline void Swap(TScript* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TScript* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TScript* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TScript>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TScript& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TScript& from) {
    TScript::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TScript* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TScript";
  }
  protected:
  explicit TScript(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kParameterFieldNumber = 3,
    kPassiveParameterFieldNumber = 4,
    kReturnValueFieldNumber = 5,
    kScriptIdentifierFieldNumber = 1,
    kFunctionNameFieldNumber = 2,
  };
  // repeated .TDataBinding parameter = 3;
  int parameter_size() const;
  private:
  int _internal_parameter_size() const;
  public:
  void clear_parameter();
  ::TDataBinding* mutable_parameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
      mutable_parameter();
  private:
  const ::TDataBinding& _internal_parameter(int index) const;
  ::TDataBinding* _internal_add_parameter();
  public:
  const ::TDataBinding& parameter(int index) const;
  ::TDataBinding* add_parameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
      parameter() const;

  // repeated .TDataBinding passiveParameter = 4;
  int passiveparameter_size() const;
  private:
  int _internal_passiveparameter_size() const;
  public:
  void clear_passiveparameter();
  ::TDataBinding* mutable_passiveparameter(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
      mutable_passiveparameter();
  private:
  const ::TDataBinding& _internal_passiveparameter(int index) const;
  ::TDataBinding* _internal_add_passiveparameter();
  public:
  const ::TDataBinding& passiveparameter(int index) const;
  ::TDataBinding* add_passiveparameter();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
      passiveparameter() const;

  // repeated .HmiWidget.TScriptReturnValue returnValue = 5;
  int returnvalue_size() const;
  private:
  int _internal_returnvalue_size() const;
  public:
  void clear_returnvalue();
  ::HmiWidget::TScriptReturnValue* mutable_returnvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScriptReturnValue >*
      mutable_returnvalue();
  private:
  const ::HmiWidget::TScriptReturnValue& _internal_returnvalue(int index) const;
  ::HmiWidget::TScriptReturnValue* _internal_add_returnvalue();
  public:
  const ::HmiWidget::TScriptReturnValue& returnvalue(int index) const;
  ::HmiWidget::TScriptReturnValue* add_returnvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScriptReturnValue >&
      returnvalue() const;

  // required .TIdentifier scriptIdentifier = 1;
  bool has_scriptidentifier() const;
  private:
  bool _internal_has_scriptidentifier() const;
  public:
  void clear_scriptidentifier();
  const ::TIdentifier& scriptidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_scriptidentifier();
  ::TIdentifier* mutable_scriptidentifier();
  void set_allocated_scriptidentifier(::TIdentifier* scriptidentifier);
  private:
  const ::TIdentifier& _internal_scriptidentifier() const;
  ::TIdentifier* _internal_mutable_scriptidentifier();
  public:
  void unsafe_arena_set_allocated_scriptidentifier(
      ::TIdentifier* scriptidentifier);
  ::TIdentifier* unsafe_arena_release_scriptidentifier();

  // required .TDataBinding functionName = 2;
  bool has_functionname() const;
  private:
  bool _internal_has_functionname() const;
  public:
  void clear_functionname();
  const ::TDataBinding& functionname() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_functionname();
  ::TDataBinding* mutable_functionname();
  void set_allocated_functionname(::TDataBinding* functionname);
  private:
  const ::TDataBinding& _internal_functionname() const;
  ::TDataBinding* _internal_mutable_functionname();
  public:
  void unsafe_arena_set_allocated_functionname(
      ::TDataBinding* functionname);
  ::TDataBinding* unsafe_arena_release_functionname();

  // @@protoc_insertion_point(class_scope:HmiWidget.TScript)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding > parameter_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding > passiveparameter_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScriptReturnValue > returnvalue_;
    ::TIdentifier* scriptidentifier_;
    ::TDataBinding* functionname_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TScriptReturnValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TScriptReturnValue) */ {
 public:
  inline TScriptReturnValue() : TScriptReturnValue(nullptr) {}
  ~TScriptReturnValue() override;
  explicit PROTOBUF_CONSTEXPR TScriptReturnValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TScriptReturnValue(const TScriptReturnValue& from);
  TScriptReturnValue(TScriptReturnValue&& from) noexcept
    : TScriptReturnValue() {
    *this = ::std::move(from);
  }

  inline TScriptReturnValue& operator=(const TScriptReturnValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TScriptReturnValue& operator=(TScriptReturnValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TScriptReturnValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TScriptReturnValue* internal_default_instance() {
    return reinterpret_cast<const TScriptReturnValue*>(
               &_TScriptReturnValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    48;

  friend void swap(TScriptReturnValue& a, TScriptReturnValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TScriptReturnValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TScriptReturnValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TScriptReturnValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TScriptReturnValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TScriptReturnValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TScriptReturnValue& from) {
    TScriptReturnValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TScriptReturnValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TScriptReturnValue";
  }
  protected:
  explicit TScriptReturnValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kKeyFieldNumber = 1,
    kValueFieldNumber = 2,
  };
  // required .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // required .TVariant value = 2;
  bool has_value() const;
  private:
  bool _internal_has_value() const;
  public:
  void clear_value();
  const ::TVariant& value() const;
  PROTOBUF_NODISCARD ::TVariant* release_value();
  ::TVariant* mutable_value();
  void set_allocated_value(::TVariant* value);
  private:
  const ::TVariant& _internal_value() const;
  ::TVariant* _internal_mutable_value();
  public:
  void unsafe_arena_set_allocated_value(
      ::TVariant* value);
  ::TVariant* unsafe_arena_release_value();

  // @@protoc_insertion_point(class_scope:HmiWidget.TScriptReturnValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* key_;
    ::TVariant* value_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TTriggeredSlot final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TTriggeredSlot) */ {
 public:
  inline TTriggeredSlot() : TTriggeredSlot(nullptr) {}
  ~TTriggeredSlot() override;
  explicit PROTOBUF_CONSTEXPR TTriggeredSlot(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TTriggeredSlot(const TTriggeredSlot& from);
  TTriggeredSlot(TTriggeredSlot&& from) noexcept
    : TTriggeredSlot() {
    *this = ::std::move(from);
  }

  inline TTriggeredSlot& operator=(const TTriggeredSlot& from) {
    CopyFrom(from);
    return *this;
  }
  inline TTriggeredSlot& operator=(TTriggeredSlot&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TTriggeredSlot& default_instance() {
    return *internal_default_instance();
  }
  static inline const TTriggeredSlot* internal_default_instance() {
    return reinterpret_cast<const TTriggeredSlot*>(
               &_TTriggeredSlot_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    49;

  friend void swap(TTriggeredSlot& a, TTriggeredSlot& b) {
    a.Swap(&b);
  }
  inline void Swap(TTriggeredSlot* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TTriggeredSlot* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TTriggeredSlot* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TTriggeredSlot>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TTriggeredSlot& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TTriggeredSlot& from) {
    TTriggeredSlot::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TTriggeredSlot* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TTriggeredSlot";
  }
  protected:
  explicit TTriggeredSlot(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalFieldNumber = 1,
    kSlotFieldNumber = 2,
  };
  // required .TIdentifier signal = 1;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  const ::TIdentifier& signal() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_signal();
  ::TIdentifier* mutable_signal();
  void set_allocated_signal(::TIdentifier* signal);
  private:
  const ::TIdentifier& _internal_signal() const;
  ::TIdentifier* _internal_mutable_signal();
  public:
  void unsafe_arena_set_allocated_signal(
      ::TIdentifier* signal);
  ::TIdentifier* unsafe_arena_release_signal();

  // required .TIdentifier slot = 2;
  bool has_slot() const;
  private:
  bool _internal_has_slot() const;
  public:
  void clear_slot();
  const ::TIdentifier& slot() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_slot();
  ::TIdentifier* mutable_slot();
  void set_allocated_slot(::TIdentifier* slot);
  private:
  const ::TIdentifier& _internal_slot() const;
  ::TIdentifier* _internal_mutable_slot();
  public:
  void unsafe_arena_set_allocated_slot(
      ::TIdentifier* slot);
  ::TIdentifier* unsafe_arena_release_slot();

  // @@protoc_insertion_point(class_scope:HmiWidget.TTriggeredSlot)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* signal_;
    ::TIdentifier* slot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TForwardSignals final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TForwardSignals) */ {
 public:
  inline TForwardSignals() : TForwardSignals(nullptr) {}
  ~TForwardSignals() override;
  explicit PROTOBUF_CONSTEXPR TForwardSignals(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TForwardSignals(const TForwardSignals& from);
  TForwardSignals(TForwardSignals&& from) noexcept
    : TForwardSignals() {
    *this = ::std::move(from);
  }

  inline TForwardSignals& operator=(const TForwardSignals& from) {
    CopyFrom(from);
    return *this;
  }
  inline TForwardSignals& operator=(TForwardSignals&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TForwardSignals& default_instance() {
    return *internal_default_instance();
  }
  static inline const TForwardSignals* internal_default_instance() {
    return reinterpret_cast<const TForwardSignals*>(
               &_TForwardSignals_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    50;

  friend void swap(TForwardSignals& a, TForwardSignals& b) {
    a.Swap(&b);
  }
  inline void Swap(TForwardSignals* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TForwardSignals* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TForwardSignals* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TForwardSignals>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TForwardSignals& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TForwardSignals& from) {
    TForwardSignals::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TForwardSignals* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TForwardSignals";
  }
  protected:
  explicit TForwardSignals(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSignalIdFieldNumber = 1,
    kTargetFieldNumber = 2,
  };
  // repeated .TIdentifier signalId = 1;
  int signalid_size() const;
  private:
  int _internal_signalid_size() const;
  public:
  void clear_signalid();
  ::TIdentifier* mutable_signalid(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_signalid();
  private:
  const ::TIdentifier& _internal_signalid(int index) const;
  ::TIdentifier* _internal_add_signalid();
  public:
  const ::TIdentifier& signalid(int index) const;
  ::TIdentifier* add_signalid();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      signalid() const;

  // optional .HmiWidget.TESignalTarget target = 2;
  bool has_target() const;
  private:
  bool _internal_has_target() const;
  public:
  void clear_target();
  ::HmiWidget::TESignalTarget target() const;
  void set_target(::HmiWidget::TESignalTarget value);
  private:
  ::HmiWidget::TESignalTarget _internal_target() const;
  void _internal_set_target(::HmiWidget::TESignalTarget value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TForwardSignals)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > signalid_;
    int target_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCurve final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCurve) */ {
 public:
  inline TCurve() : TCurve(nullptr) {}
  ~TCurve() override;
  explicit PROTOBUF_CONSTEXPR TCurve(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCurve(const TCurve& from);
  TCurve(TCurve&& from) noexcept
    : TCurve() {
    *this = ::std::move(from);
  }

  inline TCurve& operator=(const TCurve& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCurve& operator=(TCurve&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCurve& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCurve* internal_default_instance() {
    return reinterpret_cast<const TCurve*>(
               &_TCurve_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    51;

  friend void swap(TCurve& a, TCurve& b) {
    a.Swap(&b);
  }
  inline void Swap(TCurve* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCurve* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCurve* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCurve>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCurve& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCurve& from) {
    TCurve::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCurve* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCurve";
  }
  protected:
  explicit TCurve(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kCurveIdentifierFieldNumber = 1,
    kSamplePositionFieldNumber = 2,
    kCurveDefinitionFieldNumber = 3,
  };
  // required .TIdentifier curveIdentifier = 1;
  bool has_curveidentifier() const;
  private:
  bool _internal_has_curveidentifier() const;
  public:
  void clear_curveidentifier();
  const ::TIdentifier& curveidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_curveidentifier();
  ::TIdentifier* mutable_curveidentifier();
  void set_allocated_curveidentifier(::TIdentifier* curveidentifier);
  private:
  const ::TIdentifier& _internal_curveidentifier() const;
  ::TIdentifier* _internal_mutable_curveidentifier();
  public:
  void unsafe_arena_set_allocated_curveidentifier(
      ::TIdentifier* curveidentifier);
  ::TIdentifier* unsafe_arena_release_curveidentifier();

  // required .TDataBinding samplePosition = 2;
  bool has_sampleposition() const;
  private:
  bool _internal_has_sampleposition() const;
  public:
  void clear_sampleposition();
  const ::TDataBinding& sampleposition() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sampleposition();
  ::TDataBinding* mutable_sampleposition();
  void set_allocated_sampleposition(::TDataBinding* sampleposition);
  private:
  const ::TDataBinding& _internal_sampleposition() const;
  ::TDataBinding* _internal_mutable_sampleposition();
  public:
  void unsafe_arena_set_allocated_sampleposition(
      ::TDataBinding* sampleposition);
  ::TDataBinding* unsafe_arena_release_sampleposition();

  // required .TCurveDefinition curveDefinition = 3;
  bool has_curvedefinition() const;
  private:
  bool _internal_has_curvedefinition() const;
  public:
  void clear_curvedefinition();
  const ::TCurveDefinition& curvedefinition() const;
  PROTOBUF_NODISCARD ::TCurveDefinition* release_curvedefinition();
  ::TCurveDefinition* mutable_curvedefinition();
  void set_allocated_curvedefinition(::TCurveDefinition* curvedefinition);
  private:
  const ::TCurveDefinition& _internal_curvedefinition() const;
  ::TCurveDefinition* _internal_mutable_curvedefinition();
  public:
  void unsafe_arena_set_allocated_curvedefinition(
      ::TCurveDefinition* curvedefinition);
  ::TCurveDefinition* unsafe_arena_release_curvedefinition();

  // @@protoc_insertion_point(class_scope:HmiWidget.TCurve)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* curveidentifier_;
    ::TDataBinding* sampleposition_;
    ::TCurveDefinition* curvedefinition_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TWidgetAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TWidgetAnimation) */ {
 public:
  inline TWidgetAnimation() : TWidgetAnimation(nullptr) {}
  ~TWidgetAnimation() override;
  explicit PROTOBUF_CONSTEXPR TWidgetAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TWidgetAnimation(const TWidgetAnimation& from);
  TWidgetAnimation(TWidgetAnimation&& from) noexcept
    : TWidgetAnimation() {
    *this = ::std::move(from);
  }

  inline TWidgetAnimation& operator=(const TWidgetAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TWidgetAnimation& operator=(TWidgetAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TWidgetAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TWidgetAnimation* internal_default_instance() {
    return reinterpret_cast<const TWidgetAnimation*>(
               &_TWidgetAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    52;

  friend void swap(TWidgetAnimation& a, TWidgetAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(TWidgetAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TWidgetAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TWidgetAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TWidgetAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TWidgetAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TWidgetAnimation& from) {
    TWidgetAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TWidgetAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TWidgetAnimation";
  }
  protected:
  explicit TWidgetAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStartValueFieldNumber = 1,
    kStartBindingFieldNumber = 2,
    kEndValueFieldNumber = 3,
    kEndBindingFieldNumber = 4,
    kDurationBindingFieldNumber = 6,
    kKeyFrameSequenceFieldNumber = 7,
    kDurationValueFieldNumber = 5,
    kInterpolatorFieldNumber = 8,
    kReturnTypeFieldNumber = 9,
    kLoopCountFieldNumber = 10,
    kUpdateIntervalFieldNumber = 11,
    kUpdateBehaviourFieldNumber = 12,
  };
  // optional .TNumericValue startValue = 1;
  bool has_startvalue() const;
  private:
  bool _internal_has_startvalue() const;
  public:
  void clear_startvalue();
  const ::TNumericValue& startvalue() const;
  PROTOBUF_NODISCARD ::TNumericValue* release_startvalue();
  ::TNumericValue* mutable_startvalue();
  void set_allocated_startvalue(::TNumericValue* startvalue);
  private:
  const ::TNumericValue& _internal_startvalue() const;
  ::TNumericValue* _internal_mutable_startvalue();
  public:
  void unsafe_arena_set_allocated_startvalue(
      ::TNumericValue* startvalue);
  ::TNumericValue* unsafe_arena_release_startvalue();

  // optional .TDataBinding startBinding = 2;
  bool has_startbinding() const;
  private:
  bool _internal_has_startbinding() const;
  public:
  void clear_startbinding();
  const ::TDataBinding& startbinding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_startbinding();
  ::TDataBinding* mutable_startbinding();
  void set_allocated_startbinding(::TDataBinding* startbinding);
  private:
  const ::TDataBinding& _internal_startbinding() const;
  ::TDataBinding* _internal_mutable_startbinding();
  public:
  void unsafe_arena_set_allocated_startbinding(
      ::TDataBinding* startbinding);
  ::TDataBinding* unsafe_arena_release_startbinding();

  // optional .TNumericValue endValue = 3;
  bool has_endvalue() const;
  private:
  bool _internal_has_endvalue() const;
  public:
  void clear_endvalue();
  const ::TNumericValue& endvalue() const;
  PROTOBUF_NODISCARD ::TNumericValue* release_endvalue();
  ::TNumericValue* mutable_endvalue();
  void set_allocated_endvalue(::TNumericValue* endvalue);
  private:
  const ::TNumericValue& _internal_endvalue() const;
  ::TNumericValue* _internal_mutable_endvalue();
  public:
  void unsafe_arena_set_allocated_endvalue(
      ::TNumericValue* endvalue);
  ::TNumericValue* unsafe_arena_release_endvalue();

  // optional .TDataBinding endBinding = 4;
  bool has_endbinding() const;
  private:
  bool _internal_has_endbinding() const;
  public:
  void clear_endbinding();
  const ::TDataBinding& endbinding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_endbinding();
  ::TDataBinding* mutable_endbinding();
  void set_allocated_endbinding(::TDataBinding* endbinding);
  private:
  const ::TDataBinding& _internal_endbinding() const;
  ::TDataBinding* _internal_mutable_endbinding();
  public:
  void unsafe_arena_set_allocated_endbinding(
      ::TDataBinding* endbinding);
  ::TDataBinding* unsafe_arena_release_endbinding();

  // optional .TDataBinding durationBinding = 6;
  bool has_durationbinding() const;
  private:
  bool _internal_has_durationbinding() const;
  public:
  void clear_durationbinding();
  const ::TDataBinding& durationbinding() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_durationbinding();
  ::TDataBinding* mutable_durationbinding();
  void set_allocated_durationbinding(::TDataBinding* durationbinding);
  private:
  const ::TDataBinding& _internal_durationbinding() const;
  ::TDataBinding* _internal_mutable_durationbinding();
  public:
  void unsafe_arena_set_allocated_durationbinding(
      ::TDataBinding* durationbinding);
  ::TDataBinding* unsafe_arena_release_durationbinding();

  // optional .TKeyFrameSequence keyFrameSequence = 7;
  bool has_keyframesequence() const;
  private:
  bool _internal_has_keyframesequence() const;
  public:
  void clear_keyframesequence();
  const ::TKeyFrameSequence& keyframesequence() const;
  PROTOBUF_NODISCARD ::TKeyFrameSequence* release_keyframesequence();
  ::TKeyFrameSequence* mutable_keyframesequence();
  void set_allocated_keyframesequence(::TKeyFrameSequence* keyframesequence);
  private:
  const ::TKeyFrameSequence& _internal_keyframesequence() const;
  ::TKeyFrameSequence* _internal_mutable_keyframesequence();
  public:
  void unsafe_arena_set_allocated_keyframesequence(
      ::TKeyFrameSequence* keyframesequence);
  ::TKeyFrameSequence* unsafe_arena_release_keyframesequence();

  // optional uint32 durationValue = 5;
  bool has_durationvalue() const;
  private:
  bool _internal_has_durationvalue() const;
  public:
  void clear_durationvalue();
  uint32_t durationvalue() const;
  void set_durationvalue(uint32_t value);
  private:
  uint32_t _internal_durationvalue() const;
  void _internal_set_durationvalue(uint32_t value);
  public:

  // required .TEAnimationInterpolator interpolator = 8;
  bool has_interpolator() const;
  private:
  bool _internal_has_interpolator() const;
  public:
  void clear_interpolator();
  ::TEAnimationInterpolator interpolator() const;
  void set_interpolator(::TEAnimationInterpolator value);
  private:
  ::TEAnimationInterpolator _internal_interpolator() const;
  void _internal_set_interpolator(::TEAnimationInterpolator value);
  public:

  // required .TEDataType returnType = 9;
  bool has_returntype() const;
  private:
  bool _internal_has_returntype() const;
  public:
  void clear_returntype();
  ::TEDataType returntype() const;
  void set_returntype(::TEDataType value);
  private:
  ::TEDataType _internal_returntype() const;
  void _internal_set_returntype(::TEDataType value);
  public:

  // optional int32 loopCount = 10;
  bool has_loopcount() const;
  private:
  bool _internal_has_loopcount() const;
  public:
  void clear_loopcount();
  int32_t loopcount() const;
  void set_loopcount(int32_t value);
  private:
  int32_t _internal_loopcount() const;
  void _internal_set_loopcount(int32_t value);
  public:

  // optional int32 updateInterval = 11;
  bool has_updateinterval() const;
  private:
  bool _internal_has_updateinterval() const;
  public:
  void clear_updateinterval();
  int32_t updateinterval() const;
  void set_updateinterval(int32_t value);
  private:
  int32_t _internal_updateinterval() const;
  void _internal_set_updateinterval(int32_t value);
  public:

  // optional .HmiWidget.TEAnimationBindingBehaviour updateBehaviour = 12;
  bool has_updatebehaviour() const;
  private:
  bool _internal_has_updatebehaviour() const;
  public:
  void clear_updatebehaviour();
  ::HmiWidget::TEAnimationBindingBehaviour updatebehaviour() const;
  void set_updatebehaviour(::HmiWidget::TEAnimationBindingBehaviour value);
  private:
  ::HmiWidget::TEAnimationBindingBehaviour _internal_updatebehaviour() const;
  void _internal_set_updatebehaviour(::HmiWidget::TEAnimationBindingBehaviour value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TWidgetAnimation)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TNumericValue* startvalue_;
    ::TDataBinding* startbinding_;
    ::TNumericValue* endvalue_;
    ::TDataBinding* endbinding_;
    ::TDataBinding* durationbinding_;
    ::TKeyFrameSequence* keyframesequence_;
    uint32_t durationvalue_;
    int interpolator_;
    int returntype_;
    int32_t loopcount_;
    int32_t updateinterval_;
    int updatebehaviour_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCompositeAnimationElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCompositeAnimationElement) */ {
 public:
  inline TCompositeAnimationElement() : TCompositeAnimationElement(nullptr) {}
  ~TCompositeAnimationElement() override;
  explicit PROTOBUF_CONSTEXPR TCompositeAnimationElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCompositeAnimationElement(const TCompositeAnimationElement& from);
  TCompositeAnimationElement(TCompositeAnimationElement&& from) noexcept
    : TCompositeAnimationElement() {
    *this = ::std::move(from);
  }

  inline TCompositeAnimationElement& operator=(const TCompositeAnimationElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCompositeAnimationElement& operator=(TCompositeAnimationElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCompositeAnimationElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCompositeAnimationElement* internal_default_instance() {
    return reinterpret_cast<const TCompositeAnimationElement*>(
               &_TCompositeAnimationElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    53;

  friend void swap(TCompositeAnimationElement& a, TCompositeAnimationElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TCompositeAnimationElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCompositeAnimationElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCompositeAnimationElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCompositeAnimationElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCompositeAnimationElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCompositeAnimationElement& from) {
    TCompositeAnimationElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCompositeAnimationElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCompositeAnimationElement";
  }
  protected:
  explicit TCompositeAnimationElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationTypeFieldNumber = 1,
    kBindToReturnValueFieldNumber = 2,
    kIsStartupAnimationFieldNumber = 3,
  };
  // required .TIdentifier animationType = 1;
  bool has_animationtype() const;
  private:
  bool _internal_has_animationtype() const;
  public:
  void clear_animationtype();
  const ::TIdentifier& animationtype() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_animationtype();
  ::TIdentifier* mutable_animationtype();
  void set_allocated_animationtype(::TIdentifier* animationtype);
  private:
  const ::TIdentifier& _internal_animationtype() const;
  ::TIdentifier* _internal_mutable_animationtype();
  public:
  void unsafe_arena_set_allocated_animationtype(
      ::TIdentifier* animationtype);
  ::TIdentifier* unsafe_arena_release_animationtype();

  // required .TIdentifier bindToReturnValue = 2;
  bool has_bindtoreturnvalue() const;
  private:
  bool _internal_has_bindtoreturnvalue() const;
  public:
  void clear_bindtoreturnvalue();
  const ::TIdentifier& bindtoreturnvalue() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_bindtoreturnvalue();
  ::TIdentifier* mutable_bindtoreturnvalue();
  void set_allocated_bindtoreturnvalue(::TIdentifier* bindtoreturnvalue);
  private:
  const ::TIdentifier& _internal_bindtoreturnvalue() const;
  ::TIdentifier* _internal_mutable_bindtoreturnvalue();
  public:
  void unsafe_arena_set_allocated_bindtoreturnvalue(
      ::TIdentifier* bindtoreturnvalue);
  ::TIdentifier* unsafe_arena_release_bindtoreturnvalue();

  // required bool isStartupAnimation = 3;
  bool has_isstartupanimation() const;
  private:
  bool _internal_has_isstartupanimation() const;
  public:
  void clear_isstartupanimation();
  bool isstartupanimation() const;
  void set_isstartupanimation(bool value);
  private:
  bool _internal_isstartupanimation() const;
  void _internal_set_isstartupanimation(bool value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TCompositeAnimationElement)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* animationtype_;
    ::TIdentifier* bindtoreturnvalue_;
    bool isstartupanimation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCompositeAnimationTrigger final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCompositeAnimationTrigger) */ {
 public:
  inline TCompositeAnimationTrigger() : TCompositeAnimationTrigger(nullptr) {}
  ~TCompositeAnimationTrigger() override;
  explicit PROTOBUF_CONSTEXPR TCompositeAnimationTrigger(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCompositeAnimationTrigger(const TCompositeAnimationTrigger& from);
  TCompositeAnimationTrigger(TCompositeAnimationTrigger&& from) noexcept
    : TCompositeAnimationTrigger() {
    *this = ::std::move(from);
  }

  inline TCompositeAnimationTrigger& operator=(const TCompositeAnimationTrigger& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCompositeAnimationTrigger& operator=(TCompositeAnimationTrigger&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCompositeAnimationTrigger& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCompositeAnimationTrigger* internal_default_instance() {
    return reinterpret_cast<const TCompositeAnimationTrigger*>(
               &_TCompositeAnimationTrigger_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    54;

  friend void swap(TCompositeAnimationTrigger& a, TCompositeAnimationTrigger& b) {
    a.Swap(&b);
  }
  inline void Swap(TCompositeAnimationTrigger* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCompositeAnimationTrigger* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCompositeAnimationTrigger* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCompositeAnimationTrigger>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCompositeAnimationTrigger& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCompositeAnimationTrigger& from) {
    TCompositeAnimationTrigger::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCompositeAnimationTrigger* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCompositeAnimationTrigger";
  }
  protected:
  explicit TCompositeAnimationTrigger(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kSourceFieldNumber = 1,
    kWidgetCommandFieldNumber = 4,
    kSignalFieldNumber = 2,
    kActionFieldNumber = 3,
  };
  // optional .TIdentifier source = 1;
  bool has_source() const;
  private:
  bool _internal_has_source() const;
  public:
  void clear_source();
  const ::TIdentifier& source() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_source();
  ::TIdentifier* mutable_source();
  void set_allocated_source(::TIdentifier* source);
  private:
  const ::TIdentifier& _internal_source() const;
  ::TIdentifier* _internal_mutable_source();
  public:
  void unsafe_arena_set_allocated_source(
      ::TIdentifier* source);
  ::TIdentifier* unsafe_arena_release_source();

  // optional .HmiWidget.TCommand widgetCommand = 4;
  bool has_widgetcommand() const;
  private:
  bool _internal_has_widgetcommand() const;
  public:
  void clear_widgetcommand();
  const ::HmiWidget::TCommand& widgetcommand() const;
  PROTOBUF_NODISCARD ::HmiWidget::TCommand* release_widgetcommand();
  ::HmiWidget::TCommand* mutable_widgetcommand();
  void set_allocated_widgetcommand(::HmiWidget::TCommand* widgetcommand);
  private:
  const ::HmiWidget::TCommand& _internal_widgetcommand() const;
  ::HmiWidget::TCommand* _internal_mutable_widgetcommand();
  public:
  void unsafe_arena_set_allocated_widgetcommand(
      ::HmiWidget::TCommand* widgetcommand);
  ::HmiWidget::TCommand* unsafe_arena_release_widgetcommand();

  // optional .HmiWidget.TEAnimationSignal signal = 2;
  bool has_signal() const;
  private:
  bool _internal_has_signal() const;
  public:
  void clear_signal();
  ::HmiWidget::TEAnimationSignal signal() const;
  void set_signal(::HmiWidget::TEAnimationSignal value);
  private:
  ::HmiWidget::TEAnimationSignal _internal_signal() const;
  void _internal_set_signal(::HmiWidget::TEAnimationSignal value);
  public:

  // optional .HmiWidget.TEAnimationSlot action = 3;
  bool has_action() const;
  private:
  bool _internal_has_action() const;
  public:
  void clear_action();
  ::HmiWidget::TEAnimationSlot action() const;
  void set_action(::HmiWidget::TEAnimationSlot value);
  private:
  ::HmiWidget::TEAnimationSlot _internal_action() const;
  void _internal_set_action(::HmiWidget::TEAnimationSlot value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TCompositeAnimationTrigger)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* source_;
    ::HmiWidget::TCommand* widgetcommand_;
    int signal_;
    int action_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCompositeAnimationSubAnimationList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCompositeAnimationSubAnimationList) */ {
 public:
  inline TCompositeAnimationSubAnimationList() : TCompositeAnimationSubAnimationList(nullptr) {}
  ~TCompositeAnimationSubAnimationList() override;
  explicit PROTOBUF_CONSTEXPR TCompositeAnimationSubAnimationList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCompositeAnimationSubAnimationList(const TCompositeAnimationSubAnimationList& from);
  TCompositeAnimationSubAnimationList(TCompositeAnimationSubAnimationList&& from) noexcept
    : TCompositeAnimationSubAnimationList() {
    *this = ::std::move(from);
  }

  inline TCompositeAnimationSubAnimationList& operator=(const TCompositeAnimationSubAnimationList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCompositeAnimationSubAnimationList& operator=(TCompositeAnimationSubAnimationList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCompositeAnimationSubAnimationList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCompositeAnimationSubAnimationList* internal_default_instance() {
    return reinterpret_cast<const TCompositeAnimationSubAnimationList*>(
               &_TCompositeAnimationSubAnimationList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    55;

  friend void swap(TCompositeAnimationSubAnimationList& a, TCompositeAnimationSubAnimationList& b) {
    a.Swap(&b);
  }
  inline void Swap(TCompositeAnimationSubAnimationList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCompositeAnimationSubAnimationList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCompositeAnimationSubAnimationList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCompositeAnimationSubAnimationList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCompositeAnimationSubAnimationList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCompositeAnimationSubAnimationList& from) {
    TCompositeAnimationSubAnimationList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCompositeAnimationSubAnimationList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCompositeAnimationSubAnimationList";
  }
  protected:
  explicit TCompositeAnimationSubAnimationList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUseImportFieldNumber = 3,
    kTriggerFieldNumber = 4,
    kIdentifierFieldNumber = 1,
    kWidgetAnimationFieldNumber = 2,
  };
  // repeated .TIdentifier useImport = 3;
  int useimport_size() const;
  private:
  int _internal_useimport_size() const;
  public:
  void clear_useimport();
  ::TIdentifier* mutable_useimport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_useimport();
  private:
  const ::TIdentifier& _internal_useimport(int index) const;
  ::TIdentifier* _internal_add_useimport();
  public:
  const ::TIdentifier& useimport(int index) const;
  ::TIdentifier* add_useimport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      useimport() const;

  // repeated .HmiWidget.TCompositeAnimationTrigger trigger = 4;
  int trigger_size() const;
  private:
  int _internal_trigger_size() const;
  public:
  void clear_trigger();
  ::HmiWidget::TCompositeAnimationTrigger* mutable_trigger(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationTrigger >*
      mutable_trigger();
  private:
  const ::HmiWidget::TCompositeAnimationTrigger& _internal_trigger(int index) const;
  ::HmiWidget::TCompositeAnimationTrigger* _internal_add_trigger();
  public:
  const ::HmiWidget::TCompositeAnimationTrigger& trigger(int index) const;
  ::HmiWidget::TCompositeAnimationTrigger* add_trigger();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationTrigger >&
      trigger() const;

  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // optional .HmiWidget.TWidgetAnimation widgetAnimation = 2;
  bool has_widgetanimation() const;
  private:
  bool _internal_has_widgetanimation() const;
  public:
  void clear_widgetanimation();
  const ::HmiWidget::TWidgetAnimation& widgetanimation() const;
  PROTOBUF_NODISCARD ::HmiWidget::TWidgetAnimation* release_widgetanimation();
  ::HmiWidget::TWidgetAnimation* mutable_widgetanimation();
  void set_allocated_widgetanimation(::HmiWidget::TWidgetAnimation* widgetanimation);
  private:
  const ::HmiWidget::TWidgetAnimation& _internal_widgetanimation() const;
  ::HmiWidget::TWidgetAnimation* _internal_mutable_widgetanimation();
  public:
  void unsafe_arena_set_allocated_widgetanimation(
      ::HmiWidget::TWidgetAnimation* widgetanimation);
  ::HmiWidget::TWidgetAnimation* unsafe_arena_release_widgetanimation();

  // @@protoc_insertion_point(class_scope:HmiWidget.TCompositeAnimationSubAnimationList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > useimport_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationTrigger > trigger_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TWidgetAnimation* widgetanimation_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCompositeAnimationReturnValue final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCompositeAnimationReturnValue) */ {
 public:
  inline TCompositeAnimationReturnValue() : TCompositeAnimationReturnValue(nullptr) {}
  ~TCompositeAnimationReturnValue() override;
  explicit PROTOBUF_CONSTEXPR TCompositeAnimationReturnValue(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCompositeAnimationReturnValue(const TCompositeAnimationReturnValue& from);
  TCompositeAnimationReturnValue(TCompositeAnimationReturnValue&& from) noexcept
    : TCompositeAnimationReturnValue() {
    *this = ::std::move(from);
  }

  inline TCompositeAnimationReturnValue& operator=(const TCompositeAnimationReturnValue& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCompositeAnimationReturnValue& operator=(TCompositeAnimationReturnValue&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCompositeAnimationReturnValue& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCompositeAnimationReturnValue* internal_default_instance() {
    return reinterpret_cast<const TCompositeAnimationReturnValue*>(
               &_TCompositeAnimationReturnValue_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    56;

  friend void swap(TCompositeAnimationReturnValue& a, TCompositeAnimationReturnValue& b) {
    a.Swap(&b);
  }
  inline void Swap(TCompositeAnimationReturnValue* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCompositeAnimationReturnValue* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCompositeAnimationReturnValue* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCompositeAnimationReturnValue>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCompositeAnimationReturnValue& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCompositeAnimationReturnValue& from) {
    TCompositeAnimationReturnValue::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCompositeAnimationReturnValue* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCompositeAnimationReturnValue";
  }
  protected:
  explicit TCompositeAnimationReturnValue(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnimationFieldNumber = 2,
    kKeyFieldNumber = 1,
    kDefaultValueFieldNumber = 4,
    kReturnTypeFieldNumber = 3,
  };
  // repeated .HmiWidget.TCompositeAnimationSubAnimationList animation = 2;
  int animation_size() const;
  private:
  int _internal_animation_size() const;
  public:
  void clear_animation();
  ::HmiWidget::TCompositeAnimationSubAnimationList* mutable_animation(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationSubAnimationList >*
      mutable_animation();
  private:
  const ::HmiWidget::TCompositeAnimationSubAnimationList& _internal_animation(int index) const;
  ::HmiWidget::TCompositeAnimationSubAnimationList* _internal_add_animation();
  public:
  const ::HmiWidget::TCompositeAnimationSubAnimationList& animation(int index) const;
  ::HmiWidget::TCompositeAnimationSubAnimationList* add_animation();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationSubAnimationList >&
      animation() const;

  // required .TIdentifier key = 1;
  bool has_key() const;
  private:
  bool _internal_has_key() const;
  public:
  void clear_key();
  const ::TIdentifier& key() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_key();
  ::TIdentifier* mutable_key();
  void set_allocated_key(::TIdentifier* key);
  private:
  const ::TIdentifier& _internal_key() const;
  ::TIdentifier* _internal_mutable_key();
  public:
  void unsafe_arena_set_allocated_key(
      ::TIdentifier* key);
  ::TIdentifier* unsafe_arena_release_key();

  // optional .TVariant defaultValue = 4;
  bool has_defaultvalue() const;
  private:
  bool _internal_has_defaultvalue() const;
  public:
  void clear_defaultvalue();
  const ::TVariant& defaultvalue() const;
  PROTOBUF_NODISCARD ::TVariant* release_defaultvalue();
  ::TVariant* mutable_defaultvalue();
  void set_allocated_defaultvalue(::TVariant* defaultvalue);
  private:
  const ::TVariant& _internal_defaultvalue() const;
  ::TVariant* _internal_mutable_defaultvalue();
  public:
  void unsafe_arena_set_allocated_defaultvalue(
      ::TVariant* defaultvalue);
  ::TVariant* unsafe_arena_release_defaultvalue();

  // required .TEDataType returnType = 3;
  bool has_returntype() const;
  private:
  bool _internal_has_returntype() const;
  public:
  void clear_returntype();
  ::TEDataType returntype() const;
  void set_returntype(::TEDataType value);
  private:
  ::TEDataType _internal_returntype() const;
  void _internal_set_returntype(::TEDataType value);
  public:

  // @@protoc_insertion_point(class_scope:HmiWidget.TCompositeAnimationReturnValue)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationSubAnimationList > animation_;
    ::TIdentifier* key_;
    ::TVariant* defaultvalue_;
    int returntype_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TCompositeAnimation final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TCompositeAnimation) */ {
 public:
  inline TCompositeAnimation() : TCompositeAnimation(nullptr) {}
  ~TCompositeAnimation() override;
  explicit PROTOBUF_CONSTEXPR TCompositeAnimation(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TCompositeAnimation(const TCompositeAnimation& from);
  TCompositeAnimation(TCompositeAnimation&& from) noexcept
    : TCompositeAnimation() {
    *this = ::std::move(from);
  }

  inline TCompositeAnimation& operator=(const TCompositeAnimation& from) {
    CopyFrom(from);
    return *this;
  }
  inline TCompositeAnimation& operator=(TCompositeAnimation&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TCompositeAnimation& default_instance() {
    return *internal_default_instance();
  }
  static inline const TCompositeAnimation* internal_default_instance() {
    return reinterpret_cast<const TCompositeAnimation*>(
               &_TCompositeAnimation_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    57;

  friend void swap(TCompositeAnimation& a, TCompositeAnimation& b) {
    a.Swap(&b);
  }
  inline void Swap(TCompositeAnimation* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TCompositeAnimation* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TCompositeAnimation* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TCompositeAnimation>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TCompositeAnimation& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TCompositeAnimation& from) {
    TCompositeAnimation::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TCompositeAnimation* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TCompositeAnimation";
  }
  protected:
  explicit TCompositeAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kReturnValueFieldNumber = 4,
    kCompositeIdentifierFieldNumber = 1,
  };
  // repeated .HmiWidget.TCompositeAnimationReturnValue returnValue = 4;
  int returnvalue_size() const;
  private:
  int _internal_returnvalue_size() const;
  public:
  void clear_returnvalue();
  ::HmiWidget::TCompositeAnimationReturnValue* mutable_returnvalue(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationReturnValue >*
      mutable_returnvalue();
  private:
  const ::HmiWidget::TCompositeAnimationReturnValue& _internal_returnvalue(int index) const;
  ::HmiWidget::TCompositeAnimationReturnValue* _internal_add_returnvalue();
  public:
  const ::HmiWidget::TCompositeAnimationReturnValue& returnvalue(int index) const;
  ::HmiWidget::TCompositeAnimationReturnValue* add_returnvalue();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationReturnValue >&
      returnvalue() const;

  // required .TIdentifier compositeIdentifier = 1;
  bool has_compositeidentifier() const;
  private:
  bool _internal_has_compositeidentifier() const;
  public:
  void clear_compositeidentifier();
  const ::TIdentifier& compositeidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_compositeidentifier();
  ::TIdentifier* mutable_compositeidentifier();
  void set_allocated_compositeidentifier(::TIdentifier* compositeidentifier);
  private:
  const ::TIdentifier& _internal_compositeidentifier() const;
  ::TIdentifier* _internal_mutable_compositeidentifier();
  public:
  void unsafe_arena_set_allocated_compositeidentifier(
      ::TIdentifier* compositeidentifier);
  ::TIdentifier* unsafe_arena_release_compositeidentifier();

  // @@protoc_insertion_point(class_scope:HmiWidget.TCompositeAnimation)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationReturnValue > returnvalue_;
    ::TIdentifier* compositeidentifier_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayout final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayout) */ {
 public:
  inline TLayout() : TLayout(nullptr) {}
  ~TLayout() override;
  explicit PROTOBUF_CONSTEXPR TLayout(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayout(const TLayout& from);
  TLayout(TLayout&& from) noexcept
    : TLayout() {
    *this = ::std::move(from);
  }

  inline TLayout& operator=(const TLayout& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayout& operator=(TLayout&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayout& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayout* internal_default_instance() {
    return reinterpret_cast<const TLayout*>(
               &_TLayout_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    58;

  friend void swap(TLayout& a, TLayout& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayout* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayout* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayout* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayout>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayout& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayout& from) {
    TLayout::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayout* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayout";
  }
  protected:
  explicit TLayout(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTriggeredSlotFieldNumber = 20,
    kUseImportFieldNumber = 22,
    kIdentifierFieldNumber = 1,
    kStaticLayoutFieldNumber = 2,
    kHorizontalLayoutFieldNumber = 3,
    kVerticalLayoutFieldNumber = 4,
    kHorizontalDynamicLayoutFieldNumber = 5,
    kVerticalDynamicLayoutFieldNumber = 6,
    kSceneGraphLayoutFieldNumber = 7,
    kCircleLayoutFieldNumber = 8,
    kHorizontalListLayoutFieldNumber = 9,
    kVerticalListLayoutFieldNumber = 10,
    kVerticalRollLayoutFieldNumber = 11,
    kGridLayoutFieldNumber = 12,
    kMatrixLayoutFieldNumber = 13,
    kSceneGraphProjectLayoutFieldNumber = 14,
    kVerticalCurvedListLayoutFieldNumber = 15,
    kHorizontalPagesLayoutFieldNumber = 16,
    kMenuBeltLayoutFieldNumber = 17,
    kMatrixDynamicLayoutFieldNumber = 18,
    kVisibilityFieldNumber = 21,
  };
  // repeated .HmiWidget.TTriggeredSlot triggeredSlot = 20;
  int triggeredslot_size() const;
  private:
  int _internal_triggeredslot_size() const;
  public:
  void clear_triggeredslot();
  ::HmiWidget::TTriggeredSlot* mutable_triggeredslot(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >*
      mutable_triggeredslot();
  private:
  const ::HmiWidget::TTriggeredSlot& _internal_triggeredslot(int index) const;
  ::HmiWidget::TTriggeredSlot* _internal_add_triggeredslot();
  public:
  const ::HmiWidget::TTriggeredSlot& triggeredslot(int index) const;
  ::HmiWidget::TTriggeredSlot* add_triggeredslot();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >&
      triggeredslot() const;

  // repeated .TIdentifier useImport = 22;
  int useimport_size() const;
  private:
  int _internal_useimport_size() const;
  public:
  void clear_useimport();
  ::TIdentifier* mutable_useimport(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
      mutable_useimport();
  private:
  const ::TIdentifier& _internal_useimport(int index) const;
  ::TIdentifier* _internal_add_useimport();
  public:
  const ::TIdentifier& useimport(int index) const;
  ::TIdentifier* add_useimport();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
      useimport() const;

  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // optional .HmiWidget.TLayoutStatic staticLayout = 2;
  bool has_staticlayout() const;
  private:
  bool _internal_has_staticlayout() const;
  public:
  void clear_staticlayout();
  const ::HmiWidget::TLayoutStatic& staticlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutStatic* release_staticlayout();
  ::HmiWidget::TLayoutStatic* mutable_staticlayout();
  void set_allocated_staticlayout(::HmiWidget::TLayoutStatic* staticlayout);
  private:
  const ::HmiWidget::TLayoutStatic& _internal_staticlayout() const;
  ::HmiWidget::TLayoutStatic* _internal_mutable_staticlayout();
  public:
  void unsafe_arena_set_allocated_staticlayout(
      ::HmiWidget::TLayoutStatic* staticlayout);
  ::HmiWidget::TLayoutStatic* unsafe_arena_release_staticlayout();

  // optional .HmiWidget.TLayoutHorizontal horizontalLayout = 3;
  bool has_horizontallayout() const;
  private:
  bool _internal_has_horizontallayout() const;
  public:
  void clear_horizontallayout();
  const ::HmiWidget::TLayoutHorizontal& horizontallayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontal* release_horizontallayout();
  ::HmiWidget::TLayoutHorizontal* mutable_horizontallayout();
  void set_allocated_horizontallayout(::HmiWidget::TLayoutHorizontal* horizontallayout);
  private:
  const ::HmiWidget::TLayoutHorizontal& _internal_horizontallayout() const;
  ::HmiWidget::TLayoutHorizontal* _internal_mutable_horizontallayout();
  public:
  void unsafe_arena_set_allocated_horizontallayout(
      ::HmiWidget::TLayoutHorizontal* horizontallayout);
  ::HmiWidget::TLayoutHorizontal* unsafe_arena_release_horizontallayout();

  // optional .HmiWidget.TLayoutVertical verticalLayout = 4;
  bool has_verticallayout() const;
  private:
  bool _internal_has_verticallayout() const;
  public:
  void clear_verticallayout();
  const ::HmiWidget::TLayoutVertical& verticallayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVertical* release_verticallayout();
  ::HmiWidget::TLayoutVertical* mutable_verticallayout();
  void set_allocated_verticallayout(::HmiWidget::TLayoutVertical* verticallayout);
  private:
  const ::HmiWidget::TLayoutVertical& _internal_verticallayout() const;
  ::HmiWidget::TLayoutVertical* _internal_mutable_verticallayout();
  public:
  void unsafe_arena_set_allocated_verticallayout(
      ::HmiWidget::TLayoutVertical* verticallayout);
  ::HmiWidget::TLayoutVertical* unsafe_arena_release_verticallayout();

  // optional .HmiWidget.TLayoutHorizontalDynamic horizontalDynamicLayout = 5;
  bool has_horizontaldynamiclayout() const;
  private:
  bool _internal_has_horizontaldynamiclayout() const;
  public:
  void clear_horizontaldynamiclayout();
  const ::HmiWidget::TLayoutHorizontalDynamic& horizontaldynamiclayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontalDynamic* release_horizontaldynamiclayout();
  ::HmiWidget::TLayoutHorizontalDynamic* mutable_horizontaldynamiclayout();
  void set_allocated_horizontaldynamiclayout(::HmiWidget::TLayoutHorizontalDynamic* horizontaldynamiclayout);
  private:
  const ::HmiWidget::TLayoutHorizontalDynamic& _internal_horizontaldynamiclayout() const;
  ::HmiWidget::TLayoutHorizontalDynamic* _internal_mutable_horizontaldynamiclayout();
  public:
  void unsafe_arena_set_allocated_horizontaldynamiclayout(
      ::HmiWidget::TLayoutHorizontalDynamic* horizontaldynamiclayout);
  ::HmiWidget::TLayoutHorizontalDynamic* unsafe_arena_release_horizontaldynamiclayout();

  // optional .HmiWidget.TLayoutVerticalDynamic verticalDynamicLayout = 6;
  bool has_verticaldynamiclayout() const;
  private:
  bool _internal_has_verticaldynamiclayout() const;
  public:
  void clear_verticaldynamiclayout();
  const ::HmiWidget::TLayoutVerticalDynamic& verticaldynamiclayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalDynamic* release_verticaldynamiclayout();
  ::HmiWidget::TLayoutVerticalDynamic* mutable_verticaldynamiclayout();
  void set_allocated_verticaldynamiclayout(::HmiWidget::TLayoutVerticalDynamic* verticaldynamiclayout);
  private:
  const ::HmiWidget::TLayoutVerticalDynamic& _internal_verticaldynamiclayout() const;
  ::HmiWidget::TLayoutVerticalDynamic* _internal_mutable_verticaldynamiclayout();
  public:
  void unsafe_arena_set_allocated_verticaldynamiclayout(
      ::HmiWidget::TLayoutVerticalDynamic* verticaldynamiclayout);
  ::HmiWidget::TLayoutVerticalDynamic* unsafe_arena_release_verticaldynamiclayout();

  // optional .HmiWidget.TLayoutSceneGraph sceneGraphLayout = 7;
  bool has_scenegraphlayout() const;
  private:
  bool _internal_has_scenegraphlayout() const;
  public:
  void clear_scenegraphlayout();
  const ::HmiWidget::TLayoutSceneGraph& scenegraphlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutSceneGraph* release_scenegraphlayout();
  ::HmiWidget::TLayoutSceneGraph* mutable_scenegraphlayout();
  void set_allocated_scenegraphlayout(::HmiWidget::TLayoutSceneGraph* scenegraphlayout);
  private:
  const ::HmiWidget::TLayoutSceneGraph& _internal_scenegraphlayout() const;
  ::HmiWidget::TLayoutSceneGraph* _internal_mutable_scenegraphlayout();
  public:
  void unsafe_arena_set_allocated_scenegraphlayout(
      ::HmiWidget::TLayoutSceneGraph* scenegraphlayout);
  ::HmiWidget::TLayoutSceneGraph* unsafe_arena_release_scenegraphlayout();

  // optional .HmiWidget.TLayoutCircle circleLayout = 8;
  bool has_circlelayout() const;
  private:
  bool _internal_has_circlelayout() const;
  public:
  void clear_circlelayout();
  const ::HmiWidget::TLayoutCircle& circlelayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutCircle* release_circlelayout();
  ::HmiWidget::TLayoutCircle* mutable_circlelayout();
  void set_allocated_circlelayout(::HmiWidget::TLayoutCircle* circlelayout);
  private:
  const ::HmiWidget::TLayoutCircle& _internal_circlelayout() const;
  ::HmiWidget::TLayoutCircle* _internal_mutable_circlelayout();
  public:
  void unsafe_arena_set_allocated_circlelayout(
      ::HmiWidget::TLayoutCircle* circlelayout);
  ::HmiWidget::TLayoutCircle* unsafe_arena_release_circlelayout();

  // optional .HmiWidget.TLayoutHorizontalList horizontalListLayout = 9;
  bool has_horizontallistlayout() const;
  private:
  bool _internal_has_horizontallistlayout() const;
  public:
  void clear_horizontallistlayout();
  const ::HmiWidget::TLayoutHorizontalList& horizontallistlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontalList* release_horizontallistlayout();
  ::HmiWidget::TLayoutHorizontalList* mutable_horizontallistlayout();
  void set_allocated_horizontallistlayout(::HmiWidget::TLayoutHorizontalList* horizontallistlayout);
  private:
  const ::HmiWidget::TLayoutHorizontalList& _internal_horizontallistlayout() const;
  ::HmiWidget::TLayoutHorizontalList* _internal_mutable_horizontallistlayout();
  public:
  void unsafe_arena_set_allocated_horizontallistlayout(
      ::HmiWidget::TLayoutHorizontalList* horizontallistlayout);
  ::HmiWidget::TLayoutHorizontalList* unsafe_arena_release_horizontallistlayout();

  // optional .HmiWidget.TLayoutVerticalList verticalListLayout = 10;
  bool has_verticallistlayout() const;
  private:
  bool _internal_has_verticallistlayout() const;
  public:
  void clear_verticallistlayout();
  const ::HmiWidget::TLayoutVerticalList& verticallistlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalList* release_verticallistlayout();
  ::HmiWidget::TLayoutVerticalList* mutable_verticallistlayout();
  void set_allocated_verticallistlayout(::HmiWidget::TLayoutVerticalList* verticallistlayout);
  private:
  const ::HmiWidget::TLayoutVerticalList& _internal_verticallistlayout() const;
  ::HmiWidget::TLayoutVerticalList* _internal_mutable_verticallistlayout();
  public:
  void unsafe_arena_set_allocated_verticallistlayout(
      ::HmiWidget::TLayoutVerticalList* verticallistlayout);
  ::HmiWidget::TLayoutVerticalList* unsafe_arena_release_verticallistlayout();

  // optional .HmiWidget.TLayoutVerticalRoll verticalRollLayout = 11;
  bool has_verticalrolllayout() const;
  private:
  bool _internal_has_verticalrolllayout() const;
  public:
  void clear_verticalrolllayout();
  const ::HmiWidget::TLayoutVerticalRoll& verticalrolllayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalRoll* release_verticalrolllayout();
  ::HmiWidget::TLayoutVerticalRoll* mutable_verticalrolllayout();
  void set_allocated_verticalrolllayout(::HmiWidget::TLayoutVerticalRoll* verticalrolllayout);
  private:
  const ::HmiWidget::TLayoutVerticalRoll& _internal_verticalrolllayout() const;
  ::HmiWidget::TLayoutVerticalRoll* _internal_mutable_verticalrolllayout();
  public:
  void unsafe_arena_set_allocated_verticalrolllayout(
      ::HmiWidget::TLayoutVerticalRoll* verticalrolllayout);
  ::HmiWidget::TLayoutVerticalRoll* unsafe_arena_release_verticalrolllayout();

  // optional .HmiWidget.TLayoutGrid gridLayout = 12;
  bool has_gridlayout() const;
  private:
  bool _internal_has_gridlayout() const;
  public:
  void clear_gridlayout();
  const ::HmiWidget::TLayoutGrid& gridlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutGrid* release_gridlayout();
  ::HmiWidget::TLayoutGrid* mutable_gridlayout();
  void set_allocated_gridlayout(::HmiWidget::TLayoutGrid* gridlayout);
  private:
  const ::HmiWidget::TLayoutGrid& _internal_gridlayout() const;
  ::HmiWidget::TLayoutGrid* _internal_mutable_gridlayout();
  public:
  void unsafe_arena_set_allocated_gridlayout(
      ::HmiWidget::TLayoutGrid* gridlayout);
  ::HmiWidget::TLayoutGrid* unsafe_arena_release_gridlayout();

  // optional .HmiWidget.TLayoutMatrix matrixLayout = 13;
  bool has_matrixlayout() const;
  private:
  bool _internal_has_matrixlayout() const;
  public:
  void clear_matrixlayout();
  const ::HmiWidget::TLayoutMatrix& matrixlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMatrix* release_matrixlayout();
  ::HmiWidget::TLayoutMatrix* mutable_matrixlayout();
  void set_allocated_matrixlayout(::HmiWidget::TLayoutMatrix* matrixlayout);
  private:
  const ::HmiWidget::TLayoutMatrix& _internal_matrixlayout() const;
  ::HmiWidget::TLayoutMatrix* _internal_mutable_matrixlayout();
  public:
  void unsafe_arena_set_allocated_matrixlayout(
      ::HmiWidget::TLayoutMatrix* matrixlayout);
  ::HmiWidget::TLayoutMatrix* unsafe_arena_release_matrixlayout();

  // optional .HmiWidget.TLayoutSceneGraphProject sceneGraphProjectLayout = 14;
  bool has_scenegraphprojectlayout() const;
  private:
  bool _internal_has_scenegraphprojectlayout() const;
  public:
  void clear_scenegraphprojectlayout();
  const ::HmiWidget::TLayoutSceneGraphProject& scenegraphprojectlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutSceneGraphProject* release_scenegraphprojectlayout();
  ::HmiWidget::TLayoutSceneGraphProject* mutable_scenegraphprojectlayout();
  void set_allocated_scenegraphprojectlayout(::HmiWidget::TLayoutSceneGraphProject* scenegraphprojectlayout);
  private:
  const ::HmiWidget::TLayoutSceneGraphProject& _internal_scenegraphprojectlayout() const;
  ::HmiWidget::TLayoutSceneGraphProject* _internal_mutable_scenegraphprojectlayout();
  public:
  void unsafe_arena_set_allocated_scenegraphprojectlayout(
      ::HmiWidget::TLayoutSceneGraphProject* scenegraphprojectlayout);
  ::HmiWidget::TLayoutSceneGraphProject* unsafe_arena_release_scenegraphprojectlayout();

  // optional .HmiWidget.TLayoutVerticalCurvedList verticalCurvedListLayout = 15;
  bool has_verticalcurvedlistlayout() const;
  private:
  bool _internal_has_verticalcurvedlistlayout() const;
  public:
  void clear_verticalcurvedlistlayout();
  const ::HmiWidget::TLayoutVerticalCurvedList& verticalcurvedlistlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalCurvedList* release_verticalcurvedlistlayout();
  ::HmiWidget::TLayoutVerticalCurvedList* mutable_verticalcurvedlistlayout();
  void set_allocated_verticalcurvedlistlayout(::HmiWidget::TLayoutVerticalCurvedList* verticalcurvedlistlayout);
  private:
  const ::HmiWidget::TLayoutVerticalCurvedList& _internal_verticalcurvedlistlayout() const;
  ::HmiWidget::TLayoutVerticalCurvedList* _internal_mutable_verticalcurvedlistlayout();
  public:
  void unsafe_arena_set_allocated_verticalcurvedlistlayout(
      ::HmiWidget::TLayoutVerticalCurvedList* verticalcurvedlistlayout);
  ::HmiWidget::TLayoutVerticalCurvedList* unsafe_arena_release_verticalcurvedlistlayout();

  // optional .HmiWidget.TLayoutHorizontalPages horizontalPagesLayout = 16;
  bool has_horizontalpageslayout() const;
  private:
  bool _internal_has_horizontalpageslayout() const;
  public:
  void clear_horizontalpageslayout();
  const ::HmiWidget::TLayoutHorizontalPages& horizontalpageslayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontalPages* release_horizontalpageslayout();
  ::HmiWidget::TLayoutHorizontalPages* mutable_horizontalpageslayout();
  void set_allocated_horizontalpageslayout(::HmiWidget::TLayoutHorizontalPages* horizontalpageslayout);
  private:
  const ::HmiWidget::TLayoutHorizontalPages& _internal_horizontalpageslayout() const;
  ::HmiWidget::TLayoutHorizontalPages* _internal_mutable_horizontalpageslayout();
  public:
  void unsafe_arena_set_allocated_horizontalpageslayout(
      ::HmiWidget::TLayoutHorizontalPages* horizontalpageslayout);
  ::HmiWidget::TLayoutHorizontalPages* unsafe_arena_release_horizontalpageslayout();

  // optional .HmiWidget.TLayoutMenuBelt menuBeltLayout = 17;
  bool has_menubeltlayout() const;
  private:
  bool _internal_has_menubeltlayout() const;
  public:
  void clear_menubeltlayout();
  const ::HmiWidget::TLayoutMenuBelt& menubeltlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMenuBelt* release_menubeltlayout();
  ::HmiWidget::TLayoutMenuBelt* mutable_menubeltlayout();
  void set_allocated_menubeltlayout(::HmiWidget::TLayoutMenuBelt* menubeltlayout);
  private:
  const ::HmiWidget::TLayoutMenuBelt& _internal_menubeltlayout() const;
  ::HmiWidget::TLayoutMenuBelt* _internal_mutable_menubeltlayout();
  public:
  void unsafe_arena_set_allocated_menubeltlayout(
      ::HmiWidget::TLayoutMenuBelt* menubeltlayout);
  ::HmiWidget::TLayoutMenuBelt* unsafe_arena_release_menubeltlayout();

  // optional .HmiWidget.TLayoutMatrixDynamic matrixDynamicLayout = 18;
  bool has_matrixdynamiclayout() const;
  private:
  bool _internal_has_matrixdynamiclayout() const;
  public:
  void clear_matrixdynamiclayout();
  const ::HmiWidget::TLayoutMatrixDynamic& matrixdynamiclayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMatrixDynamic* release_matrixdynamiclayout();
  ::HmiWidget::TLayoutMatrixDynamic* mutable_matrixdynamiclayout();
  void set_allocated_matrixdynamiclayout(::HmiWidget::TLayoutMatrixDynamic* matrixdynamiclayout);
  private:
  const ::HmiWidget::TLayoutMatrixDynamic& _internal_matrixdynamiclayout() const;
  ::HmiWidget::TLayoutMatrixDynamic* _internal_mutable_matrixdynamiclayout();
  public:
  void unsafe_arena_set_allocated_matrixdynamiclayout(
      ::HmiWidget::TLayoutMatrixDynamic* matrixdynamiclayout);
  ::HmiWidget::TLayoutMatrixDynamic* unsafe_arena_release_matrixdynamiclayout();

  // optional .TDataBinding visibility = 21;
  bool has_visibility() const;
  private:
  bool _internal_has_visibility() const;
  public:
  void clear_visibility();
  const ::TDataBinding& visibility() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_visibility();
  ::TDataBinding* mutable_visibility();
  void set_allocated_visibility(::TDataBinding* visibility);
  private:
  const ::TDataBinding& _internal_visibility() const;
  ::TDataBinding* _internal_mutable_visibility();
  public:
  void unsafe_arena_set_allocated_visibility(
      ::TDataBinding* visibility);
  ::TDataBinding* unsafe_arena_release_visibility();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayout)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot > triggeredslot_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier > useimport_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutStatic* staticlayout_;
    ::HmiWidget::TLayoutHorizontal* horizontallayout_;
    ::HmiWidget::TLayoutVertical* verticallayout_;
    ::HmiWidget::TLayoutHorizontalDynamic* horizontaldynamiclayout_;
    ::HmiWidget::TLayoutVerticalDynamic* verticaldynamiclayout_;
    ::HmiWidget::TLayoutSceneGraph* scenegraphlayout_;
    ::HmiWidget::TLayoutCircle* circlelayout_;
    ::HmiWidget::TLayoutHorizontalList* horizontallistlayout_;
    ::HmiWidget::TLayoutVerticalList* verticallistlayout_;
    ::HmiWidget::TLayoutVerticalRoll* verticalrolllayout_;
    ::HmiWidget::TLayoutGrid* gridlayout_;
    ::HmiWidget::TLayoutMatrix* matrixlayout_;
    ::HmiWidget::TLayoutSceneGraphProject* scenegraphprojectlayout_;
    ::HmiWidget::TLayoutVerticalCurvedList* verticalcurvedlistlayout_;
    ::HmiWidget::TLayoutHorizontalPages* horizontalpageslayout_;
    ::HmiWidget::TLayoutMenuBelt* menubeltlayout_;
    ::HmiWidget::TLayoutMatrixDynamic* matrixdynamiclayout_;
    ::TDataBinding* visibility_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutStaticBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutStaticBase) */ {
 public:
  inline TLayoutStaticBase() : TLayoutStaticBase(nullptr) {}
  ~TLayoutStaticBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutStaticBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutStaticBase(const TLayoutStaticBase& from);
  TLayoutStaticBase(TLayoutStaticBase&& from) noexcept
    : TLayoutStaticBase() {
    *this = ::std::move(from);
  }

  inline TLayoutStaticBase& operator=(const TLayoutStaticBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutStaticBase& operator=(TLayoutStaticBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutStaticBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutStaticBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutStaticBase*>(
               &_TLayoutStaticBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    59;

  friend void swap(TLayoutStaticBase& a, TLayoutStaticBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutStaticBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutStaticBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutStaticBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutStaticBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutStaticBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutStaticBase& from) {
    TLayoutStaticBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutStaticBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutStaticBase";
  }
  protected:
  explicit TLayoutStaticBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftMarginFieldNumber = 1,
    kRightMarginFieldNumber = 2,
    kTopMarginFieldNumber = 3,
    kBottomMarginFieldNumber = 4,
  };
  // optional .TDataBinding leftMargin = 1;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 2;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 3;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 4;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutStaticBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutStatic_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutStatic.TTemplate) */ {
 public:
  inline TLayoutStatic_TTemplate() : TLayoutStatic_TTemplate(nullptr) {}
  ~TLayoutStatic_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutStatic_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutStatic_TTemplate(const TLayoutStatic_TTemplate& from);
  TLayoutStatic_TTemplate(TLayoutStatic_TTemplate&& from) noexcept
    : TLayoutStatic_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutStatic_TTemplate& operator=(const TLayoutStatic_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutStatic_TTemplate& operator=(TLayoutStatic_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutStatic_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutStatic_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutStatic_TTemplate*>(
               &_TLayoutStatic_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    60;

  friend void swap(TLayoutStatic_TTemplate& a, TLayoutStatic_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutStatic_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutStatic_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutStatic_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutStatic_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutStatic_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutStatic_TTemplate& from) {
    TLayoutStatic_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutStatic_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutStatic.TTemplate";
  }
  protected:
  explicit TLayoutStatic_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutStaticElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutStaticElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutStaticElement* release_element();
  ::HmiWidget::TLayoutStaticElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutStaticElement* element);
  private:
  const ::HmiWidget::TLayoutStaticElement& _internal_element() const;
  ::HmiWidget::TLayoutStaticElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutStaticElement* element);
  ::HmiWidget::TLayoutStaticElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutStatic.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutStaticElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutStatic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutStatic) */ {
 public:
  inline TLayoutStatic() : TLayoutStatic(nullptr) {}
  ~TLayoutStatic() override;
  explicit PROTOBUF_CONSTEXPR TLayoutStatic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutStatic(const TLayoutStatic& from);
  TLayoutStatic(TLayoutStatic&& from) noexcept
    : TLayoutStatic() {
    *this = ::std::move(from);
  }

  inline TLayoutStatic& operator=(const TLayoutStatic& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutStatic& operator=(TLayoutStatic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutStatic& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutStatic* internal_default_instance() {
    return reinterpret_cast<const TLayoutStatic*>(
               &_TLayoutStatic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    61;

  friend void swap(TLayoutStatic& a, TLayoutStatic& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutStatic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutStatic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutStatic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutStatic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutStatic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutStatic& from) {
    TLayoutStatic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutStatic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutStatic";
  }
  protected:
  explicit TLayoutStatic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutStatic_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
    kElementTemplateFieldNumber = 2,
    kBaseFieldNumber = 3,
  };
  // repeated .HmiWidget.TLayoutStaticElement element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutStaticElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStaticElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutStaticElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutStaticElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutStaticElement& element(int index) const;
  ::HmiWidget::TLayoutStaticElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStaticElement >&
      element() const;

  // repeated .HmiWidget.TLayoutStatic.TTemplate elementTemplate = 2;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutStatic_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStatic_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutStatic_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutStatic_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutStatic_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutStatic_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStatic_TTemplate >&
      elementtemplate() const;

  // optional .HmiWidget.TLayoutStaticBase base = 3;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutStaticBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutStaticBase* release_base();
  ::HmiWidget::TLayoutStaticBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutStaticBase* base);
  private:
  const ::HmiWidget::TLayoutStaticBase& _internal_base() const;
  ::HmiWidget::TLayoutStaticBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutStaticBase* base);
  ::HmiWidget::TLayoutStaticBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutStatic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStaticElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStatic_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutStaticBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutStaticElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutStaticElement) */ {
 public:
  inline TLayoutStaticElement() : TLayoutStaticElement(nullptr) {}
  ~TLayoutStaticElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutStaticElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutStaticElement(const TLayoutStaticElement& from);
  TLayoutStaticElement(TLayoutStaticElement&& from) noexcept
    : TLayoutStaticElement() {
    *this = ::std::move(from);
  }

  inline TLayoutStaticElement& operator=(const TLayoutStaticElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutStaticElement& operator=(TLayoutStaticElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutStaticElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutStaticElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutStaticElement*>(
               &_TLayoutStaticElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    62;

  friend void swap(TLayoutStaticElement& a, TLayoutStaticElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutStaticElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutStaticElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutStaticElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutStaticElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutStaticElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutStaticElement& from) {
    TLayoutStaticElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutStaticElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutStaticElement";
  }
  protected:
  explicit TLayoutStaticElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kSizeFieldNumber = 3,
    kRotationFieldNumber = 4,
    kPositionFieldNumber = 5,
    kAlignmentFieldNumber = 6,
    kSizePolicyFieldNumber = 7,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding rotation = 4;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::TDataBinding& rotation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rotation();
  ::TDataBinding* mutable_rotation();
  void set_allocated_rotation(::TDataBinding* rotation);
  private:
  const ::TDataBinding& _internal_rotation() const;
  ::TDataBinding* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::TDataBinding* rotation);
  ::TDataBinding* unsafe_arena_release_rotation();

  // optional .TDataBinding position = 5;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::TDataBinding& position() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_position();
  ::TDataBinding* mutable_position();
  void set_allocated_position(::TDataBinding* position);
  private:
  const ::TDataBinding& _internal_position() const;
  ::TDataBinding* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::TDataBinding* position);
  ::TDataBinding* unsafe_arena_release_position();

  // optional .TDataBinding alignment = 6;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // optional .TDataBinding sizePolicy = 7;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutStaticElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* size_;
    ::TDataBinding* rotation_;
    ::TDataBinding* position_;
    ::TDataBinding* alignment_;
    ::TDataBinding* sizepolicy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontal_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontal.TTemplate) */ {
 public:
  inline TLayoutHorizontal_TTemplate() : TLayoutHorizontal_TTemplate(nullptr) {}
  ~TLayoutHorizontal_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontal_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontal_TTemplate(const TLayoutHorizontal_TTemplate& from);
  TLayoutHorizontal_TTemplate(TLayoutHorizontal_TTemplate&& from) noexcept
    : TLayoutHorizontal_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontal_TTemplate& operator=(const TLayoutHorizontal_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontal_TTemplate& operator=(TLayoutHorizontal_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontal_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontal_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontal_TTemplate*>(
               &_TLayoutHorizontal_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    63;

  friend void swap(TLayoutHorizontal_TTemplate& a, TLayoutHorizontal_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontal_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontal_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontal_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontal_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontal_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontal_TTemplate& from) {
    TLayoutHorizontal_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontal_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontal.TTemplate";
  }
  protected:
  explicit TLayoutHorizontal_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutHorizontalElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutHorizontalElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontalElement* release_element();
  ::HmiWidget::TLayoutHorizontalElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutHorizontalElement* element);
  private:
  const ::HmiWidget::TLayoutHorizontalElement& _internal_element() const;
  ::HmiWidget::TLayoutHorizontalElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutHorizontalElement* element);
  ::HmiWidget::TLayoutHorizontalElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontal.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutHorizontalElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontal final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontal) */ {
 public:
  inline TLayoutHorizontal() : TLayoutHorizontal(nullptr) {}
  ~TLayoutHorizontal() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontal(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontal(const TLayoutHorizontal& from);
  TLayoutHorizontal(TLayoutHorizontal&& from) noexcept
    : TLayoutHorizontal() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontal& operator=(const TLayoutHorizontal& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontal& operator=(TLayoutHorizontal&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontal& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontal* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontal*>(
               &_TLayoutHorizontal_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    64;

  friend void swap(TLayoutHorizontal& a, TLayoutHorizontal& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontal* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontal* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontal* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontal>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontal& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontal& from) {
    TLayoutHorizontal::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontal* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontal";
  }
  protected:
  explicit TLayoutHorizontal(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutHorizontal_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutHorizontalElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutHorizontalElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutHorizontalElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutHorizontalElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutHorizontalElement& element(int index) const;
  ::HmiWidget::TLayoutHorizontalElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >&
      element() const;

  // repeated .HmiWidget.TLayoutHorizontal.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutHorizontal_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontal_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutHorizontal_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontal_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutHorizontal_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontal_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontal_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVBase* release_base();
  ::HmiWidget::TLayoutHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVBase* base);
  private:
  const ::HmiWidget::TLayoutHVBase& _internal_base() const;
  ::HmiWidget::TLayoutHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVBase* base);
  ::HmiWidget::TLayoutHVBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontal)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontal_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVertical_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVertical.TTemplate) */ {
 public:
  inline TLayoutVertical_TTemplate() : TLayoutVertical_TTemplate(nullptr) {}
  ~TLayoutVertical_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVertical_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVertical_TTemplate(const TLayoutVertical_TTemplate& from);
  TLayoutVertical_TTemplate(TLayoutVertical_TTemplate&& from) noexcept
    : TLayoutVertical_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutVertical_TTemplate& operator=(const TLayoutVertical_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVertical_TTemplate& operator=(TLayoutVertical_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVertical_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVertical_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutVertical_TTemplate*>(
               &_TLayoutVertical_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    65;

  friend void swap(TLayoutVertical_TTemplate& a, TLayoutVertical_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVertical_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVertical_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVertical_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVertical_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVertical_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVertical_TTemplate& from) {
    TLayoutVertical_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVertical_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVertical.TTemplate";
  }
  protected:
  explicit TLayoutVertical_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutVerticalElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutVerticalElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalElement* release_element();
  ::HmiWidget::TLayoutVerticalElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutVerticalElement* element);
  private:
  const ::HmiWidget::TLayoutVerticalElement& _internal_element() const;
  ::HmiWidget::TLayoutVerticalElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutVerticalElement* element);
  ::HmiWidget::TLayoutVerticalElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVertical.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutVerticalElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVertical final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVertical) */ {
 public:
  inline TLayoutVertical() : TLayoutVertical(nullptr) {}
  ~TLayoutVertical() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVertical(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVertical(const TLayoutVertical& from);
  TLayoutVertical(TLayoutVertical&& from) noexcept
    : TLayoutVertical() {
    *this = ::std::move(from);
  }

  inline TLayoutVertical& operator=(const TLayoutVertical& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVertical& operator=(TLayoutVertical&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVertical& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVertical* internal_default_instance() {
    return reinterpret_cast<const TLayoutVertical*>(
               &_TLayoutVertical_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    66;

  friend void swap(TLayoutVertical& a, TLayoutVertical& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVertical* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVertical* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVertical* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVertical>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVertical& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVertical& from) {
    TLayoutVertical::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVertical* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVertical";
  }
  protected:
  explicit TLayoutVertical(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutVertical_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutVerticalElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutVerticalElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutVerticalElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutVerticalElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutVerticalElement& element(int index) const;
  ::HmiWidget::TLayoutVerticalElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalElement >&
      element() const;

  // repeated .HmiWidget.TLayoutVertical.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutVertical_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVertical_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutVertical_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutVertical_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutVertical_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutVertical_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVertical_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVBase* release_base();
  ::HmiWidget::TLayoutHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVBase* base);
  private:
  const ::HmiWidget::TLayoutHVBase& _internal_base() const;
  ::HmiWidget::TLayoutHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVBase* base);
  ::HmiWidget::TLayoutHVBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVertical)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVertical_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalDynamic_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalDynamic.TTemplate) */ {
 public:
  inline TLayoutHorizontalDynamic_TTemplate() : TLayoutHorizontalDynamic_TTemplate(nullptr) {}
  ~TLayoutHorizontalDynamic_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalDynamic_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalDynamic_TTemplate(const TLayoutHorizontalDynamic_TTemplate& from);
  TLayoutHorizontalDynamic_TTemplate(TLayoutHorizontalDynamic_TTemplate&& from) noexcept
    : TLayoutHorizontalDynamic_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalDynamic_TTemplate& operator=(const TLayoutHorizontalDynamic_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalDynamic_TTemplate& operator=(TLayoutHorizontalDynamic_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalDynamic_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalDynamic_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalDynamic_TTemplate*>(
               &_TLayoutHorizontalDynamic_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    67;

  friend void swap(TLayoutHorizontalDynamic_TTemplate& a, TLayoutHorizontalDynamic_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalDynamic_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalDynamic_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalDynamic_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalDynamic_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalDynamic_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalDynamic_TTemplate& from) {
    TLayoutHorizontalDynamic_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalDynamic_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalDynamic.TTemplate";
  }
  protected:
  explicit TLayoutHorizontalDynamic_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutHorizontalDynamicElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutHorizontalDynamicElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontalDynamicElement* release_element();
  ::HmiWidget::TLayoutHorizontalDynamicElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutHorizontalDynamicElement* element);
  private:
  const ::HmiWidget::TLayoutHorizontalDynamicElement& _internal_element() const;
  ::HmiWidget::TLayoutHorizontalDynamicElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutHorizontalDynamicElement* element);
  ::HmiWidget::TLayoutHorizontalDynamicElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalDynamic.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutHorizontalDynamicElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalDynamic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalDynamic) */ {
 public:
  inline TLayoutHorizontalDynamic() : TLayoutHorizontalDynamic(nullptr) {}
  ~TLayoutHorizontalDynamic() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalDynamic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalDynamic(const TLayoutHorizontalDynamic& from);
  TLayoutHorizontalDynamic(TLayoutHorizontalDynamic&& from) noexcept
    : TLayoutHorizontalDynamic() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalDynamic& operator=(const TLayoutHorizontalDynamic& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalDynamic& operator=(TLayoutHorizontalDynamic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalDynamic& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalDynamic* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalDynamic*>(
               &_TLayoutHorizontalDynamic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    68;

  friend void swap(TLayoutHorizontalDynamic& a, TLayoutHorizontalDynamic& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalDynamic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalDynamic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalDynamic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalDynamic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalDynamic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalDynamic& from) {
    TLayoutHorizontalDynamic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalDynamic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalDynamic";
  }
  protected:
  explicit TLayoutHorizontalDynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutHorizontalDynamic_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutHorizontalDynamicElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutHorizontalDynamicElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamicElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutHorizontalDynamicElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutHorizontalDynamicElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutHorizontalDynamicElement& element(int index) const;
  ::HmiWidget::TLayoutHorizontalDynamicElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamicElement >&
      element() const;

  // repeated .HmiWidget.TLayoutHorizontalDynamic.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamic_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutHorizontalDynamic_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutHorizontalDynamic_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamic_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVBase* release_base();
  ::HmiWidget::TLayoutHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVBase* base);
  private:
  const ::HmiWidget::TLayoutHVBase& _internal_base() const;
  ::HmiWidget::TLayoutHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVBase* base);
  ::HmiWidget::TLayoutHVBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalDynamic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamicElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamic_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalDynamic_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalDynamic.TTemplate) */ {
 public:
  inline TLayoutVerticalDynamic_TTemplate() : TLayoutVerticalDynamic_TTemplate(nullptr) {}
  ~TLayoutVerticalDynamic_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalDynamic_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalDynamic_TTemplate(const TLayoutVerticalDynamic_TTemplate& from);
  TLayoutVerticalDynamic_TTemplate(TLayoutVerticalDynamic_TTemplate&& from) noexcept
    : TLayoutVerticalDynamic_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalDynamic_TTemplate& operator=(const TLayoutVerticalDynamic_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalDynamic_TTemplate& operator=(TLayoutVerticalDynamic_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalDynamic_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalDynamic_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalDynamic_TTemplate*>(
               &_TLayoutVerticalDynamic_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    69;

  friend void swap(TLayoutVerticalDynamic_TTemplate& a, TLayoutVerticalDynamic_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalDynamic_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalDynamic_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalDynamic_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalDynamic_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalDynamic_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalDynamic_TTemplate& from) {
    TLayoutVerticalDynamic_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalDynamic_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalDynamic.TTemplate";
  }
  protected:
  explicit TLayoutVerticalDynamic_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutVerticalDynamicElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutVerticalDynamicElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalDynamicElement* release_element();
  ::HmiWidget::TLayoutVerticalDynamicElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutVerticalDynamicElement* element);
  private:
  const ::HmiWidget::TLayoutVerticalDynamicElement& _internal_element() const;
  ::HmiWidget::TLayoutVerticalDynamicElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutVerticalDynamicElement* element);
  ::HmiWidget::TLayoutVerticalDynamicElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalDynamic.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutVerticalDynamicElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalDynamic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalDynamic) */ {
 public:
  inline TLayoutVerticalDynamic() : TLayoutVerticalDynamic(nullptr) {}
  ~TLayoutVerticalDynamic() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalDynamic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalDynamic(const TLayoutVerticalDynamic& from);
  TLayoutVerticalDynamic(TLayoutVerticalDynamic&& from) noexcept
    : TLayoutVerticalDynamic() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalDynamic& operator=(const TLayoutVerticalDynamic& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalDynamic& operator=(TLayoutVerticalDynamic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalDynamic& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalDynamic* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalDynamic*>(
               &_TLayoutVerticalDynamic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    70;

  friend void swap(TLayoutVerticalDynamic& a, TLayoutVerticalDynamic& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalDynamic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalDynamic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalDynamic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalDynamic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalDynamic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalDynamic& from) {
    TLayoutVerticalDynamic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalDynamic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalDynamic";
  }
  protected:
  explicit TLayoutVerticalDynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutVerticalDynamic_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutVerticalDynamicElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutVerticalDynamicElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamicElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutVerticalDynamicElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutVerticalDynamicElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutVerticalDynamicElement& element(int index) const;
  ::HmiWidget::TLayoutVerticalDynamicElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamicElement >&
      element() const;

  // repeated .HmiWidget.TLayoutVerticalDynamic.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutVerticalDynamic_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamic_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutVerticalDynamic_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalDynamic_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutVerticalDynamic_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalDynamic_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamic_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVBase* release_base();
  ::HmiWidget::TLayoutHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVBase* base);
  private:
  const ::HmiWidget::TLayoutHVBase& _internal_base() const;
  ::HmiWidget::TLayoutHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVBase* base);
  ::HmiWidget::TLayoutHVBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalDynamic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamicElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamic_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalList_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalList.TTemplate) */ {
 public:
  inline TLayoutHorizontalList_TTemplate() : TLayoutHorizontalList_TTemplate(nullptr) {}
  ~TLayoutHorizontalList_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalList_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalList_TTemplate(const TLayoutHorizontalList_TTemplate& from);
  TLayoutHorizontalList_TTemplate(TLayoutHorizontalList_TTemplate&& from) noexcept
    : TLayoutHorizontalList_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalList_TTemplate& operator=(const TLayoutHorizontalList_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalList_TTemplate& operator=(TLayoutHorizontalList_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalList_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalList_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalList_TTemplate*>(
               &_TLayoutHorizontalList_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    71;

  friend void swap(TLayoutHorizontalList_TTemplate& a, TLayoutHorizontalList_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalList_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalList_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalList_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalList_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalList_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalList_TTemplate& from) {
    TLayoutHorizontalList_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalList_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalList.TTemplate";
  }
  protected:
  explicit TLayoutHorizontalList_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutHorizontalListElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutHorizontalListElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontalListElement* release_element();
  ::HmiWidget::TLayoutHorizontalListElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutHorizontalListElement* element);
  private:
  const ::HmiWidget::TLayoutHorizontalListElement& _internal_element() const;
  ::HmiWidget::TLayoutHorizontalListElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutHorizontalListElement* element);
  ::HmiWidget::TLayoutHorizontalListElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalList.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutHorizontalListElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalList) */ {
 public:
  inline TLayoutHorizontalList() : TLayoutHorizontalList(nullptr) {}
  ~TLayoutHorizontalList() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalList(const TLayoutHorizontalList& from);
  TLayoutHorizontalList(TLayoutHorizontalList&& from) noexcept
    : TLayoutHorizontalList() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalList& operator=(const TLayoutHorizontalList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalList& operator=(TLayoutHorizontalList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalList* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalList*>(
               &_TLayoutHorizontalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    72;

  friend void swap(TLayoutHorizontalList& a, TLayoutHorizontalList& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalList& from) {
    TLayoutHorizontalList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalList";
  }
  protected:
  explicit TLayoutHorizontalList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutHorizontalList_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutHorizontalListElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutHorizontalListElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalListElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutHorizontalListElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutHorizontalListElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutHorizontalListElement& element(int index) const;
  ::HmiWidget::TLayoutHorizontalListElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalListElement >&
      element() const;

  // repeated .HmiWidget.TLayoutHorizontalList.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutHorizontalList_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalList_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutHorizontalList_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontalList_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutHorizontalList_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontalList_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalList_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVBase* release_base();
  ::HmiWidget::TLayoutHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVBase* base);
  private:
  const ::HmiWidget::TLayoutHVBase& _internal_base() const;
  ::HmiWidget::TLayoutHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVBase* base);
  ::HmiWidget::TLayoutHVBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalListElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalList_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalList_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalList.TTemplate) */ {
 public:
  inline TLayoutVerticalList_TTemplate() : TLayoutVerticalList_TTemplate(nullptr) {}
  ~TLayoutVerticalList_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalList_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalList_TTemplate(const TLayoutVerticalList_TTemplate& from);
  TLayoutVerticalList_TTemplate(TLayoutVerticalList_TTemplate&& from) noexcept
    : TLayoutVerticalList_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalList_TTemplate& operator=(const TLayoutVerticalList_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalList_TTemplate& operator=(TLayoutVerticalList_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalList_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalList_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalList_TTemplate*>(
               &_TLayoutVerticalList_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    73;

  friend void swap(TLayoutVerticalList_TTemplate& a, TLayoutVerticalList_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalList_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalList_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalList_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalList_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalList_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalList_TTemplate& from) {
    TLayoutVerticalList_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalList_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalList.TTemplate";
  }
  protected:
  explicit TLayoutVerticalList_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutVerticalListElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutVerticalListElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalListElement* release_element();
  ::HmiWidget::TLayoutVerticalListElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutVerticalListElement* element);
  private:
  const ::HmiWidget::TLayoutVerticalListElement& _internal_element() const;
  ::HmiWidget::TLayoutVerticalListElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutVerticalListElement* element);
  ::HmiWidget::TLayoutVerticalListElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalList.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutVerticalListElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalList) */ {
 public:
  inline TLayoutVerticalList() : TLayoutVerticalList(nullptr) {}
  ~TLayoutVerticalList() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalList(const TLayoutVerticalList& from);
  TLayoutVerticalList(TLayoutVerticalList&& from) noexcept
    : TLayoutVerticalList() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalList& operator=(const TLayoutVerticalList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalList& operator=(TLayoutVerticalList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalList* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalList*>(
               &_TLayoutVerticalList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    74;

  friend void swap(TLayoutVerticalList& a, TLayoutVerticalList& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalList& from) {
    TLayoutVerticalList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalList";
  }
  protected:
  explicit TLayoutVerticalList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutVerticalList_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutVerticalListElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutVerticalListElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutVerticalListElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutVerticalListElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutVerticalListElement& element(int index) const;
  ::HmiWidget::TLayoutVerticalListElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >&
      element() const;

  // repeated .HmiWidget.TLayoutVerticalList.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutVerticalList_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalList_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutVerticalList_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalList_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutVerticalList_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalList_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalList_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVBase* release_base();
  ::HmiWidget::TLayoutHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVBase* base);
  private:
  const ::HmiWidget::TLayoutHVBase& _internal_base() const;
  ::HmiWidget::TLayoutHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVBase* base);
  ::HmiWidget::TLayoutHVBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalList_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalCurvedList_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalCurvedList.TTemplate) */ {
 public:
  inline TLayoutVerticalCurvedList_TTemplate() : TLayoutVerticalCurvedList_TTemplate(nullptr) {}
  ~TLayoutVerticalCurvedList_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalCurvedList_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalCurvedList_TTemplate(const TLayoutVerticalCurvedList_TTemplate& from);
  TLayoutVerticalCurvedList_TTemplate(TLayoutVerticalCurvedList_TTemplate&& from) noexcept
    : TLayoutVerticalCurvedList_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalCurvedList_TTemplate& operator=(const TLayoutVerticalCurvedList_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalCurvedList_TTemplate& operator=(TLayoutVerticalCurvedList_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalCurvedList_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalCurvedList_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalCurvedList_TTemplate*>(
               &_TLayoutVerticalCurvedList_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    75;

  friend void swap(TLayoutVerticalCurvedList_TTemplate& a, TLayoutVerticalCurvedList_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalCurvedList_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalCurvedList_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalCurvedList_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalCurvedList_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalCurvedList_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalCurvedList_TTemplate& from) {
    TLayoutVerticalCurvedList_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalCurvedList_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalCurvedList.TTemplate";
  }
  protected:
  explicit TLayoutVerticalCurvedList_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutVerticalListElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutVerticalListElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalListElement* release_element();
  ::HmiWidget::TLayoutVerticalListElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutVerticalListElement* element);
  private:
  const ::HmiWidget::TLayoutVerticalListElement& _internal_element() const;
  ::HmiWidget::TLayoutVerticalListElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutVerticalListElement* element);
  ::HmiWidget::TLayoutVerticalListElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalCurvedList.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutVerticalListElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalCurvedList final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalCurvedList) */ {
 public:
  inline TLayoutVerticalCurvedList() : TLayoutVerticalCurvedList(nullptr) {}
  ~TLayoutVerticalCurvedList() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalCurvedList(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalCurvedList(const TLayoutVerticalCurvedList& from);
  TLayoutVerticalCurvedList(TLayoutVerticalCurvedList&& from) noexcept
    : TLayoutVerticalCurvedList() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalCurvedList& operator=(const TLayoutVerticalCurvedList& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalCurvedList& operator=(TLayoutVerticalCurvedList&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalCurvedList& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalCurvedList* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalCurvedList*>(
               &_TLayoutVerticalCurvedList_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    76;

  friend void swap(TLayoutVerticalCurvedList& a, TLayoutVerticalCurvedList& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalCurvedList* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalCurvedList* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalCurvedList* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalCurvedList>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalCurvedList& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalCurvedList& from) {
    TLayoutVerticalCurvedList::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalCurvedList* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalCurvedList";
  }
  protected:
  explicit TLayoutVerticalCurvedList(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutVerticalCurvedList_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutVerticalListElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutVerticalListElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutVerticalListElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutVerticalListElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutVerticalListElement& element(int index) const;
  ::HmiWidget::TLayoutVerticalListElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >&
      element() const;

  // repeated .HmiWidget.TLayoutVerticalCurvedList.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalCurvedList_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutVerticalCurvedList_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutVerticalCurvedList_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalCurvedList_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutCurvedHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutCurvedHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutCurvedHVBase* release_base();
  ::HmiWidget::TLayoutCurvedHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutCurvedHVBase* base);
  private:
  const ::HmiWidget::TLayoutCurvedHVBase& _internal_base() const;
  ::HmiWidget::TLayoutCurvedHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutCurvedHVBase* base);
  ::HmiWidget::TLayoutCurvedHVBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalCurvedList)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalCurvedList_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutCurvedHVBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalRoll_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalRoll.TTemplate) */ {
 public:
  inline TLayoutVerticalRoll_TTemplate() : TLayoutVerticalRoll_TTemplate(nullptr) {}
  ~TLayoutVerticalRoll_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalRoll_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalRoll_TTemplate(const TLayoutVerticalRoll_TTemplate& from);
  TLayoutVerticalRoll_TTemplate(TLayoutVerticalRoll_TTemplate&& from) noexcept
    : TLayoutVerticalRoll_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalRoll_TTemplate& operator=(const TLayoutVerticalRoll_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalRoll_TTemplate& operator=(TLayoutVerticalRoll_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalRoll_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalRoll_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalRoll_TTemplate*>(
               &_TLayoutVerticalRoll_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    77;

  friend void swap(TLayoutVerticalRoll_TTemplate& a, TLayoutVerticalRoll_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalRoll_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalRoll_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalRoll_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalRoll_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalRoll_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalRoll_TTemplate& from) {
    TLayoutVerticalRoll_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalRoll_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalRoll.TTemplate";
  }
  protected:
  explicit TLayoutVerticalRoll_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutVerticalListElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutVerticalListElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutVerticalListElement* release_element();
  ::HmiWidget::TLayoutVerticalListElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutVerticalListElement* element);
  private:
  const ::HmiWidget::TLayoutVerticalListElement& _internal_element() const;
  ::HmiWidget::TLayoutVerticalListElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutVerticalListElement* element);
  ::HmiWidget::TLayoutVerticalListElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalRoll.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutVerticalListElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalRoll final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalRoll) */ {
 public:
  inline TLayoutVerticalRoll() : TLayoutVerticalRoll(nullptr) {}
  ~TLayoutVerticalRoll() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalRoll(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalRoll(const TLayoutVerticalRoll& from);
  TLayoutVerticalRoll(TLayoutVerticalRoll&& from) noexcept
    : TLayoutVerticalRoll() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalRoll& operator=(const TLayoutVerticalRoll& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalRoll& operator=(TLayoutVerticalRoll&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalRoll& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalRoll* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalRoll*>(
               &_TLayoutVerticalRoll_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    78;

  friend void swap(TLayoutVerticalRoll& a, TLayoutVerticalRoll& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalRoll* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalRoll* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalRoll* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalRoll>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalRoll& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalRoll& from) {
    TLayoutVerticalRoll::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalRoll* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalRoll";
  }
  protected:
  explicit TLayoutVerticalRoll(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutVerticalRoll_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutVerticalListElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutVerticalListElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutVerticalListElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutVerticalListElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutVerticalListElement& element(int index) const;
  ::HmiWidget::TLayoutVerticalListElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >&
      element() const;

  // repeated .HmiWidget.TLayoutVerticalRoll.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutVerticalRoll_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalRoll_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutVerticalRoll_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalRoll_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutVerticalRoll_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutVerticalRoll_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalRoll_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVRollBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVRollBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVRollBase* release_base();
  ::HmiWidget::TLayoutHVRollBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVRollBase* base);
  private:
  const ::HmiWidget::TLayoutHVRollBase& _internal_base() const;
  ::HmiWidget::TLayoutHVRollBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVRollBase* base);
  ::HmiWidget::TLayoutHVRollBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalRoll)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalRoll_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVRollBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalPages_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalPages.TTemplate) */ {
 public:
  inline TLayoutHorizontalPages_TTemplate() : TLayoutHorizontalPages_TTemplate(nullptr) {}
  ~TLayoutHorizontalPages_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalPages_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalPages_TTemplate(const TLayoutHorizontalPages_TTemplate& from);
  TLayoutHorizontalPages_TTemplate(TLayoutHorizontalPages_TTemplate&& from) noexcept
    : TLayoutHorizontalPages_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalPages_TTemplate& operator=(const TLayoutHorizontalPages_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalPages_TTemplate& operator=(TLayoutHorizontalPages_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalPages_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalPages_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalPages_TTemplate*>(
               &_TLayoutHorizontalPages_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    79;

  friend void swap(TLayoutHorizontalPages_TTemplate& a, TLayoutHorizontalPages_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalPages_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalPages_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalPages_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalPages_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalPages_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalPages_TTemplate& from) {
    TLayoutHorizontalPages_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalPages_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalPages.TTemplate";
  }
  protected:
  explicit TLayoutHorizontalPages_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutHorizontalElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutHorizontalElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHorizontalElement* release_element();
  ::HmiWidget::TLayoutHorizontalElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutHorizontalElement* element);
  private:
  const ::HmiWidget::TLayoutHorizontalElement& _internal_element() const;
  ::HmiWidget::TLayoutHorizontalElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutHorizontalElement* element);
  ::HmiWidget::TLayoutHorizontalElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalPages.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutHorizontalElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalPages final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalPages) */ {
 public:
  inline TLayoutHorizontalPages() : TLayoutHorizontalPages(nullptr) {}
  ~TLayoutHorizontalPages() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalPages(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalPages(const TLayoutHorizontalPages& from);
  TLayoutHorizontalPages(TLayoutHorizontalPages&& from) noexcept
    : TLayoutHorizontalPages() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalPages& operator=(const TLayoutHorizontalPages& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalPages& operator=(TLayoutHorizontalPages&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalPages& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalPages* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalPages*>(
               &_TLayoutHorizontalPages_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    80;

  friend void swap(TLayoutHorizontalPages& a, TLayoutHorizontalPages& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalPages* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalPages* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalPages* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalPages>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalPages& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalPages& from) {
    TLayoutHorizontalPages::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalPages* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalPages";
  }
  protected:
  explicit TLayoutHorizontalPages(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutHorizontalPages_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
    kPageSizeFieldNumber = 4,
    kPageSpacingFieldNumber = 5,
  };
  // repeated .HmiWidget.TLayoutHorizontalElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutHorizontalElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutHorizontalElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutHorizontalElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutHorizontalElement& element(int index) const;
  ::HmiWidget::TLayoutHorizontalElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >&
      element() const;

  // repeated .HmiWidget.TLayoutHorizontalPages.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutHorizontalPages_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalPages_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutHorizontalPages_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontalPages_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutHorizontalPages_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutHorizontalPages_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalPages_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutHVBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutHVBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutHVBase* release_base();
  ::HmiWidget::TLayoutHVBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutHVBase* base);
  private:
  const ::HmiWidget::TLayoutHVBase& _internal_base() const;
  ::HmiWidget::TLayoutHVBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutHVBase* base);
  ::HmiWidget::TLayoutHVBase* unsafe_arena_release_base();

  // optional .TDataBinding pageSize = 4;
  bool has_pagesize() const;
  private:
  bool _internal_has_pagesize() const;
  public:
  void clear_pagesize();
  const ::TDataBinding& pagesize() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_pagesize();
  ::TDataBinding* mutable_pagesize();
  void set_allocated_pagesize(::TDataBinding* pagesize);
  private:
  const ::TDataBinding& _internal_pagesize() const;
  ::TDataBinding* _internal_mutable_pagesize();
  public:
  void unsafe_arena_set_allocated_pagesize(
      ::TDataBinding* pagesize);
  ::TDataBinding* unsafe_arena_release_pagesize();

  // optional .TDataBinding pageSpacing = 5;
  bool has_pagespacing() const;
  private:
  bool _internal_has_pagespacing() const;
  public:
  void clear_pagespacing();
  const ::TDataBinding& pagespacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_pagespacing();
  ::TDataBinding* mutable_pagespacing();
  void set_allocated_pagespacing(::TDataBinding* pagespacing);
  private:
  const ::TDataBinding& _internal_pagespacing() const;
  ::TDataBinding* _internal_mutable_pagespacing();
  public:
  void unsafe_arena_set_allocated_pagespacing(
      ::TDataBinding* pagespacing);
  ::TDataBinding* unsafe_arena_release_pagespacing();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalPages)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalPages_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutHVBase* base_;
    ::TDataBinding* pagesize_;
    ::TDataBinding* pagespacing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHVBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHVBase) */ {
 public:
  inline TLayoutHVBase() : TLayoutHVBase(nullptr) {}
  ~TLayoutHVBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHVBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHVBase(const TLayoutHVBase& from);
  TLayoutHVBase(TLayoutHVBase&& from) noexcept
    : TLayoutHVBase() {
    *this = ::std::move(from);
  }

  inline TLayoutHVBase& operator=(const TLayoutHVBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHVBase& operator=(TLayoutHVBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHVBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHVBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutHVBase*>(
               &_TLayoutHVBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    81;

  friend void swap(TLayoutHVBase& a, TLayoutHVBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHVBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHVBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHVBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHVBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHVBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHVBase& from) {
    TLayoutHVBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHVBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHVBase";
  }
  protected:
  explicit TLayoutHVBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 1,
    kLeftMarginFieldNumber = 2,
    kRightMarginFieldNumber = 3,
    kTopMarginFieldNumber = 4,
    kBottomMarginFieldNumber = 5,
    kSpacingFieldNumber = 6,
    kRasterFieldNumber = 7,
  };
  // optional .TDataBinding orientation = 1;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::TDataBinding& orientation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientation();
  ::TDataBinding* mutable_orientation();
  void set_allocated_orientation(::TDataBinding* orientation);
  private:
  const ::TDataBinding& _internal_orientation() const;
  ::TDataBinding* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::TDataBinding* orientation);
  ::TDataBinding* unsafe_arena_release_orientation();

  // optional .TDataBinding leftMargin = 2;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 3;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 4;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 5;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // optional .TDataBinding spacing = 6;
  bool has_spacing() const;
  private:
  bool _internal_has_spacing() const;
  public:
  void clear_spacing();
  const ::TDataBinding& spacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_spacing();
  ::TDataBinding* mutable_spacing();
  void set_allocated_spacing(::TDataBinding* spacing);
  private:
  const ::TDataBinding& _internal_spacing() const;
  ::TDataBinding* _internal_mutable_spacing();
  public:
  void unsafe_arena_set_allocated_spacing(
      ::TDataBinding* spacing);
  ::TDataBinding* unsafe_arena_release_spacing();

  // optional .TDataBinding raster = 7;
  bool has_raster() const;
  private:
  bool _internal_has_raster() const;
  public:
  void clear_raster();
  const ::TDataBinding& raster() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_raster();
  ::TDataBinding* mutable_raster();
  void set_allocated_raster(::TDataBinding* raster);
  private:
  const ::TDataBinding& _internal_raster() const;
  ::TDataBinding* _internal_mutable_raster();
  public:
  void unsafe_arena_set_allocated_raster(
      ::TDataBinding* raster);
  ::TDataBinding* unsafe_arena_release_raster();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHVBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* orientation_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
    ::TDataBinding* spacing_;
    ::TDataBinding* raster_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHVRollBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHVRollBase) */ {
 public:
  inline TLayoutHVRollBase() : TLayoutHVRollBase(nullptr) {}
  ~TLayoutHVRollBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHVRollBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHVRollBase(const TLayoutHVRollBase& from);
  TLayoutHVRollBase(TLayoutHVRollBase&& from) noexcept
    : TLayoutHVRollBase() {
    *this = ::std::move(from);
  }

  inline TLayoutHVRollBase& operator=(const TLayoutHVRollBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHVRollBase& operator=(TLayoutHVRollBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHVRollBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHVRollBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutHVRollBase*>(
               &_TLayoutHVRollBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    82;

  friend void swap(TLayoutHVRollBase& a, TLayoutHVRollBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHVRollBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHVRollBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHVRollBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHVRollBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHVRollBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHVRollBase& from) {
    TLayoutHVRollBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHVRollBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHVRollBase";
  }
  protected:
  explicit TLayoutHVRollBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 1,
    kLeftMarginFieldNumber = 2,
    kRightMarginFieldNumber = 3,
    kTopMarginFieldNumber = 4,
    kBottomMarginFieldNumber = 5,
    kSpacingFieldNumber = 6,
    kRasterFieldNumber = 7,
    kFocusedChildFieldNumber = 8,
    kWrapAroundFieldNumber = 9,
  };
  // optional .TDataBinding orientation = 1;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::TDataBinding& orientation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientation();
  ::TDataBinding* mutable_orientation();
  void set_allocated_orientation(::TDataBinding* orientation);
  private:
  const ::TDataBinding& _internal_orientation() const;
  ::TDataBinding* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::TDataBinding* orientation);
  ::TDataBinding* unsafe_arena_release_orientation();

  // optional .TDataBinding leftMargin = 2;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 3;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 4;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 5;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // optional .TDataBinding spacing = 6;
  bool has_spacing() const;
  private:
  bool _internal_has_spacing() const;
  public:
  void clear_spacing();
  const ::TDataBinding& spacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_spacing();
  ::TDataBinding* mutable_spacing();
  void set_allocated_spacing(::TDataBinding* spacing);
  private:
  const ::TDataBinding& _internal_spacing() const;
  ::TDataBinding* _internal_mutable_spacing();
  public:
  void unsafe_arena_set_allocated_spacing(
      ::TDataBinding* spacing);
  ::TDataBinding* unsafe_arena_release_spacing();

  // optional .TDataBinding raster = 7;
  bool has_raster() const;
  private:
  bool _internal_has_raster() const;
  public:
  void clear_raster();
  const ::TDataBinding& raster() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_raster();
  ::TDataBinding* mutable_raster();
  void set_allocated_raster(::TDataBinding* raster);
  private:
  const ::TDataBinding& _internal_raster() const;
  ::TDataBinding* _internal_mutable_raster();
  public:
  void unsafe_arena_set_allocated_raster(
      ::TDataBinding* raster);
  ::TDataBinding* unsafe_arena_release_raster();

  // optional .TDataBinding focusedChild = 8;
  bool has_focusedchild() const;
  private:
  bool _internal_has_focusedchild() const;
  public:
  void clear_focusedchild();
  const ::TDataBinding& focusedchild() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_focusedchild();
  ::TDataBinding* mutable_focusedchild();
  void set_allocated_focusedchild(::TDataBinding* focusedchild);
  private:
  const ::TDataBinding& _internal_focusedchild() const;
  ::TDataBinding* _internal_mutable_focusedchild();
  public:
  void unsafe_arena_set_allocated_focusedchild(
      ::TDataBinding* focusedchild);
  ::TDataBinding* unsafe_arena_release_focusedchild();

  // optional .TDataBinding wrapAround = 9;
  bool has_wraparound() const;
  private:
  bool _internal_has_wraparound() const;
  public:
  void clear_wraparound();
  const ::TDataBinding& wraparound() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_wraparound();
  ::TDataBinding* mutable_wraparound();
  void set_allocated_wraparound(::TDataBinding* wraparound);
  private:
  const ::TDataBinding& _internal_wraparound() const;
  ::TDataBinding* _internal_mutable_wraparound();
  public:
  void unsafe_arena_set_allocated_wraparound(
      ::TDataBinding* wraparound);
  ::TDataBinding* unsafe_arena_release_wraparound();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHVRollBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* orientation_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
    ::TDataBinding* spacing_;
    ::TDataBinding* raster_;
    ::TDataBinding* focusedchild_;
    ::TDataBinding* wraparound_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutCurvedHVBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutCurvedHVBase) */ {
 public:
  inline TLayoutCurvedHVBase() : TLayoutCurvedHVBase(nullptr) {}
  ~TLayoutCurvedHVBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutCurvedHVBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutCurvedHVBase(const TLayoutCurvedHVBase& from);
  TLayoutCurvedHVBase(TLayoutCurvedHVBase&& from) noexcept
    : TLayoutCurvedHVBase() {
    *this = ::std::move(from);
  }

  inline TLayoutCurvedHVBase& operator=(const TLayoutCurvedHVBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutCurvedHVBase& operator=(TLayoutCurvedHVBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutCurvedHVBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutCurvedHVBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutCurvedHVBase*>(
               &_TLayoutCurvedHVBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    83;

  friend void swap(TLayoutCurvedHVBase& a, TLayoutCurvedHVBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutCurvedHVBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutCurvedHVBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutCurvedHVBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutCurvedHVBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutCurvedHVBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutCurvedHVBase& from) {
    TLayoutCurvedHVBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutCurvedHVBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutCurvedHVBase";
  }
  protected:
  explicit TLayoutCurvedHVBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kRadiusFieldNumber = 1,
    kOriginFieldNumber = 2,
    kOrientationFieldNumber = 3,
    kLeftMarginFieldNumber = 4,
    kRightMarginFieldNumber = 5,
    kTopMarginFieldNumber = 6,
    kBottomMarginFieldNumber = 7,
    kSpacingFieldNumber = 8,
    kRasterFieldNumber = 9,
    kOriginAlignmentFieldNumber = 10,
    kScrollAreaHeightFieldNumber = 11,
  };
  // required .TDataBinding radius = 1;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  const ::TDataBinding& radius() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_radius();
  ::TDataBinding* mutable_radius();
  void set_allocated_radius(::TDataBinding* radius);
  private:
  const ::TDataBinding& _internal_radius() const;
  ::TDataBinding* _internal_mutable_radius();
  public:
  void unsafe_arena_set_allocated_radius(
      ::TDataBinding* radius);
  ::TDataBinding* unsafe_arena_release_radius();

  // required .TDataBinding origin = 2;
  bool has_origin() const;
  private:
  bool _internal_has_origin() const;
  public:
  void clear_origin();
  const ::TDataBinding& origin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_origin();
  ::TDataBinding* mutable_origin();
  void set_allocated_origin(::TDataBinding* origin);
  private:
  const ::TDataBinding& _internal_origin() const;
  ::TDataBinding* _internal_mutable_origin();
  public:
  void unsafe_arena_set_allocated_origin(
      ::TDataBinding* origin);
  ::TDataBinding* unsafe_arena_release_origin();

  // optional .TDataBinding orientation = 3;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::TDataBinding& orientation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientation();
  ::TDataBinding* mutable_orientation();
  void set_allocated_orientation(::TDataBinding* orientation);
  private:
  const ::TDataBinding& _internal_orientation() const;
  ::TDataBinding* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::TDataBinding* orientation);
  ::TDataBinding* unsafe_arena_release_orientation();

  // optional .TDataBinding leftMargin = 4;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 5;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 6;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 7;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // optional .TDataBinding spacing = 8;
  bool has_spacing() const;
  private:
  bool _internal_has_spacing() const;
  public:
  void clear_spacing();
  const ::TDataBinding& spacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_spacing();
  ::TDataBinding* mutable_spacing();
  void set_allocated_spacing(::TDataBinding* spacing);
  private:
  const ::TDataBinding& _internal_spacing() const;
  ::TDataBinding* _internal_mutable_spacing();
  public:
  void unsafe_arena_set_allocated_spacing(
      ::TDataBinding* spacing);
  ::TDataBinding* unsafe_arena_release_spacing();

  // optional .TDataBinding raster = 9;
  bool has_raster() const;
  private:
  bool _internal_has_raster() const;
  public:
  void clear_raster();
  const ::TDataBinding& raster() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_raster();
  ::TDataBinding* mutable_raster();
  void set_allocated_raster(::TDataBinding* raster);
  private:
  const ::TDataBinding& _internal_raster() const;
  ::TDataBinding* _internal_mutable_raster();
  public:
  void unsafe_arena_set_allocated_raster(
      ::TDataBinding* raster);
  ::TDataBinding* unsafe_arena_release_raster();

  // optional .TDataBinding originAlignment = 10;
  bool has_originalignment() const;
  private:
  bool _internal_has_originalignment() const;
  public:
  void clear_originalignment();
  const ::TDataBinding& originalignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_originalignment();
  ::TDataBinding* mutable_originalignment();
  void set_allocated_originalignment(::TDataBinding* originalignment);
  private:
  const ::TDataBinding& _internal_originalignment() const;
  ::TDataBinding* _internal_mutable_originalignment();
  public:
  void unsafe_arena_set_allocated_originalignment(
      ::TDataBinding* originalignment);
  ::TDataBinding* unsafe_arena_release_originalignment();

  // optional .TDataBinding scrollAreaHeight = 11;
  bool has_scrollareaheight() const;
  private:
  bool _internal_has_scrollareaheight() const;
  public:
  void clear_scrollareaheight();
  const ::TDataBinding& scrollareaheight() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_scrollareaheight();
  ::TDataBinding* mutable_scrollareaheight();
  void set_allocated_scrollareaheight(::TDataBinding* scrollareaheight);
  private:
  const ::TDataBinding& _internal_scrollareaheight() const;
  ::TDataBinding* _internal_mutable_scrollareaheight();
  public:
  void unsafe_arena_set_allocated_scrollareaheight(
      ::TDataBinding* scrollareaheight);
  ::TDataBinding* unsafe_arena_release_scrollareaheight();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutCurvedHVBase)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* radius_;
    ::TDataBinding* origin_;
    ::TDataBinding* orientation_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
    ::TDataBinding* spacing_;
    ::TDataBinding* raster_;
    ::TDataBinding* originalignment_;
    ::TDataBinding* scrollareaheight_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalElement) */ {
 public:
  inline TLayoutHorizontalElement() : TLayoutHorizontalElement(nullptr) {}
  ~TLayoutHorizontalElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalElement(const TLayoutHorizontalElement& from);
  TLayoutHorizontalElement(TLayoutHorizontalElement&& from) noexcept
    : TLayoutHorizontalElement() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalElement& operator=(const TLayoutHorizontalElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalElement& operator=(TLayoutHorizontalElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalElement*>(
               &_TLayoutHorizontalElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    84;

  friend void swap(TLayoutHorizontalElement& a, TLayoutHorizontalElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalElement& from) {
    TLayoutHorizontalElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalElement";
  }
  protected:
  explicit TLayoutHorizontalElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // required .HmiWidget.THVBaseElement base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::THVBaseElement& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::THVBaseElement* release_base();
  ::HmiWidget::THVBaseElement* mutable_base();
  void set_allocated_base(::HmiWidget::THVBaseElement* base);
  private:
  const ::HmiWidget::THVBaseElement& _internal_base() const;
  ::HmiWidget::THVBaseElement* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::THVBaseElement* base);
  ::HmiWidget::THVBaseElement* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::THVBaseElement* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalElement) */ {
 public:
  inline TLayoutVerticalElement() : TLayoutVerticalElement(nullptr) {}
  ~TLayoutVerticalElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalElement(const TLayoutVerticalElement& from);
  TLayoutVerticalElement(TLayoutVerticalElement&& from) noexcept
    : TLayoutVerticalElement() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalElement& operator=(const TLayoutVerticalElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalElement& operator=(TLayoutVerticalElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalElement*>(
               &_TLayoutVerticalElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    85;

  friend void swap(TLayoutVerticalElement& a, TLayoutVerticalElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalElement& from) {
    TLayoutVerticalElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalElement";
  }
  protected:
  explicit TLayoutVerticalElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // required .HmiWidget.THVBaseElement base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::THVBaseElement& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::THVBaseElement* release_base();
  ::HmiWidget::THVBaseElement* mutable_base();
  void set_allocated_base(::HmiWidget::THVBaseElement* base);
  private:
  const ::HmiWidget::THVBaseElement& _internal_base() const;
  ::HmiWidget::THVBaseElement* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::THVBaseElement* base);
  ::HmiWidget::THVBaseElement* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::THVBaseElement* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class THVBaseElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.THVBaseElement) */ {
 public:
  inline THVBaseElement() : THVBaseElement(nullptr) {}
  ~THVBaseElement() override;
  explicit PROTOBUF_CONSTEXPR THVBaseElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  THVBaseElement(const THVBaseElement& from);
  THVBaseElement(THVBaseElement&& from) noexcept
    : THVBaseElement() {
    *this = ::std::move(from);
  }

  inline THVBaseElement& operator=(const THVBaseElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline THVBaseElement& operator=(THVBaseElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const THVBaseElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const THVBaseElement* internal_default_instance() {
    return reinterpret_cast<const THVBaseElement*>(
               &_THVBaseElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    86;

  friend void swap(THVBaseElement& a, THVBaseElement& b) {
    a.Swap(&b);
  }
  inline void Swap(THVBaseElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(THVBaseElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  THVBaseElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<THVBaseElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const THVBaseElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const THVBaseElement& from) {
    THVBaseElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(THVBaseElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.THVBaseElement";
  }
  protected:
  explicit THVBaseElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kSizeFieldNumber = 3,
    kStretchFactorFieldNumber = 4,
    kSizePolicyFieldNumber = 5,
    kAlignmentFieldNumber = 6,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding stretchFactor = 4;
  bool has_stretchfactor() const;
  private:
  bool _internal_has_stretchfactor() const;
  public:
  void clear_stretchfactor();
  const ::TDataBinding& stretchfactor() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_stretchfactor();
  ::TDataBinding* mutable_stretchfactor();
  void set_allocated_stretchfactor(::TDataBinding* stretchfactor);
  private:
  const ::TDataBinding& _internal_stretchfactor() const;
  ::TDataBinding* _internal_mutable_stretchfactor();
  public:
  void unsafe_arena_set_allocated_stretchfactor(
      ::TDataBinding* stretchfactor);
  ::TDataBinding* unsafe_arena_release_stretchfactor();

  // optional .TDataBinding sizePolicy = 5;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // optional .TDataBinding alignment = 6;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // @@protoc_insertion_point(class_scope:HmiWidget.THVBaseElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* size_;
    ::TDataBinding* stretchfactor_;
    ::TDataBinding* sizepolicy_;
    ::TDataBinding* alignment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalDynamicElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalDynamicElement) */ {
 public:
  inline TLayoutHorizontalDynamicElement() : TLayoutHorizontalDynamicElement(nullptr) {}
  ~TLayoutHorizontalDynamicElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalDynamicElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalDynamicElement(const TLayoutHorizontalDynamicElement& from);
  TLayoutHorizontalDynamicElement(TLayoutHorizontalDynamicElement&& from) noexcept
    : TLayoutHorizontalDynamicElement() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalDynamicElement& operator=(const TLayoutHorizontalDynamicElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalDynamicElement& operator=(TLayoutHorizontalDynamicElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalDynamicElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalDynamicElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalDynamicElement*>(
               &_TLayoutHorizontalDynamicElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    87;

  friend void swap(TLayoutHorizontalDynamicElement& a, TLayoutHorizontalDynamicElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalDynamicElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalDynamicElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalDynamicElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalDynamicElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalDynamicElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalDynamicElement& from) {
    TLayoutHorizontalDynamicElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalDynamicElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalDynamicElement";
  }
  protected:
  explicit TLayoutHorizontalDynamicElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // required .HmiWidget.THVDynamicBaseElement base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::THVDynamicBaseElement& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::THVDynamicBaseElement* release_base();
  ::HmiWidget::THVDynamicBaseElement* mutable_base();
  void set_allocated_base(::HmiWidget::THVDynamicBaseElement* base);
  private:
  const ::HmiWidget::THVDynamicBaseElement& _internal_base() const;
  ::HmiWidget::THVDynamicBaseElement* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::THVDynamicBaseElement* base);
  ::HmiWidget::THVDynamicBaseElement* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalDynamicElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::THVDynamicBaseElement* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalDynamicElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalDynamicElement) */ {
 public:
  inline TLayoutVerticalDynamicElement() : TLayoutVerticalDynamicElement(nullptr) {}
  ~TLayoutVerticalDynamicElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalDynamicElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalDynamicElement(const TLayoutVerticalDynamicElement& from);
  TLayoutVerticalDynamicElement(TLayoutVerticalDynamicElement&& from) noexcept
    : TLayoutVerticalDynamicElement() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalDynamicElement& operator=(const TLayoutVerticalDynamicElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalDynamicElement& operator=(TLayoutVerticalDynamicElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalDynamicElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalDynamicElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalDynamicElement*>(
               &_TLayoutVerticalDynamicElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    88;

  friend void swap(TLayoutVerticalDynamicElement& a, TLayoutVerticalDynamicElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalDynamicElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalDynamicElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalDynamicElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalDynamicElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalDynamicElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalDynamicElement& from) {
    TLayoutVerticalDynamicElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalDynamicElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalDynamicElement";
  }
  protected:
  explicit TLayoutVerticalDynamicElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // required .HmiWidget.THVDynamicBaseElement base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::THVDynamicBaseElement& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::THVDynamicBaseElement* release_base();
  ::HmiWidget::THVDynamicBaseElement* mutable_base();
  void set_allocated_base(::HmiWidget::THVDynamicBaseElement* base);
  private:
  const ::HmiWidget::THVDynamicBaseElement& _internal_base() const;
  ::HmiWidget::THVDynamicBaseElement* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::THVDynamicBaseElement* base);
  ::HmiWidget::THVDynamicBaseElement* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalDynamicElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::THVDynamicBaseElement* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class THVDynamicBaseElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.THVDynamicBaseElement) */ {
 public:
  inline THVDynamicBaseElement() : THVDynamicBaseElement(nullptr) {}
  ~THVDynamicBaseElement() override;
  explicit PROTOBUF_CONSTEXPR THVDynamicBaseElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  THVDynamicBaseElement(const THVDynamicBaseElement& from);
  THVDynamicBaseElement(THVDynamicBaseElement&& from) noexcept
    : THVDynamicBaseElement() {
    *this = ::std::move(from);
  }

  inline THVDynamicBaseElement& operator=(const THVDynamicBaseElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline THVDynamicBaseElement& operator=(THVDynamicBaseElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const THVDynamicBaseElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const THVDynamicBaseElement* internal_default_instance() {
    return reinterpret_cast<const THVDynamicBaseElement*>(
               &_THVDynamicBaseElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    89;

  friend void swap(THVDynamicBaseElement& a, THVDynamicBaseElement& b) {
    a.Swap(&b);
  }
  inline void Swap(THVDynamicBaseElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(THVDynamicBaseElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  THVDynamicBaseElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<THVDynamicBaseElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const THVDynamicBaseElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const THVDynamicBaseElement& from) {
    THVDynamicBaseElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(THVDynamicBaseElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.THVDynamicBaseElement";
  }
  protected:
  explicit THVDynamicBaseElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kSizeMinFieldNumber = 3,
    kSizeMaxFieldNumber = 4,
    kPriorityFieldNumber = 5,
    kSizePolicyFieldNumber = 6,
    kAlignmentFieldNumber = 7,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding sizeMin = 3;
  bool has_sizemin() const;
  private:
  bool _internal_has_sizemin() const;
  public:
  void clear_sizemin();
  const ::TDataBinding& sizemin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizemin();
  ::TDataBinding* mutable_sizemin();
  void set_allocated_sizemin(::TDataBinding* sizemin);
  private:
  const ::TDataBinding& _internal_sizemin() const;
  ::TDataBinding* _internal_mutable_sizemin();
  public:
  void unsafe_arena_set_allocated_sizemin(
      ::TDataBinding* sizemin);
  ::TDataBinding* unsafe_arena_release_sizemin();

  // optional .TDataBinding sizeMax = 4;
  bool has_sizemax() const;
  private:
  bool _internal_has_sizemax() const;
  public:
  void clear_sizemax();
  const ::TDataBinding& sizemax() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizemax();
  ::TDataBinding* mutable_sizemax();
  void set_allocated_sizemax(::TDataBinding* sizemax);
  private:
  const ::TDataBinding& _internal_sizemax() const;
  ::TDataBinding* _internal_mutable_sizemax();
  public:
  void unsafe_arena_set_allocated_sizemax(
      ::TDataBinding* sizemax);
  ::TDataBinding* unsafe_arena_release_sizemax();

  // optional .TDataBinding priority = 5;
  bool has_priority() const;
  private:
  bool _internal_has_priority() const;
  public:
  void clear_priority();
  const ::TDataBinding& priority() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_priority();
  ::TDataBinding* mutable_priority();
  void set_allocated_priority(::TDataBinding* priority);
  private:
  const ::TDataBinding& _internal_priority() const;
  ::TDataBinding* _internal_mutable_priority();
  public:
  void unsafe_arena_set_allocated_priority(
      ::TDataBinding* priority);
  ::TDataBinding* unsafe_arena_release_priority();

  // optional .TDataBinding sizePolicy = 6;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // optional .TDataBinding alignment = 7;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // @@protoc_insertion_point(class_scope:HmiWidget.THVDynamicBaseElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* sizemin_;
    ::TDataBinding* sizemax_;
    ::TDataBinding* priority_;
    ::TDataBinding* sizepolicy_;
    ::TDataBinding* alignment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutHorizontalListElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutHorizontalListElement) */ {
 public:
  inline TLayoutHorizontalListElement() : TLayoutHorizontalListElement(nullptr) {}
  ~TLayoutHorizontalListElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutHorizontalListElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutHorizontalListElement(const TLayoutHorizontalListElement& from);
  TLayoutHorizontalListElement(TLayoutHorizontalListElement&& from) noexcept
    : TLayoutHorizontalListElement() {
    *this = ::std::move(from);
  }

  inline TLayoutHorizontalListElement& operator=(const TLayoutHorizontalListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutHorizontalListElement& operator=(TLayoutHorizontalListElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutHorizontalListElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutHorizontalListElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutHorizontalListElement*>(
               &_TLayoutHorizontalListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    90;

  friend void swap(TLayoutHorizontalListElement& a, TLayoutHorizontalListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutHorizontalListElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutHorizontalListElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutHorizontalListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutHorizontalListElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutHorizontalListElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutHorizontalListElement& from) {
    TLayoutHorizontalListElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutHorizontalListElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutHorizontalListElement";
  }
  protected:
  explicit TLayoutHorizontalListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // required .HmiWidget.THVListBaseElement base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::THVListBaseElement& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::THVListBaseElement* release_base();
  ::HmiWidget::THVListBaseElement* mutable_base();
  void set_allocated_base(::HmiWidget::THVListBaseElement* base);
  private:
  const ::HmiWidget::THVListBaseElement& _internal_base() const;
  ::HmiWidget::THVListBaseElement* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::THVListBaseElement* base);
  ::HmiWidget::THVListBaseElement* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutHorizontalListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::THVListBaseElement* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutVerticalListElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutVerticalListElement) */ {
 public:
  inline TLayoutVerticalListElement() : TLayoutVerticalListElement(nullptr) {}
  ~TLayoutVerticalListElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutVerticalListElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutVerticalListElement(const TLayoutVerticalListElement& from);
  TLayoutVerticalListElement(TLayoutVerticalListElement&& from) noexcept
    : TLayoutVerticalListElement() {
    *this = ::std::move(from);
  }

  inline TLayoutVerticalListElement& operator=(const TLayoutVerticalListElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutVerticalListElement& operator=(TLayoutVerticalListElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutVerticalListElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutVerticalListElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutVerticalListElement*>(
               &_TLayoutVerticalListElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    91;

  friend void swap(TLayoutVerticalListElement& a, TLayoutVerticalListElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutVerticalListElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutVerticalListElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutVerticalListElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutVerticalListElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutVerticalListElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutVerticalListElement& from) {
    TLayoutVerticalListElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutVerticalListElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutVerticalListElement";
  }
  protected:
  explicit TLayoutVerticalListElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // required .HmiWidget.THVListBaseElement base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::THVListBaseElement& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::THVListBaseElement* release_base();
  ::HmiWidget::THVListBaseElement* mutable_base();
  void set_allocated_base(::HmiWidget::THVListBaseElement* base);
  private:
  const ::HmiWidget::THVListBaseElement& _internal_base() const;
  ::HmiWidget::THVListBaseElement* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::THVListBaseElement* base);
  ::HmiWidget::THVListBaseElement* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutVerticalListElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::THVListBaseElement* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class THVListBaseElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.THVListBaseElement) */ {
 public:
  inline THVListBaseElement() : THVListBaseElement(nullptr) {}
  ~THVListBaseElement() override;
  explicit PROTOBUF_CONSTEXPR THVListBaseElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  THVListBaseElement(const THVListBaseElement& from);
  THVListBaseElement(THVListBaseElement&& from) noexcept
    : THVListBaseElement() {
    *this = ::std::move(from);
  }

  inline THVListBaseElement& operator=(const THVListBaseElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline THVListBaseElement& operator=(THVListBaseElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const THVListBaseElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const THVListBaseElement* internal_default_instance() {
    return reinterpret_cast<const THVListBaseElement*>(
               &_THVListBaseElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    92;

  friend void swap(THVListBaseElement& a, THVListBaseElement& b) {
    a.Swap(&b);
  }
  inline void Swap(THVListBaseElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(THVListBaseElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  THVListBaseElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<THVListBaseElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const THVListBaseElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const THVListBaseElement& from) {
    THVListBaseElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(THVListBaseElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.THVListBaseElement";
  }
  protected:
  explicit THVListBaseElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kSizeFieldNumber = 3,
    kAlignmentFieldNumber = 4,
    kSizePolicyFieldNumber = 5,
    kSizeMinFieldNumber = 6,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding alignment = 4;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // optional .TDataBinding sizePolicy = 5;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // optional .TDataBinding sizeMin = 6;
  bool has_sizemin() const;
  private:
  bool _internal_has_sizemin() const;
  public:
  void clear_sizemin();
  const ::TDataBinding& sizemin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizemin();
  ::TDataBinding* mutable_sizemin();
  void set_allocated_sizemin(::TDataBinding* sizemin);
  private:
  const ::TDataBinding& _internal_sizemin() const;
  ::TDataBinding* _internal_mutable_sizemin();
  public:
  void unsafe_arena_set_allocated_sizemin(
      ::TDataBinding* sizemin);
  ::TDataBinding* unsafe_arena_release_sizemin();

  // @@protoc_insertion_point(class_scope:HmiWidget.THVListBaseElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* size_;
    ::TDataBinding* alignment_;
    ::TDataBinding* sizepolicy_;
    ::TDataBinding* sizemin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutSceneGraph_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutSceneGraph.TTemplate) */ {
 public:
  inline TLayoutSceneGraph_TTemplate() : TLayoutSceneGraph_TTemplate(nullptr) {}
  ~TLayoutSceneGraph_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutSceneGraph_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutSceneGraph_TTemplate(const TLayoutSceneGraph_TTemplate& from);
  TLayoutSceneGraph_TTemplate(TLayoutSceneGraph_TTemplate&& from) noexcept
    : TLayoutSceneGraph_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutSceneGraph_TTemplate& operator=(const TLayoutSceneGraph_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutSceneGraph_TTemplate& operator=(TLayoutSceneGraph_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutSceneGraph_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutSceneGraph_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutSceneGraph_TTemplate*>(
               &_TLayoutSceneGraph_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    93;

  friend void swap(TLayoutSceneGraph_TTemplate& a, TLayoutSceneGraph_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutSceneGraph_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutSceneGraph_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutSceneGraph_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutSceneGraph_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutSceneGraph_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutSceneGraph_TTemplate& from) {
    TLayoutSceneGraph_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutSceneGraph_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutSceneGraph.TTemplate";
  }
  protected:
  explicit TLayoutSceneGraph_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutSceneGraphElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutSceneGraphElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutSceneGraphElement* release_element();
  ::HmiWidget::TLayoutSceneGraphElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutSceneGraphElement* element);
  private:
  const ::HmiWidget::TLayoutSceneGraphElement& _internal_element() const;
  ::HmiWidget::TLayoutSceneGraphElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutSceneGraphElement* element);
  ::HmiWidget::TLayoutSceneGraphElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutSceneGraph.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutSceneGraphElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutSceneGraph final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutSceneGraph) */ {
 public:
  inline TLayoutSceneGraph() : TLayoutSceneGraph(nullptr) {}
  ~TLayoutSceneGraph() override;
  explicit PROTOBUF_CONSTEXPR TLayoutSceneGraph(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutSceneGraph(const TLayoutSceneGraph& from);
  TLayoutSceneGraph(TLayoutSceneGraph&& from) noexcept
    : TLayoutSceneGraph() {
    *this = ::std::move(from);
  }

  inline TLayoutSceneGraph& operator=(const TLayoutSceneGraph& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutSceneGraph& operator=(TLayoutSceneGraph&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutSceneGraph& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutSceneGraph* internal_default_instance() {
    return reinterpret_cast<const TLayoutSceneGraph*>(
               &_TLayoutSceneGraph_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    94;

  friend void swap(TLayoutSceneGraph& a, TLayoutSceneGraph& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutSceneGraph* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutSceneGraph* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutSceneGraph* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutSceneGraph>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutSceneGraph& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutSceneGraph& from) {
    TLayoutSceneGraph::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutSceneGraph* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutSceneGraph";
  }
  protected:
  explicit TLayoutSceneGraph(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutSceneGraph_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 1,
    kElementTemplateFieldNumber = 2,
  };
  // repeated .HmiWidget.TLayoutSceneGraphElement element = 1;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutSceneGraphElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutSceneGraphElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutSceneGraphElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutSceneGraphElement& element(int index) const;
  ::HmiWidget::TLayoutSceneGraphElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphElement >&
      element() const;

  // repeated .HmiWidget.TLayoutSceneGraph.TTemplate elementTemplate = 2;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutSceneGraph_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraph_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutSceneGraph_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutSceneGraph_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutSceneGraph_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutSceneGraph_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraph_TTemplate >&
      elementtemplate() const;

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutSceneGraph)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraph_TTemplate > elementtemplate_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutSceneGraphElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutSceneGraphElement) */ {
 public:
  inline TLayoutSceneGraphElement() : TLayoutSceneGraphElement(nullptr) {}
  ~TLayoutSceneGraphElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutSceneGraphElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutSceneGraphElement(const TLayoutSceneGraphElement& from);
  TLayoutSceneGraphElement(TLayoutSceneGraphElement&& from) noexcept
    : TLayoutSceneGraphElement() {
    *this = ::std::move(from);
  }

  inline TLayoutSceneGraphElement& operator=(const TLayoutSceneGraphElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutSceneGraphElement& operator=(TLayoutSceneGraphElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutSceneGraphElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutSceneGraphElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutSceneGraphElement*>(
               &_TLayoutSceneGraphElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    95;

  friend void swap(TLayoutSceneGraphElement& a, TLayoutSceneGraphElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutSceneGraphElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutSceneGraphElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutSceneGraphElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutSceneGraphElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutSceneGraphElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutSceneGraphElement& from) {
    TLayoutSceneGraphElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutSceneGraphElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutSceneGraphElement";
  }
  protected:
  explicit TLayoutSceneGraphElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kRootNodeNameFieldNumber = 3,
    kSearchRootFieldNumber = 4,
    kSizeFieldNumber = 5,
    kRotationFieldNumber = 6,
    kPositionFieldNumber = 7,
    kAlignmentFieldNumber = 8,
    kSizePolicyFieldNumber = 9,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // required .TDataBinding rootNodeName = 3;
  bool has_rootnodename() const;
  private:
  bool _internal_has_rootnodename() const;
  public:
  void clear_rootnodename();
  const ::TDataBinding& rootnodename() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rootnodename();
  ::TDataBinding* mutable_rootnodename();
  void set_allocated_rootnodename(::TDataBinding* rootnodename);
  private:
  const ::TDataBinding& _internal_rootnodename() const;
  ::TDataBinding* _internal_mutable_rootnodename();
  public:
  void unsafe_arena_set_allocated_rootnodename(
      ::TDataBinding* rootnodename);
  ::TDataBinding* unsafe_arena_release_rootnodename();

  // optional .TDataBinding searchRoot = 4;
  bool has_searchroot() const;
  private:
  bool _internal_has_searchroot() const;
  public:
  void clear_searchroot();
  const ::TDataBinding& searchroot() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_searchroot();
  ::TDataBinding* mutable_searchroot();
  void set_allocated_searchroot(::TDataBinding* searchroot);
  private:
  const ::TDataBinding& _internal_searchroot() const;
  ::TDataBinding* _internal_mutable_searchroot();
  public:
  void unsafe_arena_set_allocated_searchroot(
      ::TDataBinding* searchroot);
  ::TDataBinding* unsafe_arena_release_searchroot();

  // optional .TDataBinding size = 5;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::TDataBinding& rotation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rotation();
  ::TDataBinding* mutable_rotation();
  void set_allocated_rotation(::TDataBinding* rotation);
  private:
  const ::TDataBinding& _internal_rotation() const;
  ::TDataBinding* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::TDataBinding* rotation);
  ::TDataBinding* unsafe_arena_release_rotation();

  // optional .TDataBinding position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::TDataBinding& position() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_position();
  ::TDataBinding* mutable_position();
  void set_allocated_position(::TDataBinding* position);
  private:
  const ::TDataBinding& _internal_position() const;
  ::TDataBinding* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::TDataBinding* position);
  ::TDataBinding* unsafe_arena_release_position();

  // optional .TDataBinding alignment = 8;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // optional .TDataBinding sizePolicy = 9;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutSceneGraphElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* rootnodename_;
    ::TDataBinding* searchroot_;
    ::TDataBinding* size_;
    ::TDataBinding* rotation_;
    ::TDataBinding* position_;
    ::TDataBinding* alignment_;
    ::TDataBinding* sizepolicy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutSceneGraphProject final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutSceneGraphProject) */ {
 public:
  inline TLayoutSceneGraphProject() : TLayoutSceneGraphProject(nullptr) {}
  ~TLayoutSceneGraphProject() override;
  explicit PROTOBUF_CONSTEXPR TLayoutSceneGraphProject(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutSceneGraphProject(const TLayoutSceneGraphProject& from);
  TLayoutSceneGraphProject(TLayoutSceneGraphProject&& from) noexcept
    : TLayoutSceneGraphProject() {
    *this = ::std::move(from);
  }

  inline TLayoutSceneGraphProject& operator=(const TLayoutSceneGraphProject& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutSceneGraphProject& operator=(TLayoutSceneGraphProject&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutSceneGraphProject& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutSceneGraphProject* internal_default_instance() {
    return reinterpret_cast<const TLayoutSceneGraphProject*>(
               &_TLayoutSceneGraphProject_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    96;

  friend void swap(TLayoutSceneGraphProject& a, TLayoutSceneGraphProject& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutSceneGraphProject* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutSceneGraphProject* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutSceneGraphProject* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutSceneGraphProject>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutSceneGraphProject& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutSceneGraphProject& from) {
    TLayoutSceneGraphProject::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutSceneGraphProject* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutSceneGraphProject";
  }
  protected:
  explicit TLayoutSceneGraphProject(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kSearchRootFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutSceneGraphProjectElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutSceneGraphProjectElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphProjectElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutSceneGraphProjectElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutSceneGraphProjectElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutSceneGraphProjectElement& element(int index) const;
  ::HmiWidget::TLayoutSceneGraphProjectElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphProjectElement >&
      element() const;

  // optional .TDataBinding searchRoot = 1;
  bool has_searchroot() const;
  private:
  bool _internal_has_searchroot() const;
  public:
  void clear_searchroot();
  const ::TDataBinding& searchroot() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_searchroot();
  ::TDataBinding* mutable_searchroot();
  void set_allocated_searchroot(::TDataBinding* searchroot);
  private:
  const ::TDataBinding& _internal_searchroot() const;
  ::TDataBinding* _internal_mutable_searchroot();
  public:
  void unsafe_arena_set_allocated_searchroot(
      ::TDataBinding* searchroot);
  ::TDataBinding* unsafe_arena_release_searchroot();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutSceneGraphProject)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphProjectElement > element_;
    ::TDataBinding* searchroot_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutSceneGraphProjectElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutSceneGraphProjectElement) */ {
 public:
  inline TLayoutSceneGraphProjectElement() : TLayoutSceneGraphProjectElement(nullptr) {}
  ~TLayoutSceneGraphProjectElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutSceneGraphProjectElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutSceneGraphProjectElement(const TLayoutSceneGraphProjectElement& from);
  TLayoutSceneGraphProjectElement(TLayoutSceneGraphProjectElement&& from) noexcept
    : TLayoutSceneGraphProjectElement() {
    *this = ::std::move(from);
  }

  inline TLayoutSceneGraphProjectElement& operator=(const TLayoutSceneGraphProjectElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutSceneGraphProjectElement& operator=(TLayoutSceneGraphProjectElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutSceneGraphProjectElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutSceneGraphProjectElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutSceneGraphProjectElement*>(
               &_TLayoutSceneGraphProjectElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    97;

  friend void swap(TLayoutSceneGraphProjectElement& a, TLayoutSceneGraphProjectElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutSceneGraphProjectElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutSceneGraphProjectElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutSceneGraphProjectElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutSceneGraphProjectElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutSceneGraphProjectElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutSceneGraphProjectElement& from) {
    TLayoutSceneGraphProjectElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutSceneGraphProjectElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutSceneGraphProjectElement";
  }
  protected:
  explicit TLayoutSceneGraphProjectElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kNodeNameFieldNumber = 3,
    kOffsetFieldNumber = 4,
    kSizeFieldNumber = 5,
    kRotationFieldNumber = 6,
    kPositionFieldNumber = 7,
    kAlignmentFieldNumber = 8,
    kSizePolicyFieldNumber = 9,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // required .TDataBinding nodeName = 3;
  bool has_nodename() const;
  private:
  bool _internal_has_nodename() const;
  public:
  void clear_nodename();
  const ::TDataBinding& nodename() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_nodename();
  ::TDataBinding* mutable_nodename();
  void set_allocated_nodename(::TDataBinding* nodename);
  private:
  const ::TDataBinding& _internal_nodename() const;
  ::TDataBinding* _internal_mutable_nodename();
  public:
  void unsafe_arena_set_allocated_nodename(
      ::TDataBinding* nodename);
  ::TDataBinding* unsafe_arena_release_nodename();

  // optional .TDataBinding offset = 4;
  bool has_offset() const;
  private:
  bool _internal_has_offset() const;
  public:
  void clear_offset();
  const ::TDataBinding& offset() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_offset();
  ::TDataBinding* mutable_offset();
  void set_allocated_offset(::TDataBinding* offset);
  private:
  const ::TDataBinding& _internal_offset() const;
  ::TDataBinding* _internal_mutable_offset();
  public:
  void unsafe_arena_set_allocated_offset(
      ::TDataBinding* offset);
  ::TDataBinding* unsafe_arena_release_offset();

  // optional .TDataBinding size = 5;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding rotation = 6;
  bool has_rotation() const;
  private:
  bool _internal_has_rotation() const;
  public:
  void clear_rotation();
  const ::TDataBinding& rotation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rotation();
  ::TDataBinding* mutable_rotation();
  void set_allocated_rotation(::TDataBinding* rotation);
  private:
  const ::TDataBinding& _internal_rotation() const;
  ::TDataBinding* _internal_mutable_rotation();
  public:
  void unsafe_arena_set_allocated_rotation(
      ::TDataBinding* rotation);
  ::TDataBinding* unsafe_arena_release_rotation();

  // optional .TDataBinding position = 7;
  bool has_position() const;
  private:
  bool _internal_has_position() const;
  public:
  void clear_position();
  const ::TDataBinding& position() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_position();
  ::TDataBinding* mutable_position();
  void set_allocated_position(::TDataBinding* position);
  private:
  const ::TDataBinding& _internal_position() const;
  ::TDataBinding* _internal_mutable_position();
  public:
  void unsafe_arena_set_allocated_position(
      ::TDataBinding* position);
  ::TDataBinding* unsafe_arena_release_position();

  // optional .TDataBinding alignment = 8;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // optional .TDataBinding sizePolicy = 9;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutSceneGraphProjectElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* nodename_;
    ::TDataBinding* offset_;
    ::TDataBinding* size_;
    ::TDataBinding* rotation_;
    ::TDataBinding* position_;
    ::TDataBinding* alignment_;
    ::TDataBinding* sizepolicy_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutCircle_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutCircle.TTemplate) */ {
 public:
  inline TLayoutCircle_TTemplate() : TLayoutCircle_TTemplate(nullptr) {}
  ~TLayoutCircle_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutCircle_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutCircle_TTemplate(const TLayoutCircle_TTemplate& from);
  TLayoutCircle_TTemplate(TLayoutCircle_TTemplate&& from) noexcept
    : TLayoutCircle_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutCircle_TTemplate& operator=(const TLayoutCircle_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutCircle_TTemplate& operator=(TLayoutCircle_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutCircle_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutCircle_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutCircle_TTemplate*>(
               &_TLayoutCircle_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    98;

  friend void swap(TLayoutCircle_TTemplate& a, TLayoutCircle_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutCircle_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutCircle_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutCircle_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutCircle_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutCircle_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutCircle_TTemplate& from) {
    TLayoutCircle_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutCircle_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutCircle.TTemplate";
  }
  protected:
  explicit TLayoutCircle_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutCircleElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutCircleElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutCircleElement* release_element();
  ::HmiWidget::TLayoutCircleElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutCircleElement* element);
  private:
  const ::HmiWidget::TLayoutCircleElement& _internal_element() const;
  ::HmiWidget::TLayoutCircleElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutCircleElement* element);
  ::HmiWidget::TLayoutCircleElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutCircle.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutCircleElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutCircle final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutCircle) */ {
 public:
  inline TLayoutCircle() : TLayoutCircle(nullptr) {}
  ~TLayoutCircle() override;
  explicit PROTOBUF_CONSTEXPR TLayoutCircle(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutCircle(const TLayoutCircle& from);
  TLayoutCircle(TLayoutCircle&& from) noexcept
    : TLayoutCircle() {
    *this = ::std::move(from);
  }

  inline TLayoutCircle& operator=(const TLayoutCircle& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutCircle& operator=(TLayoutCircle&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutCircle& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutCircle* internal_default_instance() {
    return reinterpret_cast<const TLayoutCircle*>(
               &_TLayoutCircle_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    99;

  friend void swap(TLayoutCircle& a, TLayoutCircle& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutCircle* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutCircle* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutCircle* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutCircle>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutCircle& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutCircle& from) {
    TLayoutCircle::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutCircle* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutCircle";
  }
  protected:
  explicit TLayoutCircle(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutCircle_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutCircleElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutCircleElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircleElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutCircleElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutCircleElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutCircleElement& element(int index) const;
  ::HmiWidget::TLayoutCircleElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircleElement >&
      element() const;

  // repeated .HmiWidget.TLayoutCircle.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutCircle_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircle_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutCircle_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutCircle_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutCircle_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutCircle_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircle_TTemplate >&
      elementtemplate() const;

  // required .HmiWidget.TLayoutCircleBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutCircleBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutCircleBase* release_base();
  ::HmiWidget::TLayoutCircleBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutCircleBase* base);
  private:
  const ::HmiWidget::TLayoutCircleBase& _internal_base() const;
  ::HmiWidget::TLayoutCircleBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutCircleBase* base);
  ::HmiWidget::TLayoutCircleBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutCircle)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircleElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircle_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutCircleBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutCircleBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutCircleBase) */ {
 public:
  inline TLayoutCircleBase() : TLayoutCircleBase(nullptr) {}
  ~TLayoutCircleBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutCircleBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutCircleBase(const TLayoutCircleBase& from);
  TLayoutCircleBase(TLayoutCircleBase&& from) noexcept
    : TLayoutCircleBase() {
    *this = ::std::move(from);
  }

  inline TLayoutCircleBase& operator=(const TLayoutCircleBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutCircleBase& operator=(TLayoutCircleBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutCircleBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutCircleBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutCircleBase*>(
               &_TLayoutCircleBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    100;

  friend void swap(TLayoutCircleBase& a, TLayoutCircleBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutCircleBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutCircleBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutCircleBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutCircleBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutCircleBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutCircleBase& from) {
    TLayoutCircleBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutCircleBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutCircleBase";
  }
  protected:
  explicit TLayoutCircleBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOrientationFieldNumber = 1,
    kLeftMarginFieldNumber = 2,
    kRightMarginFieldNumber = 3,
    kTopMarginFieldNumber = 4,
    kBottomMarginFieldNumber = 5,
    kSpacingFieldNumber = 6,
    kStartAngleFieldNumber = 7,
    kEndAngleFieldNumber = 8,
    kRadiusFieldNumber = 9,
  };
  // optional .TDataBinding orientation = 1;
  bool has_orientation() const;
  private:
  bool _internal_has_orientation() const;
  public:
  void clear_orientation();
  const ::TDataBinding& orientation() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientation();
  ::TDataBinding* mutable_orientation();
  void set_allocated_orientation(::TDataBinding* orientation);
  private:
  const ::TDataBinding& _internal_orientation() const;
  ::TDataBinding* _internal_mutable_orientation();
  public:
  void unsafe_arena_set_allocated_orientation(
      ::TDataBinding* orientation);
  ::TDataBinding* unsafe_arena_release_orientation();

  // optional .TDataBinding leftMargin = 2;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 3;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 4;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 5;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // optional .TDataBinding spacing = 6;
  bool has_spacing() const;
  private:
  bool _internal_has_spacing() const;
  public:
  void clear_spacing();
  const ::TDataBinding& spacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_spacing();
  ::TDataBinding* mutable_spacing();
  void set_allocated_spacing(::TDataBinding* spacing);
  private:
  const ::TDataBinding& _internal_spacing() const;
  ::TDataBinding* _internal_mutable_spacing();
  public:
  void unsafe_arena_set_allocated_spacing(
      ::TDataBinding* spacing);
  ::TDataBinding* unsafe_arena_release_spacing();

  // optional .TDataBinding startAngle = 7;
  bool has_startangle() const;
  private:
  bool _internal_has_startangle() const;
  public:
  void clear_startangle();
  const ::TDataBinding& startangle() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_startangle();
  ::TDataBinding* mutable_startangle();
  void set_allocated_startangle(::TDataBinding* startangle);
  private:
  const ::TDataBinding& _internal_startangle() const;
  ::TDataBinding* _internal_mutable_startangle();
  public:
  void unsafe_arena_set_allocated_startangle(
      ::TDataBinding* startangle);
  ::TDataBinding* unsafe_arena_release_startangle();

  // optional .TDataBinding endAngle = 8;
  bool has_endangle() const;
  private:
  bool _internal_has_endangle() const;
  public:
  void clear_endangle();
  const ::TDataBinding& endangle() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_endangle();
  ::TDataBinding* mutable_endangle();
  void set_allocated_endangle(::TDataBinding* endangle);
  private:
  const ::TDataBinding& _internal_endangle() const;
  ::TDataBinding* _internal_mutable_endangle();
  public:
  void unsafe_arena_set_allocated_endangle(
      ::TDataBinding* endangle);
  ::TDataBinding* unsafe_arena_release_endangle();

  // optional .TDataBinding radius = 9;
  bool has_radius() const;
  private:
  bool _internal_has_radius() const;
  public:
  void clear_radius();
  const ::TDataBinding& radius() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_radius();
  ::TDataBinding* mutable_radius();
  void set_allocated_radius(::TDataBinding* radius);
  private:
  const ::TDataBinding& _internal_radius() const;
  ::TDataBinding* _internal_mutable_radius();
  public:
  void unsafe_arena_set_allocated_radius(
      ::TDataBinding* radius);
  ::TDataBinding* unsafe_arena_release_radius();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutCircleBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* orientation_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
    ::TDataBinding* spacing_;
    ::TDataBinding* startangle_;
    ::TDataBinding* endangle_;
    ::TDataBinding* radius_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutCircleElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutCircleElement) */ {
 public:
  inline TLayoutCircleElement() : TLayoutCircleElement(nullptr) {}
  ~TLayoutCircleElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutCircleElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutCircleElement(const TLayoutCircleElement& from);
  TLayoutCircleElement(TLayoutCircleElement&& from) noexcept
    : TLayoutCircleElement() {
    *this = ::std::move(from);
  }

  inline TLayoutCircleElement& operator=(const TLayoutCircleElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutCircleElement& operator=(TLayoutCircleElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutCircleElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutCircleElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutCircleElement*>(
               &_TLayoutCircleElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    101;

  friend void swap(TLayoutCircleElement& a, TLayoutCircleElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutCircleElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutCircleElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutCircleElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutCircleElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutCircleElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutCircleElement& from) {
    TLayoutCircleElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutCircleElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutCircleElement";
  }
  protected:
  explicit TLayoutCircleElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBaseFieldNumber = 1,
  };
  // required .HmiWidget.TLayoutCircleBaseElement base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutCircleBaseElement& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutCircleBaseElement* release_base();
  ::HmiWidget::TLayoutCircleBaseElement* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutCircleBaseElement* base);
  private:
  const ::HmiWidget::TLayoutCircleBaseElement& _internal_base() const;
  ::HmiWidget::TLayoutCircleBaseElement* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutCircleBaseElement* base);
  ::HmiWidget::TLayoutCircleBaseElement* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutCircleElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::HmiWidget::TLayoutCircleBaseElement* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutCircleBaseElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutCircleBaseElement) */ {
 public:
  inline TLayoutCircleBaseElement() : TLayoutCircleBaseElement(nullptr) {}
  ~TLayoutCircleBaseElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutCircleBaseElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutCircleBaseElement(const TLayoutCircleBaseElement& from);
  TLayoutCircleBaseElement(TLayoutCircleBaseElement&& from) noexcept
    : TLayoutCircleBaseElement() {
    *this = ::std::move(from);
  }

  inline TLayoutCircleBaseElement& operator=(const TLayoutCircleBaseElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutCircleBaseElement& operator=(TLayoutCircleBaseElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutCircleBaseElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutCircleBaseElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutCircleBaseElement*>(
               &_TLayoutCircleBaseElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    102;

  friend void swap(TLayoutCircleBaseElement& a, TLayoutCircleBaseElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutCircleBaseElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutCircleBaseElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutCircleBaseElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutCircleBaseElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutCircleBaseElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutCircleBaseElement& from) {
    TLayoutCircleBaseElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutCircleBaseElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutCircleBaseElement";
  }
  protected:
  explicit TLayoutCircleBaseElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kSizeFieldNumber = 3,
    kStretchFactorFieldNumber = 4,
    kSizePolicyFieldNumber = 5,
    kAlignmentFieldNumber = 6,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding stretchFactor = 4;
  bool has_stretchfactor() const;
  private:
  bool _internal_has_stretchfactor() const;
  public:
  void clear_stretchfactor();
  const ::TDataBinding& stretchfactor() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_stretchfactor();
  ::TDataBinding* mutable_stretchfactor();
  void set_allocated_stretchfactor(::TDataBinding* stretchfactor);
  private:
  const ::TDataBinding& _internal_stretchfactor() const;
  ::TDataBinding* _internal_mutable_stretchfactor();
  public:
  void unsafe_arena_set_allocated_stretchfactor(
      ::TDataBinding* stretchfactor);
  ::TDataBinding* unsafe_arena_release_stretchfactor();

  // optional .TDataBinding sizePolicy = 5;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // optional .TDataBinding alignment = 6;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutCircleBaseElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* size_;
    ::TDataBinding* stretchfactor_;
    ::TDataBinding* sizepolicy_;
    ::TDataBinding* alignment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutGrid_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutGrid.TTemplate) */ {
 public:
  inline TLayoutGrid_TTemplate() : TLayoutGrid_TTemplate(nullptr) {}
  ~TLayoutGrid_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutGrid_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutGrid_TTemplate(const TLayoutGrid_TTemplate& from);
  TLayoutGrid_TTemplate(TLayoutGrid_TTemplate&& from) noexcept
    : TLayoutGrid_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutGrid_TTemplate& operator=(const TLayoutGrid_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutGrid_TTemplate& operator=(TLayoutGrid_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutGrid_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutGrid_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutGrid_TTemplate*>(
               &_TLayoutGrid_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    103;

  friend void swap(TLayoutGrid_TTemplate& a, TLayoutGrid_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutGrid_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutGrid_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutGrid_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutGrid_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutGrid_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutGrid_TTemplate& from) {
    TLayoutGrid_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutGrid_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutGrid.TTemplate";
  }
  protected:
  explicit TLayoutGrid_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutGridElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutGridElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutGridElement* release_element();
  ::HmiWidget::TLayoutGridElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutGridElement* element);
  private:
  const ::HmiWidget::TLayoutGridElement& _internal_element() const;
  ::HmiWidget::TLayoutGridElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutGridElement* element);
  ::HmiWidget::TLayoutGridElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutGrid.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutGridElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutGrid final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutGrid) */ {
 public:
  inline TLayoutGrid() : TLayoutGrid(nullptr) {}
  ~TLayoutGrid() override;
  explicit PROTOBUF_CONSTEXPR TLayoutGrid(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutGrid(const TLayoutGrid& from);
  TLayoutGrid(TLayoutGrid&& from) noexcept
    : TLayoutGrid() {
    *this = ::std::move(from);
  }

  inline TLayoutGrid& operator=(const TLayoutGrid& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutGrid& operator=(TLayoutGrid&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutGrid& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutGrid* internal_default_instance() {
    return reinterpret_cast<const TLayoutGrid*>(
               &_TLayoutGrid_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    104;

  friend void swap(TLayoutGrid& a, TLayoutGrid& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutGrid* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutGrid* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutGrid* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutGrid>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutGrid& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutGrid& from) {
    TLayoutGrid::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutGrid* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutGrid";
  }
  protected:
  explicit TLayoutGrid(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutGrid_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 4,
    kElementTemplateFieldNumber = 5,
    kBaseFieldNumber = 1,
    kNumberOfRowsFieldNumber = 2,
    kNumberOfColumnsFieldNumber = 3,
  };
  // repeated .HmiWidget.TLayoutGridElement element = 4;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutGridElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGridElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutGridElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutGridElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutGridElement& element(int index) const;
  ::HmiWidget::TLayoutGridElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGridElement >&
      element() const;

  // repeated .HmiWidget.TLayoutGrid.TTemplate elementTemplate = 5;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutGrid_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGrid_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutGrid_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutGrid_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutGrid_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutGrid_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGrid_TTemplate >&
      elementtemplate() const;

  // optional .HmiWidget.TLayoutGridBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutGridBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutGridBase* release_base();
  ::HmiWidget::TLayoutGridBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutGridBase* base);
  private:
  const ::HmiWidget::TLayoutGridBase& _internal_base() const;
  ::HmiWidget::TLayoutGridBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutGridBase* base);
  ::HmiWidget::TLayoutGridBase* unsafe_arena_release_base();

  // optional .TDataBinding numberOfRows = 2;
  bool has_numberofrows() const;
  private:
  bool _internal_has_numberofrows() const;
  public:
  void clear_numberofrows();
  const ::TDataBinding& numberofrows() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_numberofrows();
  ::TDataBinding* mutable_numberofrows();
  void set_allocated_numberofrows(::TDataBinding* numberofrows);
  private:
  const ::TDataBinding& _internal_numberofrows() const;
  ::TDataBinding* _internal_mutable_numberofrows();
  public:
  void unsafe_arena_set_allocated_numberofrows(
      ::TDataBinding* numberofrows);
  ::TDataBinding* unsafe_arena_release_numberofrows();

  // optional .TDataBinding numberOfColumns = 3;
  bool has_numberofcolumns() const;
  private:
  bool _internal_has_numberofcolumns() const;
  public:
  void clear_numberofcolumns();
  const ::TDataBinding& numberofcolumns() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_numberofcolumns();
  ::TDataBinding* mutable_numberofcolumns();
  void set_allocated_numberofcolumns(::TDataBinding* numberofcolumns);
  private:
  const ::TDataBinding& _internal_numberofcolumns() const;
  ::TDataBinding* _internal_mutable_numberofcolumns();
  public:
  void unsafe_arena_set_allocated_numberofcolumns(
      ::TDataBinding* numberofcolumns);
  ::TDataBinding* unsafe_arena_release_numberofcolumns();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutGrid)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGridElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGrid_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutGridBase* base_;
    ::TDataBinding* numberofrows_;
    ::TDataBinding* numberofcolumns_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutGridBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutGridBase) */ {
 public:
  inline TLayoutGridBase() : TLayoutGridBase(nullptr) {}
  ~TLayoutGridBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutGridBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutGridBase(const TLayoutGridBase& from);
  TLayoutGridBase(TLayoutGridBase&& from) noexcept
    : TLayoutGridBase() {
    *this = ::std::move(from);
  }

  inline TLayoutGridBase& operator=(const TLayoutGridBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutGridBase& operator=(TLayoutGridBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutGridBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutGridBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutGridBase*>(
               &_TLayoutGridBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    105;

  friend void swap(TLayoutGridBase& a, TLayoutGridBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutGridBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutGridBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutGridBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutGridBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutGridBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutGridBase& from) {
    TLayoutGridBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutGridBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutGridBase";
  }
  protected:
  explicit TLayoutGridBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftMarginFieldNumber = 1,
    kRightMarginFieldNumber = 2,
    kTopMarginFieldNumber = 3,
    kBottomMarginFieldNumber = 4,
  };
  // optional .TDataBinding leftMargin = 1;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 2;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 3;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 4;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutGridBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutGridElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutGridElement) */ {
 public:
  inline TLayoutGridElement() : TLayoutGridElement(nullptr) {}
  ~TLayoutGridElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutGridElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutGridElement(const TLayoutGridElement& from);
  TLayoutGridElement(TLayoutGridElement&& from) noexcept
    : TLayoutGridElement() {
    *this = ::std::move(from);
  }

  inline TLayoutGridElement& operator=(const TLayoutGridElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutGridElement& operator=(TLayoutGridElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutGridElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutGridElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutGridElement*>(
               &_TLayoutGridElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    106;

  friend void swap(TLayoutGridElement& a, TLayoutGridElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutGridElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutGridElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutGridElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutGridElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutGridElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutGridElement& from) {
    TLayoutGridElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutGridElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutGridElement";
  }
  protected:
  explicit TLayoutGridElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kRowFieldNumber = 3,
    kColumnFieldNumber = 4,
    kRowSpanFieldNumber = 5,
    kColumnSpanFieldNumber = 6,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding row = 3;
  bool has_row() const;
  private:
  bool _internal_has_row() const;
  public:
  void clear_row();
  const ::TDataBinding& row() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_row();
  ::TDataBinding* mutable_row();
  void set_allocated_row(::TDataBinding* row);
  private:
  const ::TDataBinding& _internal_row() const;
  ::TDataBinding* _internal_mutable_row();
  public:
  void unsafe_arena_set_allocated_row(
      ::TDataBinding* row);
  ::TDataBinding* unsafe_arena_release_row();

  // optional .TDataBinding column = 4;
  bool has_column() const;
  private:
  bool _internal_has_column() const;
  public:
  void clear_column();
  const ::TDataBinding& column() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_column();
  ::TDataBinding* mutable_column();
  void set_allocated_column(::TDataBinding* column);
  private:
  const ::TDataBinding& _internal_column() const;
  ::TDataBinding* _internal_mutable_column();
  public:
  void unsafe_arena_set_allocated_column(
      ::TDataBinding* column);
  ::TDataBinding* unsafe_arena_release_column();

  // optional .TDataBinding rowSpan = 5;
  bool has_rowspan() const;
  private:
  bool _internal_has_rowspan() const;
  public:
  void clear_rowspan();
  const ::TDataBinding& rowspan() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rowspan();
  ::TDataBinding* mutable_rowspan();
  void set_allocated_rowspan(::TDataBinding* rowspan);
  private:
  const ::TDataBinding& _internal_rowspan() const;
  ::TDataBinding* _internal_mutable_rowspan();
  public:
  void unsafe_arena_set_allocated_rowspan(
      ::TDataBinding* rowspan);
  ::TDataBinding* unsafe_arena_release_rowspan();

  // optional .TDataBinding columnSpan = 6;
  bool has_columnspan() const;
  private:
  bool _internal_has_columnspan() const;
  public:
  void clear_columnspan();
  const ::TDataBinding& columnspan() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_columnspan();
  ::TDataBinding* mutable_columnspan();
  void set_allocated_columnspan(::TDataBinding* columnspan);
  private:
  const ::TDataBinding& _internal_columnspan() const;
  ::TDataBinding* _internal_mutable_columnspan();
  public:
  void unsafe_arena_set_allocated_columnspan(
      ::TDataBinding* columnspan);
  ::TDataBinding* unsafe_arena_release_columnspan();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutGridElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* row_;
    ::TDataBinding* column_;
    ::TDataBinding* rowspan_;
    ::TDataBinding* columnspan_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrix_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrix.TTemplate) */ {
 public:
  inline TLayoutMatrix_TTemplate() : TLayoutMatrix_TTemplate(nullptr) {}
  ~TLayoutMatrix_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrix_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrix_TTemplate(const TLayoutMatrix_TTemplate& from);
  TLayoutMatrix_TTemplate(TLayoutMatrix_TTemplate&& from) noexcept
    : TLayoutMatrix_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrix_TTemplate& operator=(const TLayoutMatrix_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrix_TTemplate& operator=(TLayoutMatrix_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrix_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrix_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrix_TTemplate*>(
               &_TLayoutMatrix_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    107;

  friend void swap(TLayoutMatrix_TTemplate& a, TLayoutMatrix_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrix_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrix_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrix_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrix_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrix_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrix_TTemplate& from) {
    TLayoutMatrix_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrix_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrix.TTemplate";
  }
  protected:
  explicit TLayoutMatrix_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutMatrixElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutMatrixElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMatrixElement* release_element();
  ::HmiWidget::TLayoutMatrixElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutMatrixElement* element);
  private:
  const ::HmiWidget::TLayoutMatrixElement& _internal_element() const;
  ::HmiWidget::TLayoutMatrixElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutMatrixElement* element);
  ::HmiWidget::TLayoutMatrixElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrix.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutMatrixElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrix final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrix) */ {
 public:
  inline TLayoutMatrix() : TLayoutMatrix(nullptr) {}
  ~TLayoutMatrix() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrix(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrix(const TLayoutMatrix& from);
  TLayoutMatrix(TLayoutMatrix&& from) noexcept
    : TLayoutMatrix() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrix& operator=(const TLayoutMatrix& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrix& operator=(TLayoutMatrix&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrix& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrix* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrix*>(
               &_TLayoutMatrix_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    108;

  friend void swap(TLayoutMatrix& a, TLayoutMatrix& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrix* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrix* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrix* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrix>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrix& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrix& from) {
    TLayoutMatrix::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrix* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrix";
  }
  protected:
  explicit TLayoutMatrix(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutMatrix_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 3,
    kElementTemplateFieldNumber = 4,
    kBaseFieldNumber = 1,
    kCellSizeFieldNumber = 2,
  };
  // repeated .HmiWidget.TLayoutMatrixElement element = 3;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutMatrixElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutMatrixElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutMatrixElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutMatrixElement& element(int index) const;
  ::HmiWidget::TLayoutMatrixElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixElement >&
      element() const;

  // repeated .HmiWidget.TLayoutMatrix.TTemplate elementTemplate = 4;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutMatrix_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrix_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutMatrix_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutMatrix_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutMatrix_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutMatrix_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrix_TTemplate >&
      elementtemplate() const;

  // optional .HmiWidget.TLayoutMatrixBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutMatrixBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMatrixBase* release_base();
  ::HmiWidget::TLayoutMatrixBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutMatrixBase* base);
  private:
  const ::HmiWidget::TLayoutMatrixBase& _internal_base() const;
  ::HmiWidget::TLayoutMatrixBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutMatrixBase* base);
  ::HmiWidget::TLayoutMatrixBase* unsafe_arena_release_base();

  // required .TDataBinding cellSize = 2;
  bool has_cellsize() const;
  private:
  bool _internal_has_cellsize() const;
  public:
  void clear_cellsize();
  const ::TDataBinding& cellsize() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_cellsize();
  ::TDataBinding* mutable_cellsize();
  void set_allocated_cellsize(::TDataBinding* cellsize);
  private:
  const ::TDataBinding& _internal_cellsize() const;
  ::TDataBinding* _internal_mutable_cellsize();
  public:
  void unsafe_arena_set_allocated_cellsize(
      ::TDataBinding* cellsize);
  ::TDataBinding* unsafe_arena_release_cellsize();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrix)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrix_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutMatrixBase* base_;
    ::TDataBinding* cellsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrixBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrixBase) */ {
 public:
  inline TLayoutMatrixBase() : TLayoutMatrixBase(nullptr) {}
  ~TLayoutMatrixBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrixBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrixBase(const TLayoutMatrixBase& from);
  TLayoutMatrixBase(TLayoutMatrixBase&& from) noexcept
    : TLayoutMatrixBase() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrixBase& operator=(const TLayoutMatrixBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrixBase& operator=(TLayoutMatrixBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrixBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrixBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrixBase*>(
               &_TLayoutMatrixBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    109;

  friend void swap(TLayoutMatrixBase& a, TLayoutMatrixBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrixBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrixBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrixBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrixBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrixBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrixBase& from) {
    TLayoutMatrixBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrixBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrixBase";
  }
  protected:
  explicit TLayoutMatrixBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftMarginFieldNumber = 1,
    kRightMarginFieldNumber = 2,
    kTopMarginFieldNumber = 3,
    kBottomMarginFieldNumber = 4,
    kOrientationXFieldNumber = 5,
    kOrientationYFieldNumber = 6,
    kSpacingFieldNumber = 7,
  };
  // optional .TDataBinding leftMargin = 1;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 2;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 3;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 4;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // optional .TDataBinding orientationX = 5;
  bool has_orientationx() const;
  private:
  bool _internal_has_orientationx() const;
  public:
  void clear_orientationx();
  const ::TDataBinding& orientationx() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientationx();
  ::TDataBinding* mutable_orientationx();
  void set_allocated_orientationx(::TDataBinding* orientationx);
  private:
  const ::TDataBinding& _internal_orientationx() const;
  ::TDataBinding* _internal_mutable_orientationx();
  public:
  void unsafe_arena_set_allocated_orientationx(
      ::TDataBinding* orientationx);
  ::TDataBinding* unsafe_arena_release_orientationx();

  // optional .TDataBinding orientationY = 6;
  bool has_orientationy() const;
  private:
  bool _internal_has_orientationy() const;
  public:
  void clear_orientationy();
  const ::TDataBinding& orientationy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientationy();
  ::TDataBinding* mutable_orientationy();
  void set_allocated_orientationy(::TDataBinding* orientationy);
  private:
  const ::TDataBinding& _internal_orientationy() const;
  ::TDataBinding* _internal_mutable_orientationy();
  public:
  void unsafe_arena_set_allocated_orientationy(
      ::TDataBinding* orientationy);
  ::TDataBinding* unsafe_arena_release_orientationy();

  // optional .TDataBinding spacing = 7;
  bool has_spacing() const;
  private:
  bool _internal_has_spacing() const;
  public:
  void clear_spacing();
  const ::TDataBinding& spacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_spacing();
  ::TDataBinding* mutable_spacing();
  void set_allocated_spacing(::TDataBinding* spacing);
  private:
  const ::TDataBinding& _internal_spacing() const;
  ::TDataBinding* _internal_mutable_spacing();
  public:
  void unsafe_arena_set_allocated_spacing(
      ::TDataBinding* spacing);
  ::TDataBinding* unsafe_arena_release_spacing();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrixBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
    ::TDataBinding* orientationx_;
    ::TDataBinding* orientationy_;
    ::TDataBinding* spacing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrixElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrixElement) */ {
 public:
  inline TLayoutMatrixElement() : TLayoutMatrixElement(nullptr) {}
  ~TLayoutMatrixElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrixElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrixElement(const TLayoutMatrixElement& from);
  TLayoutMatrixElement(TLayoutMatrixElement&& from) noexcept
    : TLayoutMatrixElement() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrixElement& operator=(const TLayoutMatrixElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrixElement& operator=(TLayoutMatrixElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrixElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrixElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrixElement*>(
               &_TLayoutMatrixElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    110;

  friend void swap(TLayoutMatrixElement& a, TLayoutMatrixElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrixElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrixElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrixElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrixElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrixElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrixElement& from) {
    TLayoutMatrixElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrixElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrixElement";
  }
  protected:
  explicit TLayoutMatrixElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kAlignmentFieldNumber = 3,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding alignment = 3;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrixElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* alignment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrixDynamic_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrixDynamic.TTemplate) */ {
 public:
  inline TLayoutMatrixDynamic_TTemplate() : TLayoutMatrixDynamic_TTemplate(nullptr) {}
  ~TLayoutMatrixDynamic_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrixDynamic_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrixDynamic_TTemplate(const TLayoutMatrixDynamic_TTemplate& from);
  TLayoutMatrixDynamic_TTemplate(TLayoutMatrixDynamic_TTemplate&& from) noexcept
    : TLayoutMatrixDynamic_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrixDynamic_TTemplate& operator=(const TLayoutMatrixDynamic_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrixDynamic_TTemplate& operator=(TLayoutMatrixDynamic_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrixDynamic_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrixDynamic_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrixDynamic_TTemplate*>(
               &_TLayoutMatrixDynamic_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    111;

  friend void swap(TLayoutMatrixDynamic_TTemplate& a, TLayoutMatrixDynamic_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrixDynamic_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrixDynamic_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrixDynamic_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrixDynamic_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrixDynamic_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrixDynamic_TTemplate& from) {
    TLayoutMatrixDynamic_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrixDynamic_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrixDynamic.TTemplate";
  }
  protected:
  explicit TLayoutMatrixDynamic_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutMatrixDynamicElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutMatrixDynamicElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMatrixDynamicElement* release_element();
  ::HmiWidget::TLayoutMatrixDynamicElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutMatrixDynamicElement* element);
  private:
  const ::HmiWidget::TLayoutMatrixDynamicElement& _internal_element() const;
  ::HmiWidget::TLayoutMatrixDynamicElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutMatrixDynamicElement* element);
  ::HmiWidget::TLayoutMatrixDynamicElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrixDynamic.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutMatrixDynamicElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrixDynamic final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrixDynamic) */ {
 public:
  inline TLayoutMatrixDynamic() : TLayoutMatrixDynamic(nullptr) {}
  ~TLayoutMatrixDynamic() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrixDynamic(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrixDynamic(const TLayoutMatrixDynamic& from);
  TLayoutMatrixDynamic(TLayoutMatrixDynamic&& from) noexcept
    : TLayoutMatrixDynamic() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrixDynamic& operator=(const TLayoutMatrixDynamic& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrixDynamic& operator=(TLayoutMatrixDynamic&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrixDynamic& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrixDynamic* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrixDynamic*>(
               &_TLayoutMatrixDynamic_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    112;

  friend void swap(TLayoutMatrixDynamic& a, TLayoutMatrixDynamic& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrixDynamic* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrixDynamic* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrixDynamic* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrixDynamic>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrixDynamic& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrixDynamic& from) {
    TLayoutMatrixDynamic::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrixDynamic* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrixDynamic";
  }
  protected:
  explicit TLayoutMatrixDynamic(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutMatrixDynamic_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 3,
    kElementTemplateFieldNumber = 4,
    kBaseFieldNumber = 1,
    kDefaultCellSizeFieldNumber = 2,
  };
  // repeated .HmiWidget.TLayoutMatrixDynamicElement element = 3;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutMatrixDynamicElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamicElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutMatrixDynamicElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutMatrixDynamicElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutMatrixDynamicElement& element(int index) const;
  ::HmiWidget::TLayoutMatrixDynamicElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamicElement >&
      element() const;

  // repeated .HmiWidget.TLayoutMatrixDynamic.TTemplate elementTemplate = 4;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutMatrixDynamic_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamic_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutMatrixDynamic_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutMatrixDynamic_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutMatrixDynamic_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutMatrixDynamic_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamic_TTemplate >&
      elementtemplate() const;

  // optional .HmiWidget.TLayoutMatrixDynamicBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutMatrixDynamicBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMatrixDynamicBase* release_base();
  ::HmiWidget::TLayoutMatrixDynamicBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutMatrixDynamicBase* base);
  private:
  const ::HmiWidget::TLayoutMatrixDynamicBase& _internal_base() const;
  ::HmiWidget::TLayoutMatrixDynamicBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutMatrixDynamicBase* base);
  ::HmiWidget::TLayoutMatrixDynamicBase* unsafe_arena_release_base();

  // optional .TDataBinding defaultCellSize = 2;
  bool has_defaultcellsize() const;
  private:
  bool _internal_has_defaultcellsize() const;
  public:
  void clear_defaultcellsize();
  const ::TDataBinding& defaultcellsize() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_defaultcellsize();
  ::TDataBinding* mutable_defaultcellsize();
  void set_allocated_defaultcellsize(::TDataBinding* defaultcellsize);
  private:
  const ::TDataBinding& _internal_defaultcellsize() const;
  ::TDataBinding* _internal_mutable_defaultcellsize();
  public:
  void unsafe_arena_set_allocated_defaultcellsize(
      ::TDataBinding* defaultcellsize);
  ::TDataBinding* unsafe_arena_release_defaultcellsize();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrixDynamic)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamicElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamic_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutMatrixDynamicBase* base_;
    ::TDataBinding* defaultcellsize_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrixDynamicBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrixDynamicBase) */ {
 public:
  inline TLayoutMatrixDynamicBase() : TLayoutMatrixDynamicBase(nullptr) {}
  ~TLayoutMatrixDynamicBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrixDynamicBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrixDynamicBase(const TLayoutMatrixDynamicBase& from);
  TLayoutMatrixDynamicBase(TLayoutMatrixDynamicBase&& from) noexcept
    : TLayoutMatrixDynamicBase() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrixDynamicBase& operator=(const TLayoutMatrixDynamicBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrixDynamicBase& operator=(TLayoutMatrixDynamicBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrixDynamicBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrixDynamicBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrixDynamicBase*>(
               &_TLayoutMatrixDynamicBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    113;

  friend void swap(TLayoutMatrixDynamicBase& a, TLayoutMatrixDynamicBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrixDynamicBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrixDynamicBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrixDynamicBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrixDynamicBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrixDynamicBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrixDynamicBase& from) {
    TLayoutMatrixDynamicBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrixDynamicBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrixDynamicBase";
  }
  protected:
  explicit TLayoutMatrixDynamicBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftMarginFieldNumber = 1,
    kRightMarginFieldNumber = 2,
    kTopMarginFieldNumber = 3,
    kBottomMarginFieldNumber = 4,
    kOrientationXFieldNumber = 5,
    kOrientationYFieldNumber = 6,
    kSpacingFieldNumber = 7,
  };
  // optional .TDataBinding leftMargin = 1;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 2;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 3;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 4;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // optional .TDataBinding orientationX = 5;
  bool has_orientationx() const;
  private:
  bool _internal_has_orientationx() const;
  public:
  void clear_orientationx();
  const ::TDataBinding& orientationx() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientationx();
  ::TDataBinding* mutable_orientationx();
  void set_allocated_orientationx(::TDataBinding* orientationx);
  private:
  const ::TDataBinding& _internal_orientationx() const;
  ::TDataBinding* _internal_mutable_orientationx();
  public:
  void unsafe_arena_set_allocated_orientationx(
      ::TDataBinding* orientationx);
  ::TDataBinding* unsafe_arena_release_orientationx();

  // optional .TDataBinding orientationY = 6;
  bool has_orientationy() const;
  private:
  bool _internal_has_orientationy() const;
  public:
  void clear_orientationy();
  const ::TDataBinding& orientationy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_orientationy();
  ::TDataBinding* mutable_orientationy();
  void set_allocated_orientationy(::TDataBinding* orientationy);
  private:
  const ::TDataBinding& _internal_orientationy() const;
  ::TDataBinding* _internal_mutable_orientationy();
  public:
  void unsafe_arena_set_allocated_orientationy(
      ::TDataBinding* orientationy);
  ::TDataBinding* unsafe_arena_release_orientationy();

  // optional .TDataBinding spacing = 7;
  bool has_spacing() const;
  private:
  bool _internal_has_spacing() const;
  public:
  void clear_spacing();
  const ::TDataBinding& spacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_spacing();
  ::TDataBinding* mutable_spacing();
  void set_allocated_spacing(::TDataBinding* spacing);
  private:
  const ::TDataBinding& _internal_spacing() const;
  ::TDataBinding* _internal_mutable_spacing();
  public:
  void unsafe_arena_set_allocated_spacing(
      ::TDataBinding* spacing);
  ::TDataBinding* unsafe_arena_release_spacing();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrixDynamicBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
    ::TDataBinding* orientationx_;
    ::TDataBinding* orientationy_;
    ::TDataBinding* spacing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMatrixDynamicElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMatrixDynamicElement) */ {
 public:
  inline TLayoutMatrixDynamicElement() : TLayoutMatrixDynamicElement(nullptr) {}
  ~TLayoutMatrixDynamicElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMatrixDynamicElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMatrixDynamicElement(const TLayoutMatrixDynamicElement& from);
  TLayoutMatrixDynamicElement(TLayoutMatrixDynamicElement&& from) noexcept
    : TLayoutMatrixDynamicElement() {
    *this = ::std::move(from);
  }

  inline TLayoutMatrixDynamicElement& operator=(const TLayoutMatrixDynamicElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMatrixDynamicElement& operator=(TLayoutMatrixDynamicElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMatrixDynamicElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMatrixDynamicElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutMatrixDynamicElement*>(
               &_TLayoutMatrixDynamicElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    114;

  friend void swap(TLayoutMatrixDynamicElement& a, TLayoutMatrixDynamicElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMatrixDynamicElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMatrixDynamicElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMatrixDynamicElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMatrixDynamicElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMatrixDynamicElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMatrixDynamicElement& from) {
    TLayoutMatrixDynamicElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMatrixDynamicElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMatrixDynamicElement";
  }
  protected:
  explicit TLayoutMatrixDynamicElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kAlignmentFieldNumber = 3,
    kSizePolicyFieldNumber = 4,
    kSizeFieldNumber = 5,
    kStretchFactorFieldNumber = 6,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding alignment = 3;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // optional .TDataBinding sizePolicy = 4;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // optional .TDataBinding size = 5;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding stretchFactor = 6;
  bool has_stretchfactor() const;
  private:
  bool _internal_has_stretchfactor() const;
  public:
  void clear_stretchfactor();
  const ::TDataBinding& stretchfactor() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_stretchfactor();
  ::TDataBinding* mutable_stretchfactor();
  void set_allocated_stretchfactor(::TDataBinding* stretchfactor);
  private:
  const ::TDataBinding& _internal_stretchfactor() const;
  ::TDataBinding* _internal_mutable_stretchfactor();
  public:
  void unsafe_arena_set_allocated_stretchfactor(
      ::TDataBinding* stretchfactor);
  ::TDataBinding* unsafe_arena_release_stretchfactor();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMatrixDynamicElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* alignment_;
    ::TDataBinding* sizepolicy_;
    ::TDataBinding* size_;
    ::TDataBinding* stretchfactor_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMenuBelt_TTemplate final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMenuBelt.TTemplate) */ {
 public:
  inline TLayoutMenuBelt_TTemplate() : TLayoutMenuBelt_TTemplate(nullptr) {}
  ~TLayoutMenuBelt_TTemplate() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMenuBelt_TTemplate(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMenuBelt_TTemplate(const TLayoutMenuBelt_TTemplate& from);
  TLayoutMenuBelt_TTemplate(TLayoutMenuBelt_TTemplate&& from) noexcept
    : TLayoutMenuBelt_TTemplate() {
    *this = ::std::move(from);
  }

  inline TLayoutMenuBelt_TTemplate& operator=(const TLayoutMenuBelt_TTemplate& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMenuBelt_TTemplate& operator=(TLayoutMenuBelt_TTemplate&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMenuBelt_TTemplate& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMenuBelt_TTemplate* internal_default_instance() {
    return reinterpret_cast<const TLayoutMenuBelt_TTemplate*>(
               &_TLayoutMenuBelt_TTemplate_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    115;

  friend void swap(TLayoutMenuBelt_TTemplate& a, TLayoutMenuBelt_TTemplate& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMenuBelt_TTemplate* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMenuBelt_TTemplate* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMenuBelt_TTemplate* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMenuBelt_TTemplate>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMenuBelt_TTemplate& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMenuBelt_TTemplate& from) {
    TLayoutMenuBelt_TTemplate::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMenuBelt_TTemplate* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMenuBelt.TTemplate";
  }
  protected:
  explicit TLayoutMenuBelt_TTemplate(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kIdentifierFieldNumber = 1,
    kElementFieldNumber = 2,
  };
  // required .TIdentifier identifier = 1;
  bool has_identifier() const;
  private:
  bool _internal_has_identifier() const;
  public:
  void clear_identifier();
  const ::TIdentifier& identifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_identifier();
  ::TIdentifier* mutable_identifier();
  void set_allocated_identifier(::TIdentifier* identifier);
  private:
  const ::TIdentifier& _internal_identifier() const;
  ::TIdentifier* _internal_mutable_identifier();
  public:
  void unsafe_arena_set_allocated_identifier(
      ::TIdentifier* identifier);
  ::TIdentifier* unsafe_arena_release_identifier();

  // required .HmiWidget.TLayoutMenuBeltElement element = 2;
  bool has_element() const;
  private:
  bool _internal_has_element() const;
  public:
  void clear_element();
  const ::HmiWidget::TLayoutMenuBeltElement& element() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMenuBeltElement* release_element();
  ::HmiWidget::TLayoutMenuBeltElement* mutable_element();
  void set_allocated_element(::HmiWidget::TLayoutMenuBeltElement* element);
  private:
  const ::HmiWidget::TLayoutMenuBeltElement& _internal_element() const;
  ::HmiWidget::TLayoutMenuBeltElement* _internal_mutable_element();
  public:
  void unsafe_arena_set_allocated_element(
      ::HmiWidget::TLayoutMenuBeltElement* element);
  ::HmiWidget::TLayoutMenuBeltElement* unsafe_arena_release_element();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMenuBelt.TTemplate)
 private:
  class _Internal;

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* identifier_;
    ::HmiWidget::TLayoutMenuBeltElement* element_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMenuBelt final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMenuBelt) */ {
 public:
  inline TLayoutMenuBelt() : TLayoutMenuBelt(nullptr) {}
  ~TLayoutMenuBelt() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMenuBelt(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMenuBelt(const TLayoutMenuBelt& from);
  TLayoutMenuBelt(TLayoutMenuBelt&& from) noexcept
    : TLayoutMenuBelt() {
    *this = ::std::move(from);
  }

  inline TLayoutMenuBelt& operator=(const TLayoutMenuBelt& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMenuBelt& operator=(TLayoutMenuBelt&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMenuBelt& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMenuBelt* internal_default_instance() {
    return reinterpret_cast<const TLayoutMenuBelt*>(
               &_TLayoutMenuBelt_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    116;

  friend void swap(TLayoutMenuBelt& a, TLayoutMenuBelt& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMenuBelt* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMenuBelt* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMenuBelt* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMenuBelt>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMenuBelt& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMenuBelt& from) {
    TLayoutMenuBelt::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMenuBelt* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMenuBelt";
  }
  protected:
  explicit TLayoutMenuBelt(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  typedef TLayoutMenuBelt_TTemplate TTemplate;

  // accessors -------------------------------------------------------

  enum : int {
    kElementFieldNumber = 2,
    kElementTemplateFieldNumber = 3,
    kBaseFieldNumber = 1,
  };
  // repeated .HmiWidget.TLayoutMenuBeltElement element = 2;
  int element_size() const;
  private:
  int _internal_element_size() const;
  public:
  void clear_element();
  ::HmiWidget::TLayoutMenuBeltElement* mutable_element(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBeltElement >*
      mutable_element();
  private:
  const ::HmiWidget::TLayoutMenuBeltElement& _internal_element(int index) const;
  ::HmiWidget::TLayoutMenuBeltElement* _internal_add_element();
  public:
  const ::HmiWidget::TLayoutMenuBeltElement& element(int index) const;
  ::HmiWidget::TLayoutMenuBeltElement* add_element();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBeltElement >&
      element() const;

  // repeated .HmiWidget.TLayoutMenuBelt.TTemplate elementTemplate = 3;
  int elementtemplate_size() const;
  private:
  int _internal_elementtemplate_size() const;
  public:
  void clear_elementtemplate();
  ::HmiWidget::TLayoutMenuBelt_TTemplate* mutable_elementtemplate(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBelt_TTemplate >*
      mutable_elementtemplate();
  private:
  const ::HmiWidget::TLayoutMenuBelt_TTemplate& _internal_elementtemplate(int index) const;
  ::HmiWidget::TLayoutMenuBelt_TTemplate* _internal_add_elementtemplate();
  public:
  const ::HmiWidget::TLayoutMenuBelt_TTemplate& elementtemplate(int index) const;
  ::HmiWidget::TLayoutMenuBelt_TTemplate* add_elementtemplate();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBelt_TTemplate >&
      elementtemplate() const;

  // optional .HmiWidget.TLayoutMenuBeltBase base = 1;
  bool has_base() const;
  private:
  bool _internal_has_base() const;
  public:
  void clear_base();
  const ::HmiWidget::TLayoutMenuBeltBase& base() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayoutMenuBeltBase* release_base();
  ::HmiWidget::TLayoutMenuBeltBase* mutable_base();
  void set_allocated_base(::HmiWidget::TLayoutMenuBeltBase* base);
  private:
  const ::HmiWidget::TLayoutMenuBeltBase& _internal_base() const;
  ::HmiWidget::TLayoutMenuBeltBase* _internal_mutable_base();
  public:
  void unsafe_arena_set_allocated_base(
      ::HmiWidget::TLayoutMenuBeltBase* base);
  ::HmiWidget::TLayoutMenuBeltBase* unsafe_arena_release_base();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMenuBelt)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBeltElement > element_;
    ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBelt_TTemplate > elementtemplate_;
    ::HmiWidget::TLayoutMenuBeltBase* base_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMenuBeltBase final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMenuBeltBase) */ {
 public:
  inline TLayoutMenuBeltBase() : TLayoutMenuBeltBase(nullptr) {}
  ~TLayoutMenuBeltBase() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMenuBeltBase(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMenuBeltBase(const TLayoutMenuBeltBase& from);
  TLayoutMenuBeltBase(TLayoutMenuBeltBase&& from) noexcept
    : TLayoutMenuBeltBase() {
    *this = ::std::move(from);
  }

  inline TLayoutMenuBeltBase& operator=(const TLayoutMenuBeltBase& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMenuBeltBase& operator=(TLayoutMenuBeltBase&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMenuBeltBase& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMenuBeltBase* internal_default_instance() {
    return reinterpret_cast<const TLayoutMenuBeltBase*>(
               &_TLayoutMenuBeltBase_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    117;

  friend void swap(TLayoutMenuBeltBase& a, TLayoutMenuBeltBase& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMenuBeltBase* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMenuBeltBase* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMenuBeltBase* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMenuBeltBase>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMenuBeltBase& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMenuBeltBase& from) {
    TLayoutMenuBeltBase::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMenuBeltBase* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMenuBeltBase";
  }
  protected:
  explicit TLayoutMenuBeltBase(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLeftMarginFieldNumber = 1,
    kRightMarginFieldNumber = 2,
    kTopMarginFieldNumber = 3,
    kBottomMarginFieldNumber = 4,
    kPageSizeFieldNumber = 5,
    kPageBlockSizeFieldNumber = 6,
    kElementShiftFieldNumber = 7,
    kPageSpacingFieldNumber = 8,
    kVerticalSpacingFieldNumber = 9,
  };
  // optional .TDataBinding leftMargin = 1;
  bool has_leftmargin() const;
  private:
  bool _internal_has_leftmargin() const;
  public:
  void clear_leftmargin();
  const ::TDataBinding& leftmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_leftmargin();
  ::TDataBinding* mutable_leftmargin();
  void set_allocated_leftmargin(::TDataBinding* leftmargin);
  private:
  const ::TDataBinding& _internal_leftmargin() const;
  ::TDataBinding* _internal_mutable_leftmargin();
  public:
  void unsafe_arena_set_allocated_leftmargin(
      ::TDataBinding* leftmargin);
  ::TDataBinding* unsafe_arena_release_leftmargin();

  // optional .TDataBinding rightMargin = 2;
  bool has_rightmargin() const;
  private:
  bool _internal_has_rightmargin() const;
  public:
  void clear_rightmargin();
  const ::TDataBinding& rightmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_rightmargin();
  ::TDataBinding* mutable_rightmargin();
  void set_allocated_rightmargin(::TDataBinding* rightmargin);
  private:
  const ::TDataBinding& _internal_rightmargin() const;
  ::TDataBinding* _internal_mutable_rightmargin();
  public:
  void unsafe_arena_set_allocated_rightmargin(
      ::TDataBinding* rightmargin);
  ::TDataBinding* unsafe_arena_release_rightmargin();

  // optional .TDataBinding topMargin = 3;
  bool has_topmargin() const;
  private:
  bool _internal_has_topmargin() const;
  public:
  void clear_topmargin();
  const ::TDataBinding& topmargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_topmargin();
  ::TDataBinding* mutable_topmargin();
  void set_allocated_topmargin(::TDataBinding* topmargin);
  private:
  const ::TDataBinding& _internal_topmargin() const;
  ::TDataBinding* _internal_mutable_topmargin();
  public:
  void unsafe_arena_set_allocated_topmargin(
      ::TDataBinding* topmargin);
  ::TDataBinding* unsafe_arena_release_topmargin();

  // optional .TDataBinding bottomMargin = 4;
  bool has_bottommargin() const;
  private:
  bool _internal_has_bottommargin() const;
  public:
  void clear_bottommargin();
  const ::TDataBinding& bottommargin() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_bottommargin();
  ::TDataBinding* mutable_bottommargin();
  void set_allocated_bottommargin(::TDataBinding* bottommargin);
  private:
  const ::TDataBinding& _internal_bottommargin() const;
  ::TDataBinding* _internal_mutable_bottommargin();
  public:
  void unsafe_arena_set_allocated_bottommargin(
      ::TDataBinding* bottommargin);
  ::TDataBinding* unsafe_arena_release_bottommargin();

  // optional .TDataBinding pageSize = 5;
  bool has_pagesize() const;
  private:
  bool _internal_has_pagesize() const;
  public:
  void clear_pagesize();
  const ::TDataBinding& pagesize() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_pagesize();
  ::TDataBinding* mutable_pagesize();
  void set_allocated_pagesize(::TDataBinding* pagesize);
  private:
  const ::TDataBinding& _internal_pagesize() const;
  ::TDataBinding* _internal_mutable_pagesize();
  public:
  void unsafe_arena_set_allocated_pagesize(
      ::TDataBinding* pagesize);
  ::TDataBinding* unsafe_arena_release_pagesize();

  // optional .TDataBinding pageBlockSize = 6;
  bool has_pageblocksize() const;
  private:
  bool _internal_has_pageblocksize() const;
  public:
  void clear_pageblocksize();
  const ::TDataBinding& pageblocksize() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_pageblocksize();
  ::TDataBinding* mutable_pageblocksize();
  void set_allocated_pageblocksize(::TDataBinding* pageblocksize);
  private:
  const ::TDataBinding& _internal_pageblocksize() const;
  ::TDataBinding* _internal_mutable_pageblocksize();
  public:
  void unsafe_arena_set_allocated_pageblocksize(
      ::TDataBinding* pageblocksize);
  ::TDataBinding* unsafe_arena_release_pageblocksize();

  // optional .TDataBinding elementShift = 7;
  bool has_elementshift() const;
  private:
  bool _internal_has_elementshift() const;
  public:
  void clear_elementshift();
  const ::TDataBinding& elementshift() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_elementshift();
  ::TDataBinding* mutable_elementshift();
  void set_allocated_elementshift(::TDataBinding* elementshift);
  private:
  const ::TDataBinding& _internal_elementshift() const;
  ::TDataBinding* _internal_mutable_elementshift();
  public:
  void unsafe_arena_set_allocated_elementshift(
      ::TDataBinding* elementshift);
  ::TDataBinding* unsafe_arena_release_elementshift();

  // optional .TDataBinding pageSpacing = 8;
  bool has_pagespacing() const;
  private:
  bool _internal_has_pagespacing() const;
  public:
  void clear_pagespacing();
  const ::TDataBinding& pagespacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_pagespacing();
  ::TDataBinding* mutable_pagespacing();
  void set_allocated_pagespacing(::TDataBinding* pagespacing);
  private:
  const ::TDataBinding& _internal_pagespacing() const;
  ::TDataBinding* _internal_mutable_pagespacing();
  public:
  void unsafe_arena_set_allocated_pagespacing(
      ::TDataBinding* pagespacing);
  ::TDataBinding* unsafe_arena_release_pagespacing();

  // optional .TDataBinding verticalSpacing = 9;
  bool has_verticalspacing() const;
  private:
  bool _internal_has_verticalspacing() const;
  public:
  void clear_verticalspacing();
  const ::TDataBinding& verticalspacing() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_verticalspacing();
  ::TDataBinding* mutable_verticalspacing();
  void set_allocated_verticalspacing(::TDataBinding* verticalspacing);
  private:
  const ::TDataBinding& _internal_verticalspacing() const;
  ::TDataBinding* _internal_mutable_verticalspacing();
  public:
  void unsafe_arena_set_allocated_verticalspacing(
      ::TDataBinding* verticalspacing);
  ::TDataBinding* unsafe_arena_release_verticalspacing();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMenuBeltBase)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TDataBinding* leftmargin_;
    ::TDataBinding* rightmargin_;
    ::TDataBinding* topmargin_;
    ::TDataBinding* bottommargin_;
    ::TDataBinding* pagesize_;
    ::TDataBinding* pageblocksize_;
    ::TDataBinding* elementshift_;
    ::TDataBinding* pagespacing_;
    ::TDataBinding* verticalspacing_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// -------------------------------------------------------------------

class TLayoutMenuBeltElement final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:HmiWidget.TLayoutMenuBeltElement) */ {
 public:
  inline TLayoutMenuBeltElement() : TLayoutMenuBeltElement(nullptr) {}
  ~TLayoutMenuBeltElement() override;
  explicit PROTOBUF_CONSTEXPR TLayoutMenuBeltElement(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  TLayoutMenuBeltElement(const TLayoutMenuBeltElement& from);
  TLayoutMenuBeltElement(TLayoutMenuBeltElement&& from) noexcept
    : TLayoutMenuBeltElement() {
    *this = ::std::move(from);
  }

  inline TLayoutMenuBeltElement& operator=(const TLayoutMenuBeltElement& from) {
    CopyFrom(from);
    return *this;
  }
  inline TLayoutMenuBeltElement& operator=(TLayoutMenuBeltElement&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance);
  }
  inline ::PROTOBUF_NAMESPACE_ID::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TLayoutMenuBeltElement& default_instance() {
    return *internal_default_instance();
  }
  static inline const TLayoutMenuBeltElement* internal_default_instance() {
    return reinterpret_cast<const TLayoutMenuBeltElement*>(
               &_TLayoutMenuBeltElement_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    118;

  friend void swap(TLayoutMenuBeltElement& a, TLayoutMenuBeltElement& b) {
    a.Swap(&b);
  }
  inline void Swap(TLayoutMenuBeltElement* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TLayoutMenuBeltElement* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TLayoutMenuBeltElement* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<TLayoutMenuBeltElement>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const TLayoutMenuBeltElement& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom( const TLayoutMenuBeltElement& from) {
    TLayoutMenuBeltElement::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::PROTOBUF_NAMESPACE_ID::Arena* arena, bool is_message_owned);
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(TLayoutMenuBeltElement* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "HmiWidget.TLayoutMenuBeltElement";
  }
  protected:
  explicit TLayoutMenuBeltElement(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kChildIdentifierFieldNumber = 1,
    kNestedLayoutFieldNumber = 2,
    kSizeFieldNumber = 3,
    kSizePolicyFieldNumber = 4,
    kAlignmentFieldNumber = 5,
  };
  // optional .TIdentifier childIdentifier = 1;
  bool has_childidentifier() const;
  private:
  bool _internal_has_childidentifier() const;
  public:
  void clear_childidentifier();
  const ::TIdentifier& childidentifier() const;
  PROTOBUF_NODISCARD ::TIdentifier* release_childidentifier();
  ::TIdentifier* mutable_childidentifier();
  void set_allocated_childidentifier(::TIdentifier* childidentifier);
  private:
  const ::TIdentifier& _internal_childidentifier() const;
  ::TIdentifier* _internal_mutable_childidentifier();
  public:
  void unsafe_arena_set_allocated_childidentifier(
      ::TIdentifier* childidentifier);
  ::TIdentifier* unsafe_arena_release_childidentifier();

  // optional .HmiWidget.TLayout nestedLayout = 2;
  bool has_nestedlayout() const;
  private:
  bool _internal_has_nestedlayout() const;
  public:
  void clear_nestedlayout();
  const ::HmiWidget::TLayout& nestedlayout() const;
  PROTOBUF_NODISCARD ::HmiWidget::TLayout* release_nestedlayout();
  ::HmiWidget::TLayout* mutable_nestedlayout();
  void set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout);
  private:
  const ::HmiWidget::TLayout& _internal_nestedlayout() const;
  ::HmiWidget::TLayout* _internal_mutable_nestedlayout();
  public:
  void unsafe_arena_set_allocated_nestedlayout(
      ::HmiWidget::TLayout* nestedlayout);
  ::HmiWidget::TLayout* unsafe_arena_release_nestedlayout();

  // optional .TDataBinding size = 3;
  bool has_size() const;
  private:
  bool _internal_has_size() const;
  public:
  void clear_size();
  const ::TDataBinding& size() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_size();
  ::TDataBinding* mutable_size();
  void set_allocated_size(::TDataBinding* size);
  private:
  const ::TDataBinding& _internal_size() const;
  ::TDataBinding* _internal_mutable_size();
  public:
  void unsafe_arena_set_allocated_size(
      ::TDataBinding* size);
  ::TDataBinding* unsafe_arena_release_size();

  // optional .TDataBinding sizePolicy = 4;
  bool has_sizepolicy() const;
  private:
  bool _internal_has_sizepolicy() const;
  public:
  void clear_sizepolicy();
  const ::TDataBinding& sizepolicy() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_sizepolicy();
  ::TDataBinding* mutable_sizepolicy();
  void set_allocated_sizepolicy(::TDataBinding* sizepolicy);
  private:
  const ::TDataBinding& _internal_sizepolicy() const;
  ::TDataBinding* _internal_mutable_sizepolicy();
  public:
  void unsafe_arena_set_allocated_sizepolicy(
      ::TDataBinding* sizepolicy);
  ::TDataBinding* unsafe_arena_release_sizepolicy();

  // optional .TDataBinding alignment = 5;
  bool has_alignment() const;
  private:
  bool _internal_has_alignment() const;
  public:
  void clear_alignment();
  const ::TDataBinding& alignment() const;
  PROTOBUF_NODISCARD ::TDataBinding* release_alignment();
  ::TDataBinding* mutable_alignment();
  void set_allocated_alignment(::TDataBinding* alignment);
  private:
  const ::TDataBinding& _internal_alignment() const;
  ::TDataBinding* _internal_mutable_alignment();
  public:
  void unsafe_arena_set_allocated_alignment(
      ::TDataBinding* alignment);
  ::TDataBinding* unsafe_arena_release_alignment();

  // @@protoc_insertion_point(class_scope:HmiWidget.TLayoutMenuBeltElement)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  struct Impl_ {
    ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
    mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
    ::TIdentifier* childidentifier_;
    ::HmiWidget::TLayout* nestedlayout_;
    ::TDataBinding* size_;
    ::TDataBinding* sizepolicy_;
    ::TDataBinding* alignment_;
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_HmiWidget_2eproto;
};
// ===================================================================

static const int kScriptFieldNumber = 10;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TDataProvider,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::HmiWidget::TScriptReference >, 11, false >
  script;
static const int kAnimationFieldNumber = 11;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TDataProvider,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::TIdentifier >, 11, false >
  animation;
static const int kCurveFieldNumber = 12;
extern ::PROTOBUF_NAMESPACE_ID::internal::ExtensionIdentifier< ::TDataProvider,
    ::PROTOBUF_NAMESPACE_ID::internal::MessageTypeTraits< ::HmiWidget::TCurveReference >, 11, false >
  curve;

// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// TNodeParam

// required .TIdentifier identifier = 1;
inline bool TNodeParam::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TNodeParam::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TNodeParam::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TNodeParam::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.identifier)
  return _internal_identifier();
}
inline void TNodeParam::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeParam.identifier)
}
inline ::TIdentifier* TNodeParam::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TNodeParam::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeParam.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TNodeParam::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TNodeParam::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.identifier)
  return _msg;
}
inline void TNodeParam::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeParam.identifier)
}

// optional .TDataBinding node = 2;
inline bool TNodeParam::_internal_has_node() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.node_ != nullptr);
  return value;
}
inline bool TNodeParam::has_node() const {
  return _internal_has_node();
}
inline const ::TDataBinding& TNodeParam::_internal_node() const {
  const ::TDataBinding* p = _impl_.node_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeParam::node() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.node)
  return _internal_node();
}
inline void TNodeParam::unsafe_arena_set_allocated_node(
    ::TDataBinding* node) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_);
  }
  _impl_.node_ = node;
  if (node) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeParam.node)
}
inline ::TDataBinding* TNodeParam::release_node() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.node_;
  _impl_.node_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeParam::unsafe_arena_release_node() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeParam.node)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.node_;
  _impl_.node_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeParam::_internal_mutable_node() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.node_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.node_ = p;
  }
  return _impl_.node_;
}
inline ::TDataBinding* TNodeParam::mutable_node() {
  ::TDataBinding* _msg = _internal_mutable_node();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.node)
  return _msg;
}
inline void TNodeParam::set_allocated_node(::TDataBinding* node) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.node_);
  }
  if (node) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(node));
    if (message_arena != submessage_arena) {
      node = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, node, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.node_ = node;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeParam.node)
}

// optional .HmiWidget.TNodeTransform transform = 3;
inline bool TNodeParam::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline bool TNodeParam::has_transform() const {
  return _internal_has_transform();
}
inline void TNodeParam::clear_transform() {
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TNodeTransform& TNodeParam::_internal_transform() const {
  const ::HmiWidget::TNodeTransform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TNodeTransform&>(
      ::HmiWidget::_TNodeTransform_default_instance_);
}
inline const ::HmiWidget::TNodeTransform& TNodeParam::transform() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.transform)
  return _internal_transform();
}
inline void TNodeParam::unsafe_arena_set_allocated_transform(
    ::HmiWidget::TNodeTransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeParam.transform)
}
inline ::HmiWidget::TNodeTransform* TNodeParam::release_transform() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TNodeTransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TNodeTransform* TNodeParam::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeParam.transform)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TNodeTransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::HmiWidget::TNodeTransform* TNodeParam::_internal_mutable_transform() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TNodeTransform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::HmiWidget::TNodeTransform* TNodeParam::mutable_transform() {
  ::HmiWidget::TNodeTransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.transform)
  return _msg;
}
inline void TNodeParam::set_allocated_transform(::HmiWidget::TNodeTransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeParam.transform)
}

// repeated .HmiWidget.TUniform uniform = 4;
inline int TNodeParam::_internal_uniform_size() const {
  return _impl_.uniform_.size();
}
inline int TNodeParam::uniform_size() const {
  return _internal_uniform_size();
}
inline void TNodeParam::clear_uniform() {
  _impl_.uniform_.Clear();
}
inline ::HmiWidget::TUniform* TNodeParam::mutable_uniform(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.uniform)
  return _impl_.uniform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >*
TNodeParam::mutable_uniform() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TNodeParam.uniform)
  return &_impl_.uniform_;
}
inline const ::HmiWidget::TUniform& TNodeParam::_internal_uniform(int index) const {
  return _impl_.uniform_.Get(index);
}
inline const ::HmiWidget::TUniform& TNodeParam::uniform(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.uniform)
  return _internal_uniform(index);
}
inline ::HmiWidget::TUniform* TNodeParam::_internal_add_uniform() {
  return _impl_.uniform_.Add();
}
inline ::HmiWidget::TUniform* TNodeParam::add_uniform() {
  ::HmiWidget::TUniform* _add = _internal_add_uniform();
  // @@protoc_insertion_point(field_add:HmiWidget.TNodeParam.uniform)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >&
TNodeParam::uniform() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TNodeParam.uniform)
  return _impl_.uniform_;
}

// optional .HmiWidget.TRenderLayerProperties renderLayerProperties = 6;
inline bool TNodeParam::_internal_has_renderlayerproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderlayerproperties_ != nullptr);
  return value;
}
inline bool TNodeParam::has_renderlayerproperties() const {
  return _internal_has_renderlayerproperties();
}
inline void TNodeParam::clear_renderlayerproperties() {
  if (_impl_.renderlayerproperties_ != nullptr) _impl_.renderlayerproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HmiWidget::TRenderLayerProperties& TNodeParam::_internal_renderlayerproperties() const {
  const ::HmiWidget::TRenderLayerProperties* p = _impl_.renderlayerproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TRenderLayerProperties&>(
      ::HmiWidget::_TRenderLayerProperties_default_instance_);
}
inline const ::HmiWidget::TRenderLayerProperties& TNodeParam::renderlayerproperties() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.renderLayerProperties)
  return _internal_renderlayerproperties();
}
inline void TNodeParam::unsafe_arena_set_allocated_renderlayerproperties(
    ::HmiWidget::TRenderLayerProperties* renderlayerproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderlayerproperties_);
  }
  _impl_.renderlayerproperties_ = renderlayerproperties;
  if (renderlayerproperties) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeParam.renderLayerProperties)
}
inline ::HmiWidget::TRenderLayerProperties* TNodeParam::release_renderlayerproperties() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TRenderLayerProperties* temp = _impl_.renderlayerproperties_;
  _impl_.renderlayerproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TRenderLayerProperties* TNodeParam::unsafe_arena_release_renderlayerproperties() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeParam.renderLayerProperties)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TRenderLayerProperties* temp = _impl_.renderlayerproperties_;
  _impl_.renderlayerproperties_ = nullptr;
  return temp;
}
inline ::HmiWidget::TRenderLayerProperties* TNodeParam::_internal_mutable_renderlayerproperties() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.renderlayerproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TRenderLayerProperties>(GetArenaForAllocation());
    _impl_.renderlayerproperties_ = p;
  }
  return _impl_.renderlayerproperties_;
}
inline ::HmiWidget::TRenderLayerProperties* TNodeParam::mutable_renderlayerproperties() {
  ::HmiWidget::TRenderLayerProperties* _msg = _internal_mutable_renderlayerproperties();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.renderLayerProperties)
  return _msg;
}
inline void TNodeParam::set_allocated_renderlayerproperties(::HmiWidget::TRenderLayerProperties* renderlayerproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.renderlayerproperties_;
  }
  if (renderlayerproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(renderlayerproperties);
    if (message_arena != submessage_arena) {
      renderlayerproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderlayerproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.renderlayerproperties_ = renderlayerproperties;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeParam.renderLayerProperties)
}

// optional .HmiWidget.TNodeProperties nodeProperties = 7;
inline bool TNodeParam::_internal_has_nodeproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nodeproperties_ != nullptr);
  return value;
}
inline bool TNodeParam::has_nodeproperties() const {
  return _internal_has_nodeproperties();
}
inline void TNodeParam::clear_nodeproperties() {
  if (_impl_.nodeproperties_ != nullptr) _impl_.nodeproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HmiWidget::TNodeProperties& TNodeParam::_internal_nodeproperties() const {
  const ::HmiWidget::TNodeProperties* p = _impl_.nodeproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TNodeProperties&>(
      ::HmiWidget::_TNodeProperties_default_instance_);
}
inline const ::HmiWidget::TNodeProperties& TNodeParam::nodeproperties() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.nodeProperties)
  return _internal_nodeproperties();
}
inline void TNodeParam::unsafe_arena_set_allocated_nodeproperties(
    ::HmiWidget::TNodeProperties* nodeproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nodeproperties_);
  }
  _impl_.nodeproperties_ = nodeproperties;
  if (nodeproperties) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeParam.nodeProperties)
}
inline ::HmiWidget::TNodeProperties* TNodeParam::release_nodeproperties() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TNodeProperties* temp = _impl_.nodeproperties_;
  _impl_.nodeproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TNodeProperties* TNodeParam::unsafe_arena_release_nodeproperties() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeParam.nodeProperties)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TNodeProperties* temp = _impl_.nodeproperties_;
  _impl_.nodeproperties_ = nullptr;
  return temp;
}
inline ::HmiWidget::TNodeProperties* TNodeParam::_internal_mutable_nodeproperties() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.nodeproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TNodeProperties>(GetArenaForAllocation());
    _impl_.nodeproperties_ = p;
  }
  return _impl_.nodeproperties_;
}
inline ::HmiWidget::TNodeProperties* TNodeParam::mutable_nodeproperties() {
  ::HmiWidget::TNodeProperties* _msg = _internal_mutable_nodeproperties();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.nodeProperties)
  return _msg;
}
inline void TNodeParam::set_allocated_nodeproperties(::HmiWidget::TNodeProperties* nodeproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nodeproperties_;
  }
  if (nodeproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nodeproperties);
    if (message_arena != submessage_arena) {
      nodeproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodeproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.nodeproperties_ = nodeproperties;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeParam.nodeProperties)
}

// optional .HmiWidget.TCameraNodeProperties cameraNodeProperties = 8;
inline bool TNodeParam::_internal_has_cameranodeproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cameranodeproperties_ != nullptr);
  return value;
}
inline bool TNodeParam::has_cameranodeproperties() const {
  return _internal_has_cameranodeproperties();
}
inline void TNodeParam::clear_cameranodeproperties() {
  if (_impl_.cameranodeproperties_ != nullptr) _impl_.cameranodeproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HmiWidget::TCameraNodeProperties& TNodeParam::_internal_cameranodeproperties() const {
  const ::HmiWidget::TCameraNodeProperties* p = _impl_.cameranodeproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TCameraNodeProperties&>(
      ::HmiWidget::_TCameraNodeProperties_default_instance_);
}
inline const ::HmiWidget::TCameraNodeProperties& TNodeParam::cameranodeproperties() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.cameraNodeProperties)
  return _internal_cameranodeproperties();
}
inline void TNodeParam::unsafe_arena_set_allocated_cameranodeproperties(
    ::HmiWidget::TCameraNodeProperties* cameranodeproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameranodeproperties_);
  }
  _impl_.cameranodeproperties_ = cameranodeproperties;
  if (cameranodeproperties) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeParam.cameraNodeProperties)
}
inline ::HmiWidget::TCameraNodeProperties* TNodeParam::release_cameranodeproperties() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TCameraNodeProperties* temp = _impl_.cameranodeproperties_;
  _impl_.cameranodeproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TCameraNodeProperties* TNodeParam::unsafe_arena_release_cameranodeproperties() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeParam.cameraNodeProperties)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TCameraNodeProperties* temp = _impl_.cameranodeproperties_;
  _impl_.cameranodeproperties_ = nullptr;
  return temp;
}
inline ::HmiWidget::TCameraNodeProperties* TNodeParam::_internal_mutable_cameranodeproperties() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.cameranodeproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TCameraNodeProperties>(GetArenaForAllocation());
    _impl_.cameranodeproperties_ = p;
  }
  return _impl_.cameranodeproperties_;
}
inline ::HmiWidget::TCameraNodeProperties* TNodeParam::mutable_cameranodeproperties() {
  ::HmiWidget::TCameraNodeProperties* _msg = _internal_mutable_cameranodeproperties();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.cameraNodeProperties)
  return _msg;
}
inline void TNodeParam::set_allocated_cameranodeproperties(::HmiWidget::TCameraNodeProperties* cameranodeproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cameranodeproperties_;
  }
  if (cameranodeproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cameranodeproperties);
    if (message_arena != submessage_arena) {
      cameranodeproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameranodeproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.cameranodeproperties_ = cameranodeproperties;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeParam.cameraNodeProperties)
}

// optional .HmiWidget.TTextNodeProperties textNodeProperties = 9;
inline bool TNodeParam::_internal_has_textnodeproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.textnodeproperties_ != nullptr);
  return value;
}
inline bool TNodeParam::has_textnodeproperties() const {
  return _internal_has_textnodeproperties();
}
inline void TNodeParam::clear_textnodeproperties() {
  if (_impl_.textnodeproperties_ != nullptr) _impl_.textnodeproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::HmiWidget::TTextNodeProperties& TNodeParam::_internal_textnodeproperties() const {
  const ::HmiWidget::TTextNodeProperties* p = _impl_.textnodeproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TTextNodeProperties&>(
      ::HmiWidget::_TTextNodeProperties_default_instance_);
}
inline const ::HmiWidget::TTextNodeProperties& TNodeParam::textnodeproperties() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.textNodeProperties)
  return _internal_textnodeproperties();
}
inline void TNodeParam::unsafe_arena_set_allocated_textnodeproperties(
    ::HmiWidget::TTextNodeProperties* textnodeproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.textnodeproperties_);
  }
  _impl_.textnodeproperties_ = textnodeproperties;
  if (textnodeproperties) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeParam.textNodeProperties)
}
inline ::HmiWidget::TTextNodeProperties* TNodeParam::release_textnodeproperties() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TTextNodeProperties* temp = _impl_.textnodeproperties_;
  _impl_.textnodeproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TTextNodeProperties* TNodeParam::unsafe_arena_release_textnodeproperties() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeParam.textNodeProperties)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TTextNodeProperties* temp = _impl_.textnodeproperties_;
  _impl_.textnodeproperties_ = nullptr;
  return temp;
}
inline ::HmiWidget::TTextNodeProperties* TNodeParam::_internal_mutable_textnodeproperties() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.textnodeproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TTextNodeProperties>(GetArenaForAllocation());
    _impl_.textnodeproperties_ = p;
  }
  return _impl_.textnodeproperties_;
}
inline ::HmiWidget::TTextNodeProperties* TNodeParam::mutable_textnodeproperties() {
  ::HmiWidget::TTextNodeProperties* _msg = _internal_mutable_textnodeproperties();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.textNodeProperties)
  return _msg;
}
inline void TNodeParam::set_allocated_textnodeproperties(::HmiWidget::TTextNodeProperties* textnodeproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.textnodeproperties_;
  }
  if (textnodeproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(textnodeproperties);
    if (message_arena != submessage_arena) {
      textnodeproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textnodeproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.textnodeproperties_ = textnodeproperties;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeParam.textNodeProperties)
}

// repeated .TIdentifier useImport = 5;
inline int TNodeParam::_internal_useimport_size() const {
  return _impl_.useimport_.size();
}
inline int TNodeParam::useimport_size() const {
  return _internal_useimport_size();
}
inline ::TIdentifier* TNodeParam::mutable_useimport(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeParam.useImport)
  return _impl_.useimport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TNodeParam::mutable_useimport() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TNodeParam.useImport)
  return &_impl_.useimport_;
}
inline const ::TIdentifier& TNodeParam::_internal_useimport(int index) const {
  return _impl_.useimport_.Get(index);
}
inline const ::TIdentifier& TNodeParam::useimport(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeParam.useImport)
  return _internal_useimport(index);
}
inline ::TIdentifier* TNodeParam::_internal_add_useimport() {
  return _impl_.useimport_.Add();
}
inline ::TIdentifier* TNodeParam::add_useimport() {
  ::TIdentifier* _add = _internal_add_useimport();
  // @@protoc_insertion_point(field_add:HmiWidget.TNodeParam.useImport)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TNodeParam::useimport() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TNodeParam.useImport)
  return _impl_.useimport_;
}

// -------------------------------------------------------------------

// TUniform

// optional .TDataBinding name = 1;
inline bool TUniform::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  return value;
}
inline bool TUniform::has_name() const {
  return _internal_has_name();
}
inline const ::TDataBinding& TUniform::_internal_name() const {
  const ::TDataBinding* p = _impl_.name_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUniform::name() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUniform.name)
  return _internal_name();
}
inline void TUniform::unsafe_arena_set_allocated_name(
    ::TDataBinding* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  _impl_.name_ = name;
  if (name) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUniform.name)
}
inline ::TDataBinding* TUniform::release_name() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.name_;
  _impl_.name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUniform::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUniform.name)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.name_;
  _impl_.name_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUniform::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.name_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.name_ = p;
  }
  return _impl_.name_;
}
inline ::TDataBinding* TUniform::mutable_name() {
  ::TDataBinding* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUniform.name)
  return _msg;
}
inline void TUniform::set_allocated_name(::TDataBinding* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_ = name;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUniform.name)
}

// optional .TDataBinding value = 2;
inline bool TUniform::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool TUniform::has_value() const {
  return _internal_has_value();
}
inline const ::TDataBinding& TUniform::_internal_value() const {
  const ::TDataBinding* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUniform::value() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUniform.value)
  return _internal_value();
}
inline void TUniform::unsafe_arena_set_allocated_value(
    ::TDataBinding* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUniform.value)
}
inline ::TDataBinding* TUniform::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUniform::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUniform.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUniform::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::TDataBinding* TUniform::mutable_value() {
  ::TDataBinding* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUniform.value)
  return _msg;
}
inline void TUniform::set_allocated_value(::TDataBinding* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUniform.value)
}

// -------------------------------------------------------------------

// TNodeTransform

// optional .TDataBinding scale = 1;
inline bool TNodeTransform::_internal_has_scale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scale_ != nullptr);
  return value;
}
inline bool TNodeTransform::has_scale() const {
  return _internal_has_scale();
}
inline const ::TDataBinding& TNodeTransform::_internal_scale() const {
  const ::TDataBinding* p = _impl_.scale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeTransform::scale() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeTransform.scale)
  return _internal_scale();
}
inline void TNodeTransform::unsafe_arena_set_allocated_scale(
    ::TDataBinding* scale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  _impl_.scale_ = scale;
  if (scale) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeTransform.scale)
}
inline ::TDataBinding* TNodeTransform::release_scale() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeTransform::unsafe_arena_release_scale() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeTransform.scale)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.scale_;
  _impl_.scale_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeTransform::_internal_mutable_scale() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.scale_ = p;
  }
  return _impl_.scale_;
}
inline ::TDataBinding* TNodeTransform::mutable_scale() {
  ::TDataBinding* _msg = _internal_mutable_scale();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeTransform.scale)
  return _msg;
}
inline void TNodeTransform::set_allocated_scale(::TDataBinding* scale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scale_);
  }
  if (scale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scale));
    if (message_arena != submessage_arena) {
      scale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scale_ = scale;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeTransform.scale)
}

// optional .TDataBinding rotation = 2;
inline bool TNodeTransform::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool TNodeTransform::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::TDataBinding& TNodeTransform::_internal_rotation() const {
  const ::TDataBinding* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeTransform::rotation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeTransform.rotation)
  return _internal_rotation();
}
inline void TNodeTransform::unsafe_arena_set_allocated_rotation(
    ::TDataBinding* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeTransform.rotation)
}
inline ::TDataBinding* TNodeTransform::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeTransform::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeTransform.rotation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeTransform::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::TDataBinding* TNodeTransform::mutable_rotation() {
  ::TDataBinding* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeTransform.rotation)
  return _msg;
}
inline void TNodeTransform::set_allocated_rotation(::TDataBinding* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeTransform.rotation)
}

// optional .TDataBinding translation = 3;
inline bool TNodeTransform::_internal_has_translation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.translation_ != nullptr);
  return value;
}
inline bool TNodeTransform::has_translation() const {
  return _internal_has_translation();
}
inline const ::TDataBinding& TNodeTransform::_internal_translation() const {
  const ::TDataBinding* p = _impl_.translation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeTransform::translation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeTransform.translation)
  return _internal_translation();
}
inline void TNodeTransform::unsafe_arena_set_allocated_translation(
    ::TDataBinding* translation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  _impl_.translation_ = translation;
  if (translation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeTransform.translation)
}
inline ::TDataBinding* TNodeTransform::release_translation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeTransform::unsafe_arena_release_translation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeTransform.translation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.translation_;
  _impl_.translation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeTransform::_internal_mutable_translation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.translation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.translation_ = p;
  }
  return _impl_.translation_;
}
inline ::TDataBinding* TNodeTransform::mutable_translation() {
  ::TDataBinding* _msg = _internal_mutable_translation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeTransform.translation)
  return _msg;
}
inline void TNodeTransform::set_allocated_translation(::TDataBinding* translation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.translation_);
  }
  if (translation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(translation));
    if (message_arena != submessage_arena) {
      translation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, translation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.translation_ = translation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeTransform.translation)
}

// -------------------------------------------------------------------

// TRenderLayerProperties

// optional .TDataBinding renderPassEnabled = 1;
inline bool TRenderLayerProperties::_internal_has_renderpassenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderpassenabled_ != nullptr);
  return value;
}
inline bool TRenderLayerProperties::has_renderpassenabled() const {
  return _internal_has_renderpassenabled();
}
inline const ::TDataBinding& TRenderLayerProperties::_internal_renderpassenabled() const {
  const ::TDataBinding* p = _impl_.renderpassenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderLayerProperties::renderpassenabled() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderLayerProperties.renderPassEnabled)
  return _internal_renderpassenabled();
}
inline void TRenderLayerProperties::unsafe_arena_set_allocated_renderpassenabled(
    ::TDataBinding* renderpassenabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderpassenabled_);
  }
  _impl_.renderpassenabled_ = renderpassenabled;
  if (renderpassenabled) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderLayerProperties.renderPassEnabled)
}
inline ::TDataBinding* TRenderLayerProperties::release_renderpassenabled() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.renderpassenabled_;
  _impl_.renderpassenabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::unsafe_arena_release_renderpassenabled() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderLayerProperties.renderPassEnabled)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.renderpassenabled_;
  _impl_.renderpassenabled_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::_internal_mutable_renderpassenabled() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.renderpassenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.renderpassenabled_ = p;
  }
  return _impl_.renderpassenabled_;
}
inline ::TDataBinding* TRenderLayerProperties::mutable_renderpassenabled() {
  ::TDataBinding* _msg = _internal_mutable_renderpassenabled();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderLayerProperties.renderPassEnabled)
  return _msg;
}
inline void TRenderLayerProperties::set_allocated_renderpassenabled(::TDataBinding* renderpassenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderpassenabled_);
  }
  if (renderpassenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderpassenabled));
    if (message_arena != submessage_arena) {
      renderpassenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderpassenabled, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.renderpassenabled_ = renderpassenabled;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderLayerProperties.renderPassEnabled)
}

// optional .TDataBinding renderTargetScale = 2;
inline bool TRenderLayerProperties::_internal_has_rendertargetscale() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rendertargetscale_ != nullptr);
  return value;
}
inline bool TRenderLayerProperties::has_rendertargetscale() const {
  return _internal_has_rendertargetscale();
}
inline const ::TDataBinding& TRenderLayerProperties::_internal_rendertargetscale() const {
  const ::TDataBinding* p = _impl_.rendertargetscale_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderLayerProperties::rendertargetscale() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderLayerProperties.renderTargetScale)
  return _internal_rendertargetscale();
}
inline void TRenderLayerProperties::unsafe_arena_set_allocated_rendertargetscale(
    ::TDataBinding* rendertargetscale) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rendertargetscale_);
  }
  _impl_.rendertargetscale_ = rendertargetscale;
  if (rendertargetscale) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderLayerProperties.renderTargetScale)
}
inline ::TDataBinding* TRenderLayerProperties::release_rendertargetscale() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rendertargetscale_;
  _impl_.rendertargetscale_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::unsafe_arena_release_rendertargetscale() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderLayerProperties.renderTargetScale)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rendertargetscale_;
  _impl_.rendertargetscale_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::_internal_mutable_rendertargetscale() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rendertargetscale_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rendertargetscale_ = p;
  }
  return _impl_.rendertargetscale_;
}
inline ::TDataBinding* TRenderLayerProperties::mutable_rendertargetscale() {
  ::TDataBinding* _msg = _internal_mutable_rendertargetscale();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderLayerProperties.renderTargetScale)
  return _msg;
}
inline void TRenderLayerProperties::set_allocated_rendertargetscale(::TDataBinding* rendertargetscale) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rendertargetscale_);
  }
  if (rendertargetscale) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rendertargetscale));
    if (message_arena != submessage_arena) {
      rendertargetscale = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rendertargetscale, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rendertargetscale_ = rendertargetscale;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderLayerProperties.renderTargetScale)
}

// optional .TDataBinding boundingBoxRootName = 3;
inline bool TRenderLayerProperties::_internal_has_boundingboxrootname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boundingboxrootname_ != nullptr);
  return value;
}
inline bool TRenderLayerProperties::has_boundingboxrootname() const {
  return _internal_has_boundingboxrootname();
}
inline const ::TDataBinding& TRenderLayerProperties::_internal_boundingboxrootname() const {
  const ::TDataBinding* p = _impl_.boundingboxrootname_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderLayerProperties::boundingboxrootname() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderLayerProperties.boundingBoxRootName)
  return _internal_boundingboxrootname();
}
inline void TRenderLayerProperties::unsafe_arena_set_allocated_boundingboxrootname(
    ::TDataBinding* boundingboxrootname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundingboxrootname_);
  }
  _impl_.boundingboxrootname_ = boundingboxrootname;
  if (boundingboxrootname) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderLayerProperties.boundingBoxRootName)
}
inline ::TDataBinding* TRenderLayerProperties::release_boundingboxrootname() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.boundingboxrootname_;
  _impl_.boundingboxrootname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::unsafe_arena_release_boundingboxrootname() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderLayerProperties.boundingBoxRootName)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.boundingboxrootname_;
  _impl_.boundingboxrootname_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::_internal_mutable_boundingboxrootname() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.boundingboxrootname_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.boundingboxrootname_ = p;
  }
  return _impl_.boundingboxrootname_;
}
inline ::TDataBinding* TRenderLayerProperties::mutable_boundingboxrootname() {
  ::TDataBinding* _msg = _internal_mutable_boundingboxrootname();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderLayerProperties.boundingBoxRootName)
  return _msg;
}
inline void TRenderLayerProperties::set_allocated_boundingboxrootname(::TDataBinding* boundingboxrootname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundingboxrootname_);
  }
  if (boundingboxrootname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingboxrootname));
    if (message_arena != submessage_arena) {
      boundingboxrootname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingboxrootname, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.boundingboxrootname_ = boundingboxrootname;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderLayerProperties.boundingBoxRootName)
}

// optional .TDataBinding borderSize = 4;
inline bool TRenderLayerProperties::_internal_has_bordersize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bordersize_ != nullptr);
  return value;
}
inline bool TRenderLayerProperties::has_bordersize() const {
  return _internal_has_bordersize();
}
inline const ::TDataBinding& TRenderLayerProperties::_internal_bordersize() const {
  const ::TDataBinding* p = _impl_.bordersize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderLayerProperties::bordersize() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderLayerProperties.borderSize)
  return _internal_bordersize();
}
inline void TRenderLayerProperties::unsafe_arena_set_allocated_bordersize(
    ::TDataBinding* bordersize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bordersize_);
  }
  _impl_.bordersize_ = bordersize;
  if (bordersize) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderLayerProperties.borderSize)
}
inline ::TDataBinding* TRenderLayerProperties::release_bordersize() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bordersize_;
  _impl_.bordersize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::unsafe_arena_release_bordersize() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderLayerProperties.borderSize)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bordersize_;
  _impl_.bordersize_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderLayerProperties::_internal_mutable_bordersize() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bordersize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bordersize_ = p;
  }
  return _impl_.bordersize_;
}
inline ::TDataBinding* TRenderLayerProperties::mutable_bordersize() {
  ::TDataBinding* _msg = _internal_mutable_bordersize();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderLayerProperties.borderSize)
  return _msg;
}
inline void TRenderLayerProperties::set_allocated_bordersize(::TDataBinding* bordersize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bordersize_);
  }
  if (bordersize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bordersize));
    if (message_arena != submessage_arena) {
      bordersize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bordersize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bordersize_ = bordersize;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderLayerProperties.borderSize)
}

// -------------------------------------------------------------------

// TNodeProperties_TRenderPassName

// required .TDataBinding name = 1;
inline bool TNodeProperties_TRenderPassName::_internal_has_name() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.name_ != nullptr);
  return value;
}
inline bool TNodeProperties_TRenderPassName::has_name() const {
  return _internal_has_name();
}
inline const ::TDataBinding& TNodeProperties_TRenderPassName::_internal_name() const {
  const ::TDataBinding* p = _impl_.name_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties_TRenderPassName::name() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TRenderPassName.name)
  return _internal_name();
}
inline void TNodeProperties_TRenderPassName::unsafe_arena_set_allocated_name(
    ::TDataBinding* name) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  _impl_.name_ = name;
  if (name) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TRenderPassName.name)
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::release_name() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.name_;
  _impl_.name_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::unsafe_arena_release_name() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TRenderPassName.name)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.name_;
  _impl_.name_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::_internal_mutable_name() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.name_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.name_ = p;
  }
  return _impl_.name_;
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::mutable_name() {
  ::TDataBinding* _msg = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TRenderPassName.name)
  return _msg;
}
inline void TNodeProperties_TRenderPassName::set_allocated_name(::TDataBinding* name) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.name_);
  }
  if (name) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(name));
    if (message_arena != submessage_arena) {
      name = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, name, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.name_ = name;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TRenderPassName.name)
}

// optional .TDataBinding enabled = 2;
inline bool TNodeProperties_TRenderPassName::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enabled_ != nullptr);
  return value;
}
inline bool TNodeProperties_TRenderPassName::has_enabled() const {
  return _internal_has_enabled();
}
inline const ::TDataBinding& TNodeProperties_TRenderPassName::_internal_enabled() const {
  const ::TDataBinding* p = _impl_.enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties_TRenderPassName::enabled() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TRenderPassName.enabled)
  return _internal_enabled();
}
inline void TNodeProperties_TRenderPassName::unsafe_arena_set_allocated_enabled(
    ::TDataBinding* enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  _impl_.enabled_ = enabled;
  if (enabled) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TRenderPassName.enabled)
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::release_enabled() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::unsafe_arena_release_enabled() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TRenderPassName.enabled)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::_internal_mutable_enabled() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.enabled_ = p;
  }
  return _impl_.enabled_;
}
inline ::TDataBinding* TNodeProperties_TRenderPassName::mutable_enabled() {
  ::TDataBinding* _msg = _internal_mutable_enabled();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TRenderPassName.enabled)
  return _msg;
}
inline void TNodeProperties_TRenderPassName::set_allocated_enabled(::TDataBinding* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled));
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TRenderPassName.enabled)
}

// -------------------------------------------------------------------

// TNodeProperties_TBoundingVolume_TBoundingBox

// optional .TDataBinding minBound = 1;
inline bool TNodeProperties_TBoundingVolume_TBoundingBox::_internal_has_minbound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.minbound_ != nullptr);
  return value;
}
inline bool TNodeProperties_TBoundingVolume_TBoundingBox::has_minbound() const {
  return _internal_has_minbound();
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingBox::_internal_minbound() const {
  const ::TDataBinding* p = _impl_.minbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingBox::minbound() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.minBound)
  return _internal_minbound();
}
inline void TNodeProperties_TBoundingVolume_TBoundingBox::unsafe_arena_set_allocated_minbound(
    ::TDataBinding* minbound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minbound_);
  }
  _impl_.minbound_ = minbound;
  if (minbound) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.minBound)
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::release_minbound() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.minbound_;
  _impl_.minbound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::unsafe_arena_release_minbound() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.minBound)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.minbound_;
  _impl_.minbound_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::_internal_mutable_minbound() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.minbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.minbound_ = p;
  }
  return _impl_.minbound_;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::mutable_minbound() {
  ::TDataBinding* _msg = _internal_mutable_minbound();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.minBound)
  return _msg;
}
inline void TNodeProperties_TBoundingVolume_TBoundingBox::set_allocated_minbound(::TDataBinding* minbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.minbound_);
  }
  if (minbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(minbound));
    if (message_arena != submessage_arena) {
      minbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, minbound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.minbound_ = minbound;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.minBound)
}

// optional .TDataBinding maxBound = 2;
inline bool TNodeProperties_TBoundingVolume_TBoundingBox::_internal_has_maxbound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.maxbound_ != nullptr);
  return value;
}
inline bool TNodeProperties_TBoundingVolume_TBoundingBox::has_maxbound() const {
  return _internal_has_maxbound();
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingBox::_internal_maxbound() const {
  const ::TDataBinding* p = _impl_.maxbound_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingBox::maxbound() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.maxBound)
  return _internal_maxbound();
}
inline void TNodeProperties_TBoundingVolume_TBoundingBox::unsafe_arena_set_allocated_maxbound(
    ::TDataBinding* maxbound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maxbound_);
  }
  _impl_.maxbound_ = maxbound;
  if (maxbound) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.maxBound)
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::release_maxbound() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.maxbound_;
  _impl_.maxbound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::unsafe_arena_release_maxbound() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.maxBound)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.maxbound_;
  _impl_.maxbound_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::_internal_mutable_maxbound() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.maxbound_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.maxbound_ = p;
  }
  return _impl_.maxbound_;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingBox::mutable_maxbound() {
  ::TDataBinding* _msg = _internal_mutable_maxbound();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.maxBound)
  return _msg;
}
inline void TNodeProperties_TBoundingVolume_TBoundingBox::set_allocated_maxbound(::TDataBinding* maxbound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.maxbound_);
  }
  if (maxbound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(maxbound));
    if (message_arena != submessage_arena) {
      maxbound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, maxbound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.maxbound_ = maxbound;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox.maxBound)
}

// -------------------------------------------------------------------

// TNodeProperties_TBoundingVolume_TBoundingSphere

// optional .TDataBinding centerPosition = 1;
inline bool TNodeProperties_TBoundingVolume_TBoundingSphere::_internal_has_centerposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.centerposition_ != nullptr);
  return value;
}
inline bool TNodeProperties_TBoundingVolume_TBoundingSphere::has_centerposition() const {
  return _internal_has_centerposition();
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingSphere::_internal_centerposition() const {
  const ::TDataBinding* p = _impl_.centerposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingSphere::centerposition() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.centerPosition)
  return _internal_centerposition();
}
inline void TNodeProperties_TBoundingVolume_TBoundingSphere::unsafe_arena_set_allocated_centerposition(
    ::TDataBinding* centerposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.centerposition_);
  }
  _impl_.centerposition_ = centerposition;
  if (centerposition) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.centerPosition)
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::release_centerposition() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.centerposition_;
  _impl_.centerposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::unsafe_arena_release_centerposition() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.centerPosition)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.centerposition_;
  _impl_.centerposition_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::_internal_mutable_centerposition() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.centerposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.centerposition_ = p;
  }
  return _impl_.centerposition_;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::mutable_centerposition() {
  ::TDataBinding* _msg = _internal_mutable_centerposition();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.centerPosition)
  return _msg;
}
inline void TNodeProperties_TBoundingVolume_TBoundingSphere::set_allocated_centerposition(::TDataBinding* centerposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.centerposition_);
  }
  if (centerposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(centerposition));
    if (message_arena != submessage_arena) {
      centerposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, centerposition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.centerposition_ = centerposition;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.centerPosition)
}

// optional .TDataBinding radius = 2;
inline bool TNodeProperties_TBoundingVolume_TBoundingSphere::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.radius_ != nullptr);
  return value;
}
inline bool TNodeProperties_TBoundingVolume_TBoundingSphere::has_radius() const {
  return _internal_has_radius();
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingSphere::_internal_radius() const {
  const ::TDataBinding* p = _impl_.radius_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties_TBoundingVolume_TBoundingSphere::radius() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.radius)
  return _internal_radius();
}
inline void TNodeProperties_TBoundingVolume_TBoundingSphere::unsafe_arena_set_allocated_radius(
    ::TDataBinding* radius) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  _impl_.radius_ = radius;
  if (radius) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.radius)
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::release_radius() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::unsafe_arena_release_radius() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.radius)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::_internal_mutable_radius() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.radius_ = p;
  }
  return _impl_.radius_;
}
inline ::TDataBinding* TNodeProperties_TBoundingVolume_TBoundingSphere::mutable_radius() {
  ::TDataBinding* _msg = _internal_mutable_radius();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.radius)
  return _msg;
}
inline void TNodeProperties_TBoundingVolume_TBoundingSphere::set_allocated_radius(::TDataBinding* radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  if (radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius));
    if (message_arena != submessage_arena) {
      radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radius, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.radius_ = radius;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere.radius)
}

// -------------------------------------------------------------------

// TNodeProperties_TBoundingVolume

// optional .HmiWidget.TNodeProperties.TBoundingVolume.TBoundingBox boundingBox = 1;
inline bool TNodeProperties_TBoundingVolume::_internal_has_boundingbox() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boundingbox_ != nullptr);
  return value;
}
inline bool TNodeProperties_TBoundingVolume::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void TNodeProperties_TBoundingVolume::clear_boundingbox() {
  if (_impl_.boundingbox_ != nullptr) _impl_.boundingbox_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox& TNodeProperties_TBoundingVolume::_internal_boundingbox() const {
  const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* p = _impl_.boundingbox_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox&>(
      ::HmiWidget::_TNodeProperties_TBoundingVolume_TBoundingBox_default_instance_);
}
inline const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox& TNodeProperties_TBoundingVolume::boundingbox() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TBoundingVolume.boundingBox)
  return _internal_boundingbox();
}
inline void TNodeProperties_TBoundingVolume::unsafe_arena_set_allocated_boundingbox(
    ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* boundingbox) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundingbox_);
  }
  _impl_.boundingbox_ = boundingbox;
  if (boundingbox) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.boundingBox)
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* TNodeProperties_TBoundingVolume::release_boundingbox() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* temp = _impl_.boundingbox_;
  _impl_.boundingbox_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* TNodeProperties_TBoundingVolume::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TBoundingVolume.boundingBox)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* temp = _impl_.boundingbox_;
  _impl_.boundingbox_ = nullptr;
  return temp;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* TNodeProperties_TBoundingVolume::_internal_mutable_boundingbox() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox>(GetArenaForAllocation());
    _impl_.boundingbox_ = p;
  }
  return _impl_.boundingbox_;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* TNodeProperties_TBoundingVolume::mutable_boundingbox() {
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* _msg = _internal_mutable_boundingbox();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TBoundingVolume.boundingBox)
  return _msg;
}
inline void TNodeProperties_TBoundingVolume::set_allocated_boundingbox(::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingBox* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.boundingBox)
}

// optional .HmiWidget.TNodeProperties.TBoundingVolume.TBoundingSphere boundingSphere = 2;
inline bool TNodeProperties_TBoundingVolume::_internal_has_boundingsphere() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boundingsphere_ != nullptr);
  return value;
}
inline bool TNodeProperties_TBoundingVolume::has_boundingsphere() const {
  return _internal_has_boundingsphere();
}
inline void TNodeProperties_TBoundingVolume::clear_boundingsphere() {
  if (_impl_.boundingsphere_ != nullptr) _impl_.boundingsphere_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere& TNodeProperties_TBoundingVolume::_internal_boundingsphere() const {
  const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* p = _impl_.boundingsphere_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere&>(
      ::HmiWidget::_TNodeProperties_TBoundingVolume_TBoundingSphere_default_instance_);
}
inline const ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere& TNodeProperties_TBoundingVolume::boundingsphere() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.TBoundingVolume.boundingSphere)
  return _internal_boundingsphere();
}
inline void TNodeProperties_TBoundingVolume::unsafe_arena_set_allocated_boundingsphere(
    ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* boundingsphere) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundingsphere_);
  }
  _impl_.boundingsphere_ = boundingsphere;
  if (boundingsphere) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.boundingSphere)
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* TNodeProperties_TBoundingVolume::release_boundingsphere() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* temp = _impl_.boundingsphere_;
  _impl_.boundingsphere_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* TNodeProperties_TBoundingVolume::unsafe_arena_release_boundingsphere() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.TBoundingVolume.boundingSphere)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* temp = _impl_.boundingsphere_;
  _impl_.boundingsphere_ = nullptr;
  return temp;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* TNodeProperties_TBoundingVolume::_internal_mutable_boundingsphere() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.boundingsphere_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere>(GetArenaForAllocation());
    _impl_.boundingsphere_ = p;
  }
  return _impl_.boundingsphere_;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* TNodeProperties_TBoundingVolume::mutable_boundingsphere() {
  ::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* _msg = _internal_mutable_boundingsphere();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.TBoundingVolume.boundingSphere)
  return _msg;
}
inline void TNodeProperties_TBoundingVolume::set_allocated_boundingsphere(::HmiWidget::TNodeProperties_TBoundingVolume_TBoundingSphere* boundingsphere) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boundingsphere_;
  }
  if (boundingsphere) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundingsphere);
    if (message_arena != submessage_arena) {
      boundingsphere = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingsphere, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.boundingsphere_ = boundingsphere;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.TBoundingVolume.boundingSphere)
}

// -------------------------------------------------------------------

// TNodeProperties

// optional .TDataBinding visible = 1;
inline bool TNodeProperties::_internal_has_visible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visible_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_visible() const {
  return _internal_has_visible();
}
inline const ::TDataBinding& TNodeProperties::_internal_visible() const {
  const ::TDataBinding* p = _impl_.visible_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::visible() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.visible)
  return _internal_visible();
}
inline void TNodeProperties::unsafe_arena_set_allocated_visible(
    ::TDataBinding* visible) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_);
  }
  _impl_.visible_ = visible;
  if (visible) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.visible)
}
inline ::TDataBinding* TNodeProperties::release_visible() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.visible_;
  _impl_.visible_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_visible() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.visible)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.visible_;
  _impl_.visible_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_visible() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.visible_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.visible_ = p;
  }
  return _impl_.visible_;
}
inline ::TDataBinding* TNodeProperties::mutable_visible() {
  ::TDataBinding* _msg = _internal_mutable_visible();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.visible)
  return _msg;
}
inline void TNodeProperties::set_allocated_visible(::TDataBinding* visible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visible_);
  }
  if (visible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visible));
    if (message_arena != submessage_arena) {
      visible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visible, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.visible_ = visible;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.visible)
}

// optional .TDataBinding renderOrderRank = 2;
inline bool TNodeProperties::_internal_has_renderorderrank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderorderrank_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_renderorderrank() const {
  return _internal_has_renderorderrank();
}
inline const ::TDataBinding& TNodeProperties::_internal_renderorderrank() const {
  const ::TDataBinding* p = _impl_.renderorderrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::renderorderrank() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.renderOrderRank)
  return _internal_renderorderrank();
}
inline void TNodeProperties::unsafe_arena_set_allocated_renderorderrank(
    ::TDataBinding* renderorderrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderrank_);
  }
  _impl_.renderorderrank_ = renderorderrank;
  if (renderorderrank) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.renderOrderRank)
}
inline ::TDataBinding* TNodeProperties::release_renderorderrank() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.renderorderrank_;
  _impl_.renderorderrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_renderorderrank() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.renderOrderRank)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.renderorderrank_;
  _impl_.renderorderrank_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_renderorderrank() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.renderorderrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.renderorderrank_ = p;
  }
  return _impl_.renderorderrank_;
}
inline ::TDataBinding* TNodeProperties::mutable_renderorderrank() {
  ::TDataBinding* _msg = _internal_mutable_renderorderrank();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.renderOrderRank)
  return _msg;
}
inline void TNodeProperties::set_allocated_renderorderrank(::TDataBinding* renderorderrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderrank_);
  }
  if (renderorderrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderorderrank));
    if (message_arena != submessage_arena) {
      renderorderrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderorderrank, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.renderorderrank_ = renderorderrank;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.renderOrderRank)
}

// optional .TDataBinding childSortOrderRank = 3;
inline bool TNodeProperties::_internal_has_childsortorderrank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childsortorderrank_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_childsortorderrank() const {
  return _internal_has_childsortorderrank();
}
inline const ::TDataBinding& TNodeProperties::_internal_childsortorderrank() const {
  const ::TDataBinding* p = _impl_.childsortorderrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::childsortorderrank() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.childSortOrderRank)
  return _internal_childsortorderrank();
}
inline void TNodeProperties::unsafe_arena_set_allocated_childsortorderrank(
    ::TDataBinding* childsortorderrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childsortorderrank_);
  }
  _impl_.childsortorderrank_ = childsortorderrank;
  if (childsortorderrank) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.childSortOrderRank)
}
inline ::TDataBinding* TNodeProperties::release_childsortorderrank() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.childsortorderrank_;
  _impl_.childsortorderrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_childsortorderrank() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.childSortOrderRank)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.childsortorderrank_;
  _impl_.childsortorderrank_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_childsortorderrank() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.childsortorderrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.childsortorderrank_ = p;
  }
  return _impl_.childsortorderrank_;
}
inline ::TDataBinding* TNodeProperties::mutable_childsortorderrank() {
  ::TDataBinding* _msg = _internal_mutable_childsortorderrank();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.childSortOrderRank)
  return _msg;
}
inline void TNodeProperties::set_allocated_childsortorderrank(::TDataBinding* childsortorderrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childsortorderrank_);
  }
  if (childsortorderrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childsortorderrank));
    if (message_arena != submessage_arena) {
      childsortorderrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childsortorderrank, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.childsortorderrank_ = childsortorderrank;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.childSortOrderRank)
}

// optional .TDataBinding scopeMask = 4 [deprecated = true];
inline bool TNodeProperties::_internal_has_scopemask() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scopemask_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_scopemask() const {
  return _internal_has_scopemask();
}
inline const ::TDataBinding& TNodeProperties::_internal_scopemask() const {
  const ::TDataBinding* p = _impl_.scopemask_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::scopemask() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.scopeMask)
  return _internal_scopemask();
}
inline void TNodeProperties::unsafe_arena_set_allocated_scopemask(
    ::TDataBinding* scopemask) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scopemask_);
  }
  _impl_.scopemask_ = scopemask;
  if (scopemask) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.scopeMask)
}
inline ::TDataBinding* TNodeProperties::release_scopemask() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.scopemask_;
  _impl_.scopemask_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_scopemask() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.scopeMask)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.scopemask_;
  _impl_.scopemask_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_scopemask() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.scopemask_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.scopemask_ = p;
  }
  return _impl_.scopemask_;
}
inline ::TDataBinding* TNodeProperties::mutable_scopemask() {
  ::TDataBinding* _msg = _internal_mutable_scopemask();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.scopeMask)
  return _msg;
}
inline void TNodeProperties::set_allocated_scopemask(::TDataBinding* scopemask) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scopemask_);
  }
  if (scopemask) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scopemask));
    if (message_arena != submessage_arena) {
      scopemask = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scopemask, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.scopemask_ = scopemask;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.scopeMask)
}

// optional .TDataBinding renderOrderBin = 5;
inline bool TNodeProperties::_internal_has_renderorderbin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderorderbin_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_renderorderbin() const {
  return _internal_has_renderorderbin();
}
inline const ::TDataBinding& TNodeProperties::_internal_renderorderbin() const {
  const ::TDataBinding* p = _impl_.renderorderbin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::renderorderbin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.renderOrderBin)
  return _internal_renderorderbin();
}
inline void TNodeProperties::unsafe_arena_set_allocated_renderorderbin(
    ::TDataBinding* renderorderbin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderbin_);
  }
  _impl_.renderorderbin_ = renderorderbin;
  if (renderorderbin) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.renderOrderBin)
}
inline ::TDataBinding* TNodeProperties::release_renderorderbin() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.renderorderbin_;
  _impl_.renderorderbin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_renderorderbin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.renderOrderBin)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.renderorderbin_;
  _impl_.renderorderbin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_renderorderbin() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.renderorderbin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.renderorderbin_ = p;
  }
  return _impl_.renderorderbin_;
}
inline ::TDataBinding* TNodeProperties::mutable_renderorderbin() {
  ::TDataBinding* _msg = _internal_mutable_renderorderbin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.renderOrderBin)
  return _msg;
}
inline void TNodeProperties::set_allocated_renderorderbin(::TDataBinding* renderorderbin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderbin_);
  }
  if (renderorderbin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderorderbin));
    if (message_arena != submessage_arena) {
      renderorderbin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderorderbin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.renderorderbin_ = renderorderbin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.renderOrderBin)
}

// optional .TDataBinding material = 6;
inline bool TNodeProperties::_internal_has_material() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.material_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_material() const {
  return _internal_has_material();
}
inline const ::TDataBinding& TNodeProperties::_internal_material() const {
  const ::TDataBinding* p = _impl_.material_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::material() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.material)
  return _internal_material();
}
inline void TNodeProperties::unsafe_arena_set_allocated_material(
    ::TDataBinding* material) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.material_);
  }
  _impl_.material_ = material;
  if (material) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.material)
}
inline ::TDataBinding* TNodeProperties::release_material() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.material_;
  _impl_.material_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_material() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.material)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.material_;
  _impl_.material_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_material() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.material_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.material_ = p;
  }
  return _impl_.material_;
}
inline ::TDataBinding* TNodeProperties::mutable_material() {
  ::TDataBinding* _msg = _internal_mutable_material();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.material)
  return _msg;
}
inline void TNodeProperties::set_allocated_material(::TDataBinding* material) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.material_);
  }
  if (material) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(material));
    if (message_arena != submessage_arena) {
      material = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, material, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.material_ = material;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.material)
}

// optional .TDataBinding renderPassName = 7 [deprecated = true];
inline bool TNodeProperties::_internal_has_renderpassname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderpassname_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_renderpassname() const {
  return _internal_has_renderpassname();
}
inline const ::TDataBinding& TNodeProperties::_internal_renderpassname() const {
  const ::TDataBinding* p = _impl_.renderpassname_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::renderpassname() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.renderPassName)
  return _internal_renderpassname();
}
inline void TNodeProperties::unsafe_arena_set_allocated_renderpassname(
    ::TDataBinding* renderpassname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderpassname_);
  }
  _impl_.renderpassname_ = renderpassname;
  if (renderpassname) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.renderPassName)
}
inline ::TDataBinding* TNodeProperties::release_renderpassname() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.renderpassname_;
  _impl_.renderpassname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_renderpassname() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.renderPassName)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.renderpassname_;
  _impl_.renderpassname_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_renderpassname() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.renderpassname_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.renderpassname_ = p;
  }
  return _impl_.renderpassname_;
}
inline ::TDataBinding* TNodeProperties::mutable_renderpassname() {
  ::TDataBinding* _msg = _internal_mutable_renderpassname();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.renderPassName)
  return _msg;
}
inline void TNodeProperties::set_allocated_renderpassname(::TDataBinding* renderpassname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderpassname_);
  }
  if (renderpassname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderpassname));
    if (message_arena != submessage_arena) {
      renderpassname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderpassname, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.renderpassname_ = renderpassname;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.renderPassName)
}

// optional .TDataBinding renderPassEnabled = 8 [deprecated = true];
inline bool TNodeProperties::_internal_has_renderpassenabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderpassenabled_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_renderpassenabled() const {
  return _internal_has_renderpassenabled();
}
inline const ::TDataBinding& TNodeProperties::_internal_renderpassenabled() const {
  const ::TDataBinding* p = _impl_.renderpassenabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TNodeProperties::renderpassenabled() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.renderPassEnabled)
  return _internal_renderpassenabled();
}
inline void TNodeProperties::unsafe_arena_set_allocated_renderpassenabled(
    ::TDataBinding* renderpassenabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderpassenabled_);
  }
  _impl_.renderpassenabled_ = renderpassenabled;
  if (renderpassenabled) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.renderPassEnabled)
}
inline ::TDataBinding* TNodeProperties::release_renderpassenabled() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.renderpassenabled_;
  _impl_.renderpassenabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TNodeProperties::unsafe_arena_release_renderpassenabled() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.renderPassEnabled)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.renderpassenabled_;
  _impl_.renderpassenabled_ = nullptr;
  return temp;
}
inline ::TDataBinding* TNodeProperties::_internal_mutable_renderpassenabled() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.renderpassenabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.renderpassenabled_ = p;
  }
  return _impl_.renderpassenabled_;
}
inline ::TDataBinding* TNodeProperties::mutable_renderpassenabled() {
  ::TDataBinding* _msg = _internal_mutable_renderpassenabled();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.renderPassEnabled)
  return _msg;
}
inline void TNodeProperties::set_allocated_renderpassenabled(::TDataBinding* renderpassenabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderpassenabled_);
  }
  if (renderpassenabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderpassenabled));
    if (message_arena != submessage_arena) {
      renderpassenabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderpassenabled, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.renderpassenabled_ = renderpassenabled;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.renderPassEnabled)
}

// repeated .HmiWidget.TNodeProperties.TRenderPassName renderPassNameEXT = 9;
inline int TNodeProperties::_internal_renderpassnameext_size() const {
  return _impl_.renderpassnameext_.size();
}
inline int TNodeProperties::renderpassnameext_size() const {
  return _internal_renderpassnameext_size();
}
inline void TNodeProperties::clear_renderpassnameext() {
  _impl_.renderpassnameext_.Clear();
}
inline ::HmiWidget::TNodeProperties_TRenderPassName* TNodeProperties::mutable_renderpassnameext(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.renderPassNameEXT)
  return _impl_.renderpassnameext_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >*
TNodeProperties::mutable_renderpassnameext() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TNodeProperties.renderPassNameEXT)
  return &_impl_.renderpassnameext_;
}
inline const ::HmiWidget::TNodeProperties_TRenderPassName& TNodeProperties::_internal_renderpassnameext(int index) const {
  return _impl_.renderpassnameext_.Get(index);
}
inline const ::HmiWidget::TNodeProperties_TRenderPassName& TNodeProperties::renderpassnameext(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.renderPassNameEXT)
  return _internal_renderpassnameext(index);
}
inline ::HmiWidget::TNodeProperties_TRenderPassName* TNodeProperties::_internal_add_renderpassnameext() {
  return _impl_.renderpassnameext_.Add();
}
inline ::HmiWidget::TNodeProperties_TRenderPassName* TNodeProperties::add_renderpassnameext() {
  ::HmiWidget::TNodeProperties_TRenderPassName* _add = _internal_add_renderpassnameext();
  // @@protoc_insertion_point(field_add:HmiWidget.TNodeProperties.renderPassNameEXT)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >&
TNodeProperties::renderpassnameext() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TNodeProperties.renderPassNameEXT)
  return _impl_.renderpassnameext_;
}

// optional .HmiWidget.TNodeProperties.TBoundingVolume boundingVolume = 10;
inline bool TNodeProperties::_internal_has_boundingvolume() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.boundingvolume_ != nullptr);
  return value;
}
inline bool TNodeProperties::has_boundingvolume() const {
  return _internal_has_boundingvolume();
}
inline void TNodeProperties::clear_boundingvolume() {
  if (_impl_.boundingvolume_ != nullptr) _impl_.boundingvolume_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::HmiWidget::TNodeProperties_TBoundingVolume& TNodeProperties::_internal_boundingvolume() const {
  const ::HmiWidget::TNodeProperties_TBoundingVolume* p = _impl_.boundingvolume_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TNodeProperties_TBoundingVolume&>(
      ::HmiWidget::_TNodeProperties_TBoundingVolume_default_instance_);
}
inline const ::HmiWidget::TNodeProperties_TBoundingVolume& TNodeProperties::boundingvolume() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.boundingVolume)
  return _internal_boundingvolume();
}
inline void TNodeProperties::unsafe_arena_set_allocated_boundingvolume(
    ::HmiWidget::TNodeProperties_TBoundingVolume* boundingvolume) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.boundingvolume_);
  }
  _impl_.boundingvolume_ = boundingvolume;
  if (boundingvolume) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TNodeProperties.boundingVolume)
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume* TNodeProperties::release_boundingvolume() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TNodeProperties_TBoundingVolume* temp = _impl_.boundingvolume_;
  _impl_.boundingvolume_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume* TNodeProperties::unsafe_arena_release_boundingvolume() {
  // @@protoc_insertion_point(field_release:HmiWidget.TNodeProperties.boundingVolume)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TNodeProperties_TBoundingVolume* temp = _impl_.boundingvolume_;
  _impl_.boundingvolume_ = nullptr;
  return temp;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume* TNodeProperties::_internal_mutable_boundingvolume() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.boundingvolume_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TNodeProperties_TBoundingVolume>(GetArenaForAllocation());
    _impl_.boundingvolume_ = p;
  }
  return _impl_.boundingvolume_;
}
inline ::HmiWidget::TNodeProperties_TBoundingVolume* TNodeProperties::mutable_boundingvolume() {
  ::HmiWidget::TNodeProperties_TBoundingVolume* _msg = _internal_mutable_boundingvolume();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.boundingVolume)
  return _msg;
}
inline void TNodeProperties::set_allocated_boundingvolume(::HmiWidget::TNodeProperties_TBoundingVolume* boundingvolume) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.boundingvolume_;
  }
  if (boundingvolume) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(boundingvolume);
    if (message_arena != submessage_arena) {
      boundingvolume = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingvolume, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.boundingvolume_ = boundingvolume;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TNodeProperties.boundingVolume)
}

// repeated .HmiWidget.TNodeProperties.TRenderPassName renderPassEnabledEXT = 11;
inline int TNodeProperties::_internal_renderpassenabledext_size() const {
  return _impl_.renderpassenabledext_.size();
}
inline int TNodeProperties::renderpassenabledext_size() const {
  return _internal_renderpassenabledext_size();
}
inline void TNodeProperties::clear_renderpassenabledext() {
  _impl_.renderpassenabledext_.Clear();
}
inline ::HmiWidget::TNodeProperties_TRenderPassName* TNodeProperties::mutable_renderpassenabledext(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TNodeProperties.renderPassEnabledEXT)
  return _impl_.renderpassenabledext_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >*
TNodeProperties::mutable_renderpassenabledext() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TNodeProperties.renderPassEnabledEXT)
  return &_impl_.renderpassenabledext_;
}
inline const ::HmiWidget::TNodeProperties_TRenderPassName& TNodeProperties::_internal_renderpassenabledext(int index) const {
  return _impl_.renderpassenabledext_.Get(index);
}
inline const ::HmiWidget::TNodeProperties_TRenderPassName& TNodeProperties::renderpassenabledext(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TNodeProperties.renderPassEnabledEXT)
  return _internal_renderpassenabledext(index);
}
inline ::HmiWidget::TNodeProperties_TRenderPassName* TNodeProperties::_internal_add_renderpassenabledext() {
  return _impl_.renderpassenabledext_.Add();
}
inline ::HmiWidget::TNodeProperties_TRenderPassName* TNodeProperties::add_renderpassenabledext() {
  ::HmiWidget::TNodeProperties_TRenderPassName* _add = _internal_add_renderpassenabledext();
  // @@protoc_insertion_point(field_add:HmiWidget.TNodeProperties.renderPassEnabledEXT)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeProperties_TRenderPassName >&
TNodeProperties::renderpassenabledext() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TNodeProperties.renderPassEnabledEXT)
  return _impl_.renderpassenabledext_;
}

// -------------------------------------------------------------------

// TTextNodeProperties

// optional .TDataBinding textContent = 1;
inline bool TTextNodeProperties::_internal_has_textcontent() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.textcontent_ != nullptr);
  return value;
}
inline bool TTextNodeProperties::has_textcontent() const {
  return _internal_has_textcontent();
}
inline const ::TDataBinding& TTextNodeProperties::_internal_textcontent() const {
  const ::TDataBinding* p = _impl_.textcontent_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TTextNodeProperties::textcontent() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TTextNodeProperties.textContent)
  return _internal_textcontent();
}
inline void TTextNodeProperties::unsafe_arena_set_allocated_textcontent(
    ::TDataBinding* textcontent) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.textcontent_);
  }
  _impl_.textcontent_ = textcontent;
  if (textcontent) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TTextNodeProperties.textContent)
}
inline ::TDataBinding* TTextNodeProperties::release_textcontent() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.textcontent_;
  _impl_.textcontent_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TTextNodeProperties::unsafe_arena_release_textcontent() {
  // @@protoc_insertion_point(field_release:HmiWidget.TTextNodeProperties.textContent)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.textcontent_;
  _impl_.textcontent_ = nullptr;
  return temp;
}
inline ::TDataBinding* TTextNodeProperties::_internal_mutable_textcontent() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.textcontent_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.textcontent_ = p;
  }
  return _impl_.textcontent_;
}
inline ::TDataBinding* TTextNodeProperties::mutable_textcontent() {
  ::TDataBinding* _msg = _internal_mutable_textcontent();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TTextNodeProperties.textContent)
  return _msg;
}
inline void TTextNodeProperties::set_allocated_textcontent(::TDataBinding* textcontent) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.textcontent_);
  }
  if (textcontent) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(textcontent));
    if (message_arena != submessage_arena) {
      textcontent = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, textcontent, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.textcontent_ = textcontent;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TTextNodeProperties.textContent)
}

// -------------------------------------------------------------------

// TCameraNodeProperties

// optional .TDataBinding projectionType = 1;
inline bool TCameraNodeProperties::_internal_has_projectiontype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.projectiontype_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_projectiontype() const {
  return _internal_has_projectiontype();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_projectiontype() const {
  const ::TDataBinding* p = _impl_.projectiontype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::projectiontype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.projectionType)
  return _internal_projectiontype();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_projectiontype(
    ::TDataBinding* projectiontype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectiontype_);
  }
  _impl_.projectiontype_ = projectiontype;
  if (projectiontype) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.projectionType)
}
inline ::TDataBinding* TCameraNodeProperties::release_projectiontype() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.projectiontype_;
  _impl_.projectiontype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_projectiontype() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.projectionType)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.projectiontype_;
  _impl_.projectiontype_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_projectiontype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.projectiontype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.projectiontype_ = p;
  }
  return _impl_.projectiontype_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_projectiontype() {
  ::TDataBinding* _msg = _internal_mutable_projectiontype();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.projectionType)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_projectiontype(::TDataBinding* projectiontype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.projectiontype_);
  }
  if (projectiontype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(projectiontype));
    if (message_arena != submessage_arena) {
      projectiontype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, projectiontype, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.projectiontype_ = projectiontype;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.projectionType)
}

// optional .TDataBinding horizontalFOV = 2;
inline bool TCameraNodeProperties::_internal_has_horizontalfov() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.horizontalfov_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_horizontalfov() const {
  return _internal_has_horizontalfov();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_horizontalfov() const {
  const ::TDataBinding* p = _impl_.horizontalfov_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::horizontalfov() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.horizontalFOV)
  return _internal_horizontalfov();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_horizontalfov(
    ::TDataBinding* horizontalfov) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontalfov_);
  }
  _impl_.horizontalfov_ = horizontalfov;
  if (horizontalfov) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.horizontalFOV)
}
inline ::TDataBinding* TCameraNodeProperties::release_horizontalfov() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.horizontalfov_;
  _impl_.horizontalfov_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_horizontalfov() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.horizontalFOV)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.horizontalfov_;
  _impl_.horizontalfov_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_horizontalfov() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.horizontalfov_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.horizontalfov_ = p;
  }
  return _impl_.horizontalfov_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_horizontalfov() {
  ::TDataBinding* _msg = _internal_mutable_horizontalfov();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.horizontalFOV)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_horizontalfov(::TDataBinding* horizontalfov) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontalfov_);
  }
  if (horizontalfov) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(horizontalfov));
    if (message_arena != submessage_arena) {
      horizontalfov = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontalfov, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.horizontalfov_ = horizontalfov;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.horizontalFOV)
}

// optional .TDataBinding aspectRatio = 3;
inline bool TCameraNodeProperties::_internal_has_aspectratio() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.aspectratio_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_aspectratio() const {
  return _internal_has_aspectratio();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_aspectratio() const {
  const ::TDataBinding* p = _impl_.aspectratio_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::aspectratio() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.aspectRatio)
  return _internal_aspectratio();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_aspectratio(
    ::TDataBinding* aspectratio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aspectratio_);
  }
  _impl_.aspectratio_ = aspectratio;
  if (aspectratio) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.aspectRatio)
}
inline ::TDataBinding* TCameraNodeProperties::release_aspectratio() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.aspectratio_;
  _impl_.aspectratio_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_aspectratio() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.aspectRatio)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.aspectratio_;
  _impl_.aspectratio_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_aspectratio() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.aspectratio_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.aspectratio_ = p;
  }
  return _impl_.aspectratio_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_aspectratio() {
  ::TDataBinding* _msg = _internal_mutable_aspectratio();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.aspectRatio)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_aspectratio(::TDataBinding* aspectratio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.aspectratio_);
  }
  if (aspectratio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(aspectratio));
    if (message_arena != submessage_arena) {
      aspectratio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, aspectratio, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.aspectratio_ = aspectratio;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.aspectRatio)
}

// optional .TDataBinding horizontalFocalLength = 4;
inline bool TCameraNodeProperties::_internal_has_horizontalfocallength() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.horizontalfocallength_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_horizontalfocallength() const {
  return _internal_has_horizontalfocallength();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_horizontalfocallength() const {
  const ::TDataBinding* p = _impl_.horizontalfocallength_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::horizontalfocallength() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.horizontalFocalLength)
  return _internal_horizontalfocallength();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_horizontalfocallength(
    ::TDataBinding* horizontalfocallength) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontalfocallength_);
  }
  _impl_.horizontalfocallength_ = horizontalfocallength;
  if (horizontalfocallength) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.horizontalFocalLength)
}
inline ::TDataBinding* TCameraNodeProperties::release_horizontalfocallength() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.horizontalfocallength_;
  _impl_.horizontalfocallength_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_horizontalfocallength() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.horizontalFocalLength)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.horizontalfocallength_;
  _impl_.horizontalfocallength_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_horizontalfocallength() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.horizontalfocallength_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.horizontalfocallength_ = p;
  }
  return _impl_.horizontalfocallength_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_horizontalfocallength() {
  ::TDataBinding* _msg = _internal_mutable_horizontalfocallength();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.horizontalFocalLength)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_horizontalfocallength(::TDataBinding* horizontalfocallength) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontalfocallength_);
  }
  if (horizontalfocallength) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(horizontalfocallength));
    if (message_arena != submessage_arena) {
      horizontalfocallength = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontalfocallength, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.horizontalfocallength_ = horizontalfocallength;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.horizontalFocalLength)
}

// optional .TDataBinding viewport = 5;
inline bool TCameraNodeProperties::_internal_has_viewport() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewport_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_viewport() const {
  return _internal_has_viewport();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_viewport() const {
  const ::TDataBinding* p = _impl_.viewport_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::viewport() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.viewport)
  return _internal_viewport();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_viewport(
    ::TDataBinding* viewport) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewport_);
  }
  _impl_.viewport_ = viewport;
  if (viewport) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.viewport)
}
inline ::TDataBinding* TCameraNodeProperties::release_viewport() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.viewport_;
  _impl_.viewport_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_viewport() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.viewport)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.viewport_;
  _impl_.viewport_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_viewport() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.viewport_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.viewport_ = p;
  }
  return _impl_.viewport_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_viewport() {
  ::TDataBinding* _msg = _internal_mutable_viewport();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.viewport)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_viewport(::TDataBinding* viewport) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewport_);
  }
  if (viewport) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewport));
    if (message_arena != submessage_arena) {
      viewport = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewport, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.viewport_ = viewport;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.viewport)
}

// optional .TDataBinding nearPlane = 6;
inline bool TCameraNodeProperties::_internal_has_nearplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nearplane_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_nearplane() const {
  return _internal_has_nearplane();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_nearplane() const {
  const ::TDataBinding* p = _impl_.nearplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::nearplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.nearPlane)
  return _internal_nearplane();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_nearplane(
    ::TDataBinding* nearplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nearplane_);
  }
  _impl_.nearplane_ = nearplane;
  if (nearplane) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.nearPlane)
}
inline ::TDataBinding* TCameraNodeProperties::release_nearplane() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.nearplane_;
  _impl_.nearplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_nearplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.nearPlane)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.nearplane_;
  _impl_.nearplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_nearplane() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.nearplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.nearplane_ = p;
  }
  return _impl_.nearplane_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_nearplane() {
  ::TDataBinding* _msg = _internal_mutable_nearplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.nearPlane)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_nearplane(::TDataBinding* nearplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nearplane_);
  }
  if (nearplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nearplane));
    if (message_arena != submessage_arena) {
      nearplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nearplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.nearplane_ = nearplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.nearPlane)
}

// optional .TDataBinding farPlane = 7;
inline bool TCameraNodeProperties::_internal_has_farplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.farplane_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_farplane() const {
  return _internal_has_farplane();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_farplane() const {
  const ::TDataBinding* p = _impl_.farplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::farplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.farPlane)
  return _internal_farplane();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_farplane(
    ::TDataBinding* farplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.farplane_);
  }
  _impl_.farplane_ = farplane;
  if (farplane) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.farPlane)
}
inline ::TDataBinding* TCameraNodeProperties::release_farplane() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.farplane_;
  _impl_.farplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_farplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.farPlane)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.farplane_;
  _impl_.farplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_farplane() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.farplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.farplane_ = p;
  }
  return _impl_.farplane_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_farplane() {
  ::TDataBinding* _msg = _internal_mutable_farplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.farPlane)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_farplane(::TDataBinding* farplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.farplane_);
  }
  if (farplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(farplane));
    if (message_arena != submessage_arena) {
      farplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, farplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.farplane_ = farplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.farPlane)
}

// optional .TDataBinding rightPlane = 8;
inline bool TCameraNodeProperties::_internal_has_rightplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightplane_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_rightplane() const {
  return _internal_has_rightplane();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_rightplane() const {
  const ::TDataBinding* p = _impl_.rightplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::rightplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.rightPlane)
  return _internal_rightplane();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_rightplane(
    ::TDataBinding* rightplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightplane_);
  }
  _impl_.rightplane_ = rightplane;
  if (rightplane) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.rightPlane)
}
inline ::TDataBinding* TCameraNodeProperties::release_rightplane() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.rightplane_;
  _impl_.rightplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_rightplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.rightPlane)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.rightplane_;
  _impl_.rightplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_rightplane() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.rightplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightplane_ = p;
  }
  return _impl_.rightplane_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_rightplane() {
  ::TDataBinding* _msg = _internal_mutable_rightplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.rightPlane)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_rightplane(::TDataBinding* rightplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightplane_);
  }
  if (rightplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightplane));
    if (message_arena != submessage_arena) {
      rightplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.rightplane_ = rightplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.rightPlane)
}

// optional .TDataBinding leftPlane = 9;
inline bool TCameraNodeProperties::_internal_has_leftplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftplane_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_leftplane() const {
  return _internal_has_leftplane();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_leftplane() const {
  const ::TDataBinding* p = _impl_.leftplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::leftplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.leftPlane)
  return _internal_leftplane();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_leftplane(
    ::TDataBinding* leftplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftplane_);
  }
  _impl_.leftplane_ = leftplane;
  if (leftplane) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.leftPlane)
}
inline ::TDataBinding* TCameraNodeProperties::release_leftplane() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.leftplane_;
  _impl_.leftplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_leftplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.leftPlane)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.leftplane_;
  _impl_.leftplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_leftplane() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.leftplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftplane_ = p;
  }
  return _impl_.leftplane_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_leftplane() {
  ::TDataBinding* _msg = _internal_mutable_leftplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.leftPlane)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_leftplane(::TDataBinding* leftplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftplane_);
  }
  if (leftplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftplane));
    if (message_arena != submessage_arena) {
      leftplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.leftplane_ = leftplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.leftPlane)
}

// optional .TDataBinding topPlane = 10;
inline bool TCameraNodeProperties::_internal_has_topplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topplane_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_topplane() const {
  return _internal_has_topplane();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_topplane() const {
  const ::TDataBinding* p = _impl_.topplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::topplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.topPlane)
  return _internal_topplane();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_topplane(
    ::TDataBinding* topplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topplane_);
  }
  _impl_.topplane_ = topplane;
  if (topplane) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.topPlane)
}
inline ::TDataBinding* TCameraNodeProperties::release_topplane() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TDataBinding* temp = _impl_.topplane_;
  _impl_.topplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_topplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.topPlane)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TDataBinding* temp = _impl_.topplane_;
  _impl_.topplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_topplane() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.topplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topplane_ = p;
  }
  return _impl_.topplane_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_topplane() {
  ::TDataBinding* _msg = _internal_mutable_topplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.topPlane)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_topplane(::TDataBinding* topplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topplane_);
  }
  if (topplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topplane));
    if (message_arena != submessage_arena) {
      topplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.topplane_ = topplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.topPlane)
}

// optional .TDataBinding bottomPlane = 11;
inline bool TCameraNodeProperties::_internal_has_bottomplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottomplane_ != nullptr);
  return value;
}
inline bool TCameraNodeProperties::has_bottomplane() const {
  return _internal_has_bottomplane();
}
inline const ::TDataBinding& TCameraNodeProperties::_internal_bottomplane() const {
  const ::TDataBinding* p = _impl_.bottomplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCameraNodeProperties::bottomplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCameraNodeProperties.bottomPlane)
  return _internal_bottomplane();
}
inline void TCameraNodeProperties::unsafe_arena_set_allocated_bottomplane(
    ::TDataBinding* bottomplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottomplane_);
  }
  _impl_.bottomplane_ = bottomplane;
  if (bottomplane) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCameraNodeProperties.bottomPlane)
}
inline ::TDataBinding* TCameraNodeProperties::release_bottomplane() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TDataBinding* temp = _impl_.bottomplane_;
  _impl_.bottomplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::unsafe_arena_release_bottomplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCameraNodeProperties.bottomPlane)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TDataBinding* temp = _impl_.bottomplane_;
  _impl_.bottomplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCameraNodeProperties::_internal_mutable_bottomplane() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.bottomplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottomplane_ = p;
  }
  return _impl_.bottomplane_;
}
inline ::TDataBinding* TCameraNodeProperties::mutable_bottomplane() {
  ::TDataBinding* _msg = _internal_mutable_bottomplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCameraNodeProperties.bottomPlane)
  return _msg;
}
inline void TCameraNodeProperties::set_allocated_bottomplane(::TDataBinding* bottomplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottomplane_);
  }
  if (bottomplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottomplane));
    if (message_arena != submessage_arena) {
      bottomplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottomplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.bottomplane_ = bottomplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCameraNodeProperties.bottomPlane)
}

// -------------------------------------------------------------------

// TResourceParam

// required .TIdentifier identifier = 1;
inline bool TResourceParam::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TResourceParam::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TResourceParam::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TResourceParam::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TResourceParam.identifier)
  return _internal_identifier();
}
inline void TResourceParam::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TResourceParam.identifier)
}
inline ::TIdentifier* TResourceParam::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TResourceParam::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TResourceParam.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TResourceParam::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TResourceParam::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TResourceParam.identifier)
  return _msg;
}
inline void TResourceParam::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TResourceParam.identifier)
}

// optional .TDataBinding resource = 2;
inline bool TResourceParam::_internal_has_resource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.resource_ != nullptr);
  return value;
}
inline bool TResourceParam::has_resource() const {
  return _internal_has_resource();
}
inline const ::TDataBinding& TResourceParam::_internal_resource() const {
  const ::TDataBinding* p = _impl_.resource_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TResourceParam::resource() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TResourceParam.resource)
  return _internal_resource();
}
inline void TResourceParam::unsafe_arena_set_allocated_resource(
    ::TDataBinding* resource) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  _impl_.resource_ = resource;
  if (resource) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TResourceParam.resource)
}
inline ::TDataBinding* TResourceParam::release_resource() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TResourceParam::unsafe_arena_release_resource() {
  // @@protoc_insertion_point(field_release:HmiWidget.TResourceParam.resource)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.resource_;
  _impl_.resource_ = nullptr;
  return temp;
}
inline ::TDataBinding* TResourceParam::_internal_mutable_resource() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.resource_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.resource_ = p;
  }
  return _impl_.resource_;
}
inline ::TDataBinding* TResourceParam::mutable_resource() {
  ::TDataBinding* _msg = _internal_mutable_resource();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TResourceParam.resource)
  return _msg;
}
inline void TResourceParam::set_allocated_resource(::TDataBinding* resource) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.resource_);
  }
  if (resource) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(resource));
    if (message_arena != submessage_arena) {
      resource = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, resource, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.resource_ = resource;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TResourceParam.resource)
}

// optional .HmiWidget.TAppearanceParam appearance = 3;
inline bool TResourceParam::_internal_has_appearance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.appearance_ != nullptr);
  return value;
}
inline bool TResourceParam::has_appearance() const {
  return _internal_has_appearance();
}
inline void TResourceParam::clear_appearance() {
  if (_impl_.appearance_ != nullptr) _impl_.appearance_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TAppearanceParam& TResourceParam::_internal_appearance() const {
  const ::HmiWidget::TAppearanceParam* p = _impl_.appearance_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TAppearanceParam&>(
      ::HmiWidget::_TAppearanceParam_default_instance_);
}
inline const ::HmiWidget::TAppearanceParam& TResourceParam::appearance() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TResourceParam.appearance)
  return _internal_appearance();
}
inline void TResourceParam::unsafe_arena_set_allocated_appearance(
    ::HmiWidget::TAppearanceParam* appearance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.appearance_);
  }
  _impl_.appearance_ = appearance;
  if (appearance) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TResourceParam.appearance)
}
inline ::HmiWidget::TAppearanceParam* TResourceParam::release_appearance() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TAppearanceParam* temp = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TAppearanceParam* TResourceParam::unsafe_arena_release_appearance() {
  // @@protoc_insertion_point(field_release:HmiWidget.TResourceParam.appearance)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TAppearanceParam* temp = _impl_.appearance_;
  _impl_.appearance_ = nullptr;
  return temp;
}
inline ::HmiWidget::TAppearanceParam* TResourceParam::_internal_mutable_appearance() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.appearance_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TAppearanceParam>(GetArenaForAllocation());
    _impl_.appearance_ = p;
  }
  return _impl_.appearance_;
}
inline ::HmiWidget::TAppearanceParam* TResourceParam::mutable_appearance() {
  ::HmiWidget::TAppearanceParam* _msg = _internal_mutable_appearance();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TResourceParam.appearance)
  return _msg;
}
inline void TResourceParam::set_allocated_appearance(::HmiWidget::TAppearanceParam* appearance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.appearance_;
  }
  if (appearance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(appearance);
    if (message_arena != submessage_arena) {
      appearance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, appearance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.appearance_ = appearance;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TResourceParam.appearance)
}

// optional .HmiWidget.TRenderPassParam renderPass = 4;
inline bool TResourceParam::_internal_has_renderpass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderpass_ != nullptr);
  return value;
}
inline bool TResourceParam::has_renderpass() const {
  return _internal_has_renderpass();
}
inline void TResourceParam::clear_renderpass() {
  if (_impl_.renderpass_ != nullptr) _impl_.renderpass_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HmiWidget::TRenderPassParam& TResourceParam::_internal_renderpass() const {
  const ::HmiWidget::TRenderPassParam* p = _impl_.renderpass_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TRenderPassParam&>(
      ::HmiWidget::_TRenderPassParam_default_instance_);
}
inline const ::HmiWidget::TRenderPassParam& TResourceParam::renderpass() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TResourceParam.renderPass)
  return _internal_renderpass();
}
inline void TResourceParam::unsafe_arena_set_allocated_renderpass(
    ::HmiWidget::TRenderPassParam* renderpass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderpass_);
  }
  _impl_.renderpass_ = renderpass;
  if (renderpass) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TResourceParam.renderPass)
}
inline ::HmiWidget::TRenderPassParam* TResourceParam::release_renderpass() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TRenderPassParam* temp = _impl_.renderpass_;
  _impl_.renderpass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TRenderPassParam* TResourceParam::unsafe_arena_release_renderpass() {
  // @@protoc_insertion_point(field_release:HmiWidget.TResourceParam.renderPass)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TRenderPassParam* temp = _impl_.renderpass_;
  _impl_.renderpass_ = nullptr;
  return temp;
}
inline ::HmiWidget::TRenderPassParam* TResourceParam::_internal_mutable_renderpass() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.renderpass_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TRenderPassParam>(GetArenaForAllocation());
    _impl_.renderpass_ = p;
  }
  return _impl_.renderpass_;
}
inline ::HmiWidget::TRenderPassParam* TResourceParam::mutable_renderpass() {
  ::HmiWidget::TRenderPassParam* _msg = _internal_mutable_renderpass();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TResourceParam.renderPass)
  return _msg;
}
inline void TResourceParam::set_allocated_renderpass(::HmiWidget::TRenderPassParam* renderpass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.renderpass_;
  }
  if (renderpass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(renderpass);
    if (message_arena != submessage_arena) {
      renderpass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderpass, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.renderpass_ = renderpass;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TResourceParam.renderPass)
}

// optional .HmiWidget.TBlitPassParam blitPass = 5;
inline bool TResourceParam::_internal_has_blitpass() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.blitpass_ != nullptr);
  return value;
}
inline bool TResourceParam::has_blitpass() const {
  return _internal_has_blitpass();
}
inline void TResourceParam::clear_blitpass() {
  if (_impl_.blitpass_ != nullptr) _impl_.blitpass_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HmiWidget::TBlitPassParam& TResourceParam::_internal_blitpass() const {
  const ::HmiWidget::TBlitPassParam* p = _impl_.blitpass_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TBlitPassParam&>(
      ::HmiWidget::_TBlitPassParam_default_instance_);
}
inline const ::HmiWidget::TBlitPassParam& TResourceParam::blitpass() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TResourceParam.blitPass)
  return _internal_blitpass();
}
inline void TResourceParam::unsafe_arena_set_allocated_blitpass(
    ::HmiWidget::TBlitPassParam* blitpass) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.blitpass_);
  }
  _impl_.blitpass_ = blitpass;
  if (blitpass) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TResourceParam.blitPass)
}
inline ::HmiWidget::TBlitPassParam* TResourceParam::release_blitpass() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TBlitPassParam* temp = _impl_.blitpass_;
  _impl_.blitpass_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TBlitPassParam* TResourceParam::unsafe_arena_release_blitpass() {
  // @@protoc_insertion_point(field_release:HmiWidget.TResourceParam.blitPass)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TBlitPassParam* temp = _impl_.blitpass_;
  _impl_.blitpass_ = nullptr;
  return temp;
}
inline ::HmiWidget::TBlitPassParam* TResourceParam::_internal_mutable_blitpass() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.blitpass_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TBlitPassParam>(GetArenaForAllocation());
    _impl_.blitpass_ = p;
  }
  return _impl_.blitpass_;
}
inline ::HmiWidget::TBlitPassParam* TResourceParam::mutable_blitpass() {
  ::HmiWidget::TBlitPassParam* _msg = _internal_mutable_blitpass();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TResourceParam.blitPass)
  return _msg;
}
inline void TResourceParam::set_allocated_blitpass(::HmiWidget::TBlitPassParam* blitpass) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.blitpass_;
  }
  if (blitpass) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(blitpass);
    if (message_arena != submessage_arena) {
      blitpass = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, blitpass, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.blitpass_ = blitpass;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TResourceParam.blitPass)
}

// -------------------------------------------------------------------

// TAppearanceParam

// repeated .HmiWidget.TUniform uniform = 1;
inline int TAppearanceParam::_internal_uniform_size() const {
  return _impl_.uniform_.size();
}
inline int TAppearanceParam::uniform_size() const {
  return _internal_uniform_size();
}
inline void TAppearanceParam::clear_uniform() {
  _impl_.uniform_.Clear();
}
inline ::HmiWidget::TUniform* TAppearanceParam::mutable_uniform(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TAppearanceParam.uniform)
  return _impl_.uniform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >*
TAppearanceParam::mutable_uniform() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TAppearanceParam.uniform)
  return &_impl_.uniform_;
}
inline const ::HmiWidget::TUniform& TAppearanceParam::_internal_uniform(int index) const {
  return _impl_.uniform_.Get(index);
}
inline const ::HmiWidget::TUniform& TAppearanceParam::uniform(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TAppearanceParam.uniform)
  return _internal_uniform(index);
}
inline ::HmiWidget::TUniform* TAppearanceParam::_internal_add_uniform() {
  return _impl_.uniform_.Add();
}
inline ::HmiWidget::TUniform* TAppearanceParam::add_uniform() {
  ::HmiWidget::TUniform* _add = _internal_add_uniform();
  // @@protoc_insertion_point(field_add:HmiWidget.TAppearanceParam.uniform)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >&
TAppearanceParam::uniform() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TAppearanceParam.uniform)
  return _impl_.uniform_;
}

// -------------------------------------------------------------------

// TRenderPassParam

// optional .TDataBinding enabled = 1;
inline bool TRenderPassParam::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enabled_ != nullptr);
  return value;
}
inline bool TRenderPassParam::has_enabled() const {
  return _internal_has_enabled();
}
inline const ::TDataBinding& TRenderPassParam::_internal_enabled() const {
  const ::TDataBinding* p = _impl_.enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderPassParam::enabled() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderPassParam.enabled)
  return _internal_enabled();
}
inline void TRenderPassParam::unsafe_arena_set_allocated_enabled(
    ::TDataBinding* enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  _impl_.enabled_ = enabled;
  if (enabled) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderPassParam.enabled)
}
inline ::TDataBinding* TRenderPassParam::release_enabled() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderPassParam::unsafe_arena_release_enabled() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderPassParam.enabled)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderPassParam::_internal_mutable_enabled() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.enabled_ = p;
  }
  return _impl_.enabled_;
}
inline ::TDataBinding* TRenderPassParam::mutable_enabled() {
  ::TDataBinding* _msg = _internal_mutable_enabled();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderPassParam.enabled)
  return _msg;
}
inline void TRenderPassParam::set_allocated_enabled(::TDataBinding* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled));
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderPassParam.enabled)
}

// optional .TDataBinding renderOrderRank = 2;
inline bool TRenderPassParam::_internal_has_renderorderrank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderorderrank_ != nullptr);
  return value;
}
inline bool TRenderPassParam::has_renderorderrank() const {
  return _internal_has_renderorderrank();
}
inline const ::TDataBinding& TRenderPassParam::_internal_renderorderrank() const {
  const ::TDataBinding* p = _impl_.renderorderrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderPassParam::renderorderrank() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderPassParam.renderOrderRank)
  return _internal_renderorderrank();
}
inline void TRenderPassParam::unsafe_arena_set_allocated_renderorderrank(
    ::TDataBinding* renderorderrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderrank_);
  }
  _impl_.renderorderrank_ = renderorderrank;
  if (renderorderrank) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderPassParam.renderOrderRank)
}
inline ::TDataBinding* TRenderPassParam::release_renderorderrank() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.renderorderrank_;
  _impl_.renderorderrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderPassParam::unsafe_arena_release_renderorderrank() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderPassParam.renderOrderRank)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.renderorderrank_;
  _impl_.renderorderrank_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderPassParam::_internal_mutable_renderorderrank() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.renderorderrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.renderorderrank_ = p;
  }
  return _impl_.renderorderrank_;
}
inline ::TDataBinding* TRenderPassParam::mutable_renderorderrank() {
  ::TDataBinding* _msg = _internal_mutable_renderorderrank();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderPassParam.renderOrderRank)
  return _msg;
}
inline void TRenderPassParam::set_allocated_renderorderrank(::TDataBinding* renderorderrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderrank_);
  }
  if (renderorderrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderorderrank));
    if (message_arena != submessage_arena) {
      renderorderrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderorderrank, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.renderorderrank_ = renderorderrank;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderPassParam.renderOrderRank)
}

// optional .TDataBinding viewportOffset = 3;
inline bool TRenderPassParam::_internal_has_viewportoffset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewportoffset_ != nullptr);
  return value;
}
inline bool TRenderPassParam::has_viewportoffset() const {
  return _internal_has_viewportoffset();
}
inline const ::TDataBinding& TRenderPassParam::_internal_viewportoffset() const {
  const ::TDataBinding* p = _impl_.viewportoffset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderPassParam::viewportoffset() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderPassParam.viewportOffset)
  return _internal_viewportoffset();
}
inline void TRenderPassParam::unsafe_arena_set_allocated_viewportoffset(
    ::TDataBinding* viewportoffset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewportoffset_);
  }
  _impl_.viewportoffset_ = viewportoffset;
  if (viewportoffset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderPassParam.viewportOffset)
}
inline ::TDataBinding* TRenderPassParam::release_viewportoffset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.viewportoffset_;
  _impl_.viewportoffset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderPassParam::unsafe_arena_release_viewportoffset() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderPassParam.viewportOffset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.viewportoffset_;
  _impl_.viewportoffset_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderPassParam::_internal_mutable_viewportoffset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.viewportoffset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.viewportoffset_ = p;
  }
  return _impl_.viewportoffset_;
}
inline ::TDataBinding* TRenderPassParam::mutable_viewportoffset() {
  ::TDataBinding* _msg = _internal_mutable_viewportoffset();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderPassParam.viewportOffset)
  return _msg;
}
inline void TRenderPassParam::set_allocated_viewportoffset(::TDataBinding* viewportoffset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewportoffset_);
  }
  if (viewportoffset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewportoffset));
    if (message_arena != submessage_arena) {
      viewportoffset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewportoffset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.viewportoffset_ = viewportoffset;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderPassParam.viewportOffset)
}

// optional .TDataBinding viewportSize = 4;
inline bool TRenderPassParam::_internal_has_viewportsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.viewportsize_ != nullptr);
  return value;
}
inline bool TRenderPassParam::has_viewportsize() const {
  return _internal_has_viewportsize();
}
inline const ::TDataBinding& TRenderPassParam::_internal_viewportsize() const {
  const ::TDataBinding* p = _impl_.viewportsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRenderPassParam::viewportsize() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRenderPassParam.viewportSize)
  return _internal_viewportsize();
}
inline void TRenderPassParam::unsafe_arena_set_allocated_viewportsize(
    ::TDataBinding* viewportsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewportsize_);
  }
  _impl_.viewportsize_ = viewportsize;
  if (viewportsize) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRenderPassParam.viewportSize)
}
inline ::TDataBinding* TRenderPassParam::release_viewportsize() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.viewportsize_;
  _impl_.viewportsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRenderPassParam::unsafe_arena_release_viewportsize() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRenderPassParam.viewportSize)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.viewportsize_;
  _impl_.viewportsize_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRenderPassParam::_internal_mutable_viewportsize() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.viewportsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.viewportsize_ = p;
  }
  return _impl_.viewportsize_;
}
inline ::TDataBinding* TRenderPassParam::mutable_viewportsize() {
  ::TDataBinding* _msg = _internal_mutable_viewportsize();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRenderPassParam.viewportSize)
  return _msg;
}
inline void TRenderPassParam::set_allocated_viewportsize(::TDataBinding* viewportsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.viewportsize_);
  }
  if (viewportsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(viewportsize));
    if (message_arena != submessage_arena) {
      viewportsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, viewportsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.viewportsize_ = viewportsize;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRenderPassParam.viewportSize)
}

// -------------------------------------------------------------------

// TBlitPassParam

// optional .TDataBinding enabled = 1;
inline bool TBlitPassParam::_internal_has_enabled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.enabled_ != nullptr);
  return value;
}
inline bool TBlitPassParam::has_enabled() const {
  return _internal_has_enabled();
}
inline const ::TDataBinding& TBlitPassParam::_internal_enabled() const {
  const ::TDataBinding* p = _impl_.enabled_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TBlitPassParam::enabled() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TBlitPassParam.enabled)
  return _internal_enabled();
}
inline void TBlitPassParam::unsafe_arena_set_allocated_enabled(
    ::TDataBinding* enabled) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  _impl_.enabled_ = enabled;
  if (enabled) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TBlitPassParam.enabled)
}
inline ::TDataBinding* TBlitPassParam::release_enabled() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TBlitPassParam::unsafe_arena_release_enabled() {
  // @@protoc_insertion_point(field_release:HmiWidget.TBlitPassParam.enabled)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.enabled_;
  _impl_.enabled_ = nullptr;
  return temp;
}
inline ::TDataBinding* TBlitPassParam::_internal_mutable_enabled() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.enabled_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.enabled_ = p;
  }
  return _impl_.enabled_;
}
inline ::TDataBinding* TBlitPassParam::mutable_enabled() {
  ::TDataBinding* _msg = _internal_mutable_enabled();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TBlitPassParam.enabled)
  return _msg;
}
inline void TBlitPassParam::set_allocated_enabled(::TDataBinding* enabled) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.enabled_);
  }
  if (enabled) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(enabled));
    if (message_arena != submessage_arena) {
      enabled = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, enabled, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.enabled_ = enabled;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TBlitPassParam.enabled)
}

// optional .TDataBinding renderOrderRank = 2;
inline bool TBlitPassParam::_internal_has_renderorderrank() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderorderrank_ != nullptr);
  return value;
}
inline bool TBlitPassParam::has_renderorderrank() const {
  return _internal_has_renderorderrank();
}
inline const ::TDataBinding& TBlitPassParam::_internal_renderorderrank() const {
  const ::TDataBinding* p = _impl_.renderorderrank_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TBlitPassParam::renderorderrank() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TBlitPassParam.renderOrderRank)
  return _internal_renderorderrank();
}
inline void TBlitPassParam::unsafe_arena_set_allocated_renderorderrank(
    ::TDataBinding* renderorderrank) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderrank_);
  }
  _impl_.renderorderrank_ = renderorderrank;
  if (renderorderrank) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TBlitPassParam.renderOrderRank)
}
inline ::TDataBinding* TBlitPassParam::release_renderorderrank() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.renderorderrank_;
  _impl_.renderorderrank_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TBlitPassParam::unsafe_arena_release_renderorderrank() {
  // @@protoc_insertion_point(field_release:HmiWidget.TBlitPassParam.renderOrderRank)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.renderorderrank_;
  _impl_.renderorderrank_ = nullptr;
  return temp;
}
inline ::TDataBinding* TBlitPassParam::_internal_mutable_renderorderrank() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.renderorderrank_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.renderorderrank_ = p;
  }
  return _impl_.renderorderrank_;
}
inline ::TDataBinding* TBlitPassParam::mutable_renderorderrank() {
  ::TDataBinding* _msg = _internal_mutable_renderorderrank();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TBlitPassParam.renderOrderRank)
  return _msg;
}
inline void TBlitPassParam::set_allocated_renderorderrank(::TDataBinding* renderorderrank) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderorderrank_);
  }
  if (renderorderrank) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(renderorderrank));
    if (message_arena != submessage_arena) {
      renderorderrank = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderorderrank, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.renderorderrank_ = renderorderrank;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TBlitPassParam.renderOrderRank)
}

// -------------------------------------------------------------------

// TDataChangeTrigger

// repeated .TDataBinding value = 1;
inline int TDataChangeTrigger::_internal_value_size() const {
  return _impl_.value_.size();
}
inline int TDataChangeTrigger::value_size() const {
  return _internal_value_size();
}
inline ::TDataBinding* TDataChangeTrigger::mutable_value(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TDataChangeTrigger.value)
  return _impl_.value_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
TDataChangeTrigger::mutable_value() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TDataChangeTrigger.value)
  return &_impl_.value_;
}
inline const ::TDataBinding& TDataChangeTrigger::_internal_value(int index) const {
  return _impl_.value_.Get(index);
}
inline const ::TDataBinding& TDataChangeTrigger::value(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TDataChangeTrigger.value)
  return _internal_value(index);
}
inline ::TDataBinding* TDataChangeTrigger::_internal_add_value() {
  return _impl_.value_.Add();
}
inline ::TDataBinding* TDataChangeTrigger::add_value() {
  ::TDataBinding* _add = _internal_add_value();
  // @@protoc_insertion_point(field_add:HmiWidget.TDataChangeTrigger.value)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
TDataChangeTrigger::value() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TDataChangeTrigger.value)
  return _impl_.value_;
}

// required .HmiWidget.TCommand command = 2;
inline bool TDataChangeTrigger::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.command_ != nullptr);
  return value;
}
inline bool TDataChangeTrigger::has_command() const {
  return _internal_has_command();
}
inline void TDataChangeTrigger::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TCommand& TDataChangeTrigger::_internal_command() const {
  const ::HmiWidget::TCommand* p = _impl_.command_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TCommand&>(
      ::HmiWidget::_TCommand_default_instance_);
}
inline const ::HmiWidget::TCommand& TDataChangeTrigger::command() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TDataChangeTrigger.command)
  return _internal_command();
}
inline void TDataChangeTrigger::unsafe_arena_set_allocated_command(
    ::HmiWidget::TCommand* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  _impl_.command_ = command;
  if (command) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TDataChangeTrigger.command)
}
inline ::HmiWidget::TCommand* TDataChangeTrigger::release_command() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TCommand* temp = _impl_.command_;
  _impl_.command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TCommand* TDataChangeTrigger::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:HmiWidget.TDataChangeTrigger.command)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TCommand* temp = _impl_.command_;
  _impl_.command_ = nullptr;
  return temp;
}
inline ::HmiWidget::TCommand* TDataChangeTrigger::_internal_mutable_command() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.command_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TCommand>(GetArenaForAllocation());
    _impl_.command_ = p;
  }
  return _impl_.command_;
}
inline ::HmiWidget::TCommand* TDataChangeTrigger::mutable_command() {
  ::HmiWidget::TCommand* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TDataChangeTrigger.command)
  return _msg;
}
inline void TDataChangeTrigger::set_allocated_command(::HmiWidget::TCommand* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.command_ = command;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TDataChangeTrigger.command)
}

// -------------------------------------------------------------------

// TConditionalTrigger

// required .TDataBinding condition = 1;
inline bool TConditionalTrigger::_internal_has_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.condition_ != nullptr);
  return value;
}
inline bool TConditionalTrigger::has_condition() const {
  return _internal_has_condition();
}
inline const ::TDataBinding& TConditionalTrigger::_internal_condition() const {
  const ::TDataBinding* p = _impl_.condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TConditionalTrigger::condition() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TConditionalTrigger.condition)
  return _internal_condition();
}
inline void TConditionalTrigger::unsafe_arena_set_allocated_condition(
    ::TDataBinding* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  _impl_.condition_ = condition;
  if (condition) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TConditionalTrigger.condition)
}
inline ::TDataBinding* TConditionalTrigger::release_condition() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TConditionalTrigger::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:HmiWidget.TConditionalTrigger.condition)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
  return temp;
}
inline ::TDataBinding* TConditionalTrigger::_internal_mutable_condition() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.condition_ = p;
  }
  return _impl_.condition_;
}
inline ::TDataBinding* TConditionalTrigger::mutable_condition() {
  ::TDataBinding* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TConditionalTrigger.condition)
  return _msg;
}
inline void TConditionalTrigger::set_allocated_condition(::TDataBinding* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition));
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TConditionalTrigger.condition)
}

// optional .HmiWidget.TCommand command = 2;
inline bool TConditionalTrigger::_internal_has_command() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.command_ != nullptr);
  return value;
}
inline bool TConditionalTrigger::has_command() const {
  return _internal_has_command();
}
inline void TConditionalTrigger::clear_command() {
  if (_impl_.command_ != nullptr) _impl_.command_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TCommand& TConditionalTrigger::_internal_command() const {
  const ::HmiWidget::TCommand* p = _impl_.command_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TCommand&>(
      ::HmiWidget::_TCommand_default_instance_);
}
inline const ::HmiWidget::TCommand& TConditionalTrigger::command() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TConditionalTrigger.command)
  return _internal_command();
}
inline void TConditionalTrigger::unsafe_arena_set_allocated_command(
    ::HmiWidget::TCommand* command) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.command_);
  }
  _impl_.command_ = command;
  if (command) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TConditionalTrigger.command)
}
inline ::HmiWidget::TCommand* TConditionalTrigger::release_command() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TCommand* temp = _impl_.command_;
  _impl_.command_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TCommand* TConditionalTrigger::unsafe_arena_release_command() {
  // @@protoc_insertion_point(field_release:HmiWidget.TConditionalTrigger.command)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TCommand* temp = _impl_.command_;
  _impl_.command_ = nullptr;
  return temp;
}
inline ::HmiWidget::TCommand* TConditionalTrigger::_internal_mutable_command() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.command_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TCommand>(GetArenaForAllocation());
    _impl_.command_ = p;
  }
  return _impl_.command_;
}
inline ::HmiWidget::TCommand* TConditionalTrigger::mutable_command() {
  ::HmiWidget::TCommand* _msg = _internal_mutable_command();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TConditionalTrigger.command)
  return _msg;
}
inline void TConditionalTrigger::set_allocated_command(::HmiWidget::TCommand* command) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.command_;
  }
  if (command) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(command);
    if (message_arena != submessage_arena) {
      command = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, command, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.command_ = command;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TConditionalTrigger.command)
}

// optional .HmiWidget.TCommand elseCommand = 3;
inline bool TConditionalTrigger::_internal_has_elsecommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.elsecommand_ != nullptr);
  return value;
}
inline bool TConditionalTrigger::has_elsecommand() const {
  return _internal_has_elsecommand();
}
inline void TConditionalTrigger::clear_elsecommand() {
  if (_impl_.elsecommand_ != nullptr) _impl_.elsecommand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TCommand& TConditionalTrigger::_internal_elsecommand() const {
  const ::HmiWidget::TCommand* p = _impl_.elsecommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TCommand&>(
      ::HmiWidget::_TCommand_default_instance_);
}
inline const ::HmiWidget::TCommand& TConditionalTrigger::elsecommand() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TConditionalTrigger.elseCommand)
  return _internal_elsecommand();
}
inline void TConditionalTrigger::unsafe_arena_set_allocated_elsecommand(
    ::HmiWidget::TCommand* elsecommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elsecommand_);
  }
  _impl_.elsecommand_ = elsecommand;
  if (elsecommand) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TConditionalTrigger.elseCommand)
}
inline ::HmiWidget::TCommand* TConditionalTrigger::release_elsecommand() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TCommand* temp = _impl_.elsecommand_;
  _impl_.elsecommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TCommand* TConditionalTrigger::unsafe_arena_release_elsecommand() {
  // @@protoc_insertion_point(field_release:HmiWidget.TConditionalTrigger.elseCommand)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TCommand* temp = _impl_.elsecommand_;
  _impl_.elsecommand_ = nullptr;
  return temp;
}
inline ::HmiWidget::TCommand* TConditionalTrigger::_internal_mutable_elsecommand() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.elsecommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TCommand>(GetArenaForAllocation());
    _impl_.elsecommand_ = p;
  }
  return _impl_.elsecommand_;
}
inline ::HmiWidget::TCommand* TConditionalTrigger::mutable_elsecommand() {
  ::HmiWidget::TCommand* _msg = _internal_mutable_elsecommand();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TConditionalTrigger.elseCommand)
  return _msg;
}
inline void TConditionalTrigger::set_allocated_elsecommand(::HmiWidget::TCommand* elsecommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.elsecommand_;
  }
  if (elsecommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(elsecommand);
    if (message_arena != submessage_arena) {
      elsecommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elsecommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.elsecommand_ = elsecommand;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TConditionalTrigger.elseCommand)
}

// optional .HmiWidget.TETriggerExecMode execMode = 4;
inline bool TConditionalTrigger::_internal_has_execmode() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TConditionalTrigger::has_execmode() const {
  return _internal_has_execmode();
}
inline void TConditionalTrigger::clear_execmode() {
  _impl_.execmode_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::HmiWidget::TETriggerExecMode TConditionalTrigger::_internal_execmode() const {
  return static_cast< ::HmiWidget::TETriggerExecMode >(_impl_.execmode_);
}
inline ::HmiWidget::TETriggerExecMode TConditionalTrigger::execmode() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TConditionalTrigger.execMode)
  return _internal_execmode();
}
inline void TConditionalTrigger::_internal_set_execmode(::HmiWidget::TETriggerExecMode value) {
  assert(::HmiWidget::TETriggerExecMode_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.execmode_ = value;
}
inline void TConditionalTrigger::set_execmode(::HmiWidget::TETriggerExecMode value) {
  _internal_set_execmode(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TConditionalTrigger.execMode)
}

// optional bool elseCommandOnFallBackOnly = 5;
inline bool TConditionalTrigger::_internal_has_elsecommandonfallbackonly() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TConditionalTrigger::has_elsecommandonfallbackonly() const {
  return _internal_has_elsecommandonfallbackonly();
}
inline void TConditionalTrigger::clear_elsecommandonfallbackonly() {
  _impl_.elsecommandonfallbackonly_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool TConditionalTrigger::_internal_elsecommandonfallbackonly() const {
  return _impl_.elsecommandonfallbackonly_;
}
inline bool TConditionalTrigger::elsecommandonfallbackonly() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TConditionalTrigger.elseCommandOnFallBackOnly)
  return _internal_elsecommandonfallbackonly();
}
inline void TConditionalTrigger::_internal_set_elsecommandonfallbackonly(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.elsecommandonfallbackonly_ = value;
}
inline void TConditionalTrigger::set_elsecommandonfallbackonly(bool value) {
  _internal_set_elsecommandonfallbackonly(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TConditionalTrigger.elseCommandOnFallBackOnly)
}

// -------------------------------------------------------------------

// TTrigger

// required .TIdentifier identifier = 1;
inline bool TTrigger::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TTrigger::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TTrigger::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TTrigger::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TTrigger.identifier)
  return _internal_identifier();
}
inline void TTrigger::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TTrigger.identifier)
}
inline ::TIdentifier* TTrigger::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TTrigger::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TTrigger.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TTrigger::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TTrigger::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TTrigger.identifier)
  return _msg;
}
inline void TTrigger::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TTrigger.identifier)
}

// optional .HmiWidget.TETriggerCategory category = 2;
inline bool TTrigger::_internal_has_category() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TTrigger::has_category() const {
  return _internal_has_category();
}
inline void TTrigger::clear_category() {
  _impl_.category_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::HmiWidget::TETriggerCategory TTrigger::_internal_category() const {
  return static_cast< ::HmiWidget::TETriggerCategory >(_impl_.category_);
}
inline ::HmiWidget::TETriggerCategory TTrigger::category() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TTrigger.category)
  return _internal_category();
}
inline void TTrigger::_internal_set_category(::HmiWidget::TETriggerCategory value) {
  assert(::HmiWidget::TETriggerCategory_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.category_ = value;
}
inline void TTrigger::set_category(::HmiWidget::TETriggerCategory value) {
  _internal_set_category(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TTrigger.category)
}

// optional .HmiWidget.TDataChangeTrigger dataChangeTrigger = 3;
inline bool TTrigger::_internal_has_datachangetrigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.datachangetrigger_ != nullptr);
  return value;
}
inline bool TTrigger::has_datachangetrigger() const {
  return _internal_has_datachangetrigger();
}
inline void TTrigger::clear_datachangetrigger() {
  if (_impl_.datachangetrigger_ != nullptr) _impl_.datachangetrigger_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TDataChangeTrigger& TTrigger::_internal_datachangetrigger() const {
  const ::HmiWidget::TDataChangeTrigger* p = _impl_.datachangetrigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TDataChangeTrigger&>(
      ::HmiWidget::_TDataChangeTrigger_default_instance_);
}
inline const ::HmiWidget::TDataChangeTrigger& TTrigger::datachangetrigger() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TTrigger.dataChangeTrigger)
  return _internal_datachangetrigger();
}
inline void TTrigger::unsafe_arena_set_allocated_datachangetrigger(
    ::HmiWidget::TDataChangeTrigger* datachangetrigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.datachangetrigger_);
  }
  _impl_.datachangetrigger_ = datachangetrigger;
  if (datachangetrigger) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TTrigger.dataChangeTrigger)
}
inline ::HmiWidget::TDataChangeTrigger* TTrigger::release_datachangetrigger() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TDataChangeTrigger* temp = _impl_.datachangetrigger_;
  _impl_.datachangetrigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TDataChangeTrigger* TTrigger::unsafe_arena_release_datachangetrigger() {
  // @@protoc_insertion_point(field_release:HmiWidget.TTrigger.dataChangeTrigger)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TDataChangeTrigger* temp = _impl_.datachangetrigger_;
  _impl_.datachangetrigger_ = nullptr;
  return temp;
}
inline ::HmiWidget::TDataChangeTrigger* TTrigger::_internal_mutable_datachangetrigger() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.datachangetrigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TDataChangeTrigger>(GetArenaForAllocation());
    _impl_.datachangetrigger_ = p;
  }
  return _impl_.datachangetrigger_;
}
inline ::HmiWidget::TDataChangeTrigger* TTrigger::mutable_datachangetrigger() {
  ::HmiWidget::TDataChangeTrigger* _msg = _internal_mutable_datachangetrigger();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TTrigger.dataChangeTrigger)
  return _msg;
}
inline void TTrigger::set_allocated_datachangetrigger(::HmiWidget::TDataChangeTrigger* datachangetrigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.datachangetrigger_;
  }
  if (datachangetrigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(datachangetrigger);
    if (message_arena != submessage_arena) {
      datachangetrigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, datachangetrigger, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.datachangetrigger_ = datachangetrigger;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TTrigger.dataChangeTrigger)
}

// optional .HmiWidget.TConditionalTrigger conditionalTrigger = 4;
inline bool TTrigger::_internal_has_conditionaltrigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.conditionaltrigger_ != nullptr);
  return value;
}
inline bool TTrigger::has_conditionaltrigger() const {
  return _internal_has_conditionaltrigger();
}
inline void TTrigger::clear_conditionaltrigger() {
  if (_impl_.conditionaltrigger_ != nullptr) _impl_.conditionaltrigger_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TConditionalTrigger& TTrigger::_internal_conditionaltrigger() const {
  const ::HmiWidget::TConditionalTrigger* p = _impl_.conditionaltrigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TConditionalTrigger&>(
      ::HmiWidget::_TConditionalTrigger_default_instance_);
}
inline const ::HmiWidget::TConditionalTrigger& TTrigger::conditionaltrigger() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TTrigger.conditionalTrigger)
  return _internal_conditionaltrigger();
}
inline void TTrigger::unsafe_arena_set_allocated_conditionaltrigger(
    ::HmiWidget::TConditionalTrigger* conditionaltrigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.conditionaltrigger_);
  }
  _impl_.conditionaltrigger_ = conditionaltrigger;
  if (conditionaltrigger) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TTrigger.conditionalTrigger)
}
inline ::HmiWidget::TConditionalTrigger* TTrigger::release_conditionaltrigger() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TConditionalTrigger* temp = _impl_.conditionaltrigger_;
  _impl_.conditionaltrigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TConditionalTrigger* TTrigger::unsafe_arena_release_conditionaltrigger() {
  // @@protoc_insertion_point(field_release:HmiWidget.TTrigger.conditionalTrigger)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TConditionalTrigger* temp = _impl_.conditionaltrigger_;
  _impl_.conditionaltrigger_ = nullptr;
  return temp;
}
inline ::HmiWidget::TConditionalTrigger* TTrigger::_internal_mutable_conditionaltrigger() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.conditionaltrigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TConditionalTrigger>(GetArenaForAllocation());
    _impl_.conditionaltrigger_ = p;
  }
  return _impl_.conditionaltrigger_;
}
inline ::HmiWidget::TConditionalTrigger* TTrigger::mutable_conditionaltrigger() {
  ::HmiWidget::TConditionalTrigger* _msg = _internal_mutable_conditionaltrigger();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TTrigger.conditionalTrigger)
  return _msg;
}
inline void TTrigger::set_allocated_conditionaltrigger(::HmiWidget::TConditionalTrigger* conditionaltrigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.conditionaltrigger_;
  }
  if (conditionaltrigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(conditionaltrigger);
    if (message_arena != submessage_arena) {
      conditionaltrigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, conditionaltrigger, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.conditionaltrigger_ = conditionaltrigger;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TTrigger.conditionalTrigger)
}

// -------------------------------------------------------------------

// TPolyLine

// repeated .TVector3f point = 1;
inline int TPolyLine::_internal_point_size() const {
  return _impl_.point_.size();
}
inline int TPolyLine::point_size() const {
  return _internal_point_size();
}
inline ::TVector3f* TPolyLine::mutable_point(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TPolyLine.point)
  return _impl_.point_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TVector3f >*
TPolyLine::mutable_point() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TPolyLine.point)
  return &_impl_.point_;
}
inline const ::TVector3f& TPolyLine::_internal_point(int index) const {
  return _impl_.point_.Get(index);
}
inline const ::TVector3f& TPolyLine::point(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TPolyLine.point)
  return _internal_point(index);
}
inline ::TVector3f* TPolyLine::_internal_add_point() {
  return _impl_.point_.Add();
}
inline ::TVector3f* TPolyLine::add_point() {
  ::TVector3f* _add = _internal_add_point();
  // @@protoc_insertion_point(field_add:HmiWidget.TPolyLine.point)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TVector3f >&
TPolyLine::point() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TPolyLine.point)
  return _impl_.point_;
}

// repeated .TDataBinding pointBinding = 2;
inline int TPolyLine::_internal_pointbinding_size() const {
  return _impl_.pointbinding_.size();
}
inline int TPolyLine::pointbinding_size() const {
  return _internal_pointbinding_size();
}
inline ::TDataBinding* TPolyLine::mutable_pointbinding(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TPolyLine.pointBinding)
  return _impl_.pointbinding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
TPolyLine::mutable_pointbinding() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TPolyLine.pointBinding)
  return &_impl_.pointbinding_;
}
inline const ::TDataBinding& TPolyLine::_internal_pointbinding(int index) const {
  return _impl_.pointbinding_.Get(index);
}
inline const ::TDataBinding& TPolyLine::pointbinding(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TPolyLine.pointBinding)
  return _internal_pointbinding(index);
}
inline ::TDataBinding* TPolyLine::_internal_add_pointbinding() {
  return _impl_.pointbinding_.Add();
}
inline ::TDataBinding* TPolyLine::add_pointbinding() {
  ::TDataBinding* _add = _internal_add_pointbinding();
  // @@protoc_insertion_point(field_add:HmiWidget.TPolyLine.pointBinding)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
TPolyLine::pointbinding() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TPolyLine.pointBinding)
  return _impl_.pointbinding_;
}

// -------------------------------------------------------------------

// TInputConfig

// optional bool receiveDirectInput = 1;
inline bool TInputConfig::_internal_has_receivedirectinput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TInputConfig::has_receivedirectinput() const {
  return _internal_has_receivedirectinput();
}
inline void TInputConfig::clear_receivedirectinput() {
  _impl_.receivedirectinput_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool TInputConfig::_internal_receivedirectinput() const {
  return _impl_.receivedirectinput_;
}
inline bool TInputConfig::receivedirectinput() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.receiveDirectInput)
  return _internal_receivedirectinput();
}
inline void TInputConfig::_internal_set_receivedirectinput(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.receivedirectinput_ = value;
}
inline void TInputConfig::set_receivedirectinput(bool value) {
  _internal_set_receivedirectinput(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.receiveDirectInput)
}

// repeated .TETouchGesture receiveGesture = 2;
inline int TInputConfig::_internal_receivegesture_size() const {
  return _impl_.receivegesture_.size();
}
inline int TInputConfig::receivegesture_size() const {
  return _internal_receivegesture_size();
}
inline void TInputConfig::clear_receivegesture() {
  _impl_.receivegesture_.Clear();
}
inline ::TETouchGesture TInputConfig::_internal_receivegesture(int index) const {
  return static_cast< ::TETouchGesture >(_impl_.receivegesture_.Get(index));
}
inline ::TETouchGesture TInputConfig::receivegesture(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.receiveGesture)
  return _internal_receivegesture(index);
}
inline void TInputConfig::set_receivegesture(int index, ::TETouchGesture value) {
  assert(::TETouchGesture_IsValid(value));
  _impl_.receivegesture_.Set(index, value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.receiveGesture)
}
inline void TInputConfig::_internal_add_receivegesture(::TETouchGesture value) {
  assert(::TETouchGesture_IsValid(value));
  _impl_.receivegesture_.Add(value);
}
inline void TInputConfig::add_receivegesture(::TETouchGesture value) {
  _internal_add_receivegesture(value);
  // @@protoc_insertion_point(field_add:HmiWidget.TInputConfig.receiveGesture)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TInputConfig::receivegesture() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TInputConfig.receiveGesture)
  return _impl_.receivegesture_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::_internal_mutable_receivegesture() {
  return &_impl_.receivegesture_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::mutable_receivegesture() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TInputConfig.receiveGesture)
  return _internal_mutable_receivegesture();
}

// repeated .TETouchGesture receiveGesturePad = 8;
inline int TInputConfig::_internal_receivegesturepad_size() const {
  return _impl_.receivegesturepad_.size();
}
inline int TInputConfig::receivegesturepad_size() const {
  return _internal_receivegesturepad_size();
}
inline void TInputConfig::clear_receivegesturepad() {
  _impl_.receivegesturepad_.Clear();
}
inline ::TETouchGesture TInputConfig::_internal_receivegesturepad(int index) const {
  return static_cast< ::TETouchGesture >(_impl_.receivegesturepad_.Get(index));
}
inline ::TETouchGesture TInputConfig::receivegesturepad(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.receiveGesturePad)
  return _internal_receivegesturepad(index);
}
inline void TInputConfig::set_receivegesturepad(int index, ::TETouchGesture value) {
  assert(::TETouchGesture_IsValid(value));
  _impl_.receivegesturepad_.Set(index, value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.receiveGesturePad)
}
inline void TInputConfig::_internal_add_receivegesturepad(::TETouchGesture value) {
  assert(::TETouchGesture_IsValid(value));
  _impl_.receivegesturepad_.Add(value);
}
inline void TInputConfig::add_receivegesturepad(::TETouchGesture value) {
  _internal_add_receivegesturepad(value);
  // @@protoc_insertion_point(field_add:HmiWidget.TInputConfig.receiveGesturePad)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TInputConfig::receivegesturepad() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TInputConfig.receiveGesturePad)
  return _impl_.receivegesturepad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::_internal_mutable_receivegesturepad() {
  return &_impl_.receivegesturepad_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::mutable_receivegesturepad() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TInputConfig.receiveGesturePad)
  return _internal_mutable_receivegesturepad();
}

// repeated .TETouchGesture receiveGestureScreen = 9;
inline int TInputConfig::_internal_receivegesturescreen_size() const {
  return _impl_.receivegesturescreen_.size();
}
inline int TInputConfig::receivegesturescreen_size() const {
  return _internal_receivegesturescreen_size();
}
inline void TInputConfig::clear_receivegesturescreen() {
  _impl_.receivegesturescreen_.Clear();
}
inline ::TETouchGesture TInputConfig::_internal_receivegesturescreen(int index) const {
  return static_cast< ::TETouchGesture >(_impl_.receivegesturescreen_.Get(index));
}
inline ::TETouchGesture TInputConfig::receivegesturescreen(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.receiveGestureScreen)
  return _internal_receivegesturescreen(index);
}
inline void TInputConfig::set_receivegesturescreen(int index, ::TETouchGesture value) {
  assert(::TETouchGesture_IsValid(value));
  _impl_.receivegesturescreen_.Set(index, value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.receiveGestureScreen)
}
inline void TInputConfig::_internal_add_receivegesturescreen(::TETouchGesture value) {
  assert(::TETouchGesture_IsValid(value));
  _impl_.receivegesturescreen_.Add(value);
}
inline void TInputConfig::add_receivegesturescreen(::TETouchGesture value) {
  _internal_add_receivegesturescreen(value);
  // @@protoc_insertion_point(field_add:HmiWidget.TInputConfig.receiveGestureScreen)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TInputConfig::receivegesturescreen() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TInputConfig.receiveGestureScreen)
  return _impl_.receivegesturescreen_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::_internal_mutable_receivegesturescreen() {
  return &_impl_.receivegesturescreen_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::mutable_receivegesturescreen() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TInputConfig.receiveGestureScreen)
  return _internal_mutable_receivegesturescreen();
}

// repeated .TETouchDevice ignoreTouch = 3;
inline int TInputConfig::_internal_ignoretouch_size() const {
  return _impl_.ignoretouch_.size();
}
inline int TInputConfig::ignoretouch_size() const {
  return _internal_ignoretouch_size();
}
inline void TInputConfig::clear_ignoretouch() {
  _impl_.ignoretouch_.Clear();
}
inline ::TETouchDevice TInputConfig::_internal_ignoretouch(int index) const {
  return static_cast< ::TETouchDevice >(_impl_.ignoretouch_.Get(index));
}
inline ::TETouchDevice TInputConfig::ignoretouch(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.ignoreTouch)
  return _internal_ignoretouch(index);
}
inline void TInputConfig::set_ignoretouch(int index, ::TETouchDevice value) {
  assert(::TETouchDevice_IsValid(value));
  _impl_.ignoretouch_.Set(index, value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.ignoreTouch)
}
inline void TInputConfig::_internal_add_ignoretouch(::TETouchDevice value) {
  assert(::TETouchDevice_IsValid(value));
  _impl_.ignoretouch_.Add(value);
}
inline void TInputConfig::add_ignoretouch(::TETouchDevice value) {
  _internal_add_ignoretouch(value);
  // @@protoc_insertion_point(field_add:HmiWidget.TInputConfig.ignoreTouch)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>&
TInputConfig::ignoretouch() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TInputConfig.ignoreTouch)
  return _impl_.ignoretouch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::_internal_mutable_ignoretouch() {
  return &_impl_.ignoretouch_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField<int>*
TInputConfig::mutable_ignoretouch() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TInputConfig.ignoreTouch)
  return _internal_mutable_ignoretouch();
}

// optional .HmiWidget.TETouchTargetDomain touchScreenTargetDomain = 4;
inline bool TInputConfig::_internal_has_touchscreentargetdomain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TInputConfig::has_touchscreentargetdomain() const {
  return _internal_has_touchscreentargetdomain();
}
inline void TInputConfig::clear_touchscreentargetdomain() {
  _impl_.touchscreentargetdomain_ = 1;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline ::HmiWidget::TETouchTargetDomain TInputConfig::_internal_touchscreentargetdomain() const {
  return static_cast< ::HmiWidget::TETouchTargetDomain >(_impl_.touchscreentargetdomain_);
}
inline ::HmiWidget::TETouchTargetDomain TInputConfig::touchscreentargetdomain() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.touchScreenTargetDomain)
  return _internal_touchscreentargetdomain();
}
inline void TInputConfig::_internal_set_touchscreentargetdomain(::HmiWidget::TETouchTargetDomain value) {
  assert(::HmiWidget::TETouchTargetDomain_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.touchscreentargetdomain_ = value;
}
inline void TInputConfig::set_touchscreentargetdomain(::HmiWidget::TETouchTargetDomain value) {
  _internal_set_touchscreentargetdomain(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.touchScreenTargetDomain)
}

// optional .HmiWidget.TETouchTargetDomain touchControllerTargetDomain = 5;
inline bool TInputConfig::_internal_has_touchcontrollertargetdomain() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TInputConfig::has_touchcontrollertargetdomain() const {
  return _internal_has_touchcontrollertargetdomain();
}
inline void TInputConfig::clear_touchcontrollertargetdomain() {
  _impl_.touchcontrollertargetdomain_ = 1;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::HmiWidget::TETouchTargetDomain TInputConfig::_internal_touchcontrollertargetdomain() const {
  return static_cast< ::HmiWidget::TETouchTargetDomain >(_impl_.touchcontrollertargetdomain_);
}
inline ::HmiWidget::TETouchTargetDomain TInputConfig::touchcontrollertargetdomain() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.touchControllerTargetDomain)
  return _internal_touchcontrollertargetdomain();
}
inline void TInputConfig::_internal_set_touchcontrollertargetdomain(::HmiWidget::TETouchTargetDomain value) {
  assert(::HmiWidget::TETouchTargetDomain_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.touchcontrollertargetdomain_ = value;
}
inline void TInputConfig::set_touchcontrollertargetdomain(::HmiWidget::TETouchTargetDomain value) {
  _internal_set_touchcontrollertargetdomain(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.touchControllerTargetDomain)
}

// optional int32 significantMovementOverwrite = 16;
inline bool TInputConfig::_internal_has_significantmovementoverwrite() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TInputConfig::has_significantmovementoverwrite() const {
  return _internal_has_significantmovementoverwrite();
}
inline void TInputConfig::clear_significantmovementoverwrite() {
  _impl_.significantmovementoverwrite_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline int32_t TInputConfig::_internal_significantmovementoverwrite() const {
  return _impl_.significantmovementoverwrite_;
}
inline int32_t TInputConfig::significantmovementoverwrite() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.significantMovementOverwrite)
  return _internal_significantmovementoverwrite();
}
inline void TInputConfig::_internal_set_significantmovementoverwrite(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.significantmovementoverwrite_ = value;
}
inline void TInputConfig::set_significantmovementoverwrite(int32_t value) {
  _internal_set_significantmovementoverwrite(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.significantMovementOverwrite)
}

// optional bool passTouch = 6;
inline bool TInputConfig::_internal_has_passtouch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TInputConfig::has_passtouch() const {
  return _internal_has_passtouch();
}
inline void TInputConfig::clear_passtouch() {
  _impl_.passtouch_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TInputConfig::_internal_passtouch() const {
  return _impl_.passtouch_;
}
inline bool TInputConfig::passtouch() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.passTouch)
  return _internal_passtouch();
}
inline void TInputConfig::_internal_set_passtouch(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.passtouch_ = value;
}
inline void TInputConfig::set_passtouch(bool value) {
  _internal_set_passtouch(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.passTouch)
}

// optional bool alwaysTouch = 13;
inline bool TInputConfig::_internal_has_alwaystouch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TInputConfig::has_alwaystouch() const {
  return _internal_has_alwaystouch();
}
inline void TInputConfig::clear_alwaystouch() {
  _impl_.alwaystouch_ = false;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline bool TInputConfig::_internal_alwaystouch() const {
  return _impl_.alwaystouch_;
}
inline bool TInputConfig::alwaystouch() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.alwaysTouch)
  return _internal_alwaystouch();
}
inline void TInputConfig::_internal_set_alwaystouch(bool value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.alwaystouch_ = value;
}
inline void TInputConfig::set_alwaystouch(bool value) {
  _internal_set_alwaystouch(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.alwaysTouch)
}

// optional .HmiWidget.TETouchVolumeSource touchVolumeSource = 7;
inline bool TInputConfig::_internal_has_touchvolumesource() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TInputConfig::has_touchvolumesource() const {
  return _internal_has_touchvolumesource();
}
inline void TInputConfig::clear_touchvolumesource() {
  _impl_.touchvolumesource_ = 1;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline ::HmiWidget::TETouchVolumeSource TInputConfig::_internal_touchvolumesource() const {
  return static_cast< ::HmiWidget::TETouchVolumeSource >(_impl_.touchvolumesource_);
}
inline ::HmiWidget::TETouchVolumeSource TInputConfig::touchvolumesource() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.touchVolumeSource)
  return _internal_touchvolumesource();
}
inline void TInputConfig::_internal_set_touchvolumesource(::HmiWidget::TETouchVolumeSource value) {
  assert(::HmiWidget::TETouchVolumeSource_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.touchvolumesource_ = value;
}
inline void TInputConfig::set_touchvolumesource(::HmiWidget::TETouchVolumeSource value) {
  _internal_set_touchvolumesource(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.touchVolumeSource)
}

// repeated .TIdentifier touchVolumeChildIdentifier = 10;
inline int TInputConfig::_internal_touchvolumechildidentifier_size() const {
  return _impl_.touchvolumechildidentifier_.size();
}
inline int TInputConfig::touchvolumechildidentifier_size() const {
  return _internal_touchvolumechildidentifier_size();
}
inline ::TIdentifier* TInputConfig::mutable_touchvolumechildidentifier(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TInputConfig.touchVolumeChildIdentifier)
  return _impl_.touchvolumechildidentifier_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TInputConfig::mutable_touchvolumechildidentifier() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TInputConfig.touchVolumeChildIdentifier)
  return &_impl_.touchvolumechildidentifier_;
}
inline const ::TIdentifier& TInputConfig::_internal_touchvolumechildidentifier(int index) const {
  return _impl_.touchvolumechildidentifier_.Get(index);
}
inline const ::TIdentifier& TInputConfig::touchvolumechildidentifier(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.touchVolumeChildIdentifier)
  return _internal_touchvolumechildidentifier(index);
}
inline ::TIdentifier* TInputConfig::_internal_add_touchvolumechildidentifier() {
  return _impl_.touchvolumechildidentifier_.Add();
}
inline ::TIdentifier* TInputConfig::add_touchvolumechildidentifier() {
  ::TIdentifier* _add = _internal_add_touchvolumechildidentifier();
  // @@protoc_insertion_point(field_add:HmiWidget.TInputConfig.touchVolumeChildIdentifier)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TInputConfig::touchvolumechildidentifier() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TInputConfig.touchVolumeChildIdentifier)
  return _impl_.touchvolumechildidentifier_;
}

// optional bool defaultTouchHandled = 11;
inline bool TInputConfig::_internal_has_defaulttouchhandled() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TInputConfig::has_defaulttouchhandled() const {
  return _internal_has_defaulttouchhandled();
}
inline void TInputConfig::clear_defaulttouchhandled() {
  _impl_.defaulttouchhandled_ = false;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline bool TInputConfig::_internal_defaulttouchhandled() const {
  return _impl_.defaulttouchhandled_;
}
inline bool TInputConfig::defaulttouchhandled() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.defaultTouchHandled)
  return _internal_defaulttouchhandled();
}
inline void TInputConfig::_internal_set_defaulttouchhandled(bool value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.defaulttouchhandled_ = value;
}
inline void TInputConfig::set_defaulttouchhandled(bool value) {
  _internal_set_defaulttouchhandled(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.defaultTouchHandled)
}

// optional bool ignoreController = 12;
inline bool TInputConfig::_internal_has_ignorecontroller() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline bool TInputConfig::has_ignorecontroller() const {
  return _internal_has_ignorecontroller();
}
inline void TInputConfig::clear_ignorecontroller() {
  _impl_.ignorecontroller_ = false;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline bool TInputConfig::_internal_ignorecontroller() const {
  return _impl_.ignorecontroller_;
}
inline bool TInputConfig::ignorecontroller() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.ignoreController)
  return _internal_ignorecontroller();
}
inline void TInputConfig::_internal_set_ignorecontroller(bool value) {
  _impl_._has_bits_[0] |= 0x00000020u;
  _impl_.ignorecontroller_ = value;
}
inline void TInputConfig::set_ignorecontroller(bool value) {
  _internal_set_ignorecontroller(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.ignoreController)
}

// optional bool ignoreFocusOnTouch = 14;
inline bool TInputConfig::_internal_has_ignorefocusontouch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TInputConfig::has_ignorefocusontouch() const {
  return _internal_has_ignorefocusontouch();
}
inline void TInputConfig::clear_ignorefocusontouch() {
  _impl_.ignorefocusontouch_ = false;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline bool TInputConfig::_internal_ignorefocusontouch() const {
  return _impl_.ignorefocusontouch_;
}
inline bool TInputConfig::ignorefocusontouch() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.ignoreFocusOnTouch)
  return _internal_ignorefocusontouch();
}
inline void TInputConfig::_internal_set_ignorefocusontouch(bool value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.ignorefocusontouch_ = value;
}
inline void TInputConfig::set_ignorefocusontouch(bool value) {
  _internal_set_ignorefocusontouch(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.ignoreFocusOnTouch)
}

// optional .HmiWidget.TPolyLine touchAreaPolygon = 15;
inline bool TInputConfig::_internal_has_touchareapolygon() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.touchareapolygon_ != nullptr);
  return value;
}
inline bool TInputConfig::has_touchareapolygon() const {
  return _internal_has_touchareapolygon();
}
inline void TInputConfig::clear_touchareapolygon() {
  if (_impl_.touchareapolygon_ != nullptr) _impl_.touchareapolygon_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TPolyLine& TInputConfig::_internal_touchareapolygon() const {
  const ::HmiWidget::TPolyLine* p = _impl_.touchareapolygon_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TPolyLine&>(
      ::HmiWidget::_TPolyLine_default_instance_);
}
inline const ::HmiWidget::TPolyLine& TInputConfig::touchareapolygon() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.touchAreaPolygon)
  return _internal_touchareapolygon();
}
inline void TInputConfig::unsafe_arena_set_allocated_touchareapolygon(
    ::HmiWidget::TPolyLine* touchareapolygon) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.touchareapolygon_);
  }
  _impl_.touchareapolygon_ = touchareapolygon;
  if (touchareapolygon) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TInputConfig.touchAreaPolygon)
}
inline ::HmiWidget::TPolyLine* TInputConfig::release_touchareapolygon() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TPolyLine* temp = _impl_.touchareapolygon_;
  _impl_.touchareapolygon_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TPolyLine* TInputConfig::unsafe_arena_release_touchareapolygon() {
  // @@protoc_insertion_point(field_release:HmiWidget.TInputConfig.touchAreaPolygon)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TPolyLine* temp = _impl_.touchareapolygon_;
  _impl_.touchareapolygon_ = nullptr;
  return temp;
}
inline ::HmiWidget::TPolyLine* TInputConfig::_internal_mutable_touchareapolygon() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.touchareapolygon_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TPolyLine>(GetArenaForAllocation());
    _impl_.touchareapolygon_ = p;
  }
  return _impl_.touchareapolygon_;
}
inline ::HmiWidget::TPolyLine* TInputConfig::mutable_touchareapolygon() {
  ::HmiWidget::TPolyLine* _msg = _internal_mutable_touchareapolygon();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TInputConfig.touchAreaPolygon)
  return _msg;
}
inline void TInputConfig::set_allocated_touchareapolygon(::HmiWidget::TPolyLine* touchareapolygon) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.touchareapolygon_;
  }
  if (touchareapolygon) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(touchareapolygon);
    if (message_arena != submessage_arena) {
      touchareapolygon = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, touchareapolygon, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.touchareapolygon_ = touchareapolygon;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TInputConfig.touchAreaPolygon)
}

// optional bool blockTouchToParents = 17;
inline bool TInputConfig::_internal_has_blocktouchtoparents() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TInputConfig::has_blocktouchtoparents() const {
  return _internal_has_blocktouchtoparents();
}
inline void TInputConfig::clear_blocktouchtoparents() {
  _impl_.blocktouchtoparents_ = false;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline bool TInputConfig::_internal_blocktouchtoparents() const {
  return _impl_.blocktouchtoparents_;
}
inline bool TInputConfig::blocktouchtoparents() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInputConfig.blockTouchToParents)
  return _internal_blocktouchtoparents();
}
inline void TInputConfig::_internal_set_blocktouchtoparents(bool value) {
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.blocktouchtoparents_ = value;
}
inline void TInputConfig::set_blocktouchtoparents(bool value) {
  _internal_set_blocktouchtoparents(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TInputConfig.blockTouchToParents)
}

// -------------------------------------------------------------------

// TImportDefinition

// optional .TIdentifier identifier = 1;
inline bool TImportDefinition::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TImportDefinition::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TImportDefinition::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.identifier)
  return _internal_identifier();
}
inline void TImportDefinition::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.identifier)
}
inline ::TIdentifier* TImportDefinition::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TImportDefinition::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TImportDefinition::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TImportDefinition::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.identifier)
  return _msg;
}
inline void TImportDefinition::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.identifier)
}

// repeated .TIdentifier useImport = 10;
inline int TImportDefinition::_internal_useimport_size() const {
  return _impl_.useimport_.size();
}
inline int TImportDefinition::useimport_size() const {
  return _internal_useimport_size();
}
inline ::TIdentifier* TImportDefinition::mutable_useimport(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.useImport)
  return _impl_.useimport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TImportDefinition::mutable_useimport() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.useImport)
  return &_impl_.useimport_;
}
inline const ::TIdentifier& TImportDefinition::_internal_useimport(int index) const {
  return _impl_.useimport_.Get(index);
}
inline const ::TIdentifier& TImportDefinition::useimport(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.useImport)
  return _internal_useimport(index);
}
inline ::TIdentifier* TImportDefinition::_internal_add_useimport() {
  return _impl_.useimport_.Add();
}
inline ::TIdentifier* TImportDefinition::add_useimport() {
  ::TIdentifier* _add = _internal_add_useimport();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.useImport)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TImportDefinition::useimport() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.useImport)
  return _impl_.useimport_;
}

// repeated .HmiWidget.TChildWidget child = 20;
inline int TImportDefinition::_internal_child_size() const {
  return _impl_.child_.size();
}
inline int TImportDefinition::child_size() const {
  return _internal_child_size();
}
inline void TImportDefinition::clear_child() {
  _impl_.child_.Clear();
}
inline ::HmiWidget::TChildWidget* TImportDefinition::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.child)
  return _impl_.child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >*
TImportDefinition::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.child)
  return &_impl_.child_;
}
inline const ::HmiWidget::TChildWidget& TImportDefinition::_internal_child(int index) const {
  return _impl_.child_.Get(index);
}
inline const ::HmiWidget::TChildWidget& TImportDefinition::child(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.child)
  return _internal_child(index);
}
inline ::HmiWidget::TChildWidget* TImportDefinition::_internal_add_child() {
  return _impl_.child_.Add();
}
inline ::HmiWidget::TChildWidget* TImportDefinition::add_child() {
  ::HmiWidget::TChildWidget* _add = _internal_add_child();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.child)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >&
TImportDefinition::child() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.child)
  return _impl_.child_;
}

// repeated .HmiWidget.TExternalModelParameter externalModelValue = 21;
inline int TImportDefinition::_internal_externalmodelvalue_size() const {
  return _impl_.externalmodelvalue_.size();
}
inline int TImportDefinition::externalmodelvalue_size() const {
  return _internal_externalmodelvalue_size();
}
inline void TImportDefinition::clear_externalmodelvalue() {
  _impl_.externalmodelvalue_.Clear();
}
inline ::HmiWidget::TExternalModelParameter* TImportDefinition::mutable_externalmodelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.externalModelValue)
  return _impl_.externalmodelvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >*
TImportDefinition::mutable_externalmodelvalue() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.externalModelValue)
  return &_impl_.externalmodelvalue_;
}
inline const ::HmiWidget::TExternalModelParameter& TImportDefinition::_internal_externalmodelvalue(int index) const {
  return _impl_.externalmodelvalue_.Get(index);
}
inline const ::HmiWidget::TExternalModelParameter& TImportDefinition::externalmodelvalue(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.externalModelValue)
  return _internal_externalmodelvalue(index);
}
inline ::HmiWidget::TExternalModelParameter* TImportDefinition::_internal_add_externalmodelvalue() {
  return _impl_.externalmodelvalue_.Add();
}
inline ::HmiWidget::TExternalModelParameter* TImportDefinition::add_externalmodelvalue() {
  ::HmiWidget::TExternalModelParameter* _add = _internal_add_externalmodelvalue();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.externalModelValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >&
TImportDefinition::externalmodelvalue() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.externalModelValue)
  return _impl_.externalmodelvalue_;
}

// repeated .HmiWidget.TInternalModelParameter internalModelValue = 22;
inline int TImportDefinition::_internal_internalmodelvalue_size() const {
  return _impl_.internalmodelvalue_.size();
}
inline int TImportDefinition::internalmodelvalue_size() const {
  return _internal_internalmodelvalue_size();
}
inline void TImportDefinition::clear_internalmodelvalue() {
  _impl_.internalmodelvalue_.Clear();
}
inline ::HmiWidget::TInternalModelParameter* TImportDefinition::mutable_internalmodelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.internalModelValue)
  return _impl_.internalmodelvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >*
TImportDefinition::mutable_internalmodelvalue() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.internalModelValue)
  return &_impl_.internalmodelvalue_;
}
inline const ::HmiWidget::TInternalModelParameter& TImportDefinition::_internal_internalmodelvalue(int index) const {
  return _impl_.internalmodelvalue_.Get(index);
}
inline const ::HmiWidget::TInternalModelParameter& TImportDefinition::internalmodelvalue(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.internalModelValue)
  return _internal_internalmodelvalue(index);
}
inline ::HmiWidget::TInternalModelParameter* TImportDefinition::_internal_add_internalmodelvalue() {
  return _impl_.internalmodelvalue_.Add();
}
inline ::HmiWidget::TInternalModelParameter* TImportDefinition::add_internalmodelvalue() {
  ::HmiWidget::TInternalModelParameter* _add = _internal_add_internalmodelvalue();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.internalModelValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >&
TImportDefinition::internalmodelvalue() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.internalModelValue)
  return _impl_.internalmodelvalue_;
}

// repeated .HmiWidget.TNodeParam nodeParam = 24;
inline int TImportDefinition::_internal_nodeparam_size() const {
  return _impl_.nodeparam_.size();
}
inline int TImportDefinition::nodeparam_size() const {
  return _internal_nodeparam_size();
}
inline void TImportDefinition::clear_nodeparam() {
  _impl_.nodeparam_.Clear();
}
inline ::HmiWidget::TNodeParam* TImportDefinition::mutable_nodeparam(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.nodeParam)
  return _impl_.nodeparam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >*
TImportDefinition::mutable_nodeparam() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.nodeParam)
  return &_impl_.nodeparam_;
}
inline const ::HmiWidget::TNodeParam& TImportDefinition::_internal_nodeparam(int index) const {
  return _impl_.nodeparam_.Get(index);
}
inline const ::HmiWidget::TNodeParam& TImportDefinition::nodeparam(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.nodeParam)
  return _internal_nodeparam(index);
}
inline ::HmiWidget::TNodeParam* TImportDefinition::_internal_add_nodeparam() {
  return _impl_.nodeparam_.Add();
}
inline ::HmiWidget::TNodeParam* TImportDefinition::add_nodeparam() {
  ::HmiWidget::TNodeParam* _add = _internal_add_nodeparam();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.nodeParam)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >&
TImportDefinition::nodeparam() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.nodeParam)
  return _impl_.nodeparam_;
}

// repeated .HmiWidget.TSlot slot = 25;
inline int TImportDefinition::_internal_slot_size() const {
  return _impl_.slot_.size();
}
inline int TImportDefinition::slot_size() const {
  return _internal_slot_size();
}
inline void TImportDefinition::clear_slot() {
  _impl_.slot_.Clear();
}
inline ::HmiWidget::TSlot* TImportDefinition::mutable_slot(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.slot)
  return _impl_.slot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >*
TImportDefinition::mutable_slot() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.slot)
  return &_impl_.slot_;
}
inline const ::HmiWidget::TSlot& TImportDefinition::_internal_slot(int index) const {
  return _impl_.slot_.Get(index);
}
inline const ::HmiWidget::TSlot& TImportDefinition::slot(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.slot)
  return _internal_slot(index);
}
inline ::HmiWidget::TSlot* TImportDefinition::_internal_add_slot() {
  return _impl_.slot_.Add();
}
inline ::HmiWidget::TSlot* TImportDefinition::add_slot() {
  ::HmiWidget::TSlot* _add = _internal_add_slot();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.slot)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >&
TImportDefinition::slot() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.slot)
  return _impl_.slot_;
}

// repeated .HmiWidget.TLayout layout = 26;
inline int TImportDefinition::_internal_layout_size() const {
  return _impl_.layout_.size();
}
inline int TImportDefinition::layout_size() const {
  return _internal_layout_size();
}
inline void TImportDefinition::clear_layout() {
  _impl_.layout_.Clear();
}
inline ::HmiWidget::TLayout* TImportDefinition::mutable_layout(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.layout)
  return _impl_.layout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >*
TImportDefinition::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.layout)
  return &_impl_.layout_;
}
inline const ::HmiWidget::TLayout& TImportDefinition::_internal_layout(int index) const {
  return _impl_.layout_.Get(index);
}
inline const ::HmiWidget::TLayout& TImportDefinition::layout(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.layout)
  return _internal_layout(index);
}
inline ::HmiWidget::TLayout* TImportDefinition::_internal_add_layout() {
  return _impl_.layout_.Add();
}
inline ::HmiWidget::TLayout* TImportDefinition::add_layout() {
  ::HmiWidget::TLayout* _add = _internal_add_layout();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.layout)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >&
TImportDefinition::layout() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.layout)
  return _impl_.layout_;
}

// repeated .HmiWidget.TScript script = 27;
inline int TImportDefinition::_internal_script_size() const {
  return _impl_.script_.size();
}
inline int TImportDefinition::script_size() const {
  return _internal_script_size();
}
inline void TImportDefinition::clear_script() {
  _impl_.script_.Clear();
}
inline ::HmiWidget::TScript* TImportDefinition::mutable_script(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.script)
  return _impl_.script_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >*
TImportDefinition::mutable_script() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.script)
  return &_impl_.script_;
}
inline const ::HmiWidget::TScript& TImportDefinition::_internal_script(int index) const {
  return _impl_.script_.Get(index);
}
inline const ::HmiWidget::TScript& TImportDefinition::script(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.script)
  return _internal_script(index);
}
inline ::HmiWidget::TScript* TImportDefinition::_internal_add_script() {
  return _impl_.script_.Add();
}
inline ::HmiWidget::TScript* TImportDefinition::add_script() {
  ::HmiWidget::TScript* _add = _internal_add_script();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.script)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >&
TImportDefinition::script() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.script)
  return _impl_.script_;
}

// repeated .HmiWidget.TTriggeredSlot triggeredSlot = 28;
inline int TImportDefinition::_internal_triggeredslot_size() const {
  return _impl_.triggeredslot_.size();
}
inline int TImportDefinition::triggeredslot_size() const {
  return _internal_triggeredslot_size();
}
inline void TImportDefinition::clear_triggeredslot() {
  _impl_.triggeredslot_.Clear();
}
inline ::HmiWidget::TTriggeredSlot* TImportDefinition::mutable_triggeredslot(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.triggeredSlot)
  return _impl_.triggeredslot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >*
TImportDefinition::mutable_triggeredslot() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.triggeredSlot)
  return &_impl_.triggeredslot_;
}
inline const ::HmiWidget::TTriggeredSlot& TImportDefinition::_internal_triggeredslot(int index) const {
  return _impl_.triggeredslot_.Get(index);
}
inline const ::HmiWidget::TTriggeredSlot& TImportDefinition::triggeredslot(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.triggeredSlot)
  return _internal_triggeredslot(index);
}
inline ::HmiWidget::TTriggeredSlot* TImportDefinition::_internal_add_triggeredslot() {
  return _impl_.triggeredslot_.Add();
}
inline ::HmiWidget::TTriggeredSlot* TImportDefinition::add_triggeredslot() {
  ::HmiWidget::TTriggeredSlot* _add = _internal_add_triggeredslot();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.triggeredSlot)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >&
TImportDefinition::triggeredslot() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.triggeredSlot)
  return _impl_.triggeredslot_;
}

// repeated .HmiWidget.TCompositeAnimation compositeAnimation = 30;
inline int TImportDefinition::_internal_compositeanimation_size() const {
  return _impl_.compositeanimation_.size();
}
inline int TImportDefinition::compositeanimation_size() const {
  return _internal_compositeanimation_size();
}
inline void TImportDefinition::clear_compositeanimation() {
  _impl_.compositeanimation_.Clear();
}
inline ::HmiWidget::TCompositeAnimation* TImportDefinition::mutable_compositeanimation(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.compositeAnimation)
  return _impl_.compositeanimation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >*
TImportDefinition::mutable_compositeanimation() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.compositeAnimation)
  return &_impl_.compositeanimation_;
}
inline const ::HmiWidget::TCompositeAnimation& TImportDefinition::_internal_compositeanimation(int index) const {
  return _impl_.compositeanimation_.Get(index);
}
inline const ::HmiWidget::TCompositeAnimation& TImportDefinition::compositeanimation(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.compositeAnimation)
  return _internal_compositeanimation(index);
}
inline ::HmiWidget::TCompositeAnimation* TImportDefinition::_internal_add_compositeanimation() {
  return _impl_.compositeanimation_.Add();
}
inline ::HmiWidget::TCompositeAnimation* TImportDefinition::add_compositeanimation() {
  ::HmiWidget::TCompositeAnimation* _add = _internal_add_compositeanimation();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.compositeAnimation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >&
TImportDefinition::compositeanimation() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.compositeAnimation)
  return _impl_.compositeanimation_;
}

// repeated .HmiWidget.TTrigger trigger = 31;
inline int TImportDefinition::_internal_trigger_size() const {
  return _impl_.trigger_.size();
}
inline int TImportDefinition::trigger_size() const {
  return _internal_trigger_size();
}
inline void TImportDefinition::clear_trigger() {
  _impl_.trigger_.Clear();
}
inline ::HmiWidget::TTrigger* TImportDefinition::mutable_trigger(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.trigger)
  return _impl_.trigger_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >*
TImportDefinition::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.trigger)
  return &_impl_.trigger_;
}
inline const ::HmiWidget::TTrigger& TImportDefinition::_internal_trigger(int index) const {
  return _impl_.trigger_.Get(index);
}
inline const ::HmiWidget::TTrigger& TImportDefinition::trigger(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.trigger)
  return _internal_trigger(index);
}
inline ::HmiWidget::TTrigger* TImportDefinition::_internal_add_trigger() {
  return _impl_.trigger_.Add();
}
inline ::HmiWidget::TTrigger* TImportDefinition::add_trigger() {
  ::HmiWidget::TTrigger* _add = _internal_add_trigger();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.trigger)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >&
TImportDefinition::trigger() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.trigger)
  return _impl_.trigger_;
}

// optional .HmiWidget.TForwardSignals forwardSignals = 32;
inline bool TImportDefinition::_internal_has_forwardsignals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.forwardsignals_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_forwardsignals() const {
  return _internal_has_forwardsignals();
}
inline void TImportDefinition::clear_forwardsignals() {
  if (_impl_.forwardsignals_ != nullptr) _impl_.forwardsignals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TForwardSignals& TImportDefinition::_internal_forwardsignals() const {
  const ::HmiWidget::TForwardSignals* p = _impl_.forwardsignals_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TForwardSignals&>(
      ::HmiWidget::_TForwardSignals_default_instance_);
}
inline const ::HmiWidget::TForwardSignals& TImportDefinition::forwardsignals() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.forwardSignals)
  return _internal_forwardsignals();
}
inline void TImportDefinition::unsafe_arena_set_allocated_forwardsignals(
    ::HmiWidget::TForwardSignals* forwardsignals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forwardsignals_);
  }
  _impl_.forwardsignals_ = forwardsignals;
  if (forwardsignals) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.forwardSignals)
}
inline ::HmiWidget::TForwardSignals* TImportDefinition::release_forwardsignals() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TForwardSignals* temp = _impl_.forwardsignals_;
  _impl_.forwardsignals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TForwardSignals* TImportDefinition::unsafe_arena_release_forwardsignals() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.forwardSignals)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TForwardSignals* temp = _impl_.forwardsignals_;
  _impl_.forwardsignals_ = nullptr;
  return temp;
}
inline ::HmiWidget::TForwardSignals* TImportDefinition::_internal_mutable_forwardsignals() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.forwardsignals_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TForwardSignals>(GetArenaForAllocation());
    _impl_.forwardsignals_ = p;
  }
  return _impl_.forwardsignals_;
}
inline ::HmiWidget::TForwardSignals* TImportDefinition::mutable_forwardsignals() {
  ::HmiWidget::TForwardSignals* _msg = _internal_mutable_forwardsignals();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.forwardSignals)
  return _msg;
}
inline void TImportDefinition::set_allocated_forwardsignals(::HmiWidget::TForwardSignals* forwardsignals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forwardsignals_;
  }
  if (forwardsignals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forwardsignals);
    if (message_arena != submessage_arena) {
      forwardsignals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwardsignals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.forwardsignals_ = forwardsignals;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.forwardSignals)
}

// optional .HmiWidget.TInputConfig input = 33;
inline bool TImportDefinition::_internal_has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_input() const {
  return _internal_has_input();
}
inline void TImportDefinition::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TInputConfig& TImportDefinition::_internal_input() const {
  const ::HmiWidget::TInputConfig* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TInputConfig&>(
      ::HmiWidget::_TInputConfig_default_instance_);
}
inline const ::HmiWidget::TInputConfig& TImportDefinition::input() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.input)
  return _internal_input();
}
inline void TImportDefinition::unsafe_arena_set_allocated_input(
    ::HmiWidget::TInputConfig* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.input)
}
inline ::HmiWidget::TInputConfig* TImportDefinition::release_input() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TInputConfig* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TInputConfig* TImportDefinition::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.input)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TInputConfig* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::HmiWidget::TInputConfig* TImportDefinition::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TInputConfig>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::HmiWidget::TInputConfig* TImportDefinition::mutable_input() {
  ::HmiWidget::TInputConfig* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.input)
  return _msg;
}
inline void TImportDefinition::set_allocated_input(::HmiWidget::TInputConfig* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.input)
}

// repeated .HmiWidget.TCurve curve = 34;
inline int TImportDefinition::_internal_curve_size() const {
  return _impl_.curve_.size();
}
inline int TImportDefinition::curve_size() const {
  return _internal_curve_size();
}
inline void TImportDefinition::clear_curve() {
  _impl_.curve_.Clear();
}
inline ::HmiWidget::TCurve* TImportDefinition::mutable_curve(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.curve)
  return _impl_.curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >*
TImportDefinition::mutable_curve() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.curve)
  return &_impl_.curve_;
}
inline const ::HmiWidget::TCurve& TImportDefinition::_internal_curve(int index) const {
  return _impl_.curve_.Get(index);
}
inline const ::HmiWidget::TCurve& TImportDefinition::curve(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.curve)
  return _internal_curve(index);
}
inline ::HmiWidget::TCurve* TImportDefinition::_internal_add_curve() {
  return _impl_.curve_.Add();
}
inline ::HmiWidget::TCurve* TImportDefinition::add_curve() {
  ::HmiWidget::TCurve* _add = _internal_add_curve();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.curve)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >&
TImportDefinition::curve() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.curve)
  return _impl_.curve_;
}

// optional .HmiWidget.TRequestLayout requestLayout = 35;
inline bool TImportDefinition::_internal_has_requestlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requestlayout_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_requestlayout() const {
  return _internal_has_requestlayout();
}
inline void TImportDefinition::clear_requestlayout() {
  if (_impl_.requestlayout_ != nullptr) _impl_.requestlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HmiWidget::TRequestLayout& TImportDefinition::_internal_requestlayout() const {
  const ::HmiWidget::TRequestLayout* p = _impl_.requestlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TRequestLayout&>(
      ::HmiWidget::_TRequestLayout_default_instance_);
}
inline const ::HmiWidget::TRequestLayout& TImportDefinition::requestlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.requestLayout)
  return _internal_requestlayout();
}
inline void TImportDefinition::unsafe_arena_set_allocated_requestlayout(
    ::HmiWidget::TRequestLayout* requestlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requestlayout_);
  }
  _impl_.requestlayout_ = requestlayout;
  if (requestlayout) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.requestLayout)
}
inline ::HmiWidget::TRequestLayout* TImportDefinition::release_requestlayout() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TRequestLayout* temp = _impl_.requestlayout_;
  _impl_.requestlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TRequestLayout* TImportDefinition::unsafe_arena_release_requestlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.requestLayout)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TRequestLayout* temp = _impl_.requestlayout_;
  _impl_.requestlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TRequestLayout* TImportDefinition::_internal_mutable_requestlayout() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.requestlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TRequestLayout>(GetArenaForAllocation());
    _impl_.requestlayout_ = p;
  }
  return _impl_.requestlayout_;
}
inline ::HmiWidget::TRequestLayout* TImportDefinition::mutable_requestlayout() {
  ::HmiWidget::TRequestLayout* _msg = _internal_mutable_requestlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.requestLayout)
  return _msg;
}
inline void TImportDefinition::set_allocated_requestlayout(::HmiWidget::TRequestLayout* requestlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.requestlayout_;
  }
  if (requestlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requestlayout);
    if (message_arena != submessage_arena) {
      requestlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.requestlayout_ = requestlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.requestLayout)
}

// optional .HmiWidget.TDefaultChildModelBindings defaultChildModelBindings = 36;
inline bool TImportDefinition::_internal_has_defaultchildmodelbindings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.defaultchildmodelbindings_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_defaultchildmodelbindings() const {
  return _internal_has_defaultchildmodelbindings();
}
inline void TImportDefinition::clear_defaultchildmodelbindings() {
  if (_impl_.defaultchildmodelbindings_ != nullptr) _impl_.defaultchildmodelbindings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HmiWidget::TDefaultChildModelBindings& TImportDefinition::_internal_defaultchildmodelbindings() const {
  const ::HmiWidget::TDefaultChildModelBindings* p = _impl_.defaultchildmodelbindings_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TDefaultChildModelBindings&>(
      ::HmiWidget::_TDefaultChildModelBindings_default_instance_);
}
inline const ::HmiWidget::TDefaultChildModelBindings& TImportDefinition::defaultchildmodelbindings() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.defaultChildModelBindings)
  return _internal_defaultchildmodelbindings();
}
inline void TImportDefinition::unsafe_arena_set_allocated_defaultchildmodelbindings(
    ::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultchildmodelbindings_);
  }
  _impl_.defaultchildmodelbindings_ = defaultchildmodelbindings;
  if (defaultchildmodelbindings) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.defaultChildModelBindings)
}
inline ::HmiWidget::TDefaultChildModelBindings* TImportDefinition::release_defaultchildmodelbindings() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TDefaultChildModelBindings* temp = _impl_.defaultchildmodelbindings_;
  _impl_.defaultchildmodelbindings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TDefaultChildModelBindings* TImportDefinition::unsafe_arena_release_defaultchildmodelbindings() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.defaultChildModelBindings)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TDefaultChildModelBindings* temp = _impl_.defaultchildmodelbindings_;
  _impl_.defaultchildmodelbindings_ = nullptr;
  return temp;
}
inline ::HmiWidget::TDefaultChildModelBindings* TImportDefinition::_internal_mutable_defaultchildmodelbindings() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.defaultchildmodelbindings_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TDefaultChildModelBindings>(GetArenaForAllocation());
    _impl_.defaultchildmodelbindings_ = p;
  }
  return _impl_.defaultchildmodelbindings_;
}
inline ::HmiWidget::TDefaultChildModelBindings* TImportDefinition::mutable_defaultchildmodelbindings() {
  ::HmiWidget::TDefaultChildModelBindings* _msg = _internal_mutable_defaultchildmodelbindings();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.defaultChildModelBindings)
  return _msg;
}
inline void TImportDefinition::set_allocated_defaultchildmodelbindings(::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.defaultchildmodelbindings_;
  }
  if (defaultchildmodelbindings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(defaultchildmodelbindings);
    if (message_arena != submessage_arena) {
      defaultchildmodelbindings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultchildmodelbindings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.defaultchildmodelbindings_ = defaultchildmodelbindings;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.defaultChildModelBindings)
}

// repeated .HmiWidget.TAddModelBindingsToChild addModelBindingsToChild = 37;
inline int TImportDefinition::_internal_addmodelbindingstochild_size() const {
  return _impl_.addmodelbindingstochild_.size();
}
inline int TImportDefinition::addmodelbindingstochild_size() const {
  return _internal_addmodelbindingstochild_size();
}
inline void TImportDefinition::clear_addmodelbindingstochild() {
  _impl_.addmodelbindingstochild_.Clear();
}
inline ::HmiWidget::TAddModelBindingsToChild* TImportDefinition::mutable_addmodelbindingstochild(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.addModelBindingsToChild)
  return _impl_.addmodelbindingstochild_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >*
TImportDefinition::mutable_addmodelbindingstochild() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.addModelBindingsToChild)
  return &_impl_.addmodelbindingstochild_;
}
inline const ::HmiWidget::TAddModelBindingsToChild& TImportDefinition::_internal_addmodelbindingstochild(int index) const {
  return _impl_.addmodelbindingstochild_.Get(index);
}
inline const ::HmiWidget::TAddModelBindingsToChild& TImportDefinition::addmodelbindingstochild(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.addModelBindingsToChild)
  return _internal_addmodelbindingstochild(index);
}
inline ::HmiWidget::TAddModelBindingsToChild* TImportDefinition::_internal_add_addmodelbindingstochild() {
  return _impl_.addmodelbindingstochild_.Add();
}
inline ::HmiWidget::TAddModelBindingsToChild* TImportDefinition::add_addmodelbindingstochild() {
  ::HmiWidget::TAddModelBindingsToChild* _add = _internal_add_addmodelbindingstochild();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.addModelBindingsToChild)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >&
TImportDefinition::addmodelbindingstochild() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.addModelBindingsToChild)
  return _impl_.addmodelbindingstochild_;
}

// repeated .HmiWidget.TResourceParam resourceParam = 38;
inline int TImportDefinition::_internal_resourceparam_size() const {
  return _impl_.resourceparam_.size();
}
inline int TImportDefinition::resourceparam_size() const {
  return _internal_resourceparam_size();
}
inline void TImportDefinition::clear_resourceparam() {
  _impl_.resourceparam_.Clear();
}
inline ::HmiWidget::TResourceParam* TImportDefinition::mutable_resourceparam(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.resourceParam)
  return _impl_.resourceparam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >*
TImportDefinition::mutable_resourceparam() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.resourceParam)
  return &_impl_.resourceparam_;
}
inline const ::HmiWidget::TResourceParam& TImportDefinition::_internal_resourceparam(int index) const {
  return _impl_.resourceparam_.Get(index);
}
inline const ::HmiWidget::TResourceParam& TImportDefinition::resourceparam(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.resourceParam)
  return _internal_resourceparam(index);
}
inline ::HmiWidget::TResourceParam* TImportDefinition::_internal_add_resourceparam() {
  return _impl_.resourceparam_.Add();
}
inline ::HmiWidget::TResourceParam* TImportDefinition::add_resourceparam() {
  ::HmiWidget::TResourceParam* _add = _internal_add_resourceparam();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.resourceParam)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >&
TImportDefinition::resourceparam() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.resourceParam)
  return _impl_.resourceparam_;
}

// repeated .HmiWidget.TChildModelParameter modelbinding = 100;
inline int TImportDefinition::_internal_modelbinding_size() const {
  return _impl_.modelbinding_.size();
}
inline int TImportDefinition::modelbinding_size() const {
  return _internal_modelbinding_size();
}
inline void TImportDefinition::clear_modelbinding() {
  _impl_.modelbinding_.Clear();
}
inline ::HmiWidget::TChildModelParameter* TImportDefinition::mutable_modelbinding(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.modelbinding)
  return _impl_.modelbinding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
TImportDefinition::mutable_modelbinding() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.modelbinding)
  return &_impl_.modelbinding_;
}
inline const ::HmiWidget::TChildModelParameter& TImportDefinition::_internal_modelbinding(int index) const {
  return _impl_.modelbinding_.Get(index);
}
inline const ::HmiWidget::TChildModelParameter& TImportDefinition::modelbinding(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.modelbinding)
  return _internal_modelbinding(index);
}
inline ::HmiWidget::TChildModelParameter* TImportDefinition::_internal_add_modelbinding() {
  return _impl_.modelbinding_.Add();
}
inline ::HmiWidget::TChildModelParameter* TImportDefinition::add_modelbinding() {
  ::HmiWidget::TChildModelParameter* _add = _internal_add_modelbinding();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.modelbinding)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
TImportDefinition::modelbinding() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.modelbinding)
  return _impl_.modelbinding_;
}

// repeated .HmiWidget.TUniform uniform = 200;
inline int TImportDefinition::_internal_uniform_size() const {
  return _impl_.uniform_.size();
}
inline int TImportDefinition::uniform_size() const {
  return _internal_uniform_size();
}
inline void TImportDefinition::clear_uniform() {
  _impl_.uniform_.Clear();
}
inline ::HmiWidget::TUniform* TImportDefinition::mutable_uniform(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.uniform)
  return _impl_.uniform_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >*
TImportDefinition::mutable_uniform() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TImportDefinition.uniform)
  return &_impl_.uniform_;
}
inline const ::HmiWidget::TUniform& TImportDefinition::_internal_uniform(int index) const {
  return _impl_.uniform_.Get(index);
}
inline const ::HmiWidget::TUniform& TImportDefinition::uniform(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.uniform)
  return _internal_uniform(index);
}
inline ::HmiWidget::TUniform* TImportDefinition::_internal_add_uniform() {
  return _impl_.uniform_.Add();
}
inline ::HmiWidget::TUniform* TImportDefinition::add_uniform() {
  ::HmiWidget::TUniform* _add = _internal_add_uniform();
  // @@protoc_insertion_point(field_add:HmiWidget.TImportDefinition.uniform)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TUniform >&
TImportDefinition::uniform() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TImportDefinition.uniform)
  return _impl_.uniform_;
}

// optional .HmiWidget.TNodeTransform transform = 201;
inline bool TImportDefinition::_internal_has_transform() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.transform_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_transform() const {
  return _internal_has_transform();
}
inline void TImportDefinition::clear_transform() {
  if (_impl_.transform_ != nullptr) _impl_.transform_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HmiWidget::TNodeTransform& TImportDefinition::_internal_transform() const {
  const ::HmiWidget::TNodeTransform* p = _impl_.transform_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TNodeTransform&>(
      ::HmiWidget::_TNodeTransform_default_instance_);
}
inline const ::HmiWidget::TNodeTransform& TImportDefinition::transform() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.transform)
  return _internal_transform();
}
inline void TImportDefinition::unsafe_arena_set_allocated_transform(
    ::HmiWidget::TNodeTransform* transform) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.transform_);
  }
  _impl_.transform_ = transform;
  if (transform) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.transform)
}
inline ::HmiWidget::TNodeTransform* TImportDefinition::release_transform() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TNodeTransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TNodeTransform* TImportDefinition::unsafe_arena_release_transform() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.transform)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TNodeTransform* temp = _impl_.transform_;
  _impl_.transform_ = nullptr;
  return temp;
}
inline ::HmiWidget::TNodeTransform* TImportDefinition::_internal_mutable_transform() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.transform_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TNodeTransform>(GetArenaForAllocation());
    _impl_.transform_ = p;
  }
  return _impl_.transform_;
}
inline ::HmiWidget::TNodeTransform* TImportDefinition::mutable_transform() {
  ::HmiWidget::TNodeTransform* _msg = _internal_mutable_transform();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.transform)
  return _msg;
}
inline void TImportDefinition::set_allocated_transform(::HmiWidget::TNodeTransform* transform) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.transform_;
  }
  if (transform) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(transform);
    if (message_arena != submessage_arena) {
      transform = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, transform, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.transform_ = transform;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.transform)
}

// optional .HmiWidget.TRenderLayerProperties renderLayerProperties = 202;
inline bool TImportDefinition::_internal_has_renderlayerproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.renderlayerproperties_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_renderlayerproperties() const {
  return _internal_has_renderlayerproperties();
}
inline void TImportDefinition::clear_renderlayerproperties() {
  if (_impl_.renderlayerproperties_ != nullptr) _impl_.renderlayerproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::HmiWidget::TRenderLayerProperties& TImportDefinition::_internal_renderlayerproperties() const {
  const ::HmiWidget::TRenderLayerProperties* p = _impl_.renderlayerproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TRenderLayerProperties&>(
      ::HmiWidget::_TRenderLayerProperties_default_instance_);
}
inline const ::HmiWidget::TRenderLayerProperties& TImportDefinition::renderlayerproperties() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.renderLayerProperties)
  return _internal_renderlayerproperties();
}
inline void TImportDefinition::unsafe_arena_set_allocated_renderlayerproperties(
    ::HmiWidget::TRenderLayerProperties* renderlayerproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.renderlayerproperties_);
  }
  _impl_.renderlayerproperties_ = renderlayerproperties;
  if (renderlayerproperties) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.renderLayerProperties)
}
inline ::HmiWidget::TRenderLayerProperties* TImportDefinition::release_renderlayerproperties() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TRenderLayerProperties* temp = _impl_.renderlayerproperties_;
  _impl_.renderlayerproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TRenderLayerProperties* TImportDefinition::unsafe_arena_release_renderlayerproperties() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.renderLayerProperties)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TRenderLayerProperties* temp = _impl_.renderlayerproperties_;
  _impl_.renderlayerproperties_ = nullptr;
  return temp;
}
inline ::HmiWidget::TRenderLayerProperties* TImportDefinition::_internal_mutable_renderlayerproperties() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.renderlayerproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TRenderLayerProperties>(GetArenaForAllocation());
    _impl_.renderlayerproperties_ = p;
  }
  return _impl_.renderlayerproperties_;
}
inline ::HmiWidget::TRenderLayerProperties* TImportDefinition::mutable_renderlayerproperties() {
  ::HmiWidget::TRenderLayerProperties* _msg = _internal_mutable_renderlayerproperties();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.renderLayerProperties)
  return _msg;
}
inline void TImportDefinition::set_allocated_renderlayerproperties(::HmiWidget::TRenderLayerProperties* renderlayerproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.renderlayerproperties_;
  }
  if (renderlayerproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(renderlayerproperties);
    if (message_arena != submessage_arena) {
      renderlayerproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, renderlayerproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.renderlayerproperties_ = renderlayerproperties;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.renderLayerProperties)
}

// optional .HmiWidget.TNodeProperties nodeProperties = 203;
inline bool TImportDefinition::_internal_has_nodeproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nodeproperties_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_nodeproperties() const {
  return _internal_has_nodeproperties();
}
inline void TImportDefinition::clear_nodeproperties() {
  if (_impl_.nodeproperties_ != nullptr) _impl_.nodeproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::HmiWidget::TNodeProperties& TImportDefinition::_internal_nodeproperties() const {
  const ::HmiWidget::TNodeProperties* p = _impl_.nodeproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TNodeProperties&>(
      ::HmiWidget::_TNodeProperties_default_instance_);
}
inline const ::HmiWidget::TNodeProperties& TImportDefinition::nodeproperties() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.nodeProperties)
  return _internal_nodeproperties();
}
inline void TImportDefinition::unsafe_arena_set_allocated_nodeproperties(
    ::HmiWidget::TNodeProperties* nodeproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nodeproperties_);
  }
  _impl_.nodeproperties_ = nodeproperties;
  if (nodeproperties) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.nodeProperties)
}
inline ::HmiWidget::TNodeProperties* TImportDefinition::release_nodeproperties() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HmiWidget::TNodeProperties* temp = _impl_.nodeproperties_;
  _impl_.nodeproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TNodeProperties* TImportDefinition::unsafe_arena_release_nodeproperties() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.nodeProperties)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HmiWidget::TNodeProperties* temp = _impl_.nodeproperties_;
  _impl_.nodeproperties_ = nullptr;
  return temp;
}
inline ::HmiWidget::TNodeProperties* TImportDefinition::_internal_mutable_nodeproperties() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.nodeproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TNodeProperties>(GetArenaForAllocation());
    _impl_.nodeproperties_ = p;
  }
  return _impl_.nodeproperties_;
}
inline ::HmiWidget::TNodeProperties* TImportDefinition::mutable_nodeproperties() {
  ::HmiWidget::TNodeProperties* _msg = _internal_mutable_nodeproperties();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.nodeProperties)
  return _msg;
}
inline void TImportDefinition::set_allocated_nodeproperties(::HmiWidget::TNodeProperties* nodeproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nodeproperties_;
  }
  if (nodeproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nodeproperties);
    if (message_arena != submessage_arena) {
      nodeproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodeproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.nodeproperties_ = nodeproperties;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.nodeProperties)
}

// optional .HmiWidget.TCameraNodeProperties cameraNodeProperties = 204;
inline bool TImportDefinition::_internal_has_cameranodeproperties() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cameranodeproperties_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_cameranodeproperties() const {
  return _internal_has_cameranodeproperties();
}
inline void TImportDefinition::clear_cameranodeproperties() {
  if (_impl_.cameranodeproperties_ != nullptr) _impl_.cameranodeproperties_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::HmiWidget::TCameraNodeProperties& TImportDefinition::_internal_cameranodeproperties() const {
  const ::HmiWidget::TCameraNodeProperties* p = _impl_.cameranodeproperties_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TCameraNodeProperties&>(
      ::HmiWidget::_TCameraNodeProperties_default_instance_);
}
inline const ::HmiWidget::TCameraNodeProperties& TImportDefinition::cameranodeproperties() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.cameraNodeProperties)
  return _internal_cameranodeproperties();
}
inline void TImportDefinition::unsafe_arena_set_allocated_cameranodeproperties(
    ::HmiWidget::TCameraNodeProperties* cameranodeproperties) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameranodeproperties_);
  }
  _impl_.cameranodeproperties_ = cameranodeproperties;
  if (cameranodeproperties) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.cameraNodeProperties)
}
inline ::HmiWidget::TCameraNodeProperties* TImportDefinition::release_cameranodeproperties() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TCameraNodeProperties* temp = _impl_.cameranodeproperties_;
  _impl_.cameranodeproperties_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TCameraNodeProperties* TImportDefinition::unsafe_arena_release_cameranodeproperties() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.cameraNodeProperties)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TCameraNodeProperties* temp = _impl_.cameranodeproperties_;
  _impl_.cameranodeproperties_ = nullptr;
  return temp;
}
inline ::HmiWidget::TCameraNodeProperties* TImportDefinition::_internal_mutable_cameranodeproperties() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.cameranodeproperties_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TCameraNodeProperties>(GetArenaForAllocation());
    _impl_.cameranodeproperties_ = p;
  }
  return _impl_.cameranodeproperties_;
}
inline ::HmiWidget::TCameraNodeProperties* TImportDefinition::mutable_cameranodeproperties() {
  ::HmiWidget::TCameraNodeProperties* _msg = _internal_mutable_cameranodeproperties();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.cameraNodeProperties)
  return _msg;
}
inline void TImportDefinition::set_allocated_cameranodeproperties(::HmiWidget::TCameraNodeProperties* cameranodeproperties) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.cameranodeproperties_;
  }
  if (cameranodeproperties) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(cameranodeproperties);
    if (message_arena != submessage_arena) {
      cameranodeproperties = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameranodeproperties, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.cameranodeproperties_ = cameranodeproperties;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.cameraNodeProperties)
}

// optional .HmiWidget.TWidgetAnimation widgetAnimation = 300;
inline bool TImportDefinition::_internal_has_widgetanimation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.widgetanimation_ != nullptr);
  return value;
}
inline bool TImportDefinition::has_widgetanimation() const {
  return _internal_has_widgetanimation();
}
inline void TImportDefinition::clear_widgetanimation() {
  if (_impl_.widgetanimation_ != nullptr) _impl_.widgetanimation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::HmiWidget::TWidgetAnimation& TImportDefinition::_internal_widgetanimation() const {
  const ::HmiWidget::TWidgetAnimation* p = _impl_.widgetanimation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TWidgetAnimation&>(
      ::HmiWidget::_TWidgetAnimation_default_instance_);
}
inline const ::HmiWidget::TWidgetAnimation& TImportDefinition::widgetanimation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TImportDefinition.widgetAnimation)
  return _internal_widgetanimation();
}
inline void TImportDefinition::unsafe_arena_set_allocated_widgetanimation(
    ::HmiWidget::TWidgetAnimation* widgetanimation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgetanimation_);
  }
  _impl_.widgetanimation_ = widgetanimation;
  if (widgetanimation) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TImportDefinition.widgetAnimation)
}
inline ::HmiWidget::TWidgetAnimation* TImportDefinition::release_widgetanimation() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HmiWidget::TWidgetAnimation* temp = _impl_.widgetanimation_;
  _impl_.widgetanimation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TWidgetAnimation* TImportDefinition::unsafe_arena_release_widgetanimation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TImportDefinition.widgetAnimation)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HmiWidget::TWidgetAnimation* temp = _impl_.widgetanimation_;
  _impl_.widgetanimation_ = nullptr;
  return temp;
}
inline ::HmiWidget::TWidgetAnimation* TImportDefinition::_internal_mutable_widgetanimation() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.widgetanimation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TWidgetAnimation>(GetArenaForAllocation());
    _impl_.widgetanimation_ = p;
  }
  return _impl_.widgetanimation_;
}
inline ::HmiWidget::TWidgetAnimation* TImportDefinition::mutable_widgetanimation() {
  ::HmiWidget::TWidgetAnimation* _msg = _internal_mutable_widgetanimation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TImportDefinition.widgetAnimation)
  return _msg;
}
inline void TImportDefinition::set_allocated_widgetanimation(::HmiWidget::TWidgetAnimation* widgetanimation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widgetanimation_;
  }
  if (widgetanimation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widgetanimation);
    if (message_arena != submessage_arena) {
      widgetanimation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widgetanimation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.widgetanimation_ = widgetanimation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TImportDefinition.widgetAnimation)
}

// -------------------------------------------------------------------

// TDefaultChildModelBindings

// repeated .HmiWidget.TChildModelParameter modelbinding = 1;
inline int TDefaultChildModelBindings::_internal_modelbinding_size() const {
  return _impl_.modelbinding_.size();
}
inline int TDefaultChildModelBindings::modelbinding_size() const {
  return _internal_modelbinding_size();
}
inline void TDefaultChildModelBindings::clear_modelbinding() {
  _impl_.modelbinding_.Clear();
}
inline ::HmiWidget::TChildModelParameter* TDefaultChildModelBindings::mutable_modelbinding(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TDefaultChildModelBindings.modelbinding)
  return _impl_.modelbinding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
TDefaultChildModelBindings::mutable_modelbinding() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TDefaultChildModelBindings.modelbinding)
  return &_impl_.modelbinding_;
}
inline const ::HmiWidget::TChildModelParameter& TDefaultChildModelBindings::_internal_modelbinding(int index) const {
  return _impl_.modelbinding_.Get(index);
}
inline const ::HmiWidget::TChildModelParameter& TDefaultChildModelBindings::modelbinding(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TDefaultChildModelBindings.modelbinding)
  return _internal_modelbinding(index);
}
inline ::HmiWidget::TChildModelParameter* TDefaultChildModelBindings::_internal_add_modelbinding() {
  return _impl_.modelbinding_.Add();
}
inline ::HmiWidget::TChildModelParameter* TDefaultChildModelBindings::add_modelbinding() {
  ::HmiWidget::TChildModelParameter* _add = _internal_add_modelbinding();
  // @@protoc_insertion_point(field_add:HmiWidget.TDefaultChildModelBindings.modelbinding)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
TDefaultChildModelBindings::modelbinding() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TDefaultChildModelBindings.modelbinding)
  return _impl_.modelbinding_;
}

// repeated .TIdentifier useImport = 2;
inline int TDefaultChildModelBindings::_internal_useimport_size() const {
  return _impl_.useimport_.size();
}
inline int TDefaultChildModelBindings::useimport_size() const {
  return _internal_useimport_size();
}
inline ::TIdentifier* TDefaultChildModelBindings::mutable_useimport(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TDefaultChildModelBindings.useImport)
  return _impl_.useimport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TDefaultChildModelBindings::mutable_useimport() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TDefaultChildModelBindings.useImport)
  return &_impl_.useimport_;
}
inline const ::TIdentifier& TDefaultChildModelBindings::_internal_useimport(int index) const {
  return _impl_.useimport_.Get(index);
}
inline const ::TIdentifier& TDefaultChildModelBindings::useimport(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TDefaultChildModelBindings.useImport)
  return _internal_useimport(index);
}
inline ::TIdentifier* TDefaultChildModelBindings::_internal_add_useimport() {
  return _impl_.useimport_.Add();
}
inline ::TIdentifier* TDefaultChildModelBindings::add_useimport() {
  ::TIdentifier* _add = _internal_add_useimport();
  // @@protoc_insertion_point(field_add:HmiWidget.TDefaultChildModelBindings.useImport)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TDefaultChildModelBindings::useimport() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TDefaultChildModelBindings.useImport)
  return _impl_.useimport_;
}

// -------------------------------------------------------------------

// TAddModelBindingsToChild

// optional .TIdentifier childIdentifier = 1;
inline bool TAddModelBindingsToChild::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TAddModelBindingsToChild::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TAddModelBindingsToChild::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TAddModelBindingsToChild::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TAddModelBindingsToChild.childIdentifier)
  return _internal_childidentifier();
}
inline void TAddModelBindingsToChild::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TAddModelBindingsToChild.childIdentifier)
}
inline ::TIdentifier* TAddModelBindingsToChild::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TAddModelBindingsToChild::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TAddModelBindingsToChild.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TAddModelBindingsToChild::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TAddModelBindingsToChild::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TAddModelBindingsToChild.childIdentifier)
  return _msg;
}
inline void TAddModelBindingsToChild::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TAddModelBindingsToChild.childIdentifier)
}

// repeated .HmiWidget.TChildModelParameter modelbinding = 2;
inline int TAddModelBindingsToChild::_internal_modelbinding_size() const {
  return _impl_.modelbinding_.size();
}
inline int TAddModelBindingsToChild::modelbinding_size() const {
  return _internal_modelbinding_size();
}
inline void TAddModelBindingsToChild::clear_modelbinding() {
  _impl_.modelbinding_.Clear();
}
inline ::HmiWidget::TChildModelParameter* TAddModelBindingsToChild::mutable_modelbinding(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TAddModelBindingsToChild.modelbinding)
  return _impl_.modelbinding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
TAddModelBindingsToChild::mutable_modelbinding() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TAddModelBindingsToChild.modelbinding)
  return &_impl_.modelbinding_;
}
inline const ::HmiWidget::TChildModelParameter& TAddModelBindingsToChild::_internal_modelbinding(int index) const {
  return _impl_.modelbinding_.Get(index);
}
inline const ::HmiWidget::TChildModelParameter& TAddModelBindingsToChild::modelbinding(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TAddModelBindingsToChild.modelbinding)
  return _internal_modelbinding(index);
}
inline ::HmiWidget::TChildModelParameter* TAddModelBindingsToChild::_internal_add_modelbinding() {
  return _impl_.modelbinding_.Add();
}
inline ::HmiWidget::TChildModelParameter* TAddModelBindingsToChild::add_modelbinding() {
  ::HmiWidget::TChildModelParameter* _add = _internal_add_modelbinding();
  // @@protoc_insertion_point(field_add:HmiWidget.TAddModelBindingsToChild.modelbinding)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
TAddModelBindingsToChild::modelbinding() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TAddModelBindingsToChild.modelbinding)
  return _impl_.modelbinding_;
}

// optional bool autoBindAllExternals = 3 [default = false];
inline bool TAddModelBindingsToChild::_internal_has_autobindallexternals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TAddModelBindingsToChild::has_autobindallexternals() const {
  return _internal_has_autobindallexternals();
}
inline void TAddModelBindingsToChild::clear_autobindallexternals() {
  _impl_.autobindallexternals_ = false;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline bool TAddModelBindingsToChild::_internal_autobindallexternals() const {
  return _impl_.autobindallexternals_;
}
inline bool TAddModelBindingsToChild::autobindallexternals() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TAddModelBindingsToChild.autoBindAllExternals)
  return _internal_autobindallexternals();
}
inline void TAddModelBindingsToChild::_internal_set_autobindallexternals(bool value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.autobindallexternals_ = value;
}
inline void TAddModelBindingsToChild::set_autobindallexternals(bool value) {
  _internal_set_autobindallexternals(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TAddModelBindingsToChild.autoBindAllExternals)
}

// repeated .TIdentifier exemptedExternalKey = 4;
inline int TAddModelBindingsToChild::_internal_exemptedexternalkey_size() const {
  return _impl_.exemptedexternalkey_.size();
}
inline int TAddModelBindingsToChild::exemptedexternalkey_size() const {
  return _internal_exemptedexternalkey_size();
}
inline ::TIdentifier* TAddModelBindingsToChild::mutable_exemptedexternalkey(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TAddModelBindingsToChild.exemptedExternalKey)
  return _impl_.exemptedexternalkey_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TAddModelBindingsToChild::mutable_exemptedexternalkey() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TAddModelBindingsToChild.exemptedExternalKey)
  return &_impl_.exemptedexternalkey_;
}
inline const ::TIdentifier& TAddModelBindingsToChild::_internal_exemptedexternalkey(int index) const {
  return _impl_.exemptedexternalkey_.Get(index);
}
inline const ::TIdentifier& TAddModelBindingsToChild::exemptedexternalkey(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TAddModelBindingsToChild.exemptedExternalKey)
  return _internal_exemptedexternalkey(index);
}
inline ::TIdentifier* TAddModelBindingsToChild::_internal_add_exemptedexternalkey() {
  return _impl_.exemptedexternalkey_.Add();
}
inline ::TIdentifier* TAddModelBindingsToChild::add_exemptedexternalkey() {
  ::TIdentifier* _add = _internal_add_exemptedexternalkey();
  // @@protoc_insertion_point(field_add:HmiWidget.TAddModelBindingsToChild.exemptedExternalKey)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TAddModelBindingsToChild::exemptedexternalkey() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TAddModelBindingsToChild.exemptedExternalKey)
  return _impl_.exemptedexternalkey_;
}

// -------------------------------------------------------------------

// TWidget_TPrototypeAsset

// optional string ResourceId = 1;
inline bool TWidget_TPrototypeAsset::_internal_has_resourceid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TWidget_TPrototypeAsset::has_resourceid() const {
  return _internal_has_resourceid();
}
inline void TWidget_TPrototypeAsset::clear_resourceid() {
  _impl_.resourceid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& TWidget_TPrototypeAsset::resourceid() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.TPrototypeAsset.ResourceId)
  return _internal_resourceid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TWidget_TPrototypeAsset::set_resourceid(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000001u;
 _impl_.resourceid_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HmiWidget.TWidget.TPrototypeAsset.ResourceId)
}
inline std::string* TWidget_TPrototypeAsset::mutable_resourceid() {
  std::string* _s = _internal_mutable_resourceid();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.TPrototypeAsset.ResourceId)
  return _s;
}
inline const std::string& TWidget_TPrototypeAsset::_internal_resourceid() const {
  return _impl_.resourceid_.Get();
}
inline void TWidget_TPrototypeAsset::_internal_set_resourceid(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.resourceid_.Set(value, GetArenaForAllocation());
}
inline std::string* TWidget_TPrototypeAsset::_internal_mutable_resourceid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.resourceid_.Mutable(GetArenaForAllocation());
}
inline std::string* TWidget_TPrototypeAsset::release_resourceid() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.TPrototypeAsset.ResourceId)
  if (!_internal_has_resourceid()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* p = _impl_.resourceid_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resourceid_.IsDefault()) {
    _impl_.resourceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TWidget_TPrototypeAsset::set_allocated_resourceid(std::string* resourceid) {
  if (resourceid != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.resourceid_.SetAllocated(resourceid, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.resourceid_.IsDefault()) {
    _impl_.resourceid_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.TPrototypeAsset.ResourceId)
}

// optional string AssetIdLegacy = 2 [deprecated = true];
inline bool TWidget_TPrototypeAsset::_internal_has_assetidlegacy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TWidget_TPrototypeAsset::has_assetidlegacy() const {
  return _internal_has_assetidlegacy();
}
inline void TWidget_TPrototypeAsset::clear_assetidlegacy() {
  _impl_.assetidlegacy_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& TWidget_TPrototypeAsset::assetidlegacy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.TPrototypeAsset.AssetIdLegacy)
  return _internal_assetidlegacy();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void TWidget_TPrototypeAsset::set_assetidlegacy(ArgT0&& arg0, ArgT... args) {
 _impl_._has_bits_[0] |= 0x00000002u;
 _impl_.assetidlegacy_.Set(static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:HmiWidget.TWidget.TPrototypeAsset.AssetIdLegacy)
}
inline std::string* TWidget_TPrototypeAsset::mutable_assetidlegacy() {
  std::string* _s = _internal_mutable_assetidlegacy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.TPrototypeAsset.AssetIdLegacy)
  return _s;
}
inline const std::string& TWidget_TPrototypeAsset::_internal_assetidlegacy() const {
  return _impl_.assetidlegacy_.Get();
}
inline void TWidget_TPrototypeAsset::_internal_set_assetidlegacy(const std::string& value) {
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.assetidlegacy_.Set(value, GetArenaForAllocation());
}
inline std::string* TWidget_TPrototypeAsset::_internal_mutable_assetidlegacy() {
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.assetidlegacy_.Mutable(GetArenaForAllocation());
}
inline std::string* TWidget_TPrototypeAsset::release_assetidlegacy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.TPrototypeAsset.AssetIdLegacy)
  if (!_internal_has_assetidlegacy()) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* p = _impl_.assetidlegacy_.Release();
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assetidlegacy_.IsDefault()) {
    _impl_.assetidlegacy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  return p;
}
inline void TWidget_TPrototypeAsset::set_allocated_assetidlegacy(std::string* assetidlegacy) {
  if (assetidlegacy != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.assetidlegacy_.SetAllocated(assetidlegacy, GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (_impl_.assetidlegacy_.IsDefault()) {
    _impl_.assetidlegacy_.Set("", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.TPrototypeAsset.AssetIdLegacy)
}

// optional fixed32 ResourceIdNumericLegacy = 3 [deprecated = true];
inline bool TWidget_TPrototypeAsset::_internal_has_resourceidnumericlegacy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TWidget_TPrototypeAsset::has_resourceidnumericlegacy() const {
  return _internal_has_resourceidnumericlegacy();
}
inline void TWidget_TPrototypeAsset::clear_resourceidnumericlegacy() {
  _impl_.resourceidnumericlegacy_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline uint32_t TWidget_TPrototypeAsset::_internal_resourceidnumericlegacy() const {
  return _impl_.resourceidnumericlegacy_;
}
inline uint32_t TWidget_TPrototypeAsset::resourceidnumericlegacy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.TPrototypeAsset.ResourceIdNumericLegacy)
  return _internal_resourceidnumericlegacy();
}
inline void TWidget_TPrototypeAsset::_internal_set_resourceidnumericlegacy(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.resourceidnumericlegacy_ = value;
}
inline void TWidget_TPrototypeAsset::set_resourceidnumericlegacy(uint32_t value) {
  _internal_set_resourceidnumericlegacy(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidget.TPrototypeAsset.ResourceIdNumericLegacy)
}

// optional fixed64 ResourceIdNumeric = 5;
inline bool TWidget_TPrototypeAsset::_internal_has_resourceidnumeric() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TWidget_TPrototypeAsset::has_resourceidnumeric() const {
  return _internal_has_resourceidnumeric();
}
inline void TWidget_TPrototypeAsset::clear_resourceidnumeric() {
  _impl_.resourceidnumeric_ = uint64_t{0u};
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint64_t TWidget_TPrototypeAsset::_internal_resourceidnumeric() const {
  return _impl_.resourceidnumeric_;
}
inline uint64_t TWidget_TPrototypeAsset::resourceidnumeric() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.TPrototypeAsset.ResourceIdNumeric)
  return _internal_resourceidnumeric();
}
inline void TWidget_TPrototypeAsset::_internal_set_resourceidnumeric(uint64_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.resourceidnumeric_ = value;
}
inline void TWidget_TPrototypeAsset::set_resourceidnumeric(uint64_t value) {
  _internal_set_resourceidnumeric(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidget.TPrototypeAsset.ResourceIdNumeric)
}

// optional .TDataBinding binding = 4;
inline bool TWidget_TPrototypeAsset::_internal_has_binding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.binding_ != nullptr);
  return value;
}
inline bool TWidget_TPrototypeAsset::has_binding() const {
  return _internal_has_binding();
}
inline const ::TDataBinding& TWidget_TPrototypeAsset::_internal_binding() const {
  const ::TDataBinding* p = _impl_.binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidget_TPrototypeAsset::binding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.TPrototypeAsset.binding)
  return _internal_binding();
}
inline void TWidget_TPrototypeAsset::unsafe_arena_set_allocated_binding(
    ::TDataBinding* binding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  _impl_.binding_ = binding;
  if (binding) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.TPrototypeAsset.binding)
}
inline ::TDataBinding* TWidget_TPrototypeAsset::release_binding() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidget_TPrototypeAsset::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.TPrototypeAsset.binding)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidget_TPrototypeAsset::_internal_mutable_binding() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.binding_ = p;
  }
  return _impl_.binding_;
}
inline ::TDataBinding* TWidget_TPrototypeAsset::mutable_binding() {
  ::TDataBinding* _msg = _internal_mutable_binding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.TPrototypeAsset.binding)
  return _msg;
}
inline void TWidget_TPrototypeAsset::set_allocated_binding(::TDataBinding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding));
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.TPrototypeAsset.binding)
}

// -------------------------------------------------------------------

// TWidget

// optional .TIdentifier type = 1;
inline bool TWidget::_internal_has_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.type_ != nullptr);
  return value;
}
inline bool TWidget::has_type() const {
  return _internal_has_type();
}
inline const ::TIdentifier& TWidget::_internal_type() const {
  const ::TIdentifier* p = _impl_.type_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TWidget::type() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.type)
  return _internal_type();
}
inline void TWidget::unsafe_arena_set_allocated_type(
    ::TIdentifier* type) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  _impl_.type_ = type;
  if (type) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.type)
}
inline ::TIdentifier* TWidget::release_type() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.type_;
  _impl_.type_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TWidget::unsafe_arena_release_type() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.type)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.type_;
  _impl_.type_ = nullptr;
  return temp;
}
inline ::TIdentifier* TWidget::_internal_mutable_type() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.type_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.type_ = p;
  }
  return _impl_.type_;
}
inline ::TIdentifier* TWidget::mutable_type() {
  ::TIdentifier* _msg = _internal_mutable_type();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.type)
  return _msg;
}
inline void TWidget::set_allocated_type(::TIdentifier* type) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.type_);
  }
  if (type) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(type));
    if (message_arena != submessage_arena) {
      type = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, type, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.type_ = type;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.type)
}

// optional .TIdentifier prototype = 2;
inline bool TWidget::_internal_has_prototype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prototype_ != nullptr);
  return value;
}
inline bool TWidget::has_prototype() const {
  return _internal_has_prototype();
}
inline const ::TIdentifier& TWidget::_internal_prototype() const {
  const ::TIdentifier* p = _impl_.prototype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TWidget::prototype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.prototype)
  return _internal_prototype();
}
inline void TWidget::unsafe_arena_set_allocated_prototype(
    ::TIdentifier* prototype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prototype_);
  }
  _impl_.prototype_ = prototype;
  if (prototype) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.prototype)
}
inline ::TIdentifier* TWidget::release_prototype() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.prototype_;
  _impl_.prototype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TWidget::unsafe_arena_release_prototype() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.prototype)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.prototype_;
  _impl_.prototype_ = nullptr;
  return temp;
}
inline ::TIdentifier* TWidget::_internal_mutable_prototype() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.prototype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.prototype_ = p;
  }
  return _impl_.prototype_;
}
inline ::TIdentifier* TWidget::mutable_prototype() {
  ::TIdentifier* _msg = _internal_mutable_prototype();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.prototype)
  return _msg;
}
inline void TWidget::set_allocated_prototype(::TIdentifier* prototype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prototype_);
  }
  if (prototype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(prototype));
    if (message_arena != submessage_arena) {
      prototype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prototype, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.prototype_ = prototype;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.prototype)
}

// optional .HmiWidget.TWidget.TPrototypeAsset prototypeAsset = 6;
inline bool TWidget::_internal_has_prototypeasset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.prototypeasset_ != nullptr);
  return value;
}
inline bool TWidget::has_prototypeasset() const {
  return _internal_has_prototypeasset();
}
inline void TWidget::clear_prototypeasset() {
  if (_impl_.prototypeasset_ != nullptr) _impl_.prototypeasset_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TWidget_TPrototypeAsset& TWidget::_internal_prototypeasset() const {
  const ::HmiWidget::TWidget_TPrototypeAsset* p = _impl_.prototypeasset_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TWidget_TPrototypeAsset&>(
      ::HmiWidget::_TWidget_TPrototypeAsset_default_instance_);
}
inline const ::HmiWidget::TWidget_TPrototypeAsset& TWidget::prototypeasset() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.prototypeAsset)
  return _internal_prototypeasset();
}
inline void TWidget::unsafe_arena_set_allocated_prototypeasset(
    ::HmiWidget::TWidget_TPrototypeAsset* prototypeasset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.prototypeasset_);
  }
  _impl_.prototypeasset_ = prototypeasset;
  if (prototypeasset) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.prototypeAsset)
}
inline ::HmiWidget::TWidget_TPrototypeAsset* TWidget::release_prototypeasset() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TWidget_TPrototypeAsset* temp = _impl_.prototypeasset_;
  _impl_.prototypeasset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TWidget_TPrototypeAsset* TWidget::unsafe_arena_release_prototypeasset() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.prototypeAsset)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TWidget_TPrototypeAsset* temp = _impl_.prototypeasset_;
  _impl_.prototypeasset_ = nullptr;
  return temp;
}
inline ::HmiWidget::TWidget_TPrototypeAsset* TWidget::_internal_mutable_prototypeasset() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.prototypeasset_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TWidget_TPrototypeAsset>(GetArenaForAllocation());
    _impl_.prototypeasset_ = p;
  }
  return _impl_.prototypeasset_;
}
inline ::HmiWidget::TWidget_TPrototypeAsset* TWidget::mutable_prototypeasset() {
  ::HmiWidget::TWidget_TPrototypeAsset* _msg = _internal_mutable_prototypeasset();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.prototypeAsset)
  return _msg;
}
inline void TWidget::set_allocated_prototypeasset(::HmiWidget::TWidget_TPrototypeAsset* prototypeasset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.prototypeasset_;
  }
  if (prototypeasset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(prototypeasset);
    if (message_arena != submessage_arena) {
      prototypeasset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, prototypeasset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.prototypeasset_ = prototypeasset;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.prototypeAsset)
}

// optional .HmiWidget.TELevelSelection prototypeLevelSelection = 21 [default = TELevelSelection_Default];
inline bool TWidget::_internal_has_prototypelevelselection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TWidget::has_prototypelevelselection() const {
  return _internal_has_prototypelevelselection();
}
inline void TWidget::clear_prototypelevelselection() {
  _impl_.prototypelevelselection_ = 1;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::HmiWidget::TELevelSelection TWidget::_internal_prototypelevelselection() const {
  return static_cast< ::HmiWidget::TELevelSelection >(_impl_.prototypelevelselection_);
}
inline ::HmiWidget::TELevelSelection TWidget::prototypelevelselection() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.prototypeLevelSelection)
  return _internal_prototypelevelselection();
}
inline void TWidget::_internal_set_prototypelevelselection(::HmiWidget::TELevelSelection value) {
  assert(::HmiWidget::TELevelSelection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.prototypelevelselection_ = value;
}
inline void TWidget::set_prototypelevelselection(::HmiWidget::TELevelSelection value) {
  _internal_set_prototypelevelselection(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidget.prototypeLevelSelection)
}

// repeated .HmiWidget.TChildWidget child = 3;
inline int TWidget::_internal_child_size() const {
  return _impl_.child_.size();
}
inline int TWidget::child_size() const {
  return _internal_child_size();
}
inline void TWidget::clear_child() {
  _impl_.child_.Clear();
}
inline ::HmiWidget::TChildWidget* TWidget::mutable_child(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.child)
  return _impl_.child_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >*
TWidget::mutable_child() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.child)
  return &_impl_.child_;
}
inline const ::HmiWidget::TChildWidget& TWidget::_internal_child(int index) const {
  return _impl_.child_.Get(index);
}
inline const ::HmiWidget::TChildWidget& TWidget::child(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.child)
  return _internal_child(index);
}
inline ::HmiWidget::TChildWidget* TWidget::_internal_add_child() {
  return _impl_.child_.Add();
}
inline ::HmiWidget::TChildWidget* TWidget::add_child() {
  ::HmiWidget::TChildWidget* _add = _internal_add_child();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.child)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildWidget >&
TWidget::child() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.child)
  return _impl_.child_;
}

// repeated .HmiWidget.TExternalModelParameter externalModelValue = 4;
inline int TWidget::_internal_externalmodelvalue_size() const {
  return _impl_.externalmodelvalue_.size();
}
inline int TWidget::externalmodelvalue_size() const {
  return _internal_externalmodelvalue_size();
}
inline void TWidget::clear_externalmodelvalue() {
  _impl_.externalmodelvalue_.Clear();
}
inline ::HmiWidget::TExternalModelParameter* TWidget::mutable_externalmodelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.externalModelValue)
  return _impl_.externalmodelvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >*
TWidget::mutable_externalmodelvalue() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.externalModelValue)
  return &_impl_.externalmodelvalue_;
}
inline const ::HmiWidget::TExternalModelParameter& TWidget::_internal_externalmodelvalue(int index) const {
  return _impl_.externalmodelvalue_.Get(index);
}
inline const ::HmiWidget::TExternalModelParameter& TWidget::externalmodelvalue(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.externalModelValue)
  return _internal_externalmodelvalue(index);
}
inline ::HmiWidget::TExternalModelParameter* TWidget::_internal_add_externalmodelvalue() {
  return _impl_.externalmodelvalue_.Add();
}
inline ::HmiWidget::TExternalModelParameter* TWidget::add_externalmodelvalue() {
  ::HmiWidget::TExternalModelParameter* _add = _internal_add_externalmodelvalue();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.externalModelValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TExternalModelParameter >&
TWidget::externalmodelvalue() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.externalModelValue)
  return _impl_.externalmodelvalue_;
}

// repeated .HmiWidget.TInternalModelParameter internalModelValue = 5;
inline int TWidget::_internal_internalmodelvalue_size() const {
  return _impl_.internalmodelvalue_.size();
}
inline int TWidget::internalmodelvalue_size() const {
  return _internal_internalmodelvalue_size();
}
inline void TWidget::clear_internalmodelvalue() {
  _impl_.internalmodelvalue_.Clear();
}
inline ::HmiWidget::TInternalModelParameter* TWidget::mutable_internalmodelvalue(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.internalModelValue)
  return _impl_.internalmodelvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >*
TWidget::mutable_internalmodelvalue() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.internalModelValue)
  return &_impl_.internalmodelvalue_;
}
inline const ::HmiWidget::TInternalModelParameter& TWidget::_internal_internalmodelvalue(int index) const {
  return _impl_.internalmodelvalue_.Get(index);
}
inline const ::HmiWidget::TInternalModelParameter& TWidget::internalmodelvalue(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.internalModelValue)
  return _internal_internalmodelvalue(index);
}
inline ::HmiWidget::TInternalModelParameter* TWidget::_internal_add_internalmodelvalue() {
  return _impl_.internalmodelvalue_.Add();
}
inline ::HmiWidget::TInternalModelParameter* TWidget::add_internalmodelvalue() {
  ::HmiWidget::TInternalModelParameter* _add = _internal_add_internalmodelvalue();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.internalModelValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TInternalModelParameter >&
TWidget::internalmodelvalue() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.internalModelValue)
  return _impl_.internalmodelvalue_;
}

// repeated .HmiWidget.TNodeParam nodeParam = 7;
inline int TWidget::_internal_nodeparam_size() const {
  return _impl_.nodeparam_.size();
}
inline int TWidget::nodeparam_size() const {
  return _internal_nodeparam_size();
}
inline void TWidget::clear_nodeparam() {
  _impl_.nodeparam_.Clear();
}
inline ::HmiWidget::TNodeParam* TWidget::mutable_nodeparam(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.nodeParam)
  return _impl_.nodeparam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >*
TWidget::mutable_nodeparam() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.nodeParam)
  return &_impl_.nodeparam_;
}
inline const ::HmiWidget::TNodeParam& TWidget::_internal_nodeparam(int index) const {
  return _impl_.nodeparam_.Get(index);
}
inline const ::HmiWidget::TNodeParam& TWidget::nodeparam(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.nodeParam)
  return _internal_nodeparam(index);
}
inline ::HmiWidget::TNodeParam* TWidget::_internal_add_nodeparam() {
  return _impl_.nodeparam_.Add();
}
inline ::HmiWidget::TNodeParam* TWidget::add_nodeparam() {
  ::HmiWidget::TNodeParam* _add = _internal_add_nodeparam();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.nodeParam)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TNodeParam >&
TWidget::nodeparam() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.nodeParam)
  return _impl_.nodeparam_;
}

// repeated .HmiWidget.TResourceParam resourceParam = 23;
inline int TWidget::_internal_resourceparam_size() const {
  return _impl_.resourceparam_.size();
}
inline int TWidget::resourceparam_size() const {
  return _internal_resourceparam_size();
}
inline void TWidget::clear_resourceparam() {
  _impl_.resourceparam_.Clear();
}
inline ::HmiWidget::TResourceParam* TWidget::mutable_resourceparam(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.resourceParam)
  return _impl_.resourceparam_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >*
TWidget::mutable_resourceparam() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.resourceParam)
  return &_impl_.resourceparam_;
}
inline const ::HmiWidget::TResourceParam& TWidget::_internal_resourceparam(int index) const {
  return _impl_.resourceparam_.Get(index);
}
inline const ::HmiWidget::TResourceParam& TWidget::resourceparam(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.resourceParam)
  return _internal_resourceparam(index);
}
inline ::HmiWidget::TResourceParam* TWidget::_internal_add_resourceparam() {
  return _impl_.resourceparam_.Add();
}
inline ::HmiWidget::TResourceParam* TWidget::add_resourceparam() {
  ::HmiWidget::TResourceParam* _add = _internal_add_resourceparam();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.resourceParam)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TResourceParam >&
TWidget::resourceparam() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.resourceParam)
  return _impl_.resourceparam_;
}

// repeated .HmiWidget.TSlot slot = 8;
inline int TWidget::_internal_slot_size() const {
  return _impl_.slot_.size();
}
inline int TWidget::slot_size() const {
  return _internal_slot_size();
}
inline void TWidget::clear_slot() {
  _impl_.slot_.Clear();
}
inline ::HmiWidget::TSlot* TWidget::mutable_slot(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.slot)
  return _impl_.slot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >*
TWidget::mutable_slot() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.slot)
  return &_impl_.slot_;
}
inline const ::HmiWidget::TSlot& TWidget::_internal_slot(int index) const {
  return _impl_.slot_.Get(index);
}
inline const ::HmiWidget::TSlot& TWidget::slot(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.slot)
  return _internal_slot(index);
}
inline ::HmiWidget::TSlot* TWidget::_internal_add_slot() {
  return _impl_.slot_.Add();
}
inline ::HmiWidget::TSlot* TWidget::add_slot() {
  ::HmiWidget::TSlot* _add = _internal_add_slot();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.slot)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSlot >&
TWidget::slot() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.slot)
  return _impl_.slot_;
}

// repeated .HmiWidget.TLayout layout = 9;
inline int TWidget::_internal_layout_size() const {
  return _impl_.layout_.size();
}
inline int TWidget::layout_size() const {
  return _internal_layout_size();
}
inline void TWidget::clear_layout() {
  _impl_.layout_.Clear();
}
inline ::HmiWidget::TLayout* TWidget::mutable_layout(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.layout)
  return _impl_.layout_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >*
TWidget::mutable_layout() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.layout)
  return &_impl_.layout_;
}
inline const ::HmiWidget::TLayout& TWidget::_internal_layout(int index) const {
  return _impl_.layout_.Get(index);
}
inline const ::HmiWidget::TLayout& TWidget::layout(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.layout)
  return _internal_layout(index);
}
inline ::HmiWidget::TLayout* TWidget::_internal_add_layout() {
  return _impl_.layout_.Add();
}
inline ::HmiWidget::TLayout* TWidget::add_layout() {
  ::HmiWidget::TLayout* _add = _internal_add_layout();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.layout)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayout >&
TWidget::layout() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.layout)
  return _impl_.layout_;
}

// repeated .HmiWidget.TScript script = 10;
inline int TWidget::_internal_script_size() const {
  return _impl_.script_.size();
}
inline int TWidget::script_size() const {
  return _internal_script_size();
}
inline void TWidget::clear_script() {
  _impl_.script_.Clear();
}
inline ::HmiWidget::TScript* TWidget::mutable_script(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.script)
  return _impl_.script_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >*
TWidget::mutable_script() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.script)
  return &_impl_.script_;
}
inline const ::HmiWidget::TScript& TWidget::_internal_script(int index) const {
  return _impl_.script_.Get(index);
}
inline const ::HmiWidget::TScript& TWidget::script(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.script)
  return _internal_script(index);
}
inline ::HmiWidget::TScript* TWidget::_internal_add_script() {
  return _impl_.script_.Add();
}
inline ::HmiWidget::TScript* TWidget::add_script() {
  ::HmiWidget::TScript* _add = _internal_add_script();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.script)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScript >&
TWidget::script() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.script)
  return _impl_.script_;
}

// repeated .HmiWidget.TTriggeredSlot triggeredSlot = 11;
inline int TWidget::_internal_triggeredslot_size() const {
  return _impl_.triggeredslot_.size();
}
inline int TWidget::triggeredslot_size() const {
  return _internal_triggeredslot_size();
}
inline void TWidget::clear_triggeredslot() {
  _impl_.triggeredslot_.Clear();
}
inline ::HmiWidget::TTriggeredSlot* TWidget::mutable_triggeredslot(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.triggeredSlot)
  return _impl_.triggeredslot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >*
TWidget::mutable_triggeredslot() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.triggeredSlot)
  return &_impl_.triggeredslot_;
}
inline const ::HmiWidget::TTriggeredSlot& TWidget::_internal_triggeredslot(int index) const {
  return _impl_.triggeredslot_.Get(index);
}
inline const ::HmiWidget::TTriggeredSlot& TWidget::triggeredslot(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.triggeredSlot)
  return _internal_triggeredslot(index);
}
inline ::HmiWidget::TTriggeredSlot* TWidget::_internal_add_triggeredslot() {
  return _impl_.triggeredslot_.Add();
}
inline ::HmiWidget::TTriggeredSlot* TWidget::add_triggeredslot() {
  ::HmiWidget::TTriggeredSlot* _add = _internal_add_triggeredslot();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.triggeredSlot)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >&
TWidget::triggeredslot() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.triggeredSlot)
  return _impl_.triggeredslot_;
}

// repeated .HmiWidget.TCompositeAnimation compositeAnimation = 12;
inline int TWidget::_internal_compositeanimation_size() const {
  return _impl_.compositeanimation_.size();
}
inline int TWidget::compositeanimation_size() const {
  return _internal_compositeanimation_size();
}
inline void TWidget::clear_compositeanimation() {
  _impl_.compositeanimation_.Clear();
}
inline ::HmiWidget::TCompositeAnimation* TWidget::mutable_compositeanimation(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.compositeAnimation)
  return _impl_.compositeanimation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >*
TWidget::mutable_compositeanimation() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.compositeAnimation)
  return &_impl_.compositeanimation_;
}
inline const ::HmiWidget::TCompositeAnimation& TWidget::_internal_compositeanimation(int index) const {
  return _impl_.compositeanimation_.Get(index);
}
inline const ::HmiWidget::TCompositeAnimation& TWidget::compositeanimation(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.compositeAnimation)
  return _internal_compositeanimation(index);
}
inline ::HmiWidget::TCompositeAnimation* TWidget::_internal_add_compositeanimation() {
  return _impl_.compositeanimation_.Add();
}
inline ::HmiWidget::TCompositeAnimation* TWidget::add_compositeanimation() {
  ::HmiWidget::TCompositeAnimation* _add = _internal_add_compositeanimation();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.compositeAnimation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimation >&
TWidget::compositeanimation() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.compositeAnimation)
  return _impl_.compositeanimation_;
}

// repeated .HmiWidget.TTrigger trigger = 13;
inline int TWidget::_internal_trigger_size() const {
  return _impl_.trigger_.size();
}
inline int TWidget::trigger_size() const {
  return _internal_trigger_size();
}
inline void TWidget::clear_trigger() {
  _impl_.trigger_.Clear();
}
inline ::HmiWidget::TTrigger* TWidget::mutable_trigger(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.trigger)
  return _impl_.trigger_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >*
TWidget::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.trigger)
  return &_impl_.trigger_;
}
inline const ::HmiWidget::TTrigger& TWidget::_internal_trigger(int index) const {
  return _impl_.trigger_.Get(index);
}
inline const ::HmiWidget::TTrigger& TWidget::trigger(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.trigger)
  return _internal_trigger(index);
}
inline ::HmiWidget::TTrigger* TWidget::_internal_add_trigger() {
  return _impl_.trigger_.Add();
}
inline ::HmiWidget::TTrigger* TWidget::add_trigger() {
  ::HmiWidget::TTrigger* _add = _internal_add_trigger();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.trigger)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTrigger >&
TWidget::trigger() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.trigger)
  return _impl_.trigger_;
}

// repeated .TIdentifier useImport = 14;
inline int TWidget::_internal_useimport_size() const {
  return _impl_.useimport_.size();
}
inline int TWidget::useimport_size() const {
  return _internal_useimport_size();
}
inline ::TIdentifier* TWidget::mutable_useimport(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.useImport)
  return _impl_.useimport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TWidget::mutable_useimport() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.useImport)
  return &_impl_.useimport_;
}
inline const ::TIdentifier& TWidget::_internal_useimport(int index) const {
  return _impl_.useimport_.Get(index);
}
inline const ::TIdentifier& TWidget::useimport(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.useImport)
  return _internal_useimport(index);
}
inline ::TIdentifier* TWidget::_internal_add_useimport() {
  return _impl_.useimport_.Add();
}
inline ::TIdentifier* TWidget::add_useimport() {
  ::TIdentifier* _add = _internal_add_useimport();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.useImport)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TWidget::useimport() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.useImport)
  return _impl_.useimport_;
}

// optional .HmiWidget.TDefaultChildModelBindings defaultChildModelBindings = 15;
inline bool TWidget::_internal_has_defaultchildmodelbindings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.defaultchildmodelbindings_ != nullptr);
  return value;
}
inline bool TWidget::has_defaultchildmodelbindings() const {
  return _internal_has_defaultchildmodelbindings();
}
inline void TWidget::clear_defaultchildmodelbindings() {
  if (_impl_.defaultchildmodelbindings_ != nullptr) _impl_.defaultchildmodelbindings_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HmiWidget::TDefaultChildModelBindings& TWidget::_internal_defaultchildmodelbindings() const {
  const ::HmiWidget::TDefaultChildModelBindings* p = _impl_.defaultchildmodelbindings_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TDefaultChildModelBindings&>(
      ::HmiWidget::_TDefaultChildModelBindings_default_instance_);
}
inline const ::HmiWidget::TDefaultChildModelBindings& TWidget::defaultchildmodelbindings() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.defaultChildModelBindings)
  return _internal_defaultchildmodelbindings();
}
inline void TWidget::unsafe_arena_set_allocated_defaultchildmodelbindings(
    ::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultchildmodelbindings_);
  }
  _impl_.defaultchildmodelbindings_ = defaultchildmodelbindings;
  if (defaultchildmodelbindings) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.defaultChildModelBindings)
}
inline ::HmiWidget::TDefaultChildModelBindings* TWidget::release_defaultchildmodelbindings() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TDefaultChildModelBindings* temp = _impl_.defaultchildmodelbindings_;
  _impl_.defaultchildmodelbindings_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TDefaultChildModelBindings* TWidget::unsafe_arena_release_defaultchildmodelbindings() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.defaultChildModelBindings)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TDefaultChildModelBindings* temp = _impl_.defaultchildmodelbindings_;
  _impl_.defaultchildmodelbindings_ = nullptr;
  return temp;
}
inline ::HmiWidget::TDefaultChildModelBindings* TWidget::_internal_mutable_defaultchildmodelbindings() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.defaultchildmodelbindings_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TDefaultChildModelBindings>(GetArenaForAllocation());
    _impl_.defaultchildmodelbindings_ = p;
  }
  return _impl_.defaultchildmodelbindings_;
}
inline ::HmiWidget::TDefaultChildModelBindings* TWidget::mutable_defaultchildmodelbindings() {
  ::HmiWidget::TDefaultChildModelBindings* _msg = _internal_mutable_defaultchildmodelbindings();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.defaultChildModelBindings)
  return _msg;
}
inline void TWidget::set_allocated_defaultchildmodelbindings(::HmiWidget::TDefaultChildModelBindings* defaultchildmodelbindings) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.defaultchildmodelbindings_;
  }
  if (defaultchildmodelbindings) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(defaultchildmodelbindings);
    if (message_arena != submessage_arena) {
      defaultchildmodelbindings = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultchildmodelbindings, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.defaultchildmodelbindings_ = defaultchildmodelbindings;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.defaultChildModelBindings)
}

// optional .HmiWidget.TInputConfig input = 16;
inline bool TWidget::_internal_has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline bool TWidget::has_input() const {
  return _internal_has_input();
}
inline void TWidget::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HmiWidget::TInputConfig& TWidget::_internal_input() const {
  const ::HmiWidget::TInputConfig* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TInputConfig&>(
      ::HmiWidget::_TInputConfig_default_instance_);
}
inline const ::HmiWidget::TInputConfig& TWidget::input() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.input)
  return _internal_input();
}
inline void TWidget::unsafe_arena_set_allocated_input(
    ::HmiWidget::TInputConfig* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.input)
}
inline ::HmiWidget::TInputConfig* TWidget::release_input() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TInputConfig* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TInputConfig* TWidget::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.input)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TInputConfig* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::HmiWidget::TInputConfig* TWidget::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TInputConfig>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::HmiWidget::TInputConfig* TWidget::mutable_input() {
  ::HmiWidget::TInputConfig* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.input)
  return _msg;
}
inline void TWidget::set_allocated_input(::HmiWidget::TInputConfig* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.input)
}

// optional .HmiWidget.TForwardSignals forwardSignals = 18;
inline bool TWidget::_internal_has_forwardsignals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.forwardsignals_ != nullptr);
  return value;
}
inline bool TWidget::has_forwardsignals() const {
  return _internal_has_forwardsignals();
}
inline void TWidget::clear_forwardsignals() {
  if (_impl_.forwardsignals_ != nullptr) _impl_.forwardsignals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HmiWidget::TForwardSignals& TWidget::_internal_forwardsignals() const {
  const ::HmiWidget::TForwardSignals* p = _impl_.forwardsignals_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TForwardSignals&>(
      ::HmiWidget::_TForwardSignals_default_instance_);
}
inline const ::HmiWidget::TForwardSignals& TWidget::forwardsignals() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.forwardSignals)
  return _internal_forwardsignals();
}
inline void TWidget::unsafe_arena_set_allocated_forwardsignals(
    ::HmiWidget::TForwardSignals* forwardsignals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forwardsignals_);
  }
  _impl_.forwardsignals_ = forwardsignals;
  if (forwardsignals) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.forwardSignals)
}
inline ::HmiWidget::TForwardSignals* TWidget::release_forwardsignals() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TForwardSignals* temp = _impl_.forwardsignals_;
  _impl_.forwardsignals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TForwardSignals* TWidget::unsafe_arena_release_forwardsignals() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.forwardSignals)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TForwardSignals* temp = _impl_.forwardsignals_;
  _impl_.forwardsignals_ = nullptr;
  return temp;
}
inline ::HmiWidget::TForwardSignals* TWidget::_internal_mutable_forwardsignals() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.forwardsignals_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TForwardSignals>(GetArenaForAllocation());
    _impl_.forwardsignals_ = p;
  }
  return _impl_.forwardsignals_;
}
inline ::HmiWidget::TForwardSignals* TWidget::mutable_forwardsignals() {
  ::HmiWidget::TForwardSignals* _msg = _internal_mutable_forwardsignals();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.forwardSignals)
  return _msg;
}
inline void TWidget::set_allocated_forwardsignals(::HmiWidget::TForwardSignals* forwardsignals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forwardsignals_;
  }
  if (forwardsignals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forwardsignals);
    if (message_arena != submessage_arena) {
      forwardsignals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwardsignals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.forwardsignals_ = forwardsignals;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.forwardSignals)
}

// repeated .HmiWidget.TCurve curve = 19;
inline int TWidget::_internal_curve_size() const {
  return _impl_.curve_.size();
}
inline int TWidget::curve_size() const {
  return _internal_curve_size();
}
inline void TWidget::clear_curve() {
  _impl_.curve_.Clear();
}
inline ::HmiWidget::TCurve* TWidget::mutable_curve(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.curve)
  return _impl_.curve_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >*
TWidget::mutable_curve() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.curve)
  return &_impl_.curve_;
}
inline const ::HmiWidget::TCurve& TWidget::_internal_curve(int index) const {
  return _impl_.curve_.Get(index);
}
inline const ::HmiWidget::TCurve& TWidget::curve(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.curve)
  return _internal_curve(index);
}
inline ::HmiWidget::TCurve* TWidget::_internal_add_curve() {
  return _impl_.curve_.Add();
}
inline ::HmiWidget::TCurve* TWidget::add_curve() {
  ::HmiWidget::TCurve* _add = _internal_add_curve();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.curve)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCurve >&
TWidget::curve() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.curve)
  return _impl_.curve_;
}

// optional .HmiWidget.TRequestLayout requestLayout = 20;
inline bool TWidget::_internal_has_requestlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requestlayout_ != nullptr);
  return value;
}
inline bool TWidget::has_requestlayout() const {
  return _internal_has_requestlayout();
}
inline void TWidget::clear_requestlayout() {
  if (_impl_.requestlayout_ != nullptr) _impl_.requestlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::HmiWidget::TRequestLayout& TWidget::_internal_requestlayout() const {
  const ::HmiWidget::TRequestLayout* p = _impl_.requestlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TRequestLayout&>(
      ::HmiWidget::_TRequestLayout_default_instance_);
}
inline const ::HmiWidget::TRequestLayout& TWidget::requestlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.requestLayout)
  return _internal_requestlayout();
}
inline void TWidget::unsafe_arena_set_allocated_requestlayout(
    ::HmiWidget::TRequestLayout* requestlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requestlayout_);
  }
  _impl_.requestlayout_ = requestlayout;
  if (requestlayout) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidget.requestLayout)
}
inline ::HmiWidget::TRequestLayout* TWidget::release_requestlayout() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TRequestLayout* temp = _impl_.requestlayout_;
  _impl_.requestlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TRequestLayout* TWidget::unsafe_arena_release_requestlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidget.requestLayout)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TRequestLayout* temp = _impl_.requestlayout_;
  _impl_.requestlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TRequestLayout* TWidget::_internal_mutable_requestlayout() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.requestlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TRequestLayout>(GetArenaForAllocation());
    _impl_.requestlayout_ = p;
  }
  return _impl_.requestlayout_;
}
inline ::HmiWidget::TRequestLayout* TWidget::mutable_requestlayout() {
  ::HmiWidget::TRequestLayout* _msg = _internal_mutable_requestlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.requestLayout)
  return _msg;
}
inline void TWidget::set_allocated_requestlayout(::HmiWidget::TRequestLayout* requestlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.requestlayout_;
  }
  if (requestlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requestlayout);
    if (message_arena != submessage_arena) {
      requestlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.requestlayout_ = requestlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidget.requestLayout)
}

// repeated .HmiWidget.TAddModelBindingsToChild addModelBindingsToChild = 22;
inline int TWidget::_internal_addmodelbindingstochild_size() const {
  return _impl_.addmodelbindingstochild_.size();
}
inline int TWidget::addmodelbindingstochild_size() const {
  return _internal_addmodelbindingstochild_size();
}
inline void TWidget::clear_addmodelbindingstochild() {
  _impl_.addmodelbindingstochild_.Clear();
}
inline ::HmiWidget::TAddModelBindingsToChild* TWidget::mutable_addmodelbindingstochild(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidget.addModelBindingsToChild)
  return _impl_.addmodelbindingstochild_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >*
TWidget::mutable_addmodelbindingstochild() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidget.addModelBindingsToChild)
  return &_impl_.addmodelbindingstochild_;
}
inline const ::HmiWidget::TAddModelBindingsToChild& TWidget::_internal_addmodelbindingstochild(int index) const {
  return _impl_.addmodelbindingstochild_.Get(index);
}
inline const ::HmiWidget::TAddModelBindingsToChild& TWidget::addmodelbindingstochild(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidget.addModelBindingsToChild)
  return _internal_addmodelbindingstochild(index);
}
inline ::HmiWidget::TAddModelBindingsToChild* TWidget::_internal_add_addmodelbindingstochild() {
  return _impl_.addmodelbindingstochild_.Add();
}
inline ::HmiWidget::TAddModelBindingsToChild* TWidget::add_addmodelbindingstochild() {
  ::HmiWidget::TAddModelBindingsToChild* _add = _internal_add_addmodelbindingstochild();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidget.addModelBindingsToChild)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TAddModelBindingsToChild >&
TWidget::addmodelbindingstochild() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidget.addModelBindingsToChild)
  return _impl_.addmodelbindingstochild_;
}

// -------------------------------------------------------------------

// TWidgetCollection

// repeated .HmiWidget.TWidget widget = 1;
inline int TWidgetCollection::_internal_widget_size() const {
  return _impl_.widget_.size();
}
inline int TWidgetCollection::widget_size() const {
  return _internal_widget_size();
}
inline void TWidgetCollection::clear_widget() {
  _impl_.widget_.Clear();
}
inline ::HmiWidget::TWidget* TWidgetCollection::mutable_widget(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetCollection.widget)
  return _impl_.widget_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TWidget >*
TWidgetCollection::mutable_widget() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidgetCollection.widget)
  return &_impl_.widget_;
}
inline const ::HmiWidget::TWidget& TWidgetCollection::_internal_widget(int index) const {
  return _impl_.widget_.Get(index);
}
inline const ::HmiWidget::TWidget& TWidgetCollection::widget(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetCollection.widget)
  return _internal_widget(index);
}
inline ::HmiWidget::TWidget* TWidgetCollection::_internal_add_widget() {
  return _impl_.widget_.Add();
}
inline ::HmiWidget::TWidget* TWidgetCollection::add_widget() {
  ::HmiWidget::TWidget* _add = _internal_add_widget();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidgetCollection.widget)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TWidget >&
TWidgetCollection::widget() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidgetCollection.widget)
  return _impl_.widget_;
}

// repeated .HmiWidget.TImportDefinition importDefinition = 2;
inline int TWidgetCollection::_internal_importdefinition_size() const {
  return _impl_.importdefinition_.size();
}
inline int TWidgetCollection::importdefinition_size() const {
  return _internal_importdefinition_size();
}
inline void TWidgetCollection::clear_importdefinition() {
  _impl_.importdefinition_.Clear();
}
inline ::HmiWidget::TImportDefinition* TWidgetCollection::mutable_importdefinition(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetCollection.importDefinition)
  return _impl_.importdefinition_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TImportDefinition >*
TWidgetCollection::mutable_importdefinition() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TWidgetCollection.importDefinition)
  return &_impl_.importdefinition_;
}
inline const ::HmiWidget::TImportDefinition& TWidgetCollection::_internal_importdefinition(int index) const {
  return _impl_.importdefinition_.Get(index);
}
inline const ::HmiWidget::TImportDefinition& TWidgetCollection::importdefinition(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetCollection.importDefinition)
  return _internal_importdefinition(index);
}
inline ::HmiWidget::TImportDefinition* TWidgetCollection::_internal_add_importdefinition() {
  return _impl_.importdefinition_.Add();
}
inline ::HmiWidget::TImportDefinition* TWidgetCollection::add_importdefinition() {
  ::HmiWidget::TImportDefinition* _add = _internal_add_importdefinition();
  // @@protoc_insertion_point(field_add:HmiWidget.TWidgetCollection.importDefinition)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TImportDefinition >&
TWidgetCollection::importdefinition() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TWidgetCollection.importDefinition)
  return _impl_.importdefinition_;
}

// -------------------------------------------------------------------

// TChildWidget

// required .TIdentifier identifier = 1;
inline bool TChildWidget::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TChildWidget::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TChildWidget::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TChildWidget::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildWidget.identifier)
  return _internal_identifier();
}
inline void TChildWidget::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TChildWidget.identifier)
}
inline ::TIdentifier* TChildWidget::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TChildWidget::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TChildWidget.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TChildWidget::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TChildWidget::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildWidget.identifier)
  return _msg;
}
inline void TChildWidget::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TChildWidget.identifier)
}

// required .TIdentifier widgetType = 2;
inline bool TChildWidget::_internal_has_widgettype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.widgettype_ != nullptr);
  return value;
}
inline bool TChildWidget::has_widgettype() const {
  return _internal_has_widgettype();
}
inline const ::TIdentifier& TChildWidget::_internal_widgettype() const {
  const ::TIdentifier* p = _impl_.widgettype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TChildWidget::widgettype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildWidget.widgetType)
  return _internal_widgettype();
}
inline void TChildWidget::unsafe_arena_set_allocated_widgettype(
    ::TIdentifier* widgettype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgettype_);
  }
  _impl_.widgettype_ = widgettype;
  if (widgettype) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TChildWidget.widgetType)
}
inline ::TIdentifier* TChildWidget::release_widgettype() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.widgettype_;
  _impl_.widgettype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TChildWidget::unsafe_arena_release_widgettype() {
  // @@protoc_insertion_point(field_release:HmiWidget.TChildWidget.widgetType)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.widgettype_;
  _impl_.widgettype_ = nullptr;
  return temp;
}
inline ::TIdentifier* TChildWidget::_internal_mutable_widgettype() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.widgettype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.widgettype_ = p;
  }
  return _impl_.widgettype_;
}
inline ::TIdentifier* TChildWidget::mutable_widgettype() {
  ::TIdentifier* _msg = _internal_mutable_widgettype();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildWidget.widgetType)
  return _msg;
}
inline void TChildWidget::set_allocated_widgettype(::TIdentifier* widgettype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgettype_);
  }
  if (widgettype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(widgettype));
    if (message_arena != submessage_arena) {
      widgettype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widgettype, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.widgettype_ = widgettype;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TChildWidget.widgetType)
}

// optional .HmiWidget.TELevelSelection widgetLevelSelection = 7 [default = TELevelSelection_Default];
inline bool TChildWidget::_internal_has_widgetlevelselection() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline bool TChildWidget::has_widgetlevelselection() const {
  return _internal_has_widgetlevelselection();
}
inline void TChildWidget::clear_widgetlevelselection() {
  _impl_.widgetlevelselection_ = 1;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::HmiWidget::TELevelSelection TChildWidget::_internal_widgetlevelselection() const {
  return static_cast< ::HmiWidget::TELevelSelection >(_impl_.widgetlevelselection_);
}
inline ::HmiWidget::TELevelSelection TChildWidget::widgetlevelselection() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildWidget.widgetLevelSelection)
  return _internal_widgetlevelselection();
}
inline void TChildWidget::_internal_set_widgetlevelselection(::HmiWidget::TELevelSelection value) {
  assert(::HmiWidget::TELevelSelection_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000010u;
  _impl_.widgetlevelselection_ = value;
}
inline void TChildWidget::set_widgetlevelselection(::HmiWidget::TELevelSelection value) {
  _internal_set_widgetlevelselection(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TChildWidget.widgetLevelSelection)
}

// repeated .HmiWidget.TChildModelParameter modelbinding = 3;
inline int TChildWidget::_internal_modelbinding_size() const {
  return _impl_.modelbinding_.size();
}
inline int TChildWidget::modelbinding_size() const {
  return _internal_modelbinding_size();
}
inline void TChildWidget::clear_modelbinding() {
  _impl_.modelbinding_.Clear();
}
inline ::HmiWidget::TChildModelParameter* TChildWidget::mutable_modelbinding(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildWidget.modelbinding)
  return _impl_.modelbinding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >*
TChildWidget::mutable_modelbinding() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TChildWidget.modelbinding)
  return &_impl_.modelbinding_;
}
inline const ::HmiWidget::TChildModelParameter& TChildWidget::_internal_modelbinding(int index) const {
  return _impl_.modelbinding_.Get(index);
}
inline const ::HmiWidget::TChildModelParameter& TChildWidget::modelbinding(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildWidget.modelbinding)
  return _internal_modelbinding(index);
}
inline ::HmiWidget::TChildModelParameter* TChildWidget::_internal_add_modelbinding() {
  return _impl_.modelbinding_.Add();
}
inline ::HmiWidget::TChildModelParameter* TChildWidget::add_modelbinding() {
  ::HmiWidget::TChildModelParameter* _add = _internal_add_modelbinding();
  // @@protoc_insertion_point(field_add:HmiWidget.TChildWidget.modelbinding)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TChildModelParameter >&
TChildWidget::modelbinding() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TChildWidget.modelbinding)
  return _impl_.modelbinding_;
}

// repeated .TIdentifier useImport = 4;
inline int TChildWidget::_internal_useimport_size() const {
  return _impl_.useimport_.size();
}
inline int TChildWidget::useimport_size() const {
  return _internal_useimport_size();
}
inline ::TIdentifier* TChildWidget::mutable_useimport(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildWidget.useImport)
  return _impl_.useimport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TChildWidget::mutable_useimport() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TChildWidget.useImport)
  return &_impl_.useimport_;
}
inline const ::TIdentifier& TChildWidget::_internal_useimport(int index) const {
  return _impl_.useimport_.Get(index);
}
inline const ::TIdentifier& TChildWidget::useimport(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildWidget.useImport)
  return _internal_useimport(index);
}
inline ::TIdentifier* TChildWidget::_internal_add_useimport() {
  return _impl_.useimport_.Add();
}
inline ::TIdentifier* TChildWidget::add_useimport() {
  ::TIdentifier* _add = _internal_add_useimport();
  // @@protoc_insertion_point(field_add:HmiWidget.TChildWidget.useImport)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TChildWidget::useimport() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TChildWidget.useImport)
  return _impl_.useimport_;
}

// optional .HmiWidget.TForwardSignals forwardSignals = 5;
inline bool TChildWidget::_internal_has_forwardsignals() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.forwardsignals_ != nullptr);
  return value;
}
inline bool TChildWidget::has_forwardsignals() const {
  return _internal_has_forwardsignals();
}
inline void TChildWidget::clear_forwardsignals() {
  if (_impl_.forwardsignals_ != nullptr) _impl_.forwardsignals_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TForwardSignals& TChildWidget::_internal_forwardsignals() const {
  const ::HmiWidget::TForwardSignals* p = _impl_.forwardsignals_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TForwardSignals&>(
      ::HmiWidget::_TForwardSignals_default_instance_);
}
inline const ::HmiWidget::TForwardSignals& TChildWidget::forwardsignals() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildWidget.forwardSignals)
  return _internal_forwardsignals();
}
inline void TChildWidget::unsafe_arena_set_allocated_forwardsignals(
    ::HmiWidget::TForwardSignals* forwardsignals) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.forwardsignals_);
  }
  _impl_.forwardsignals_ = forwardsignals;
  if (forwardsignals) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TChildWidget.forwardSignals)
}
inline ::HmiWidget::TForwardSignals* TChildWidget::release_forwardsignals() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TForwardSignals* temp = _impl_.forwardsignals_;
  _impl_.forwardsignals_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TForwardSignals* TChildWidget::unsafe_arena_release_forwardsignals() {
  // @@protoc_insertion_point(field_release:HmiWidget.TChildWidget.forwardSignals)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TForwardSignals* temp = _impl_.forwardsignals_;
  _impl_.forwardsignals_ = nullptr;
  return temp;
}
inline ::HmiWidget::TForwardSignals* TChildWidget::_internal_mutable_forwardsignals() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.forwardsignals_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TForwardSignals>(GetArenaForAllocation());
    _impl_.forwardsignals_ = p;
  }
  return _impl_.forwardsignals_;
}
inline ::HmiWidget::TForwardSignals* TChildWidget::mutable_forwardsignals() {
  ::HmiWidget::TForwardSignals* _msg = _internal_mutable_forwardsignals();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildWidget.forwardSignals)
  return _msg;
}
inline void TChildWidget::set_allocated_forwardsignals(::HmiWidget::TForwardSignals* forwardsignals) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.forwardsignals_;
  }
  if (forwardsignals) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(forwardsignals);
    if (message_arena != submessage_arena) {
      forwardsignals = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, forwardsignals, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.forwardsignals_ = forwardsignals;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TChildWidget.forwardSignals)
}

// optional .HmiWidget.TInputConfig input = 6;
inline bool TChildWidget::_internal_has_input() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.input_ != nullptr);
  return value;
}
inline bool TChildWidget::has_input() const {
  return _internal_has_input();
}
inline void TChildWidget::clear_input() {
  if (_impl_.input_ != nullptr) _impl_.input_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HmiWidget::TInputConfig& TChildWidget::_internal_input() const {
  const ::HmiWidget::TInputConfig* p = _impl_.input_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TInputConfig&>(
      ::HmiWidget::_TInputConfig_default_instance_);
}
inline const ::HmiWidget::TInputConfig& TChildWidget::input() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildWidget.input)
  return _internal_input();
}
inline void TChildWidget::unsafe_arena_set_allocated_input(
    ::HmiWidget::TInputConfig* input) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.input_);
  }
  _impl_.input_ = input;
  if (input) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TChildWidget.input)
}
inline ::HmiWidget::TInputConfig* TChildWidget::release_input() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TInputConfig* temp = _impl_.input_;
  _impl_.input_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TInputConfig* TChildWidget::unsafe_arena_release_input() {
  // @@protoc_insertion_point(field_release:HmiWidget.TChildWidget.input)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TInputConfig* temp = _impl_.input_;
  _impl_.input_ = nullptr;
  return temp;
}
inline ::HmiWidget::TInputConfig* TChildWidget::_internal_mutable_input() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.input_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TInputConfig>(GetArenaForAllocation());
    _impl_.input_ = p;
  }
  return _impl_.input_;
}
inline ::HmiWidget::TInputConfig* TChildWidget::mutable_input() {
  ::HmiWidget::TInputConfig* _msg = _internal_mutable_input();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildWidget.input)
  return _msg;
}
inline void TChildWidget::set_allocated_input(::HmiWidget::TInputConfig* input) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.input_;
  }
  if (input) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(input);
    if (message_arena != submessage_arena) {
      input = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, input, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.input_ = input;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TChildWidget.input)
}

// -------------------------------------------------------------------

// TChildModelParameter

// required .TIdentifier key = 1;
inline bool TChildModelParameter::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TChildModelParameter::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TChildModelParameter::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TChildModelParameter::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildModelParameter.key)
  return _internal_key();
}
inline void TChildModelParameter::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TChildModelParameter.key)
}
inline ::TIdentifier* TChildModelParameter::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TChildModelParameter::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TChildModelParameter.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TChildModelParameter::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TChildModelParameter::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildModelParameter.key)
  return _msg;
}
inline void TChildModelParameter::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TChildModelParameter.key)
}

// required .TDataBinding binding = 2;
inline bool TChildModelParameter::_internal_has_binding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.binding_ != nullptr);
  return value;
}
inline bool TChildModelParameter::has_binding() const {
  return _internal_has_binding();
}
inline const ::TDataBinding& TChildModelParameter::_internal_binding() const {
  const ::TDataBinding* p = _impl_.binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TChildModelParameter::binding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TChildModelParameter.binding)
  return _internal_binding();
}
inline void TChildModelParameter::unsafe_arena_set_allocated_binding(
    ::TDataBinding* binding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  _impl_.binding_ = binding;
  if (binding) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TChildModelParameter.binding)
}
inline ::TDataBinding* TChildModelParameter::release_binding() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TChildModelParameter::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TChildModelParameter.binding)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TChildModelParameter::_internal_mutable_binding() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.binding_ = p;
  }
  return _impl_.binding_;
}
inline ::TDataBinding* TChildModelParameter::mutable_binding() {
  ::TDataBinding* _msg = _internal_mutable_binding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TChildModelParameter.binding)
  return _msg;
}
inline void TChildModelParameter::set_allocated_binding(::TDataBinding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding));
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TChildModelParameter.binding)
}

// -------------------------------------------------------------------

// TExternalModelParameter

// required .TIdentifier key = 1;
inline bool TExternalModelParameter::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TExternalModelParameter::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TExternalModelParameter::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TExternalModelParameter::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TExternalModelParameter.key)
  return _internal_key();
}
inline void TExternalModelParameter::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TExternalModelParameter.key)
}
inline ::TIdentifier* TExternalModelParameter::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TExternalModelParameter::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TExternalModelParameter.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TExternalModelParameter::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TExternalModelParameter::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TExternalModelParameter.key)
  return _msg;
}
inline void TExternalModelParameter::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TExternalModelParameter.key)
}

// optional .TVariant variant = 2;
inline bool TExternalModelParameter::_internal_has_variant() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.variant_ != nullptr);
  return value;
}
inline bool TExternalModelParameter::has_variant() const {
  return _internal_has_variant();
}
inline const ::TVariant& TExternalModelParameter::_internal_variant() const {
  const ::TVariant* p = _impl_.variant_;
  return p != nullptr ? *p : reinterpret_cast<const ::TVariant&>(
      ::_TVariant_default_instance_);
}
inline const ::TVariant& TExternalModelParameter::variant() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TExternalModelParameter.variant)
  return _internal_variant();
}
inline void TExternalModelParameter::unsafe_arena_set_allocated_variant(
    ::TVariant* variant) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variant_);
  }
  _impl_.variant_ = variant;
  if (variant) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TExternalModelParameter.variant)
}
inline ::TVariant* TExternalModelParameter::release_variant() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariant* temp = _impl_.variant_;
  _impl_.variant_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TVariant* TExternalModelParameter::unsafe_arena_release_variant() {
  // @@protoc_insertion_point(field_release:HmiWidget.TExternalModelParameter.variant)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariant* temp = _impl_.variant_;
  _impl_.variant_ = nullptr;
  return temp;
}
inline ::TVariant* TExternalModelParameter::_internal_mutable_variant() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.variant_ == nullptr) {
    auto* p = CreateMaybeMessage<::TVariant>(GetArenaForAllocation());
    _impl_.variant_ = p;
  }
  return _impl_.variant_;
}
inline ::TVariant* TExternalModelParameter::mutable_variant() {
  ::TVariant* _msg = _internal_mutable_variant();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TExternalModelParameter.variant)
  return _msg;
}
inline void TExternalModelParameter::set_allocated_variant(::TVariant* variant) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.variant_);
  }
  if (variant) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(variant));
    if (message_arena != submessage_arena) {
      variant = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, variant, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.variant_ = variant;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TExternalModelParameter.variant)
}

// optional .TDataBinding binding = 3;
inline bool TExternalModelParameter::_internal_has_binding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.binding_ != nullptr);
  return value;
}
inline bool TExternalModelParameter::has_binding() const {
  return _internal_has_binding();
}
inline const ::TDataBinding& TExternalModelParameter::_internal_binding() const {
  const ::TDataBinding* p = _impl_.binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TExternalModelParameter::binding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TExternalModelParameter.binding)
  return _internal_binding();
}
inline void TExternalModelParameter::unsafe_arena_set_allocated_binding(
    ::TDataBinding* binding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  _impl_.binding_ = binding;
  if (binding) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TExternalModelParameter.binding)
}
inline ::TDataBinding* TExternalModelParameter::release_binding() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TExternalModelParameter::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TExternalModelParameter.binding)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TExternalModelParameter::_internal_mutable_binding() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.binding_ = p;
  }
  return _impl_.binding_;
}
inline ::TDataBinding* TExternalModelParameter::mutable_binding() {
  ::TDataBinding* _msg = _internal_mutable_binding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TExternalModelParameter.binding)
  return _msg;
}
inline void TExternalModelParameter::set_allocated_binding(::TDataBinding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding));
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TExternalModelParameter.binding)
}

// -------------------------------------------------------------------

// TInternalModelParameter

// required .TIdentifier key = 1;
inline bool TInternalModelParameter::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TInternalModelParameter::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TInternalModelParameter::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TInternalModelParameter::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInternalModelParameter.key)
  return _internal_key();
}
inline void TInternalModelParameter::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TInternalModelParameter.key)
}
inline ::TIdentifier* TInternalModelParameter::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TInternalModelParameter::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TInternalModelParameter.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TInternalModelParameter::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TInternalModelParameter::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TInternalModelParameter.key)
  return _msg;
}
inline void TInternalModelParameter::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TInternalModelParameter.key)
}

// required .TDataBinding binding = 2;
inline bool TInternalModelParameter::_internal_has_binding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.binding_ != nullptr);
  return value;
}
inline bool TInternalModelParameter::has_binding() const {
  return _internal_has_binding();
}
inline const ::TDataBinding& TInternalModelParameter::_internal_binding() const {
  const ::TDataBinding* p = _impl_.binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TInternalModelParameter::binding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TInternalModelParameter.binding)
  return _internal_binding();
}
inline void TInternalModelParameter::unsafe_arena_set_allocated_binding(
    ::TDataBinding* binding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  _impl_.binding_ = binding;
  if (binding) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TInternalModelParameter.binding)
}
inline ::TDataBinding* TInternalModelParameter::release_binding() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TInternalModelParameter::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TInternalModelParameter.binding)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TInternalModelParameter::_internal_mutable_binding() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.binding_ = p;
  }
  return _impl_.binding_;
}
inline ::TDataBinding* TInternalModelParameter::mutable_binding() {
  ::TDataBinding* _msg = _internal_mutable_binding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TInternalModelParameter.binding)
  return _msg;
}
inline void TInternalModelParameter::set_allocated_binding(::TDataBinding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding));
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TInternalModelParameter.binding)
}

// -------------------------------------------------------------------

// TSlot

// required .TIdentifier identifier = 1;
inline bool TSlot::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TSlot::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TSlot::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TSlot::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSlot.identifier)
  return _internal_identifier();
}
inline void TSlot::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TSlot.identifier)
}
inline ::TIdentifier* TSlot::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TSlot::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TSlot.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TSlot::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TSlot::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSlot.identifier)
  return _msg;
}
inline void TSlot::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TSlot.identifier)
}

// repeated .HmiWidget.TCommand command = 2;
inline int TSlot::_internal_command_size() const {
  return _impl_.command_.size();
}
inline int TSlot::command_size() const {
  return _internal_command_size();
}
inline void TSlot::clear_command() {
  _impl_.command_.Clear();
}
inline ::HmiWidget::TCommand* TSlot::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSlot.command)
  return _impl_.command_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >*
TSlot::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TSlot.command)
  return &_impl_.command_;
}
inline const ::HmiWidget::TCommand& TSlot::_internal_command(int index) const {
  return _impl_.command_.Get(index);
}
inline const ::HmiWidget::TCommand& TSlot::command(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSlot.command)
  return _internal_command(index);
}
inline ::HmiWidget::TCommand* TSlot::_internal_add_command() {
  return _impl_.command_.Add();
}
inline ::HmiWidget::TCommand* TSlot::add_command() {
  ::HmiWidget::TCommand* _add = _internal_add_command();
  // @@protoc_insertion_point(field_add:HmiWidget.TSlot.command)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >&
TSlot::command() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TSlot.command)
  return _impl_.command_;
}

// -------------------------------------------------------------------

// TCommand

// optional .HmiWidget.TParameterAssignment assignment = 1;
inline bool TCommand::_internal_has_assignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.assignment_ != nullptr);
  return value;
}
inline bool TCommand::has_assignment() const {
  return _internal_has_assignment();
}
inline void TCommand::clear_assignment() {
  if (_impl_.assignment_ != nullptr) _impl_.assignment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TParameterAssignment& TCommand::_internal_assignment() const {
  const ::HmiWidget::TParameterAssignment* p = _impl_.assignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TParameterAssignment&>(
      ::HmiWidget::_TParameterAssignment_default_instance_);
}
inline const ::HmiWidget::TParameterAssignment& TCommand::assignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.assignment)
  return _internal_assignment();
}
inline void TCommand::unsafe_arena_set_allocated_assignment(
    ::HmiWidget::TParameterAssignment* assignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.assignment_);
  }
  _impl_.assignment_ = assignment;
  if (assignment) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.assignment)
}
inline ::HmiWidget::TParameterAssignment* TCommand::release_assignment() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TParameterAssignment* temp = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TParameterAssignment* TCommand::unsafe_arena_release_assignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.assignment)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TParameterAssignment* temp = _impl_.assignment_;
  _impl_.assignment_ = nullptr;
  return temp;
}
inline ::HmiWidget::TParameterAssignment* TCommand::_internal_mutable_assignment() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.assignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TParameterAssignment>(GetArenaForAllocation());
    _impl_.assignment_ = p;
  }
  return _impl_.assignment_;
}
inline ::HmiWidget::TParameterAssignment* TCommand::mutable_assignment() {
  ::HmiWidget::TParameterAssignment* _msg = _internal_mutable_assignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.assignment)
  return _msg;
}
inline void TCommand::set_allocated_assignment(::HmiWidget::TParameterAssignment* assignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.assignment_;
  }
  if (assignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(assignment);
    if (message_arena != submessage_arena) {
      assignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, assignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.assignment_ = assignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.assignment)
}

// optional .HmiWidget.TParameterValueAssignment valueAssignment = 2;
inline bool TCommand::_internal_has_valueassignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.valueassignment_ != nullptr);
  return value;
}
inline bool TCommand::has_valueassignment() const {
  return _internal_has_valueassignment();
}
inline void TCommand::clear_valueassignment() {
  if (_impl_.valueassignment_ != nullptr) _impl_.valueassignment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TParameterValueAssignment& TCommand::_internal_valueassignment() const {
  const ::HmiWidget::TParameterValueAssignment* p = _impl_.valueassignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TParameterValueAssignment&>(
      ::HmiWidget::_TParameterValueAssignment_default_instance_);
}
inline const ::HmiWidget::TParameterValueAssignment& TCommand::valueassignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.valueAssignment)
  return _internal_valueassignment();
}
inline void TCommand::unsafe_arena_set_allocated_valueassignment(
    ::HmiWidget::TParameterValueAssignment* valueassignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.valueassignment_);
  }
  _impl_.valueassignment_ = valueassignment;
  if (valueassignment) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.valueAssignment)
}
inline ::HmiWidget::TParameterValueAssignment* TCommand::release_valueassignment() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TParameterValueAssignment* temp = _impl_.valueassignment_;
  _impl_.valueassignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TParameterValueAssignment* TCommand::unsafe_arena_release_valueassignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.valueAssignment)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TParameterValueAssignment* temp = _impl_.valueassignment_;
  _impl_.valueassignment_ = nullptr;
  return temp;
}
inline ::HmiWidget::TParameterValueAssignment* TCommand::_internal_mutable_valueassignment() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.valueassignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TParameterValueAssignment>(GetArenaForAllocation());
    _impl_.valueassignment_ = p;
  }
  return _impl_.valueassignment_;
}
inline ::HmiWidget::TParameterValueAssignment* TCommand::mutable_valueassignment() {
  ::HmiWidget::TParameterValueAssignment* _msg = _internal_mutable_valueassignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.valueAssignment)
  return _msg;
}
inline void TCommand::set_allocated_valueassignment(::HmiWidget::TParameterValueAssignment* valueassignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.valueassignment_;
  }
  if (valueassignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(valueassignment);
    if (message_arena != submessage_arena) {
      valueassignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, valueassignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.valueassignment_ = valueassignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.valueAssignment)
}

// optional .HmiWidget.TSignal signal = 4;
inline bool TCommand::_internal_has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_ != nullptr);
  return value;
}
inline bool TCommand::has_signal() const {
  return _internal_has_signal();
}
inline void TCommand::clear_signal() {
  if (_impl_.signal_ != nullptr) _impl_.signal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TSignal& TCommand::_internal_signal() const {
  const ::HmiWidget::TSignal* p = _impl_.signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TSignal&>(
      ::HmiWidget::_TSignal_default_instance_);
}
inline const ::HmiWidget::TSignal& TCommand::signal() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.signal)
  return _internal_signal();
}
inline void TCommand::unsafe_arena_set_allocated_signal(
    ::HmiWidget::TSignal* signal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_);
  }
  _impl_.signal_ = signal;
  if (signal) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.signal)
}
inline ::HmiWidget::TSignal* TCommand::release_signal() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TSignal* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TSignal* TCommand::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.signal)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TSignal* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
  return temp;
}
inline ::HmiWidget::TSignal* TCommand::_internal_mutable_signal() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TSignal>(GetArenaForAllocation());
    _impl_.signal_ = p;
  }
  return _impl_.signal_;
}
inline ::HmiWidget::TSignal* TCommand::mutable_signal() {
  ::HmiWidget::TSignal* _msg = _internal_mutable_signal();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.signal)
  return _msg;
}
inline void TCommand::set_allocated_signal(::HmiWidget::TSignal* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signal_;
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signal);
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.signal)
}

// optional .HmiWidget.TAnimationTrigger animationTrigger = 5;
inline bool TCommand::_internal_has_animationtrigger() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animationtrigger_ != nullptr);
  return value;
}
inline bool TCommand::has_animationtrigger() const {
  return _internal_has_animationtrigger();
}
inline void TCommand::clear_animationtrigger() {
  if (_impl_.animationtrigger_ != nullptr) _impl_.animationtrigger_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HmiWidget::TAnimationTrigger& TCommand::_internal_animationtrigger() const {
  const ::HmiWidget::TAnimationTrigger* p = _impl_.animationtrigger_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TAnimationTrigger&>(
      ::HmiWidget::_TAnimationTrigger_default_instance_);
}
inline const ::HmiWidget::TAnimationTrigger& TCommand::animationtrigger() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.animationTrigger)
  return _internal_animationtrigger();
}
inline void TCommand::unsafe_arena_set_allocated_animationtrigger(
    ::HmiWidget::TAnimationTrigger* animationtrigger) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animationtrigger_);
  }
  _impl_.animationtrigger_ = animationtrigger;
  if (animationtrigger) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.animationTrigger)
}
inline ::HmiWidget::TAnimationTrigger* TCommand::release_animationtrigger() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TAnimationTrigger* temp = _impl_.animationtrigger_;
  _impl_.animationtrigger_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TAnimationTrigger* TCommand::unsafe_arena_release_animationtrigger() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.animationTrigger)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TAnimationTrigger* temp = _impl_.animationtrigger_;
  _impl_.animationtrigger_ = nullptr;
  return temp;
}
inline ::HmiWidget::TAnimationTrigger* TCommand::_internal_mutable_animationtrigger() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.animationtrigger_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TAnimationTrigger>(GetArenaForAllocation());
    _impl_.animationtrigger_ = p;
  }
  return _impl_.animationtrigger_;
}
inline ::HmiWidget::TAnimationTrigger* TCommand::mutable_animationtrigger() {
  ::HmiWidget::TAnimationTrigger* _msg = _internal_mutable_animationtrigger();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.animationTrigger)
  return _msg;
}
inline void TCommand::set_allocated_animationtrigger(::HmiWidget::TAnimationTrigger* animationtrigger) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.animationtrigger_;
  }
  if (animationtrigger) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(animationtrigger);
    if (message_arena != submessage_arena) {
      animationtrigger = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animationtrigger, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.animationtrigger_ = animationtrigger;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.animationTrigger)
}

// optional .HmiWidget.TMultiCommand multiCommand = 6;
inline bool TCommand::_internal_has_multicommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.multicommand_ != nullptr);
  return value;
}
inline bool TCommand::has_multicommand() const {
  return _internal_has_multicommand();
}
inline void TCommand::clear_multicommand() {
  if (_impl_.multicommand_ != nullptr) _impl_.multicommand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HmiWidget::TMultiCommand& TCommand::_internal_multicommand() const {
  const ::HmiWidget::TMultiCommand* p = _impl_.multicommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TMultiCommand&>(
      ::HmiWidget::_TMultiCommand_default_instance_);
}
inline const ::HmiWidget::TMultiCommand& TCommand::multicommand() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.multiCommand)
  return _internal_multicommand();
}
inline void TCommand::unsafe_arena_set_allocated_multicommand(
    ::HmiWidget::TMultiCommand* multicommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.multicommand_);
  }
  _impl_.multicommand_ = multicommand;
  if (multicommand) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.multiCommand)
}
inline ::HmiWidget::TMultiCommand* TCommand::release_multicommand() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TMultiCommand* temp = _impl_.multicommand_;
  _impl_.multicommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TMultiCommand* TCommand::unsafe_arena_release_multicommand() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.multiCommand)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TMultiCommand* temp = _impl_.multicommand_;
  _impl_.multicommand_ = nullptr;
  return temp;
}
inline ::HmiWidget::TMultiCommand* TCommand::_internal_mutable_multicommand() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.multicommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TMultiCommand>(GetArenaForAllocation());
    _impl_.multicommand_ = p;
  }
  return _impl_.multicommand_;
}
inline ::HmiWidget::TMultiCommand* TCommand::mutable_multicommand() {
  ::HmiWidget::TMultiCommand* _msg = _internal_mutable_multicommand();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.multiCommand)
  return _msg;
}
inline void TCommand::set_allocated_multicommand(::HmiWidget::TMultiCommand* multicommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.multicommand_;
  }
  if (multicommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(multicommand);
    if (message_arena != submessage_arena) {
      multicommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, multicommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.multicommand_ = multicommand;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.multiCommand)
}

// optional .HmiWidget.TRequestLayout requestLayout = 8;
inline bool TCommand::_internal_has_requestlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.requestlayout_ != nullptr);
  return value;
}
inline bool TCommand::has_requestlayout() const {
  return _internal_has_requestlayout();
}
inline void TCommand::clear_requestlayout() {
  if (_impl_.requestlayout_ != nullptr) _impl_.requestlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::HmiWidget::TRequestLayout& TCommand::_internal_requestlayout() const {
  const ::HmiWidget::TRequestLayout* p = _impl_.requestlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TRequestLayout&>(
      ::HmiWidget::_TRequestLayout_default_instance_);
}
inline const ::HmiWidget::TRequestLayout& TCommand::requestlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.requestLayout)
  return _internal_requestlayout();
}
inline void TCommand::unsafe_arena_set_allocated_requestlayout(
    ::HmiWidget::TRequestLayout* requestlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.requestlayout_);
  }
  _impl_.requestlayout_ = requestlayout;
  if (requestlayout) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.requestLayout)
}
inline ::HmiWidget::TRequestLayout* TCommand::release_requestlayout() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TRequestLayout* temp = _impl_.requestlayout_;
  _impl_.requestlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TRequestLayout* TCommand::unsafe_arena_release_requestlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.requestLayout)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TRequestLayout* temp = _impl_.requestlayout_;
  _impl_.requestlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TRequestLayout* TCommand::_internal_mutable_requestlayout() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.requestlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TRequestLayout>(GetArenaForAllocation());
    _impl_.requestlayout_ = p;
  }
  return _impl_.requestlayout_;
}
inline ::HmiWidget::TRequestLayout* TCommand::mutable_requestlayout() {
  ::HmiWidget::TRequestLayout* _msg = _internal_mutable_requestlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.requestLayout)
  return _msg;
}
inline void TCommand::set_allocated_requestlayout(::HmiWidget::TRequestLayout* requestlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.requestlayout_;
  }
  if (requestlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(requestlayout);
    if (message_arena != submessage_arena) {
      requestlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, requestlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.requestlayout_ = requestlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.requestLayout)
}

// optional .HmiWidget.TDebugOutputCommand debugOutput = 9;
inline bool TCommand::_internal_has_debugoutput() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.debugoutput_ != nullptr);
  return value;
}
inline bool TCommand::has_debugoutput() const {
  return _internal_has_debugoutput();
}
inline void TCommand::clear_debugoutput() {
  if (_impl_.debugoutput_ != nullptr) _impl_.debugoutput_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::HmiWidget::TDebugOutputCommand& TCommand::_internal_debugoutput() const {
  const ::HmiWidget::TDebugOutputCommand* p = _impl_.debugoutput_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TDebugOutputCommand&>(
      ::HmiWidget::_TDebugOutputCommand_default_instance_);
}
inline const ::HmiWidget::TDebugOutputCommand& TCommand::debugoutput() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.debugOutput)
  return _internal_debugoutput();
}
inline void TCommand::unsafe_arena_set_allocated_debugoutput(
    ::HmiWidget::TDebugOutputCommand* debugoutput) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.debugoutput_);
  }
  _impl_.debugoutput_ = debugoutput;
  if (debugoutput) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.debugOutput)
}
inline ::HmiWidget::TDebugOutputCommand* TCommand::release_debugoutput() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HmiWidget::TDebugOutputCommand* temp = _impl_.debugoutput_;
  _impl_.debugoutput_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TDebugOutputCommand* TCommand::unsafe_arena_release_debugoutput() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.debugOutput)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HmiWidget::TDebugOutputCommand* temp = _impl_.debugoutput_;
  _impl_.debugoutput_ = nullptr;
  return temp;
}
inline ::HmiWidget::TDebugOutputCommand* TCommand::_internal_mutable_debugoutput() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.debugoutput_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TDebugOutputCommand>(GetArenaForAllocation());
    _impl_.debugoutput_ = p;
  }
  return _impl_.debugoutput_;
}
inline ::HmiWidget::TDebugOutputCommand* TCommand::mutable_debugoutput() {
  ::HmiWidget::TDebugOutputCommand* _msg = _internal_mutable_debugoutput();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.debugOutput)
  return _msg;
}
inline void TCommand::set_allocated_debugoutput(::HmiWidget::TDebugOutputCommand* debugoutput) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.debugoutput_;
  }
  if (debugoutput) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(debugoutput);
    if (message_arena != submessage_arena) {
      debugoutput = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, debugoutput, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.debugoutput_ = debugoutput;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.debugOutput)
}

// optional .HmiWidget.TWidgetDataObjectSetValue widgetDataObjectSetValue = 10;
inline bool TCommand::_internal_has_widgetdataobjectsetvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.widgetdataobjectsetvalue_ != nullptr);
  return value;
}
inline bool TCommand::has_widgetdataobjectsetvalue() const {
  return _internal_has_widgetdataobjectsetvalue();
}
inline void TCommand::clear_widgetdataobjectsetvalue() {
  if (_impl_.widgetdataobjectsetvalue_ != nullptr) _impl_.widgetdataobjectsetvalue_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::HmiWidget::TWidgetDataObjectSetValue& TCommand::_internal_widgetdataobjectsetvalue() const {
  const ::HmiWidget::TWidgetDataObjectSetValue* p = _impl_.widgetdataobjectsetvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TWidgetDataObjectSetValue&>(
      ::HmiWidget::_TWidgetDataObjectSetValue_default_instance_);
}
inline const ::HmiWidget::TWidgetDataObjectSetValue& TCommand::widgetdataobjectsetvalue() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.widgetDataObjectSetValue)
  return _internal_widgetdataobjectsetvalue();
}
inline void TCommand::unsafe_arena_set_allocated_widgetdataobjectsetvalue(
    ::HmiWidget::TWidgetDataObjectSetValue* widgetdataobjectsetvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgetdataobjectsetvalue_);
  }
  _impl_.widgetdataobjectsetvalue_ = widgetdataobjectsetvalue;
  if (widgetdataobjectsetvalue) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.widgetDataObjectSetValue)
}
inline ::HmiWidget::TWidgetDataObjectSetValue* TCommand::release_widgetdataobjectsetvalue() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TWidgetDataObjectSetValue* temp = _impl_.widgetdataobjectsetvalue_;
  _impl_.widgetdataobjectsetvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TWidgetDataObjectSetValue* TCommand::unsafe_arena_release_widgetdataobjectsetvalue() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.widgetDataObjectSetValue)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TWidgetDataObjectSetValue* temp = _impl_.widgetdataobjectsetvalue_;
  _impl_.widgetdataobjectsetvalue_ = nullptr;
  return temp;
}
inline ::HmiWidget::TWidgetDataObjectSetValue* TCommand::_internal_mutable_widgetdataobjectsetvalue() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.widgetdataobjectsetvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TWidgetDataObjectSetValue>(GetArenaForAllocation());
    _impl_.widgetdataobjectsetvalue_ = p;
  }
  return _impl_.widgetdataobjectsetvalue_;
}
inline ::HmiWidget::TWidgetDataObjectSetValue* TCommand::mutable_widgetdataobjectsetvalue() {
  ::HmiWidget::TWidgetDataObjectSetValue* _msg = _internal_mutable_widgetdataobjectsetvalue();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.widgetDataObjectSetValue)
  return _msg;
}
inline void TCommand::set_allocated_widgetdataobjectsetvalue(::HmiWidget::TWidgetDataObjectSetValue* widgetdataobjectsetvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widgetdataobjectsetvalue_;
  }
  if (widgetdataobjectsetvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widgetdataobjectsetvalue);
    if (message_arena != submessage_arena) {
      widgetdataobjectsetvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widgetdataobjectsetvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.widgetdataobjectsetvalue_ = widgetdataobjectsetvalue;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.widgetDataObjectSetValue)
}

// optional .HmiWidget.TWidgetDataObjectCreateProvider widgetDataObjectCreateProvider = 11;
inline bool TCommand::_internal_has_widgetdataobjectcreateprovider() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.widgetdataobjectcreateprovider_ != nullptr);
  return value;
}
inline bool TCommand::has_widgetdataobjectcreateprovider() const {
  return _internal_has_widgetdataobjectcreateprovider();
}
inline void TCommand::clear_widgetdataobjectcreateprovider() {
  if (_impl_.widgetdataobjectcreateprovider_ != nullptr) _impl_.widgetdataobjectcreateprovider_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::HmiWidget::TWidgetDataObjectCreateProvider& TCommand::_internal_widgetdataobjectcreateprovider() const {
  const ::HmiWidget::TWidgetDataObjectCreateProvider* p = _impl_.widgetdataobjectcreateprovider_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TWidgetDataObjectCreateProvider&>(
      ::HmiWidget::_TWidgetDataObjectCreateProvider_default_instance_);
}
inline const ::HmiWidget::TWidgetDataObjectCreateProvider& TCommand::widgetdataobjectcreateprovider() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.widgetDataObjectCreateProvider)
  return _internal_widgetdataobjectcreateprovider();
}
inline void TCommand::unsafe_arena_set_allocated_widgetdataobjectcreateprovider(
    ::HmiWidget::TWidgetDataObjectCreateProvider* widgetdataobjectcreateprovider) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgetdataobjectcreateprovider_);
  }
  _impl_.widgetdataobjectcreateprovider_ = widgetdataobjectcreateprovider;
  if (widgetdataobjectcreateprovider) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.widgetDataObjectCreateProvider)
}
inline ::HmiWidget::TWidgetDataObjectCreateProvider* TCommand::release_widgetdataobjectcreateprovider() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HmiWidget::TWidgetDataObjectCreateProvider* temp = _impl_.widgetdataobjectcreateprovider_;
  _impl_.widgetdataobjectcreateprovider_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TWidgetDataObjectCreateProvider* TCommand::unsafe_arena_release_widgetdataobjectcreateprovider() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.widgetDataObjectCreateProvider)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HmiWidget::TWidgetDataObjectCreateProvider* temp = _impl_.widgetdataobjectcreateprovider_;
  _impl_.widgetdataobjectcreateprovider_ = nullptr;
  return temp;
}
inline ::HmiWidget::TWidgetDataObjectCreateProvider* TCommand::_internal_mutable_widgetdataobjectcreateprovider() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.widgetdataobjectcreateprovider_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TWidgetDataObjectCreateProvider>(GetArenaForAllocation());
    _impl_.widgetdataobjectcreateprovider_ = p;
  }
  return _impl_.widgetdataobjectcreateprovider_;
}
inline ::HmiWidget::TWidgetDataObjectCreateProvider* TCommand::mutable_widgetdataobjectcreateprovider() {
  ::HmiWidget::TWidgetDataObjectCreateProvider* _msg = _internal_mutable_widgetdataobjectcreateprovider();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.widgetDataObjectCreateProvider)
  return _msg;
}
inline void TCommand::set_allocated_widgetdataobjectcreateprovider(::HmiWidget::TWidgetDataObjectCreateProvider* widgetdataobjectcreateprovider) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widgetdataobjectcreateprovider_;
  }
  if (widgetdataobjectcreateprovider) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widgetdataobjectcreateprovider);
    if (message_arena != submessage_arena) {
      widgetdataobjectcreateprovider = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widgetdataobjectcreateprovider, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.widgetdataobjectcreateprovider_ = widgetdataobjectcreateprovider;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.widgetDataObjectCreateProvider)
}

// optional .HmiWidget.TWidgetDataObjectCreateConsumer widgetDataObjectCreateConsumer = 12;
inline bool TCommand::_internal_has_widgetdataobjectcreateconsumer() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.widgetdataobjectcreateconsumer_ != nullptr);
  return value;
}
inline bool TCommand::has_widgetdataobjectcreateconsumer() const {
  return _internal_has_widgetdataobjectcreateconsumer();
}
inline void TCommand::clear_widgetdataobjectcreateconsumer() {
  if (_impl_.widgetdataobjectcreateconsumer_ != nullptr) _impl_.widgetdataobjectcreateconsumer_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::HmiWidget::TWidgetDataObjectCreateConsumer& TCommand::_internal_widgetdataobjectcreateconsumer() const {
  const ::HmiWidget::TWidgetDataObjectCreateConsumer* p = _impl_.widgetdataobjectcreateconsumer_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TWidgetDataObjectCreateConsumer&>(
      ::HmiWidget::_TWidgetDataObjectCreateConsumer_default_instance_);
}
inline const ::HmiWidget::TWidgetDataObjectCreateConsumer& TCommand::widgetdataobjectcreateconsumer() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.widgetDataObjectCreateConsumer)
  return _internal_widgetdataobjectcreateconsumer();
}
inline void TCommand::unsafe_arena_set_allocated_widgetdataobjectcreateconsumer(
    ::HmiWidget::TWidgetDataObjectCreateConsumer* widgetdataobjectcreateconsumer) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgetdataobjectcreateconsumer_);
  }
  _impl_.widgetdataobjectcreateconsumer_ = widgetdataobjectcreateconsumer;
  if (widgetdataobjectcreateconsumer) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.widgetDataObjectCreateConsumer)
}
inline ::HmiWidget::TWidgetDataObjectCreateConsumer* TCommand::release_widgetdataobjectcreateconsumer() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HmiWidget::TWidgetDataObjectCreateConsumer* temp = _impl_.widgetdataobjectcreateconsumer_;
  _impl_.widgetdataobjectcreateconsumer_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TWidgetDataObjectCreateConsumer* TCommand::unsafe_arena_release_widgetdataobjectcreateconsumer() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.widgetDataObjectCreateConsumer)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HmiWidget::TWidgetDataObjectCreateConsumer* temp = _impl_.widgetdataobjectcreateconsumer_;
  _impl_.widgetdataobjectcreateconsumer_ = nullptr;
  return temp;
}
inline ::HmiWidget::TWidgetDataObjectCreateConsumer* TCommand::_internal_mutable_widgetdataobjectcreateconsumer() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.widgetdataobjectcreateconsumer_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TWidgetDataObjectCreateConsumer>(GetArenaForAllocation());
    _impl_.widgetdataobjectcreateconsumer_ = p;
  }
  return _impl_.widgetdataobjectcreateconsumer_;
}
inline ::HmiWidget::TWidgetDataObjectCreateConsumer* TCommand::mutable_widgetdataobjectcreateconsumer() {
  ::HmiWidget::TWidgetDataObjectCreateConsumer* _msg = _internal_mutable_widgetdataobjectcreateconsumer();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.widgetDataObjectCreateConsumer)
  return _msg;
}
inline void TCommand::set_allocated_widgetdataobjectcreateconsumer(::HmiWidget::TWidgetDataObjectCreateConsumer* widgetdataobjectcreateconsumer) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widgetdataobjectcreateconsumer_;
  }
  if (widgetdataobjectcreateconsumer) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widgetdataobjectcreateconsumer);
    if (message_arena != submessage_arena) {
      widgetdataobjectcreateconsumer = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widgetdataobjectcreateconsumer, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.widgetdataobjectcreateconsumer_ = widgetdataobjectcreateconsumer;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.widgetDataObjectCreateConsumer)
}

// optional .HmiWidget.TUpdateDcsmMetadataCommand updateDcsmMetadata = 13;
inline bool TCommand::_internal_has_updatedcsmmetadata() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.updatedcsmmetadata_ != nullptr);
  return value;
}
inline bool TCommand::has_updatedcsmmetadata() const {
  return _internal_has_updatedcsmmetadata();
}
inline void TCommand::clear_updatedcsmmetadata() {
  if (_impl_.updatedcsmmetadata_ != nullptr) _impl_.updatedcsmmetadata_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::HmiWidget::TUpdateDcsmMetadataCommand& TCommand::_internal_updatedcsmmetadata() const {
  const ::HmiWidget::TUpdateDcsmMetadataCommand* p = _impl_.updatedcsmmetadata_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TUpdateDcsmMetadataCommand&>(
      ::HmiWidget::_TUpdateDcsmMetadataCommand_default_instance_);
}
inline const ::HmiWidget::TUpdateDcsmMetadataCommand& TCommand::updatedcsmmetadata() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.updateDcsmMetadata)
  return _internal_updatedcsmmetadata();
}
inline void TCommand::unsafe_arena_set_allocated_updatedcsmmetadata(
    ::HmiWidget::TUpdateDcsmMetadataCommand* updatedcsmmetadata) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.updatedcsmmetadata_);
  }
  _impl_.updatedcsmmetadata_ = updatedcsmmetadata;
  if (updatedcsmmetadata) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.updateDcsmMetadata)
}
inline ::HmiWidget::TUpdateDcsmMetadataCommand* TCommand::release_updatedcsmmetadata() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HmiWidget::TUpdateDcsmMetadataCommand* temp = _impl_.updatedcsmmetadata_;
  _impl_.updatedcsmmetadata_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TUpdateDcsmMetadataCommand* TCommand::unsafe_arena_release_updatedcsmmetadata() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.updateDcsmMetadata)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HmiWidget::TUpdateDcsmMetadataCommand* temp = _impl_.updatedcsmmetadata_;
  _impl_.updatedcsmmetadata_ = nullptr;
  return temp;
}
inline ::HmiWidget::TUpdateDcsmMetadataCommand* TCommand::_internal_mutable_updatedcsmmetadata() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.updatedcsmmetadata_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TUpdateDcsmMetadataCommand>(GetArenaForAllocation());
    _impl_.updatedcsmmetadata_ = p;
  }
  return _impl_.updatedcsmmetadata_;
}
inline ::HmiWidget::TUpdateDcsmMetadataCommand* TCommand::mutable_updatedcsmmetadata() {
  ::HmiWidget::TUpdateDcsmMetadataCommand* _msg = _internal_mutable_updatedcsmmetadata();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.updateDcsmMetadata)
  return _msg;
}
inline void TCommand::set_allocated_updatedcsmmetadata(::HmiWidget::TUpdateDcsmMetadataCommand* updatedcsmmetadata) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.updatedcsmmetadata_;
  }
  if (updatedcsmmetadata) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(updatedcsmmetadata);
    if (message_arena != submessage_arena) {
      updatedcsmmetadata = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, updatedcsmmetadata, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.updatedcsmmetadata_ = updatedcsmmetadata;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.updateDcsmMetadata)
}

// optional .HmiWidget.TSignalParameterValuesExtractor signalParameterValuesExtractor = 14;
inline bool TCommand::_internal_has_signalparametervaluesextractor() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signalparametervaluesextractor_ != nullptr);
  return value;
}
inline bool TCommand::has_signalparametervaluesextractor() const {
  return _internal_has_signalparametervaluesextractor();
}
inline void TCommand::clear_signalparametervaluesextractor() {
  if (_impl_.signalparametervaluesextractor_ != nullptr) _impl_.signalparametervaluesextractor_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::HmiWidget::TSignalParameterValuesExtractor& TCommand::_internal_signalparametervaluesextractor() const {
  const ::HmiWidget::TSignalParameterValuesExtractor* p = _impl_.signalparametervaluesextractor_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TSignalParameterValuesExtractor&>(
      ::HmiWidget::_TSignalParameterValuesExtractor_default_instance_);
}
inline const ::HmiWidget::TSignalParameterValuesExtractor& TCommand::signalparametervaluesextractor() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.signalParameterValuesExtractor)
  return _internal_signalparametervaluesextractor();
}
inline void TCommand::unsafe_arena_set_allocated_signalparametervaluesextractor(
    ::HmiWidget::TSignalParameterValuesExtractor* signalparametervaluesextractor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signalparametervaluesextractor_);
  }
  _impl_.signalparametervaluesextractor_ = signalparametervaluesextractor;
  if (signalparametervaluesextractor) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.signalParameterValuesExtractor)
}
inline ::HmiWidget::TSignalParameterValuesExtractor* TCommand::release_signalparametervaluesextractor() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HmiWidget::TSignalParameterValuesExtractor* temp = _impl_.signalparametervaluesextractor_;
  _impl_.signalparametervaluesextractor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TSignalParameterValuesExtractor* TCommand::unsafe_arena_release_signalparametervaluesextractor() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.signalParameterValuesExtractor)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HmiWidget::TSignalParameterValuesExtractor* temp = _impl_.signalparametervaluesextractor_;
  _impl_.signalparametervaluesextractor_ = nullptr;
  return temp;
}
inline ::HmiWidget::TSignalParameterValuesExtractor* TCommand::_internal_mutable_signalparametervaluesextractor() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.signalparametervaluesextractor_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TSignalParameterValuesExtractor>(GetArenaForAllocation());
    _impl_.signalparametervaluesextractor_ = p;
  }
  return _impl_.signalparametervaluesextractor_;
}
inline ::HmiWidget::TSignalParameterValuesExtractor* TCommand::mutable_signalparametervaluesextractor() {
  ::HmiWidget::TSignalParameterValuesExtractor* _msg = _internal_mutable_signalparametervaluesextractor();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.signalParameterValuesExtractor)
  return _msg;
}
inline void TCommand::set_allocated_signalparametervaluesextractor(::HmiWidget::TSignalParameterValuesExtractor* signalparametervaluesextractor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.signalparametervaluesextractor_;
  }
  if (signalparametervaluesextractor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(signalparametervaluesextractor);
    if (message_arena != submessage_arena) {
      signalparametervaluesextractor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signalparametervaluesextractor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.signalparametervaluesextractor_ = signalparametervaluesextractor;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.signalParameterValuesExtractor)
}

// optional .TDataBinding condition = 7;
inline bool TCommand::_internal_has_condition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.condition_ != nullptr);
  return value;
}
inline bool TCommand::has_condition() const {
  return _internal_has_condition();
}
inline const ::TDataBinding& TCommand::_internal_condition() const {
  const ::TDataBinding* p = _impl_.condition_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCommand::condition() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCommand.condition)
  return _internal_condition();
}
inline void TCommand::unsafe_arena_set_allocated_condition(
    ::TDataBinding* condition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  _impl_.condition_ = condition;
  if (condition) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCommand.condition)
}
inline ::TDataBinding* TCommand::release_condition() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCommand::unsafe_arena_release_condition() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCommand.condition)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.condition_;
  _impl_.condition_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCommand::_internal_mutable_condition() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.condition_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.condition_ = p;
  }
  return _impl_.condition_;
}
inline ::TDataBinding* TCommand::mutable_condition() {
  ::TDataBinding* _msg = _internal_mutable_condition();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCommand.condition)
  return _msg;
}
inline void TCommand::set_allocated_condition(::TDataBinding* condition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.condition_);
  }
  if (condition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(condition));
    if (message_arena != submessage_arena) {
      condition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, condition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.condition_ = condition;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCommand.condition)
}

// -------------------------------------------------------------------

// TMultiCommand

// repeated .HmiWidget.TCommand command = 1;
inline int TMultiCommand::_internal_command_size() const {
  return _impl_.command_.size();
}
inline int TMultiCommand::command_size() const {
  return _internal_command_size();
}
inline void TMultiCommand::clear_command() {
  _impl_.command_.Clear();
}
inline ::HmiWidget::TCommand* TMultiCommand::mutable_command(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TMultiCommand.command)
  return _impl_.command_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >*
TMultiCommand::mutable_command() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TMultiCommand.command)
  return &_impl_.command_;
}
inline const ::HmiWidget::TCommand& TMultiCommand::_internal_command(int index) const {
  return _impl_.command_.Get(index);
}
inline const ::HmiWidget::TCommand& TMultiCommand::command(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TMultiCommand.command)
  return _internal_command(index);
}
inline ::HmiWidget::TCommand* TMultiCommand::_internal_add_command() {
  return _impl_.command_.Add();
}
inline ::HmiWidget::TCommand* TMultiCommand::add_command() {
  ::HmiWidget::TCommand* _add = _internal_add_command();
  // @@protoc_insertion_point(field_add:HmiWidget.TMultiCommand.command)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCommand >&
TMultiCommand::command() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TMultiCommand.command)
  return _impl_.command_;
}

// -------------------------------------------------------------------

// TParameterAssignment

// required .TIdentifier key = 1;
inline bool TParameterAssignment::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TParameterAssignment::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TParameterAssignment::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TParameterAssignment::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterAssignment.key)
  return _internal_key();
}
inline void TParameterAssignment::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TParameterAssignment.key)
}
inline ::TIdentifier* TParameterAssignment::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TParameterAssignment::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TParameterAssignment.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TParameterAssignment::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TParameterAssignment::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TParameterAssignment.key)
  return _msg;
}
inline void TParameterAssignment::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TParameterAssignment.key)
}

// required .TDataBinding binding = 2;
inline bool TParameterAssignment::_internal_has_binding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.binding_ != nullptr);
  return value;
}
inline bool TParameterAssignment::has_binding() const {
  return _internal_has_binding();
}
inline const ::TDataBinding& TParameterAssignment::_internal_binding() const {
  const ::TDataBinding* p = _impl_.binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TParameterAssignment::binding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterAssignment.binding)
  return _internal_binding();
}
inline void TParameterAssignment::unsafe_arena_set_allocated_binding(
    ::TDataBinding* binding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  _impl_.binding_ = binding;
  if (binding) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TParameterAssignment.binding)
}
inline ::TDataBinding* TParameterAssignment::release_binding() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TParameterAssignment::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TParameterAssignment.binding)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TParameterAssignment::_internal_mutable_binding() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.binding_ = p;
  }
  return _impl_.binding_;
}
inline ::TDataBinding* TParameterAssignment::mutable_binding() {
  ::TDataBinding* _msg = _internal_mutable_binding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TParameterAssignment.binding)
  return _msg;
}
inline void TParameterAssignment::set_allocated_binding(::TDataBinding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding));
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TParameterAssignment.binding)
}

// optional .TIdentifier target = 3;
inline bool TParameterAssignment::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline bool TParameterAssignment::has_target() const {
  return _internal_has_target();
}
inline const ::TIdentifier& TParameterAssignment::_internal_target() const {
  const ::TIdentifier* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TParameterAssignment::target() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterAssignment.target)
  return _internal_target();
}
inline void TParameterAssignment::unsafe_arena_set_allocated_target(
    ::TIdentifier* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TParameterAssignment.target)
}
inline ::TIdentifier* TParameterAssignment::release_target() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TIdentifier* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TParameterAssignment::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:HmiWidget.TParameterAssignment.target)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TIdentifier* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::TIdentifier* TParameterAssignment::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::TIdentifier* TParameterAssignment::mutable_target() {
  ::TIdentifier* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TParameterAssignment.target)
  return _msg;
}
inline void TParameterAssignment::set_allocated_target(::TIdentifier* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TParameterAssignment.target)
}

// optional .HmiWidget.TEAssignmentTarget targetType = 4 [default = TEAssignmentTarget_Local];
inline bool TParameterAssignment::_internal_has_targettype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TParameterAssignment::has_targettype() const {
  return _internal_has_targettype();
}
inline void TParameterAssignment::clear_targettype() {
  _impl_.targettype_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::HmiWidget::TEAssignmentTarget TParameterAssignment::_internal_targettype() const {
  return static_cast< ::HmiWidget::TEAssignmentTarget >(_impl_.targettype_);
}
inline ::HmiWidget::TEAssignmentTarget TParameterAssignment::targettype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterAssignment.targetType)
  return _internal_targettype();
}
inline void TParameterAssignment::_internal_set_targettype(::HmiWidget::TEAssignmentTarget value) {
  assert(::HmiWidget::TEAssignmentTarget_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.targettype_ = value;
}
inline void TParameterAssignment::set_targettype(::HmiWidget::TEAssignmentTarget value) {
  _internal_set_targettype(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TParameterAssignment.targetType)
}

// -------------------------------------------------------------------

// TParameterValueAssignment

// required .TIdentifier key = 1;
inline bool TParameterValueAssignment::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TParameterValueAssignment::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TParameterValueAssignment::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TParameterValueAssignment::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterValueAssignment.key)
  return _internal_key();
}
inline void TParameterValueAssignment::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TParameterValueAssignment.key)
}
inline ::TIdentifier* TParameterValueAssignment::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TParameterValueAssignment::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TParameterValueAssignment.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TParameterValueAssignment::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TParameterValueAssignment::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TParameterValueAssignment.key)
  return _msg;
}
inline void TParameterValueAssignment::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TParameterValueAssignment.key)
}

// required .TDataBinding binding = 2;
inline bool TParameterValueAssignment::_internal_has_binding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.binding_ != nullptr);
  return value;
}
inline bool TParameterValueAssignment::has_binding() const {
  return _internal_has_binding();
}
inline const ::TDataBinding& TParameterValueAssignment::_internal_binding() const {
  const ::TDataBinding* p = _impl_.binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TParameterValueAssignment::binding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterValueAssignment.binding)
  return _internal_binding();
}
inline void TParameterValueAssignment::unsafe_arena_set_allocated_binding(
    ::TDataBinding* binding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  _impl_.binding_ = binding;
  if (binding) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TParameterValueAssignment.binding)
}
inline ::TDataBinding* TParameterValueAssignment::release_binding() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TParameterValueAssignment::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TParameterValueAssignment.binding)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TParameterValueAssignment::_internal_mutable_binding() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.binding_ = p;
  }
  return _impl_.binding_;
}
inline ::TDataBinding* TParameterValueAssignment::mutable_binding() {
  ::TDataBinding* _msg = _internal_mutable_binding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TParameterValueAssignment.binding)
  return _msg;
}
inline void TParameterValueAssignment::set_allocated_binding(::TDataBinding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding));
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TParameterValueAssignment.binding)
}

// optional .TIdentifier target = 3;
inline bool TParameterValueAssignment::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline bool TParameterValueAssignment::has_target() const {
  return _internal_has_target();
}
inline const ::TIdentifier& TParameterValueAssignment::_internal_target() const {
  const ::TIdentifier* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TParameterValueAssignment::target() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterValueAssignment.target)
  return _internal_target();
}
inline void TParameterValueAssignment::unsafe_arena_set_allocated_target(
    ::TIdentifier* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TParameterValueAssignment.target)
}
inline ::TIdentifier* TParameterValueAssignment::release_target() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TIdentifier* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TParameterValueAssignment::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:HmiWidget.TParameterValueAssignment.target)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TIdentifier* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::TIdentifier* TParameterValueAssignment::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::TIdentifier* TParameterValueAssignment::mutable_target() {
  ::TIdentifier* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TParameterValueAssignment.target)
  return _msg;
}
inline void TParameterValueAssignment::set_allocated_target(::TIdentifier* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TParameterValueAssignment.target)
}

// optional .HmiWidget.TEAssignmentTarget targetType = 4 [default = TEAssignmentTarget_Local];
inline bool TParameterValueAssignment::_internal_has_targettype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TParameterValueAssignment::has_targettype() const {
  return _internal_has_targettype();
}
inline void TParameterValueAssignment::clear_targettype() {
  _impl_.targettype_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::HmiWidget::TEAssignmentTarget TParameterValueAssignment::_internal_targettype() const {
  return static_cast< ::HmiWidget::TEAssignmentTarget >(_impl_.targettype_);
}
inline ::HmiWidget::TEAssignmentTarget TParameterValueAssignment::targettype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TParameterValueAssignment.targetType)
  return _internal_targettype();
}
inline void TParameterValueAssignment::_internal_set_targettype(::HmiWidget::TEAssignmentTarget value) {
  assert(::HmiWidget::TEAssignmentTarget_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.targettype_ = value;
}
inline void TParameterValueAssignment::set_targettype(::HmiWidget::TEAssignmentTarget value) {
  _internal_set_targettype(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TParameterValueAssignment.targetType)
}

// -------------------------------------------------------------------

// TSignalParameterValuesExtractor_TAssignment

// optional .TIdentifier key = 1;
inline bool TSignalParameterValuesExtractor_TAssignment::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TSignalParameterValuesExtractor_TAssignment::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TSignalParameterValuesExtractor_TAssignment::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TSignalParameterValuesExtractor_TAssignment::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignalParameterValuesExtractor.TAssignment.key)
  return _internal_key();
}
inline void TSignalParameterValuesExtractor_TAssignment::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TSignalParameterValuesExtractor.TAssignment.key)
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TSignalParameterValuesExtractor.TAssignment.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSignalParameterValuesExtractor.TAssignment.key)
  return _msg;
}
inline void TSignalParameterValuesExtractor_TAssignment::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TSignalParameterValuesExtractor.TAssignment.key)
}

// optional .TIdentifier parameterKey = 2;
inline bool TSignalParameterValuesExtractor_TAssignment::_internal_has_parameterkey() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.parameterkey_ != nullptr);
  return value;
}
inline bool TSignalParameterValuesExtractor_TAssignment::has_parameterkey() const {
  return _internal_has_parameterkey();
}
inline const ::TIdentifier& TSignalParameterValuesExtractor_TAssignment::_internal_parameterkey() const {
  const ::TIdentifier* p = _impl_.parameterkey_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TSignalParameterValuesExtractor_TAssignment::parameterkey() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignalParameterValuesExtractor.TAssignment.parameterKey)
  return _internal_parameterkey();
}
inline void TSignalParameterValuesExtractor_TAssignment::unsafe_arena_set_allocated_parameterkey(
    ::TIdentifier* parameterkey) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parameterkey_);
  }
  _impl_.parameterkey_ = parameterkey;
  if (parameterkey) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TSignalParameterValuesExtractor.TAssignment.parameterKey)
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::release_parameterkey() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.parameterkey_;
  _impl_.parameterkey_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::unsafe_arena_release_parameterkey() {
  // @@protoc_insertion_point(field_release:HmiWidget.TSignalParameterValuesExtractor.TAssignment.parameterKey)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.parameterkey_;
  _impl_.parameterkey_ = nullptr;
  return temp;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::_internal_mutable_parameterkey() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.parameterkey_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.parameterkey_ = p;
  }
  return _impl_.parameterkey_;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::mutable_parameterkey() {
  ::TIdentifier* _msg = _internal_mutable_parameterkey();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSignalParameterValuesExtractor.TAssignment.parameterKey)
  return _msg;
}
inline void TSignalParameterValuesExtractor_TAssignment::set_allocated_parameterkey(::TIdentifier* parameterkey) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.parameterkey_);
  }
  if (parameterkey) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(parameterkey));
    if (message_arena != submessage_arena) {
      parameterkey = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, parameterkey, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.parameterkey_ = parameterkey;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TSignalParameterValuesExtractor.TAssignment.parameterKey)
}

// optional .TIdentifier target = 3;
inline bool TSignalParameterValuesExtractor_TAssignment::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_ != nullptr);
  return value;
}
inline bool TSignalParameterValuesExtractor_TAssignment::has_target() const {
  return _internal_has_target();
}
inline const ::TIdentifier& TSignalParameterValuesExtractor_TAssignment::_internal_target() const {
  const ::TIdentifier* p = _impl_.target_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TSignalParameterValuesExtractor_TAssignment::target() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignalParameterValuesExtractor.TAssignment.target)
  return _internal_target();
}
inline void TSignalParameterValuesExtractor_TAssignment::unsafe_arena_set_allocated_target(
    ::TIdentifier* target) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  _impl_.target_ = target;
  if (target) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TSignalParameterValuesExtractor.TAssignment.target)
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::release_target() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TIdentifier* temp = _impl_.target_;
  _impl_.target_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::unsafe_arena_release_target() {
  // @@protoc_insertion_point(field_release:HmiWidget.TSignalParameterValuesExtractor.TAssignment.target)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TIdentifier* temp = _impl_.target_;
  _impl_.target_ = nullptr;
  return temp;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::_internal_mutable_target() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.target_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.target_ = p;
  }
  return _impl_.target_;
}
inline ::TIdentifier* TSignalParameterValuesExtractor_TAssignment::mutable_target() {
  ::TIdentifier* _msg = _internal_mutable_target();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSignalParameterValuesExtractor.TAssignment.target)
  return _msg;
}
inline void TSignalParameterValuesExtractor_TAssignment::set_allocated_target(::TIdentifier* target) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.target_);
  }
  if (target) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(target));
    if (message_arena != submessage_arena) {
      target = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, target, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.target_ = target;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TSignalParameterValuesExtractor.TAssignment.target)
}

// optional .HmiWidget.TEAssignmentTarget targetType = 4 [default = TEAssignmentTarget_Local];
inline bool TSignalParameterValuesExtractor_TAssignment::_internal_has_targettype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TSignalParameterValuesExtractor_TAssignment::has_targettype() const {
  return _internal_has_targettype();
}
inline void TSignalParameterValuesExtractor_TAssignment::clear_targettype() {
  _impl_.targettype_ = 1;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::HmiWidget::TEAssignmentTarget TSignalParameterValuesExtractor_TAssignment::_internal_targettype() const {
  return static_cast< ::HmiWidget::TEAssignmentTarget >(_impl_.targettype_);
}
inline ::HmiWidget::TEAssignmentTarget TSignalParameterValuesExtractor_TAssignment::targettype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignalParameterValuesExtractor.TAssignment.targetType)
  return _internal_targettype();
}
inline void TSignalParameterValuesExtractor_TAssignment::_internal_set_targettype(::HmiWidget::TEAssignmentTarget value) {
  assert(::HmiWidget::TEAssignmentTarget_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.targettype_ = value;
}
inline void TSignalParameterValuesExtractor_TAssignment::set_targettype(::HmiWidget::TEAssignmentTarget value) {
  _internal_set_targettype(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TSignalParameterValuesExtractor.TAssignment.targetType)
}

// -------------------------------------------------------------------

// TSignalParameterValuesExtractor

// repeated .HmiWidget.TSignalParameterValuesExtractor.TAssignment assignment = 1;
inline int TSignalParameterValuesExtractor::_internal_assignment_size() const {
  return _impl_.assignment_.size();
}
inline int TSignalParameterValuesExtractor::assignment_size() const {
  return _internal_assignment_size();
}
inline void TSignalParameterValuesExtractor::clear_assignment() {
  _impl_.assignment_.Clear();
}
inline ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* TSignalParameterValuesExtractor::mutable_assignment(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSignalParameterValuesExtractor.assignment)
  return _impl_.assignment_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSignalParameterValuesExtractor_TAssignment >*
TSignalParameterValuesExtractor::mutable_assignment() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TSignalParameterValuesExtractor.assignment)
  return &_impl_.assignment_;
}
inline const ::HmiWidget::TSignalParameterValuesExtractor_TAssignment& TSignalParameterValuesExtractor::_internal_assignment(int index) const {
  return _impl_.assignment_.Get(index);
}
inline const ::HmiWidget::TSignalParameterValuesExtractor_TAssignment& TSignalParameterValuesExtractor::assignment(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignalParameterValuesExtractor.assignment)
  return _internal_assignment(index);
}
inline ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* TSignalParameterValuesExtractor::_internal_add_assignment() {
  return _impl_.assignment_.Add();
}
inline ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* TSignalParameterValuesExtractor::add_assignment() {
  ::HmiWidget::TSignalParameterValuesExtractor_TAssignment* _add = _internal_add_assignment();
  // @@protoc_insertion_point(field_add:HmiWidget.TSignalParameterValuesExtractor.assignment)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TSignalParameterValuesExtractor_TAssignment >&
TSignalParameterValuesExtractor::assignment() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TSignalParameterValuesExtractor.assignment)
  return _impl_.assignment_;
}

// -------------------------------------------------------------------

// TSignal

// required .TIdentifier signalId = 1;
inline bool TSignal::_internal_has_signalid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signalid_ != nullptr);
  return value;
}
inline bool TSignal::has_signalid() const {
  return _internal_has_signalid();
}
inline const ::TIdentifier& TSignal::_internal_signalid() const {
  const ::TIdentifier* p = _impl_.signalid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TSignal::signalid() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignal.signalId)
  return _internal_signalid();
}
inline void TSignal::unsafe_arena_set_allocated_signalid(
    ::TIdentifier* signalid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signalid_);
  }
  _impl_.signalid_ = signalid;
  if (signalid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TSignal.signalId)
}
inline ::TIdentifier* TSignal::release_signalid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.signalid_;
  _impl_.signalid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TSignal::unsafe_arena_release_signalid() {
  // @@protoc_insertion_point(field_release:HmiWidget.TSignal.signalId)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.signalid_;
  _impl_.signalid_ = nullptr;
  return temp;
}
inline ::TIdentifier* TSignal::_internal_mutable_signalid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signalid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.signalid_ = p;
  }
  return _impl_.signalid_;
}
inline ::TIdentifier* TSignal::mutable_signalid() {
  ::TIdentifier* _msg = _internal_mutable_signalid();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSignal.signalId)
  return _msg;
}
inline void TSignal::set_allocated_signalid(::TIdentifier* signalid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signalid_);
  }
  if (signalid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signalid));
    if (message_arena != submessage_arena) {
      signalid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signalid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signalid_ = signalid;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TSignal.signalId)
}

// optional .TIdentifier targetChildId = 2;
inline bool TSignal::_internal_has_targetchildid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.targetchildid_ != nullptr);
  return value;
}
inline bool TSignal::has_targetchildid() const {
  return _internal_has_targetchildid();
}
inline const ::TIdentifier& TSignal::_internal_targetchildid() const {
  const ::TIdentifier* p = _impl_.targetchildid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TSignal::targetchildid() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignal.targetChildId)
  return _internal_targetchildid();
}
inline void TSignal::unsafe_arena_set_allocated_targetchildid(
    ::TIdentifier* targetchildid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetchildid_);
  }
  _impl_.targetchildid_ = targetchildid;
  if (targetchildid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TSignal.targetChildId)
}
inline ::TIdentifier* TSignal::release_targetchildid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.targetchildid_;
  _impl_.targetchildid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TSignal::unsafe_arena_release_targetchildid() {
  // @@protoc_insertion_point(field_release:HmiWidget.TSignal.targetChildId)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.targetchildid_;
  _impl_.targetchildid_ = nullptr;
  return temp;
}
inline ::TIdentifier* TSignal::_internal_mutable_targetchildid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.targetchildid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.targetchildid_ = p;
  }
  return _impl_.targetchildid_;
}
inline ::TIdentifier* TSignal::mutable_targetchildid() {
  ::TIdentifier* _msg = _internal_mutable_targetchildid();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSignal.targetChildId)
  return _msg;
}
inline void TSignal::set_allocated_targetchildid(::TIdentifier* targetchildid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.targetchildid_);
  }
  if (targetchildid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(targetchildid));
    if (message_arena != submessage_arena) {
      targetchildid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, targetchildid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.targetchildid_ = targetchildid;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TSignal.targetChildId)
}

// repeated .TDataBinding parameter = 3;
inline int TSignal::_internal_parameter_size() const {
  return _impl_.parameter_.size();
}
inline int TSignal::parameter_size() const {
  return _internal_parameter_size();
}
inline ::TDataBinding* TSignal::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TSignal.parameter)
  return _impl_.parameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
TSignal::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TSignal.parameter)
  return &_impl_.parameter_;
}
inline const ::TDataBinding& TSignal::_internal_parameter(int index) const {
  return _impl_.parameter_.Get(index);
}
inline const ::TDataBinding& TSignal::parameter(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignal.parameter)
  return _internal_parameter(index);
}
inline ::TDataBinding* TSignal::_internal_add_parameter() {
  return _impl_.parameter_.Add();
}
inline ::TDataBinding* TSignal::add_parameter() {
  ::TDataBinding* _add = _internal_add_parameter();
  // @@protoc_insertion_point(field_add:HmiWidget.TSignal.parameter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
TSignal::parameter() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TSignal.parameter)
  return _impl_.parameter_;
}

// optional .HmiWidget.TESignalTarget target = 4;
inline bool TSignal::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TSignal::has_target() const {
  return _internal_has_target();
}
inline void TSignal::clear_target() {
  _impl_.target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::HmiWidget::TESignalTarget TSignal::_internal_target() const {
  return static_cast< ::HmiWidget::TESignalTarget >(_impl_.target_);
}
inline ::HmiWidget::TESignalTarget TSignal::target() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignal.target)
  return _internal_target();
}
inline void TSignal::_internal_set_target(::HmiWidget::TESignalTarget value) {
  assert(::HmiWidget::TESignalTarget_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.target_ = value;
}
inline void TSignal::set_target(::HmiWidget::TESignalTarget value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TSignal.target)
}

// optional uint32 targetLevel = 5;
inline bool TSignal::_internal_has_targetlevel() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TSignal::has_targetlevel() const {
  return _internal_has_targetlevel();
}
inline void TSignal::clear_targetlevel() {
  _impl_.targetlevel_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline uint32_t TSignal::_internal_targetlevel() const {
  return _impl_.targetlevel_;
}
inline uint32_t TSignal::targetlevel() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TSignal.targetLevel)
  return _internal_targetlevel();
}
inline void TSignal::_internal_set_targetlevel(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.targetlevel_ = value;
}
inline void TSignal::set_targetlevel(uint32_t value) {
  _internal_set_targetlevel(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TSignal.targetLevel)
}

// -------------------------------------------------------------------

// TRequestLayout

// optional .TIdentifier identifier = 1;
inline bool TRequestLayout::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TRequestLayout::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TRequestLayout::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TRequestLayout::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRequestLayout.identifier)
  return _internal_identifier();
}
inline void TRequestLayout::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRequestLayout.identifier)
}
inline ::TIdentifier* TRequestLayout::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TRequestLayout::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRequestLayout.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TRequestLayout::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TRequestLayout::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRequestLayout.identifier)
  return _msg;
}
inline void TRequestLayout::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRequestLayout.identifier)
}

// optional .TDataBinding binding = 2;
inline bool TRequestLayout::_internal_has_binding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.binding_ != nullptr);
  return value;
}
inline bool TRequestLayout::has_binding() const {
  return _internal_has_binding();
}
inline const ::TDataBinding& TRequestLayout::_internal_binding() const {
  const ::TDataBinding* p = _impl_.binding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TRequestLayout::binding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TRequestLayout.binding)
  return _internal_binding();
}
inline void TRequestLayout::unsafe_arena_set_allocated_binding(
    ::TDataBinding* binding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  _impl_.binding_ = binding;
  if (binding) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TRequestLayout.binding)
}
inline ::TDataBinding* TRequestLayout::release_binding() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TRequestLayout::unsafe_arena_release_binding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TRequestLayout.binding)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.binding_;
  _impl_.binding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TRequestLayout::_internal_mutable_binding() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.binding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.binding_ = p;
  }
  return _impl_.binding_;
}
inline ::TDataBinding* TRequestLayout::mutable_binding() {
  ::TDataBinding* _msg = _internal_mutable_binding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TRequestLayout.binding)
  return _msg;
}
inline void TRequestLayout::set_allocated_binding(::TDataBinding* binding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.binding_);
  }
  if (binding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(binding));
    if (message_arena != submessage_arena) {
      binding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, binding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.binding_ = binding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TRequestLayout.binding)
}

// -------------------------------------------------------------------

// TDebugOutputCommand

// repeated .TDataBinding binding = 1;
inline int TDebugOutputCommand::_internal_binding_size() const {
  return _impl_.binding_.size();
}
inline int TDebugOutputCommand::binding_size() const {
  return _internal_binding_size();
}
inline ::TDataBinding* TDebugOutputCommand::mutable_binding(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TDebugOutputCommand.binding)
  return _impl_.binding_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
TDebugOutputCommand::mutable_binding() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TDebugOutputCommand.binding)
  return &_impl_.binding_;
}
inline const ::TDataBinding& TDebugOutputCommand::_internal_binding(int index) const {
  return _impl_.binding_.Get(index);
}
inline const ::TDataBinding& TDebugOutputCommand::binding(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TDebugOutputCommand.binding)
  return _internal_binding(index);
}
inline ::TDataBinding* TDebugOutputCommand::_internal_add_binding() {
  return _impl_.binding_.Add();
}
inline ::TDataBinding* TDebugOutputCommand::add_binding() {
  ::TDataBinding* _add = _internal_add_binding();
  // @@protoc_insertion_point(field_add:HmiWidget.TDebugOutputCommand.binding)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
TDebugOutputCommand::binding() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TDebugOutputCommand.binding)
  return _impl_.binding_;
}

// -------------------------------------------------------------------

// TWidgetDataObjectSetValue

// optional .TDataBinding dataObject = 1;
inline bool TWidgetDataObjectSetValue::_internal_has_dataobject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dataobject_ != nullptr);
  return value;
}
inline bool TWidgetDataObjectSetValue::has_dataobject() const {
  return _internal_has_dataobject();
}
inline const ::TDataBinding& TWidgetDataObjectSetValue::_internal_dataobject() const {
  const ::TDataBinding* p = _impl_.dataobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetDataObjectSetValue::dataobject() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetDataObjectSetValue.dataObject)
  return _internal_dataobject();
}
inline void TWidgetDataObjectSetValue::unsafe_arena_set_allocated_dataobject(
    ::TDataBinding* dataobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataobject_);
  }
  _impl_.dataobject_ = dataobject;
  if (dataobject) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetDataObjectSetValue.dataObject)
}
inline ::TDataBinding* TWidgetDataObjectSetValue::release_dataobject() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.dataobject_;
  _impl_.dataobject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectSetValue::unsafe_arena_release_dataobject() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetDataObjectSetValue.dataObject)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.dataobject_;
  _impl_.dataobject_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectSetValue::_internal_mutable_dataobject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dataobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.dataobject_ = p;
  }
  return _impl_.dataobject_;
}
inline ::TDataBinding* TWidgetDataObjectSetValue::mutable_dataobject() {
  ::TDataBinding* _msg = _internal_mutable_dataobject();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetDataObjectSetValue.dataObject)
  return _msg;
}
inline void TWidgetDataObjectSetValue::set_allocated_dataobject(::TDataBinding* dataobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataobject_);
  }
  if (dataobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataobject));
    if (message_arena != submessage_arena) {
      dataobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataobject, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dataobject_ = dataobject;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetDataObjectSetValue.dataObject)
}

// optional .TDataBinding value = 2;
inline bool TWidgetDataObjectSetValue::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool TWidgetDataObjectSetValue::has_value() const {
  return _internal_has_value();
}
inline const ::TDataBinding& TWidgetDataObjectSetValue::_internal_value() const {
  const ::TDataBinding* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetDataObjectSetValue::value() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetDataObjectSetValue.value)
  return _internal_value();
}
inline void TWidgetDataObjectSetValue::unsafe_arena_set_allocated_value(
    ::TDataBinding* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetDataObjectSetValue.value)
}
inline ::TDataBinding* TWidgetDataObjectSetValue::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectSetValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetDataObjectSetValue.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectSetValue::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::TDataBinding* TWidgetDataObjectSetValue::mutable_value() {
  ::TDataBinding* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetDataObjectSetValue.value)
  return _msg;
}
inline void TWidgetDataObjectSetValue::set_allocated_value(::TDataBinding* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetDataObjectSetValue.value)
}

// -------------------------------------------------------------------

// TWidgetDataObjectCreateProvider

// optional .TDataBinding dataObject = 1;
inline bool TWidgetDataObjectCreateProvider::_internal_has_dataobject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dataobject_ != nullptr);
  return value;
}
inline bool TWidgetDataObjectCreateProvider::has_dataobject() const {
  return _internal_has_dataobject();
}
inline const ::TDataBinding& TWidgetDataObjectCreateProvider::_internal_dataobject() const {
  const ::TDataBinding* p = _impl_.dataobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetDataObjectCreateProvider::dataobject() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetDataObjectCreateProvider.dataObject)
  return _internal_dataobject();
}
inline void TWidgetDataObjectCreateProvider::unsafe_arena_set_allocated_dataobject(
    ::TDataBinding* dataobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataobject_);
  }
  _impl_.dataobject_ = dataobject;
  if (dataobject) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetDataObjectCreateProvider.dataObject)
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::release_dataobject() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.dataobject_;
  _impl_.dataobject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::unsafe_arena_release_dataobject() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetDataObjectCreateProvider.dataObject)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.dataobject_;
  _impl_.dataobject_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::_internal_mutable_dataobject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dataobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.dataobject_ = p;
  }
  return _impl_.dataobject_;
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::mutable_dataobject() {
  ::TDataBinding* _msg = _internal_mutable_dataobject();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetDataObjectCreateProvider.dataObject)
  return _msg;
}
inline void TWidgetDataObjectCreateProvider::set_allocated_dataobject(::TDataBinding* dataobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataobject_);
  }
  if (dataobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataobject));
    if (message_arena != submessage_arena) {
      dataobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataobject, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dataobject_ = dataobject;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetDataObjectCreateProvider.dataObject)
}

// optional .TDataBinding providerId = 2;
inline bool TWidgetDataObjectCreateProvider::_internal_has_providerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.providerid_ != nullptr);
  return value;
}
inline bool TWidgetDataObjectCreateProvider::has_providerid() const {
  return _internal_has_providerid();
}
inline const ::TDataBinding& TWidgetDataObjectCreateProvider::_internal_providerid() const {
  const ::TDataBinding* p = _impl_.providerid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetDataObjectCreateProvider::providerid() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetDataObjectCreateProvider.providerId)
  return _internal_providerid();
}
inline void TWidgetDataObjectCreateProvider::unsafe_arena_set_allocated_providerid(
    ::TDataBinding* providerid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.providerid_);
  }
  _impl_.providerid_ = providerid;
  if (providerid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetDataObjectCreateProvider.providerId)
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::release_providerid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.providerid_;
  _impl_.providerid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::unsafe_arena_release_providerid() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetDataObjectCreateProvider.providerId)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.providerid_;
  _impl_.providerid_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::_internal_mutable_providerid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.providerid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.providerid_ = p;
  }
  return _impl_.providerid_;
}
inline ::TDataBinding* TWidgetDataObjectCreateProvider::mutable_providerid() {
  ::TDataBinding* _msg = _internal_mutable_providerid();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetDataObjectCreateProvider.providerId)
  return _msg;
}
inline void TWidgetDataObjectCreateProvider::set_allocated_providerid(::TDataBinding* providerid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.providerid_);
  }
  if (providerid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(providerid));
    if (message_arena != submessage_arena) {
      providerid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, providerid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.providerid_ = providerid;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetDataObjectCreateProvider.providerId)
}

// -------------------------------------------------------------------

// TWidgetDataObjectCreateConsumer

// optional .TDataBinding dataObject = 1;
inline bool TWidgetDataObjectCreateConsumer::_internal_has_dataobject() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.dataobject_ != nullptr);
  return value;
}
inline bool TWidgetDataObjectCreateConsumer::has_dataobject() const {
  return _internal_has_dataobject();
}
inline const ::TDataBinding& TWidgetDataObjectCreateConsumer::_internal_dataobject() const {
  const ::TDataBinding* p = _impl_.dataobject_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetDataObjectCreateConsumer::dataobject() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetDataObjectCreateConsumer.dataObject)
  return _internal_dataobject();
}
inline void TWidgetDataObjectCreateConsumer::unsafe_arena_set_allocated_dataobject(
    ::TDataBinding* dataobject) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataobject_);
  }
  _impl_.dataobject_ = dataobject;
  if (dataobject) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetDataObjectCreateConsumer.dataObject)
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::release_dataobject() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.dataobject_;
  _impl_.dataobject_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::unsafe_arena_release_dataobject() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetDataObjectCreateConsumer.dataObject)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.dataobject_;
  _impl_.dataobject_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::_internal_mutable_dataobject() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.dataobject_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.dataobject_ = p;
  }
  return _impl_.dataobject_;
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::mutable_dataobject() {
  ::TDataBinding* _msg = _internal_mutable_dataobject();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetDataObjectCreateConsumer.dataObject)
  return _msg;
}
inline void TWidgetDataObjectCreateConsumer::set_allocated_dataobject(::TDataBinding* dataobject) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.dataobject_);
  }
  if (dataobject) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(dataobject));
    if (message_arena != submessage_arena) {
      dataobject = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dataobject, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.dataobject_ = dataobject;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetDataObjectCreateConsumer.dataObject)
}

// optional .TDataBinding consumerId = 2;
inline bool TWidgetDataObjectCreateConsumer::_internal_has_consumerid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.consumerid_ != nullptr);
  return value;
}
inline bool TWidgetDataObjectCreateConsumer::has_consumerid() const {
  return _internal_has_consumerid();
}
inline const ::TDataBinding& TWidgetDataObjectCreateConsumer::_internal_consumerid() const {
  const ::TDataBinding* p = _impl_.consumerid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetDataObjectCreateConsumer::consumerid() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetDataObjectCreateConsumer.consumerId)
  return _internal_consumerid();
}
inline void TWidgetDataObjectCreateConsumer::unsafe_arena_set_allocated_consumerid(
    ::TDataBinding* consumerid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consumerid_);
  }
  _impl_.consumerid_ = consumerid;
  if (consumerid) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetDataObjectCreateConsumer.consumerId)
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::release_consumerid() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.consumerid_;
  _impl_.consumerid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::unsafe_arena_release_consumerid() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetDataObjectCreateConsumer.consumerId)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.consumerid_;
  _impl_.consumerid_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::_internal_mutable_consumerid() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.consumerid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.consumerid_ = p;
  }
  return _impl_.consumerid_;
}
inline ::TDataBinding* TWidgetDataObjectCreateConsumer::mutable_consumerid() {
  ::TDataBinding* _msg = _internal_mutable_consumerid();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetDataObjectCreateConsumer.consumerId)
  return _msg;
}
inline void TWidgetDataObjectCreateConsumer::set_allocated_consumerid(::TDataBinding* consumerid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.consumerid_);
  }
  if (consumerid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(consumerid));
    if (message_arena != submessage_arena) {
      consumerid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, consumerid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.consumerid_ = consumerid;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetDataObjectCreateConsumer.consumerId)
}

// -------------------------------------------------------------------

// TUpdateDcsmMetadataCommand

// optional .TDataBinding contentId = 1;
inline bool TUpdateDcsmMetadataCommand::_internal_has_contentid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.contentid_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_contentid() const {
  return _internal_has_contentid();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_contentid() const {
  const ::TDataBinding* p = _impl_.contentid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::contentid() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.contentId)
  return _internal_contentid();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_contentid(
    ::TDataBinding* contentid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contentid_);
  }
  _impl_.contentid_ = contentid;
  if (contentid) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.contentId)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_contentid() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.contentid_;
  _impl_.contentid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_contentid() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.contentId)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.contentid_;
  _impl_.contentid_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_contentid() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.contentid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.contentid_ = p;
  }
  return _impl_.contentid_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_contentid() {
  ::TDataBinding* _msg = _internal_mutable_contentid();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.contentId)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_contentid(::TDataBinding* contentid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.contentid_);
  }
  if (contentid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(contentid));
    if (message_arena != submessage_arena) {
      contentid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, contentid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.contentid_ = contentid;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.contentId)
}

// optional .TDataBinding vehicleVisible = 2;
inline bool TUpdateDcsmMetadataCommand::_internal_has_vehiclevisible() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehiclevisible_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_vehiclevisible() const {
  return _internal_has_vehiclevisible();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_vehiclevisible() const {
  const ::TDataBinding* p = _impl_.vehiclevisible_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::vehiclevisible() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.vehicleVisible)
  return _internal_vehiclevisible();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_vehiclevisible(
    ::TDataBinding* vehiclevisible) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehiclevisible_);
  }
  _impl_.vehiclevisible_ = vehiclevisible;
  if (vehiclevisible) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.vehicleVisible)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_vehiclevisible() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.vehiclevisible_;
  _impl_.vehiclevisible_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_vehiclevisible() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.vehicleVisible)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.vehiclevisible_;
  _impl_.vehiclevisible_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_vehiclevisible() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.vehiclevisible_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.vehiclevisible_ = p;
  }
  return _impl_.vehiclevisible_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_vehiclevisible() {
  ::TDataBinding* _msg = _internal_mutable_vehiclevisible();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.vehicleVisible)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_vehiclevisible(::TDataBinding* vehiclevisible) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehiclevisible_);
  }
  if (vehiclevisible) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehiclevisible));
    if (message_arena != submessage_arena) {
      vehiclevisible = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehiclevisible, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.vehiclevisible_ = vehiclevisible;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.vehicleVisible)
}

// optional .TDataBinding vehicleModelId = 3;
inline bool TUpdateDcsmMetadataCommand::_internal_has_vehiclemodelid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.vehiclemodelid_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_vehiclemodelid() const {
  return _internal_has_vehiclemodelid();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_vehiclemodelid() const {
  const ::TDataBinding* p = _impl_.vehiclemodelid_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::vehiclemodelid() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.vehicleModelId)
  return _internal_vehiclemodelid();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_vehiclemodelid(
    ::TDataBinding* vehiclemodelid) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehiclemodelid_);
  }
  _impl_.vehiclemodelid_ = vehiclemodelid;
  if (vehiclemodelid) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.vehicleModelId)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_vehiclemodelid() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.vehiclemodelid_;
  _impl_.vehiclemodelid_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_vehiclemodelid() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.vehicleModelId)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.vehiclemodelid_;
  _impl_.vehiclemodelid_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_vehiclemodelid() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.vehiclemodelid_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.vehiclemodelid_ = p;
  }
  return _impl_.vehiclemodelid_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_vehiclemodelid() {
  ::TDataBinding* _msg = _internal_mutable_vehiclemodelid();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.vehicleModelId)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_vehiclemodelid(::TDataBinding* vehiclemodelid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.vehiclemodelid_);
  }
  if (vehiclemodelid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(vehiclemodelid));
    if (message_arena != submessage_arena) {
      vehiclemodelid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, vehiclemodelid, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.vehiclemodelid_ = vehiclemodelid;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.vehicleModelId)
}

// optional .TDataBinding cameraPitch = 4;
inline bool TUpdateDcsmMetadataCommand::_internal_has_camerapitch() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camerapitch_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_camerapitch() const {
  return _internal_has_camerapitch();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_camerapitch() const {
  const ::TDataBinding* p = _impl_.camerapitch_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::camerapitch() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.cameraPitch)
  return _internal_camerapitch();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_camerapitch(
    ::TDataBinding* camerapitch) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerapitch_);
  }
  _impl_.camerapitch_ = camerapitch;
  if (camerapitch) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraPitch)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_camerapitch() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.camerapitch_;
  _impl_.camerapitch_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_camerapitch() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.cameraPitch)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.camerapitch_;
  _impl_.camerapitch_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_camerapitch() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.camerapitch_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.camerapitch_ = p;
  }
  return _impl_.camerapitch_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_camerapitch() {
  ::TDataBinding* _msg = _internal_mutable_camerapitch();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.cameraPitch)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_camerapitch(::TDataBinding* camerapitch) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerapitch_);
  }
  if (camerapitch) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camerapitch));
    if (message_arena != submessage_arena) {
      camerapitch = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camerapitch, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.camerapitch_ = camerapitch;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraPitch)
}

// optional .TDataBinding cameraYaw = 5;
inline bool TUpdateDcsmMetadataCommand::_internal_has_camerayaw() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camerayaw_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_camerayaw() const {
  return _internal_has_camerayaw();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_camerayaw() const {
  const ::TDataBinding* p = _impl_.camerayaw_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::camerayaw() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.cameraYaw)
  return _internal_camerayaw();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_camerayaw(
    ::TDataBinding* camerayaw) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerayaw_);
  }
  _impl_.camerayaw_ = camerayaw;
  if (camerayaw) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraYaw)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_camerayaw() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.camerayaw_;
  _impl_.camerayaw_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_camerayaw() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.cameraYaw)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.camerayaw_;
  _impl_.camerayaw_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_camerayaw() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.camerayaw_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.camerayaw_ = p;
  }
  return _impl_.camerayaw_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_camerayaw() {
  ::TDataBinding* _msg = _internal_mutable_camerayaw();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.cameraYaw)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_camerayaw(::TDataBinding* camerayaw) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerayaw_);
  }
  if (camerayaw) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camerayaw));
    if (message_arena != submessage_arena) {
      camerayaw = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camerayaw, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.camerayaw_ = camerayaw;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraYaw)
}

// optional .TDataBinding cameraFovH = 6;
inline bool TUpdateDcsmMetadataCommand::_internal_has_camerafovh() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camerafovh_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_camerafovh() const {
  return _internal_has_camerafovh();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_camerafovh() const {
  const ::TDataBinding* p = _impl_.camerafovh_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::camerafovh() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.cameraFovH)
  return _internal_camerafovh();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_camerafovh(
    ::TDataBinding* camerafovh) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerafovh_);
  }
  _impl_.camerafovh_ = camerafovh;
  if (camerafovh) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraFovH)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_camerafovh() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.camerafovh_;
  _impl_.camerafovh_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_camerafovh() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.cameraFovH)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.camerafovh_;
  _impl_.camerafovh_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_camerafovh() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.camerafovh_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.camerafovh_ = p;
  }
  return _impl_.camerafovh_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_camerafovh() {
  ::TDataBinding* _msg = _internal_mutable_camerafovh();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.cameraFovH)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_camerafovh(::TDataBinding* camerafovh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerafovh_);
  }
  if (camerafovh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camerafovh));
    if (message_arena != submessage_arena) {
      camerafovh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camerafovh, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.camerafovh_ = camerafovh;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraFovH)
}

// optional .TDataBinding cameraDistance = 7;
inline bool TUpdateDcsmMetadataCommand::_internal_has_cameradistance() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cameradistance_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_cameradistance() const {
  return _internal_has_cameradistance();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_cameradistance() const {
  const ::TDataBinding* p = _impl_.cameradistance_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::cameradistance() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.cameraDistance)
  return _internal_cameradistance();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_cameradistance(
    ::TDataBinding* cameradistance) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameradistance_);
  }
  _impl_.cameradistance_ = cameradistance;
  if (cameradistance) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraDistance)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_cameradistance() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.cameradistance_;
  _impl_.cameradistance_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_cameradistance() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.cameraDistance)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.cameradistance_;
  _impl_.cameradistance_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_cameradistance() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.cameradistance_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.cameradistance_ = p;
  }
  return _impl_.cameradistance_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_cameradistance() {
  ::TDataBinding* _msg = _internal_mutable_cameradistance();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.cameraDistance)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_cameradistance(::TDataBinding* cameradistance) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameradistance_);
  }
  if (cameradistance) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cameradistance));
    if (message_arena != submessage_arena) {
      cameradistance = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameradistance, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.cameradistance_ = cameradistance;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraDistance)
}

// optional .TDataBinding cameraOrigin = 8;
inline bool TUpdateDcsmMetadataCommand::_internal_has_cameraorigin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cameraorigin_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_cameraorigin() const {
  return _internal_has_cameraorigin();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_cameraorigin() const {
  const ::TDataBinding* p = _impl_.cameraorigin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::cameraorigin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.cameraOrigin)
  return _internal_cameraorigin();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_cameraorigin(
    ::TDataBinding* cameraorigin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameraorigin_);
  }
  _impl_.cameraorigin_ = cameraorigin;
  if (cameraorigin) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraOrigin)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_cameraorigin() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.cameraorigin_;
  _impl_.cameraorigin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_cameraorigin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.cameraOrigin)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.cameraorigin_;
  _impl_.cameraorigin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_cameraorigin() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.cameraorigin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.cameraorigin_ = p;
  }
  return _impl_.cameraorigin_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_cameraorigin() {
  ::TDataBinding* _msg = _internal_mutable_cameraorigin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.cameraOrigin)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_cameraorigin(::TDataBinding* cameraorigin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameraorigin_);
  }
  if (cameraorigin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cameraorigin));
    if (message_arena != submessage_arena) {
      cameraorigin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameraorigin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.cameraorigin_ = cameraorigin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraOrigin)
}

// optional .TDataBinding cameraNearPlane = 9;
inline bool TUpdateDcsmMetadataCommand::_internal_has_cameranearplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cameranearplane_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_cameranearplane() const {
  return _internal_has_cameranearplane();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_cameranearplane() const {
  const ::TDataBinding* p = _impl_.cameranearplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::cameranearplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.cameraNearPlane)
  return _internal_cameranearplane();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_cameranearplane(
    ::TDataBinding* cameranearplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameranearplane_);
  }
  _impl_.cameranearplane_ = cameranearplane;
  if (cameranearplane) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraNearPlane)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_cameranearplane() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.cameranearplane_;
  _impl_.cameranearplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_cameranearplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.cameraNearPlane)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.cameranearplane_;
  _impl_.cameranearplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_cameranearplane() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.cameranearplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.cameranearplane_ = p;
  }
  return _impl_.cameranearplane_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_cameranearplane() {
  ::TDataBinding* _msg = _internal_mutable_cameranearplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.cameraNearPlane)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_cameranearplane(::TDataBinding* cameranearplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cameranearplane_);
  }
  if (cameranearplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cameranearplane));
    if (message_arena != submessage_arena) {
      cameranearplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cameranearplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.cameranearplane_ = cameranearplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraNearPlane)
}

// optional .TDataBinding cameraFarPlane = 10;
inline bool TUpdateDcsmMetadataCommand::_internal_has_camerafarplane() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.camerafarplane_ != nullptr);
  return value;
}
inline bool TUpdateDcsmMetadataCommand::has_camerafarplane() const {
  return _internal_has_camerafarplane();
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::_internal_camerafarplane() const {
  const ::TDataBinding* p = _impl_.camerafarplane_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TUpdateDcsmMetadataCommand::camerafarplane() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TUpdateDcsmMetadataCommand.cameraFarPlane)
  return _internal_camerafarplane();
}
inline void TUpdateDcsmMetadataCommand::unsafe_arena_set_allocated_camerafarplane(
    ::TDataBinding* camerafarplane) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerafarplane_);
  }
  _impl_.camerafarplane_ = camerafarplane;
  if (camerafarplane) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraFarPlane)
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::release_camerafarplane() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TDataBinding* temp = _impl_.camerafarplane_;
  _impl_.camerafarplane_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::unsafe_arena_release_camerafarplane() {
  // @@protoc_insertion_point(field_release:HmiWidget.TUpdateDcsmMetadataCommand.cameraFarPlane)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TDataBinding* temp = _impl_.camerafarplane_;
  _impl_.camerafarplane_ = nullptr;
  return temp;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::_internal_mutable_camerafarplane() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.camerafarplane_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.camerafarplane_ = p;
  }
  return _impl_.camerafarplane_;
}
inline ::TDataBinding* TUpdateDcsmMetadataCommand::mutable_camerafarplane() {
  ::TDataBinding* _msg = _internal_mutable_camerafarplane();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TUpdateDcsmMetadataCommand.cameraFarPlane)
  return _msg;
}
inline void TUpdateDcsmMetadataCommand::set_allocated_camerafarplane(::TDataBinding* camerafarplane) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.camerafarplane_);
  }
  if (camerafarplane) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(camerafarplane));
    if (message_arena != submessage_arena) {
      camerafarplane = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, camerafarplane, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.camerafarplane_ = camerafarplane;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TUpdateDcsmMetadataCommand.cameraFarPlane)
}

// -------------------------------------------------------------------

// TAnimationTrigger

// required .TIdentifier animation = 1;
inline bool TAnimationTrigger::_internal_has_animation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animation_ != nullptr);
  return value;
}
inline bool TAnimationTrigger::has_animation() const {
  return _internal_has_animation();
}
inline const ::TIdentifier& TAnimationTrigger::_internal_animation() const {
  const ::TIdentifier* p = _impl_.animation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TAnimationTrigger::animation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TAnimationTrigger.animation)
  return _internal_animation();
}
inline void TAnimationTrigger::unsafe_arena_set_allocated_animation(
    ::TIdentifier* animation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animation_);
  }
  _impl_.animation_ = animation;
  if (animation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TAnimationTrigger.animation)
}
inline ::TIdentifier* TAnimationTrigger::release_animation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.animation_;
  _impl_.animation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TAnimationTrigger::unsafe_arena_release_animation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TAnimationTrigger.animation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.animation_;
  _impl_.animation_ = nullptr;
  return temp;
}
inline ::TIdentifier* TAnimationTrigger::_internal_mutable_animation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.animation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.animation_ = p;
  }
  return _impl_.animation_;
}
inline ::TIdentifier* TAnimationTrigger::mutable_animation() {
  ::TIdentifier* _msg = _internal_mutable_animation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TAnimationTrigger.animation)
  return _msg;
}
inline void TAnimationTrigger::set_allocated_animation(::TIdentifier* animation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animation_);
  }
  if (animation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animation));
    if (message_arena != submessage_arena) {
      animation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.animation_ = animation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TAnimationTrigger.animation)
}

// required .HmiWidget.TEAnimationAction action = 2;
inline bool TAnimationTrigger::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline bool TAnimationTrigger::has_action() const {
  return _internal_has_action();
}
inline void TAnimationTrigger::clear_action() {
  _impl_.action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline ::HmiWidget::TEAnimationAction TAnimationTrigger::_internal_action() const {
  return static_cast< ::HmiWidget::TEAnimationAction >(_impl_.action_);
}
inline ::HmiWidget::TEAnimationAction TAnimationTrigger::action() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TAnimationTrigger.action)
  return _internal_action();
}
inline void TAnimationTrigger::_internal_set_action(::HmiWidget::TEAnimationAction value) {
  assert(::HmiWidget::TEAnimationAction_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.action_ = value;
}
inline void TAnimationTrigger::set_action(::HmiWidget::TEAnimationAction value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TAnimationTrigger.action)
}

// -------------------------------------------------------------------

// TScriptReference

// required .TIdentifier scriptReference = 1;
inline bool TScriptReference::_internal_has_scriptreference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scriptreference_ != nullptr);
  return value;
}
inline bool TScriptReference::has_scriptreference() const {
  return _internal_has_scriptreference();
}
inline const ::TIdentifier& TScriptReference::_internal_scriptreference() const {
  const ::TIdentifier* p = _impl_.scriptreference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TScriptReference::scriptreference() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScriptReference.scriptReference)
  return _internal_scriptreference();
}
inline void TScriptReference::unsafe_arena_set_allocated_scriptreference(
    ::TIdentifier* scriptreference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scriptreference_);
  }
  _impl_.scriptreference_ = scriptreference;
  if (scriptreference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TScriptReference.scriptReference)
}
inline ::TIdentifier* TScriptReference::release_scriptreference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.scriptreference_;
  _impl_.scriptreference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TScriptReference::unsafe_arena_release_scriptreference() {
  // @@protoc_insertion_point(field_release:HmiWidget.TScriptReference.scriptReference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.scriptreference_;
  _impl_.scriptreference_ = nullptr;
  return temp;
}
inline ::TIdentifier* TScriptReference::_internal_mutable_scriptreference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scriptreference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.scriptreference_ = p;
  }
  return _impl_.scriptreference_;
}
inline ::TIdentifier* TScriptReference::mutable_scriptreference() {
  ::TIdentifier* _msg = _internal_mutable_scriptreference();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScriptReference.scriptReference)
  return _msg;
}
inline void TScriptReference::set_allocated_scriptreference(::TIdentifier* scriptreference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scriptreference_);
  }
  if (scriptreference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scriptreference));
    if (message_arena != submessage_arena) {
      scriptreference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptreference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scriptreference_ = scriptreference;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TScriptReference.scriptReference)
}

// -------------------------------------------------------------------

// TCurveReference

// required .TIdentifier curveReference = 1;
inline bool TCurveReference::_internal_has_curvereference() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.curvereference_ != nullptr);
  return value;
}
inline bool TCurveReference::has_curvereference() const {
  return _internal_has_curvereference();
}
inline const ::TIdentifier& TCurveReference::_internal_curvereference() const {
  const ::TIdentifier* p = _impl_.curvereference_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCurveReference::curvereference() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCurveReference.curveReference)
  return _internal_curvereference();
}
inline void TCurveReference::unsafe_arena_set_allocated_curvereference(
    ::TIdentifier* curvereference) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curvereference_);
  }
  _impl_.curvereference_ = curvereference;
  if (curvereference) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCurveReference.curveReference)
}
inline ::TIdentifier* TCurveReference::release_curvereference() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.curvereference_;
  _impl_.curvereference_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCurveReference::unsafe_arena_release_curvereference() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCurveReference.curveReference)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.curvereference_;
  _impl_.curvereference_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCurveReference::_internal_mutable_curvereference() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.curvereference_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.curvereference_ = p;
  }
  return _impl_.curvereference_;
}
inline ::TIdentifier* TCurveReference::mutable_curvereference() {
  ::TIdentifier* _msg = _internal_mutable_curvereference();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCurveReference.curveReference)
  return _msg;
}
inline void TCurveReference::set_allocated_curvereference(::TIdentifier* curvereference) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curvereference_);
  }
  if (curvereference) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curvereference));
    if (message_arena != submessage_arena) {
      curvereference = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curvereference, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.curvereference_ = curvereference;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCurveReference.curveReference)
}

// -------------------------------------------------------------------

// TScript

// required .TIdentifier scriptIdentifier = 1;
inline bool TScript::_internal_has_scriptidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scriptidentifier_ != nullptr);
  return value;
}
inline bool TScript::has_scriptidentifier() const {
  return _internal_has_scriptidentifier();
}
inline const ::TIdentifier& TScript::_internal_scriptidentifier() const {
  const ::TIdentifier* p = _impl_.scriptidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TScript::scriptidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScript.scriptIdentifier)
  return _internal_scriptidentifier();
}
inline void TScript::unsafe_arena_set_allocated_scriptidentifier(
    ::TIdentifier* scriptidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scriptidentifier_);
  }
  _impl_.scriptidentifier_ = scriptidentifier;
  if (scriptidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TScript.scriptIdentifier)
}
inline ::TIdentifier* TScript::release_scriptidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.scriptidentifier_;
  _impl_.scriptidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TScript::unsafe_arena_release_scriptidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TScript.scriptIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.scriptidentifier_;
  _impl_.scriptidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TScript::_internal_mutable_scriptidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.scriptidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.scriptidentifier_ = p;
  }
  return _impl_.scriptidentifier_;
}
inline ::TIdentifier* TScript::mutable_scriptidentifier() {
  ::TIdentifier* _msg = _internal_mutable_scriptidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScript.scriptIdentifier)
  return _msg;
}
inline void TScript::set_allocated_scriptidentifier(::TIdentifier* scriptidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scriptidentifier_);
  }
  if (scriptidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scriptidentifier));
    if (message_arena != submessage_arena) {
      scriptidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scriptidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.scriptidentifier_ = scriptidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TScript.scriptIdentifier)
}

// required .TDataBinding functionName = 2;
inline bool TScript::_internal_has_functionname() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.functionname_ != nullptr);
  return value;
}
inline bool TScript::has_functionname() const {
  return _internal_has_functionname();
}
inline const ::TDataBinding& TScript::_internal_functionname() const {
  const ::TDataBinding* p = _impl_.functionname_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TScript::functionname() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScript.functionName)
  return _internal_functionname();
}
inline void TScript::unsafe_arena_set_allocated_functionname(
    ::TDataBinding* functionname) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.functionname_);
  }
  _impl_.functionname_ = functionname;
  if (functionname) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TScript.functionName)
}
inline ::TDataBinding* TScript::release_functionname() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.functionname_;
  _impl_.functionname_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TScript::unsafe_arena_release_functionname() {
  // @@protoc_insertion_point(field_release:HmiWidget.TScript.functionName)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.functionname_;
  _impl_.functionname_ = nullptr;
  return temp;
}
inline ::TDataBinding* TScript::_internal_mutable_functionname() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.functionname_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.functionname_ = p;
  }
  return _impl_.functionname_;
}
inline ::TDataBinding* TScript::mutable_functionname() {
  ::TDataBinding* _msg = _internal_mutable_functionname();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScript.functionName)
  return _msg;
}
inline void TScript::set_allocated_functionname(::TDataBinding* functionname) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.functionname_);
  }
  if (functionname) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(functionname));
    if (message_arena != submessage_arena) {
      functionname = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, functionname, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.functionname_ = functionname;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TScript.functionName)
}

// repeated .TDataBinding parameter = 3;
inline int TScript::_internal_parameter_size() const {
  return _impl_.parameter_.size();
}
inline int TScript::parameter_size() const {
  return _internal_parameter_size();
}
inline ::TDataBinding* TScript::mutable_parameter(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScript.parameter)
  return _impl_.parameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
TScript::mutable_parameter() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TScript.parameter)
  return &_impl_.parameter_;
}
inline const ::TDataBinding& TScript::_internal_parameter(int index) const {
  return _impl_.parameter_.Get(index);
}
inline const ::TDataBinding& TScript::parameter(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScript.parameter)
  return _internal_parameter(index);
}
inline ::TDataBinding* TScript::_internal_add_parameter() {
  return _impl_.parameter_.Add();
}
inline ::TDataBinding* TScript::add_parameter() {
  ::TDataBinding* _add = _internal_add_parameter();
  // @@protoc_insertion_point(field_add:HmiWidget.TScript.parameter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
TScript::parameter() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TScript.parameter)
  return _impl_.parameter_;
}

// repeated .TDataBinding passiveParameter = 4;
inline int TScript::_internal_passiveparameter_size() const {
  return _impl_.passiveparameter_.size();
}
inline int TScript::passiveparameter_size() const {
  return _internal_passiveparameter_size();
}
inline ::TDataBinding* TScript::mutable_passiveparameter(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScript.passiveParameter)
  return _impl_.passiveparameter_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >*
TScript::mutable_passiveparameter() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TScript.passiveParameter)
  return &_impl_.passiveparameter_;
}
inline const ::TDataBinding& TScript::_internal_passiveparameter(int index) const {
  return _impl_.passiveparameter_.Get(index);
}
inline const ::TDataBinding& TScript::passiveparameter(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScript.passiveParameter)
  return _internal_passiveparameter(index);
}
inline ::TDataBinding* TScript::_internal_add_passiveparameter() {
  return _impl_.passiveparameter_.Add();
}
inline ::TDataBinding* TScript::add_passiveparameter() {
  ::TDataBinding* _add = _internal_add_passiveparameter();
  // @@protoc_insertion_point(field_add:HmiWidget.TScript.passiveParameter)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TDataBinding >&
TScript::passiveparameter() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TScript.passiveParameter)
  return _impl_.passiveparameter_;
}

// repeated .HmiWidget.TScriptReturnValue returnValue = 5;
inline int TScript::_internal_returnvalue_size() const {
  return _impl_.returnvalue_.size();
}
inline int TScript::returnvalue_size() const {
  return _internal_returnvalue_size();
}
inline void TScript::clear_returnvalue() {
  _impl_.returnvalue_.Clear();
}
inline ::HmiWidget::TScriptReturnValue* TScript::mutable_returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScript.returnValue)
  return _impl_.returnvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScriptReturnValue >*
TScript::mutable_returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TScript.returnValue)
  return &_impl_.returnvalue_;
}
inline const ::HmiWidget::TScriptReturnValue& TScript::_internal_returnvalue(int index) const {
  return _impl_.returnvalue_.Get(index);
}
inline const ::HmiWidget::TScriptReturnValue& TScript::returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScript.returnValue)
  return _internal_returnvalue(index);
}
inline ::HmiWidget::TScriptReturnValue* TScript::_internal_add_returnvalue() {
  return _impl_.returnvalue_.Add();
}
inline ::HmiWidget::TScriptReturnValue* TScript::add_returnvalue() {
  ::HmiWidget::TScriptReturnValue* _add = _internal_add_returnvalue();
  // @@protoc_insertion_point(field_add:HmiWidget.TScript.returnValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TScriptReturnValue >&
TScript::returnvalue() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TScript.returnValue)
  return _impl_.returnvalue_;
}

// -------------------------------------------------------------------

// TScriptReturnValue

// required .TIdentifier key = 1;
inline bool TScriptReturnValue::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TScriptReturnValue::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TScriptReturnValue::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TScriptReturnValue::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScriptReturnValue.key)
  return _internal_key();
}
inline void TScriptReturnValue::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TScriptReturnValue.key)
}
inline ::TIdentifier* TScriptReturnValue::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TScriptReturnValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TScriptReturnValue.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TScriptReturnValue::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TScriptReturnValue::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScriptReturnValue.key)
  return _msg;
}
inline void TScriptReturnValue::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TScriptReturnValue.key)
}

// required .TVariant value = 2;
inline bool TScriptReturnValue::_internal_has_value() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.value_ != nullptr);
  return value;
}
inline bool TScriptReturnValue::has_value() const {
  return _internal_has_value();
}
inline const ::TVariant& TScriptReturnValue::_internal_value() const {
  const ::TVariant* p = _impl_.value_;
  return p != nullptr ? *p : reinterpret_cast<const ::TVariant&>(
      ::_TVariant_default_instance_);
}
inline const ::TVariant& TScriptReturnValue::value() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TScriptReturnValue.value)
  return _internal_value();
}
inline void TScriptReturnValue::unsafe_arena_set_allocated_value(
    ::TVariant* value) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  _impl_.value_ = value;
  if (value) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TScriptReturnValue.value)
}
inline ::TVariant* TScriptReturnValue::release_value() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariant* temp = _impl_.value_;
  _impl_.value_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TVariant* TScriptReturnValue::unsafe_arena_release_value() {
  // @@protoc_insertion_point(field_release:HmiWidget.TScriptReturnValue.value)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariant* temp = _impl_.value_;
  _impl_.value_ = nullptr;
  return temp;
}
inline ::TVariant* TScriptReturnValue::_internal_mutable_value() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.value_ == nullptr) {
    auto* p = CreateMaybeMessage<::TVariant>(GetArenaForAllocation());
    _impl_.value_ = p;
  }
  return _impl_.value_;
}
inline ::TVariant* TScriptReturnValue::mutable_value() {
  ::TVariant* _msg = _internal_mutable_value();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TScriptReturnValue.value)
  return _msg;
}
inline void TScriptReturnValue::set_allocated_value(::TVariant* value) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.value_);
  }
  if (value) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(value));
    if (message_arena != submessage_arena) {
      value = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.value_ = value;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TScriptReturnValue.value)
}

// -------------------------------------------------------------------

// TTriggeredSlot

// required .TIdentifier signal = 1;
inline bool TTriggeredSlot::_internal_has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_ != nullptr);
  return value;
}
inline bool TTriggeredSlot::has_signal() const {
  return _internal_has_signal();
}
inline const ::TIdentifier& TTriggeredSlot::_internal_signal() const {
  const ::TIdentifier* p = _impl_.signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TTriggeredSlot::signal() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TTriggeredSlot.signal)
  return _internal_signal();
}
inline void TTriggeredSlot::unsafe_arena_set_allocated_signal(
    ::TIdentifier* signal) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_);
  }
  _impl_.signal_ = signal;
  if (signal) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TTriggeredSlot.signal)
}
inline ::TIdentifier* TTriggeredSlot::release_signal() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TTriggeredSlot::unsafe_arena_release_signal() {
  // @@protoc_insertion_point(field_release:HmiWidget.TTriggeredSlot.signal)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
  return temp;
}
inline ::TIdentifier* TTriggeredSlot::_internal_mutable_signal() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.signal_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.signal_ = p;
  }
  return _impl_.signal_;
}
inline ::TIdentifier* TTriggeredSlot::mutable_signal() {
  ::TIdentifier* _msg = _internal_mutable_signal();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TTriggeredSlot.signal)
  return _msg;
}
inline void TTriggeredSlot::set_allocated_signal(::TIdentifier* signal) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.signal_);
  }
  if (signal) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(signal));
    if (message_arena != submessage_arena) {
      signal = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, signal, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signal_ = signal;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TTriggeredSlot.signal)
}

// required .TIdentifier slot = 2;
inline bool TTriggeredSlot::_internal_has_slot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.slot_ != nullptr);
  return value;
}
inline bool TTriggeredSlot::has_slot() const {
  return _internal_has_slot();
}
inline const ::TIdentifier& TTriggeredSlot::_internal_slot() const {
  const ::TIdentifier* p = _impl_.slot_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TTriggeredSlot::slot() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TTriggeredSlot.slot)
  return _internal_slot();
}
inline void TTriggeredSlot::unsafe_arena_set_allocated_slot(
    ::TIdentifier* slot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slot_);
  }
  _impl_.slot_ = slot;
  if (slot) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TTriggeredSlot.slot)
}
inline ::TIdentifier* TTriggeredSlot::release_slot() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.slot_;
  _impl_.slot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TTriggeredSlot::unsafe_arena_release_slot() {
  // @@protoc_insertion_point(field_release:HmiWidget.TTriggeredSlot.slot)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.slot_;
  _impl_.slot_ = nullptr;
  return temp;
}
inline ::TIdentifier* TTriggeredSlot::_internal_mutable_slot() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.slot_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.slot_ = p;
  }
  return _impl_.slot_;
}
inline ::TIdentifier* TTriggeredSlot::mutable_slot() {
  ::TIdentifier* _msg = _internal_mutable_slot();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TTriggeredSlot.slot)
  return _msg;
}
inline void TTriggeredSlot::set_allocated_slot(::TIdentifier* slot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.slot_);
  }
  if (slot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(slot));
    if (message_arena != submessage_arena) {
      slot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, slot, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.slot_ = slot;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TTriggeredSlot.slot)
}

// -------------------------------------------------------------------

// TForwardSignals

// repeated .TIdentifier signalId = 1;
inline int TForwardSignals::_internal_signalid_size() const {
  return _impl_.signalid_.size();
}
inline int TForwardSignals::signalid_size() const {
  return _internal_signalid_size();
}
inline ::TIdentifier* TForwardSignals::mutable_signalid(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TForwardSignals.signalId)
  return _impl_.signalid_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TForwardSignals::mutable_signalid() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TForwardSignals.signalId)
  return &_impl_.signalid_;
}
inline const ::TIdentifier& TForwardSignals::_internal_signalid(int index) const {
  return _impl_.signalid_.Get(index);
}
inline const ::TIdentifier& TForwardSignals::signalid(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TForwardSignals.signalId)
  return _internal_signalid(index);
}
inline ::TIdentifier* TForwardSignals::_internal_add_signalid() {
  return _impl_.signalid_.Add();
}
inline ::TIdentifier* TForwardSignals::add_signalid() {
  ::TIdentifier* _add = _internal_add_signalid();
  // @@protoc_insertion_point(field_add:HmiWidget.TForwardSignals.signalId)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TForwardSignals::signalid() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TForwardSignals.signalId)
  return _impl_.signalid_;
}

// optional .HmiWidget.TESignalTarget target = 2;
inline bool TForwardSignals::_internal_has_target() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool TForwardSignals::has_target() const {
  return _internal_has_target();
}
inline void TForwardSignals::clear_target() {
  _impl_.target_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::HmiWidget::TESignalTarget TForwardSignals::_internal_target() const {
  return static_cast< ::HmiWidget::TESignalTarget >(_impl_.target_);
}
inline ::HmiWidget::TESignalTarget TForwardSignals::target() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TForwardSignals.target)
  return _internal_target();
}
inline void TForwardSignals::_internal_set_target(::HmiWidget::TESignalTarget value) {
  assert(::HmiWidget::TESignalTarget_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.target_ = value;
}
inline void TForwardSignals::set_target(::HmiWidget::TESignalTarget value) {
  _internal_set_target(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TForwardSignals.target)
}

// -------------------------------------------------------------------

// TCurve

// required .TIdentifier curveIdentifier = 1;
inline bool TCurve::_internal_has_curveidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.curveidentifier_ != nullptr);
  return value;
}
inline bool TCurve::has_curveidentifier() const {
  return _internal_has_curveidentifier();
}
inline const ::TIdentifier& TCurve::_internal_curveidentifier() const {
  const ::TIdentifier* p = _impl_.curveidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCurve::curveidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCurve.curveIdentifier)
  return _internal_curveidentifier();
}
inline void TCurve::unsafe_arena_set_allocated_curveidentifier(
    ::TIdentifier* curveidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curveidentifier_);
  }
  _impl_.curveidentifier_ = curveidentifier;
  if (curveidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCurve.curveIdentifier)
}
inline ::TIdentifier* TCurve::release_curveidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.curveidentifier_;
  _impl_.curveidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCurve::unsafe_arena_release_curveidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCurve.curveIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.curveidentifier_;
  _impl_.curveidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCurve::_internal_mutable_curveidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.curveidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.curveidentifier_ = p;
  }
  return _impl_.curveidentifier_;
}
inline ::TIdentifier* TCurve::mutable_curveidentifier() {
  ::TIdentifier* _msg = _internal_mutable_curveidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCurve.curveIdentifier)
  return _msg;
}
inline void TCurve::set_allocated_curveidentifier(::TIdentifier* curveidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curveidentifier_);
  }
  if (curveidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curveidentifier));
    if (message_arena != submessage_arena) {
      curveidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curveidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.curveidentifier_ = curveidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCurve.curveIdentifier)
}

// required .TDataBinding samplePosition = 2;
inline bool TCurve::_internal_has_sampleposition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sampleposition_ != nullptr);
  return value;
}
inline bool TCurve::has_sampleposition() const {
  return _internal_has_sampleposition();
}
inline const ::TDataBinding& TCurve::_internal_sampleposition() const {
  const ::TDataBinding* p = _impl_.sampleposition_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TCurve::sampleposition() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCurve.samplePosition)
  return _internal_sampleposition();
}
inline void TCurve::unsafe_arena_set_allocated_sampleposition(
    ::TDataBinding* sampleposition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sampleposition_);
  }
  _impl_.sampleposition_ = sampleposition;
  if (sampleposition) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCurve.samplePosition)
}
inline ::TDataBinding* TCurve::release_sampleposition() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.sampleposition_;
  _impl_.sampleposition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TCurve::unsafe_arena_release_sampleposition() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCurve.samplePosition)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.sampleposition_;
  _impl_.sampleposition_ = nullptr;
  return temp;
}
inline ::TDataBinding* TCurve::_internal_mutable_sampleposition() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.sampleposition_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sampleposition_ = p;
  }
  return _impl_.sampleposition_;
}
inline ::TDataBinding* TCurve::mutable_sampleposition() {
  ::TDataBinding* _msg = _internal_mutable_sampleposition();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCurve.samplePosition)
  return _msg;
}
inline void TCurve::set_allocated_sampleposition(::TDataBinding* sampleposition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sampleposition_);
  }
  if (sampleposition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sampleposition));
    if (message_arena != submessage_arena) {
      sampleposition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sampleposition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.sampleposition_ = sampleposition;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCurve.samplePosition)
}

// required .TCurveDefinition curveDefinition = 3;
inline bool TCurve::_internal_has_curvedefinition() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.curvedefinition_ != nullptr);
  return value;
}
inline bool TCurve::has_curvedefinition() const {
  return _internal_has_curvedefinition();
}
inline const ::TCurveDefinition& TCurve::_internal_curvedefinition() const {
  const ::TCurveDefinition* p = _impl_.curvedefinition_;
  return p != nullptr ? *p : reinterpret_cast<const ::TCurveDefinition&>(
      ::_TCurveDefinition_default_instance_);
}
inline const ::TCurveDefinition& TCurve::curvedefinition() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCurve.curveDefinition)
  return _internal_curvedefinition();
}
inline void TCurve::unsafe_arena_set_allocated_curvedefinition(
    ::TCurveDefinition* curvedefinition) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curvedefinition_);
  }
  _impl_.curvedefinition_ = curvedefinition;
  if (curvedefinition) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCurve.curveDefinition)
}
inline ::TCurveDefinition* TCurve::release_curvedefinition() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TCurveDefinition* temp = _impl_.curvedefinition_;
  _impl_.curvedefinition_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TCurveDefinition* TCurve::unsafe_arena_release_curvedefinition() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCurve.curveDefinition)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TCurveDefinition* temp = _impl_.curvedefinition_;
  _impl_.curvedefinition_ = nullptr;
  return temp;
}
inline ::TCurveDefinition* TCurve::_internal_mutable_curvedefinition() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.curvedefinition_ == nullptr) {
    auto* p = CreateMaybeMessage<::TCurveDefinition>(GetArenaForAllocation());
    _impl_.curvedefinition_ = p;
  }
  return _impl_.curvedefinition_;
}
inline ::TCurveDefinition* TCurve::mutable_curvedefinition() {
  ::TCurveDefinition* _msg = _internal_mutable_curvedefinition();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCurve.curveDefinition)
  return _msg;
}
inline void TCurve::set_allocated_curvedefinition(::TCurveDefinition* curvedefinition) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.curvedefinition_);
  }
  if (curvedefinition) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(curvedefinition));
    if (message_arena != submessage_arena) {
      curvedefinition = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, curvedefinition, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.curvedefinition_ = curvedefinition;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCurve.curveDefinition)
}

// -------------------------------------------------------------------

// TWidgetAnimation

// optional .TNumericValue startValue = 1;
inline bool TWidgetAnimation::_internal_has_startvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.startvalue_ != nullptr);
  return value;
}
inline bool TWidgetAnimation::has_startvalue() const {
  return _internal_has_startvalue();
}
inline const ::TNumericValue& TWidgetAnimation::_internal_startvalue() const {
  const ::TNumericValue* p = _impl_.startvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TNumericValue&>(
      ::_TNumericValue_default_instance_);
}
inline const ::TNumericValue& TWidgetAnimation::startvalue() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.startValue)
  return _internal_startvalue();
}
inline void TWidgetAnimation::unsafe_arena_set_allocated_startvalue(
    ::TNumericValue* startvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startvalue_);
  }
  _impl_.startvalue_ = startvalue;
  if (startvalue) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetAnimation.startValue)
}
inline ::TNumericValue* TWidgetAnimation::release_startvalue() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TNumericValue* temp = _impl_.startvalue_;
  _impl_.startvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TNumericValue* TWidgetAnimation::unsafe_arena_release_startvalue() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetAnimation.startValue)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TNumericValue* temp = _impl_.startvalue_;
  _impl_.startvalue_ = nullptr;
  return temp;
}
inline ::TNumericValue* TWidgetAnimation::_internal_mutable_startvalue() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.startvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TNumericValue>(GetArenaForAllocation());
    _impl_.startvalue_ = p;
  }
  return _impl_.startvalue_;
}
inline ::TNumericValue* TWidgetAnimation::mutable_startvalue() {
  ::TNumericValue* _msg = _internal_mutable_startvalue();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetAnimation.startValue)
  return _msg;
}
inline void TWidgetAnimation::set_allocated_startvalue(::TNumericValue* startvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startvalue_);
  }
  if (startvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startvalue));
    if (message_arena != submessage_arena) {
      startvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.startvalue_ = startvalue;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetAnimation.startValue)
}

// optional .TDataBinding startBinding = 2;
inline bool TWidgetAnimation::_internal_has_startbinding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.startbinding_ != nullptr);
  return value;
}
inline bool TWidgetAnimation::has_startbinding() const {
  return _internal_has_startbinding();
}
inline const ::TDataBinding& TWidgetAnimation::_internal_startbinding() const {
  const ::TDataBinding* p = _impl_.startbinding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetAnimation::startbinding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.startBinding)
  return _internal_startbinding();
}
inline void TWidgetAnimation::unsafe_arena_set_allocated_startbinding(
    ::TDataBinding* startbinding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startbinding_);
  }
  _impl_.startbinding_ = startbinding;
  if (startbinding) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetAnimation.startBinding)
}
inline ::TDataBinding* TWidgetAnimation::release_startbinding() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.startbinding_;
  _impl_.startbinding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetAnimation::unsafe_arena_release_startbinding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetAnimation.startBinding)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.startbinding_;
  _impl_.startbinding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetAnimation::_internal_mutable_startbinding() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.startbinding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.startbinding_ = p;
  }
  return _impl_.startbinding_;
}
inline ::TDataBinding* TWidgetAnimation::mutable_startbinding() {
  ::TDataBinding* _msg = _internal_mutable_startbinding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetAnimation.startBinding)
  return _msg;
}
inline void TWidgetAnimation::set_allocated_startbinding(::TDataBinding* startbinding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startbinding_);
  }
  if (startbinding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startbinding));
    if (message_arena != submessage_arena) {
      startbinding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startbinding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.startbinding_ = startbinding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetAnimation.startBinding)
}

// optional .TNumericValue endValue = 3;
inline bool TWidgetAnimation::_internal_has_endvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.endvalue_ != nullptr);
  return value;
}
inline bool TWidgetAnimation::has_endvalue() const {
  return _internal_has_endvalue();
}
inline const ::TNumericValue& TWidgetAnimation::_internal_endvalue() const {
  const ::TNumericValue* p = _impl_.endvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TNumericValue&>(
      ::_TNumericValue_default_instance_);
}
inline const ::TNumericValue& TWidgetAnimation::endvalue() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.endValue)
  return _internal_endvalue();
}
inline void TWidgetAnimation::unsafe_arena_set_allocated_endvalue(
    ::TNumericValue* endvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endvalue_);
  }
  _impl_.endvalue_ = endvalue;
  if (endvalue) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetAnimation.endValue)
}
inline ::TNumericValue* TWidgetAnimation::release_endvalue() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TNumericValue* temp = _impl_.endvalue_;
  _impl_.endvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TNumericValue* TWidgetAnimation::unsafe_arena_release_endvalue() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetAnimation.endValue)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TNumericValue* temp = _impl_.endvalue_;
  _impl_.endvalue_ = nullptr;
  return temp;
}
inline ::TNumericValue* TWidgetAnimation::_internal_mutable_endvalue() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.endvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TNumericValue>(GetArenaForAllocation());
    _impl_.endvalue_ = p;
  }
  return _impl_.endvalue_;
}
inline ::TNumericValue* TWidgetAnimation::mutable_endvalue() {
  ::TNumericValue* _msg = _internal_mutable_endvalue();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetAnimation.endValue)
  return _msg;
}
inline void TWidgetAnimation::set_allocated_endvalue(::TNumericValue* endvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endvalue_);
  }
  if (endvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endvalue));
    if (message_arena != submessage_arena) {
      endvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.endvalue_ = endvalue;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetAnimation.endValue)
}

// optional .TDataBinding endBinding = 4;
inline bool TWidgetAnimation::_internal_has_endbinding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.endbinding_ != nullptr);
  return value;
}
inline bool TWidgetAnimation::has_endbinding() const {
  return _internal_has_endbinding();
}
inline const ::TDataBinding& TWidgetAnimation::_internal_endbinding() const {
  const ::TDataBinding* p = _impl_.endbinding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetAnimation::endbinding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.endBinding)
  return _internal_endbinding();
}
inline void TWidgetAnimation::unsafe_arena_set_allocated_endbinding(
    ::TDataBinding* endbinding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endbinding_);
  }
  _impl_.endbinding_ = endbinding;
  if (endbinding) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetAnimation.endBinding)
}
inline ::TDataBinding* TWidgetAnimation::release_endbinding() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.endbinding_;
  _impl_.endbinding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetAnimation::unsafe_arena_release_endbinding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetAnimation.endBinding)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.endbinding_;
  _impl_.endbinding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetAnimation::_internal_mutable_endbinding() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.endbinding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.endbinding_ = p;
  }
  return _impl_.endbinding_;
}
inline ::TDataBinding* TWidgetAnimation::mutable_endbinding() {
  ::TDataBinding* _msg = _internal_mutable_endbinding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetAnimation.endBinding)
  return _msg;
}
inline void TWidgetAnimation::set_allocated_endbinding(::TDataBinding* endbinding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endbinding_);
  }
  if (endbinding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endbinding));
    if (message_arena != submessage_arena) {
      endbinding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endbinding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.endbinding_ = endbinding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetAnimation.endBinding)
}

// optional uint32 durationValue = 5;
inline bool TWidgetAnimation::_internal_has_durationvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline bool TWidgetAnimation::has_durationvalue() const {
  return _internal_has_durationvalue();
}
inline void TWidgetAnimation::clear_durationvalue() {
  _impl_.durationvalue_ = 0u;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline uint32_t TWidgetAnimation::_internal_durationvalue() const {
  return _impl_.durationvalue_;
}
inline uint32_t TWidgetAnimation::durationvalue() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.durationValue)
  return _internal_durationvalue();
}
inline void TWidgetAnimation::_internal_set_durationvalue(uint32_t value) {
  _impl_._has_bits_[0] |= 0x00000040u;
  _impl_.durationvalue_ = value;
}
inline void TWidgetAnimation::set_durationvalue(uint32_t value) {
  _internal_set_durationvalue(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidgetAnimation.durationValue)
}

// optional .TDataBinding durationBinding = 6;
inline bool TWidgetAnimation::_internal_has_durationbinding() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.durationbinding_ != nullptr);
  return value;
}
inline bool TWidgetAnimation::has_durationbinding() const {
  return _internal_has_durationbinding();
}
inline const ::TDataBinding& TWidgetAnimation::_internal_durationbinding() const {
  const ::TDataBinding* p = _impl_.durationbinding_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TWidgetAnimation::durationbinding() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.durationBinding)
  return _internal_durationbinding();
}
inline void TWidgetAnimation::unsafe_arena_set_allocated_durationbinding(
    ::TDataBinding* durationbinding) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.durationbinding_);
  }
  _impl_.durationbinding_ = durationbinding;
  if (durationbinding) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetAnimation.durationBinding)
}
inline ::TDataBinding* TWidgetAnimation::release_durationbinding() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.durationbinding_;
  _impl_.durationbinding_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TWidgetAnimation::unsafe_arena_release_durationbinding() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetAnimation.durationBinding)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.durationbinding_;
  _impl_.durationbinding_ = nullptr;
  return temp;
}
inline ::TDataBinding* TWidgetAnimation::_internal_mutable_durationbinding() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.durationbinding_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.durationbinding_ = p;
  }
  return _impl_.durationbinding_;
}
inline ::TDataBinding* TWidgetAnimation::mutable_durationbinding() {
  ::TDataBinding* _msg = _internal_mutable_durationbinding();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetAnimation.durationBinding)
  return _msg;
}
inline void TWidgetAnimation::set_allocated_durationbinding(::TDataBinding* durationbinding) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.durationbinding_);
  }
  if (durationbinding) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(durationbinding));
    if (message_arena != submessage_arena) {
      durationbinding = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, durationbinding, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.durationbinding_ = durationbinding;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetAnimation.durationBinding)
}

// optional .TKeyFrameSequence keyFrameSequence = 7;
inline bool TWidgetAnimation::_internal_has_keyframesequence() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.keyframesequence_ != nullptr);
  return value;
}
inline bool TWidgetAnimation::has_keyframesequence() const {
  return _internal_has_keyframesequence();
}
inline const ::TKeyFrameSequence& TWidgetAnimation::_internal_keyframesequence() const {
  const ::TKeyFrameSequence* p = _impl_.keyframesequence_;
  return p != nullptr ? *p : reinterpret_cast<const ::TKeyFrameSequence&>(
      ::_TKeyFrameSequence_default_instance_);
}
inline const ::TKeyFrameSequence& TWidgetAnimation::keyframesequence() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.keyFrameSequence)
  return _internal_keyframesequence();
}
inline void TWidgetAnimation::unsafe_arena_set_allocated_keyframesequence(
    ::TKeyFrameSequence* keyframesequence) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keyframesequence_);
  }
  _impl_.keyframesequence_ = keyframesequence;
  if (keyframesequence) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TWidgetAnimation.keyFrameSequence)
}
inline ::TKeyFrameSequence* TWidgetAnimation::release_keyframesequence() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TKeyFrameSequence* temp = _impl_.keyframesequence_;
  _impl_.keyframesequence_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TKeyFrameSequence* TWidgetAnimation::unsafe_arena_release_keyframesequence() {
  // @@protoc_insertion_point(field_release:HmiWidget.TWidgetAnimation.keyFrameSequence)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TKeyFrameSequence* temp = _impl_.keyframesequence_;
  _impl_.keyframesequence_ = nullptr;
  return temp;
}
inline ::TKeyFrameSequence* TWidgetAnimation::_internal_mutable_keyframesequence() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.keyframesequence_ == nullptr) {
    auto* p = CreateMaybeMessage<::TKeyFrameSequence>(GetArenaForAllocation());
    _impl_.keyframesequence_ = p;
  }
  return _impl_.keyframesequence_;
}
inline ::TKeyFrameSequence* TWidgetAnimation::mutable_keyframesequence() {
  ::TKeyFrameSequence* _msg = _internal_mutable_keyframesequence();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TWidgetAnimation.keyFrameSequence)
  return _msg;
}
inline void TWidgetAnimation::set_allocated_keyframesequence(::TKeyFrameSequence* keyframesequence) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.keyframesequence_);
  }
  if (keyframesequence) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(keyframesequence));
    if (message_arena != submessage_arena) {
      keyframesequence = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, keyframesequence, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.keyframesequence_ = keyframesequence;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TWidgetAnimation.keyFrameSequence)
}

// required .TEAnimationInterpolator interpolator = 8;
inline bool TWidgetAnimation::_internal_has_interpolator() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline bool TWidgetAnimation::has_interpolator() const {
  return _internal_has_interpolator();
}
inline void TWidgetAnimation::clear_interpolator() {
  _impl_.interpolator_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::TEAnimationInterpolator TWidgetAnimation::_internal_interpolator() const {
  return static_cast< ::TEAnimationInterpolator >(_impl_.interpolator_);
}
inline ::TEAnimationInterpolator TWidgetAnimation::interpolator() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.interpolator)
  return _internal_interpolator();
}
inline void TWidgetAnimation::_internal_set_interpolator(::TEAnimationInterpolator value) {
  assert(::TEAnimationInterpolator_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000080u;
  _impl_.interpolator_ = value;
}
inline void TWidgetAnimation::set_interpolator(::TEAnimationInterpolator value) {
  _internal_set_interpolator(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidgetAnimation.interpolator)
}

// required .TEDataType returnType = 9;
inline bool TWidgetAnimation::_internal_has_returntype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline bool TWidgetAnimation::has_returntype() const {
  return _internal_has_returntype();
}
inline void TWidgetAnimation::clear_returntype() {
  _impl_.returntype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::TEDataType TWidgetAnimation::_internal_returntype() const {
  return static_cast< ::TEDataType >(_impl_.returntype_);
}
inline ::TEDataType TWidgetAnimation::returntype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.returnType)
  return _internal_returntype();
}
inline void TWidgetAnimation::_internal_set_returntype(::TEDataType value) {
  assert(::TEDataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000100u;
  _impl_.returntype_ = value;
}
inline void TWidgetAnimation::set_returntype(::TEDataType value) {
  _internal_set_returntype(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidgetAnimation.returnType)
}

// optional int32 loopCount = 10;
inline bool TWidgetAnimation::_internal_has_loopcount() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  return value;
}
inline bool TWidgetAnimation::has_loopcount() const {
  return _internal_has_loopcount();
}
inline void TWidgetAnimation::clear_loopcount() {
  _impl_.loopcount_ = 0;
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline int32_t TWidgetAnimation::_internal_loopcount() const {
  return _impl_.loopcount_;
}
inline int32_t TWidgetAnimation::loopcount() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.loopCount)
  return _internal_loopcount();
}
inline void TWidgetAnimation::_internal_set_loopcount(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000200u;
  _impl_.loopcount_ = value;
}
inline void TWidgetAnimation::set_loopcount(int32_t value) {
  _internal_set_loopcount(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidgetAnimation.loopCount)
}

// optional int32 updateInterval = 11;
inline bool TWidgetAnimation::_internal_has_updateinterval() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  return value;
}
inline bool TWidgetAnimation::has_updateinterval() const {
  return _internal_has_updateinterval();
}
inline void TWidgetAnimation::clear_updateinterval() {
  _impl_.updateinterval_ = 0;
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline int32_t TWidgetAnimation::_internal_updateinterval() const {
  return _impl_.updateinterval_;
}
inline int32_t TWidgetAnimation::updateinterval() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.updateInterval)
  return _internal_updateinterval();
}
inline void TWidgetAnimation::_internal_set_updateinterval(int32_t value) {
  _impl_._has_bits_[0] |= 0x00000400u;
  _impl_.updateinterval_ = value;
}
inline void TWidgetAnimation::set_updateinterval(int32_t value) {
  _internal_set_updateinterval(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidgetAnimation.updateInterval)
}

// optional .HmiWidget.TEAnimationBindingBehaviour updateBehaviour = 12;
inline bool TWidgetAnimation::_internal_has_updatebehaviour() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  return value;
}
inline bool TWidgetAnimation::has_updatebehaviour() const {
  return _internal_has_updatebehaviour();
}
inline void TWidgetAnimation::clear_updatebehaviour() {
  _impl_.updatebehaviour_ = 0;
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline ::HmiWidget::TEAnimationBindingBehaviour TWidgetAnimation::_internal_updatebehaviour() const {
  return static_cast< ::HmiWidget::TEAnimationBindingBehaviour >(_impl_.updatebehaviour_);
}
inline ::HmiWidget::TEAnimationBindingBehaviour TWidgetAnimation::updatebehaviour() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TWidgetAnimation.updateBehaviour)
  return _internal_updatebehaviour();
}
inline void TWidgetAnimation::_internal_set_updatebehaviour(::HmiWidget::TEAnimationBindingBehaviour value) {
  assert(::HmiWidget::TEAnimationBindingBehaviour_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000800u;
  _impl_.updatebehaviour_ = value;
}
inline void TWidgetAnimation::set_updatebehaviour(::HmiWidget::TEAnimationBindingBehaviour value) {
  _internal_set_updatebehaviour(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TWidgetAnimation.updateBehaviour)
}

// -------------------------------------------------------------------

// TCompositeAnimationElement

// required .TIdentifier animationType = 1;
inline bool TCompositeAnimationElement::_internal_has_animationtype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.animationtype_ != nullptr);
  return value;
}
inline bool TCompositeAnimationElement::has_animationtype() const {
  return _internal_has_animationtype();
}
inline const ::TIdentifier& TCompositeAnimationElement::_internal_animationtype() const {
  const ::TIdentifier* p = _impl_.animationtype_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCompositeAnimationElement::animationtype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationElement.animationType)
  return _internal_animationtype();
}
inline void TCompositeAnimationElement::unsafe_arena_set_allocated_animationtype(
    ::TIdentifier* animationtype) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animationtype_);
  }
  _impl_.animationtype_ = animationtype;
  if (animationtype) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationElement.animationType)
}
inline ::TIdentifier* TCompositeAnimationElement::release_animationtype() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.animationtype_;
  _impl_.animationtype_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCompositeAnimationElement::unsafe_arena_release_animationtype() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationElement.animationType)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.animationtype_;
  _impl_.animationtype_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCompositeAnimationElement::_internal_mutable_animationtype() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.animationtype_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.animationtype_ = p;
  }
  return _impl_.animationtype_;
}
inline ::TIdentifier* TCompositeAnimationElement::mutable_animationtype() {
  ::TIdentifier* _msg = _internal_mutable_animationtype();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationElement.animationType)
  return _msg;
}
inline void TCompositeAnimationElement::set_allocated_animationtype(::TIdentifier* animationtype) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.animationtype_);
  }
  if (animationtype) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(animationtype));
    if (message_arena != submessage_arena) {
      animationtype = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, animationtype, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.animationtype_ = animationtype;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationElement.animationType)
}

// required .TIdentifier bindToReturnValue = 2;
inline bool TCompositeAnimationElement::_internal_has_bindtoreturnvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bindtoreturnvalue_ != nullptr);
  return value;
}
inline bool TCompositeAnimationElement::has_bindtoreturnvalue() const {
  return _internal_has_bindtoreturnvalue();
}
inline const ::TIdentifier& TCompositeAnimationElement::_internal_bindtoreturnvalue() const {
  const ::TIdentifier* p = _impl_.bindtoreturnvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCompositeAnimationElement::bindtoreturnvalue() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationElement.bindToReturnValue)
  return _internal_bindtoreturnvalue();
}
inline void TCompositeAnimationElement::unsafe_arena_set_allocated_bindtoreturnvalue(
    ::TIdentifier* bindtoreturnvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindtoreturnvalue_);
  }
  _impl_.bindtoreturnvalue_ = bindtoreturnvalue;
  if (bindtoreturnvalue) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationElement.bindToReturnValue)
}
inline ::TIdentifier* TCompositeAnimationElement::release_bindtoreturnvalue() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.bindtoreturnvalue_;
  _impl_.bindtoreturnvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCompositeAnimationElement::unsafe_arena_release_bindtoreturnvalue() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationElement.bindToReturnValue)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TIdentifier* temp = _impl_.bindtoreturnvalue_;
  _impl_.bindtoreturnvalue_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCompositeAnimationElement::_internal_mutable_bindtoreturnvalue() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.bindtoreturnvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.bindtoreturnvalue_ = p;
  }
  return _impl_.bindtoreturnvalue_;
}
inline ::TIdentifier* TCompositeAnimationElement::mutable_bindtoreturnvalue() {
  ::TIdentifier* _msg = _internal_mutable_bindtoreturnvalue();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationElement.bindToReturnValue)
  return _msg;
}
inline void TCompositeAnimationElement::set_allocated_bindtoreturnvalue(::TIdentifier* bindtoreturnvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bindtoreturnvalue_);
  }
  if (bindtoreturnvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bindtoreturnvalue));
    if (message_arena != submessage_arena) {
      bindtoreturnvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bindtoreturnvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.bindtoreturnvalue_ = bindtoreturnvalue;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationElement.bindToReturnValue)
}

// required bool isStartupAnimation = 3;
inline bool TCompositeAnimationElement::_internal_has_isstartupanimation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TCompositeAnimationElement::has_isstartupanimation() const {
  return _internal_has_isstartupanimation();
}
inline void TCompositeAnimationElement::clear_isstartupanimation() {
  _impl_.isstartupanimation_ = false;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline bool TCompositeAnimationElement::_internal_isstartupanimation() const {
  return _impl_.isstartupanimation_;
}
inline bool TCompositeAnimationElement::isstartupanimation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationElement.isStartupAnimation)
  return _internal_isstartupanimation();
}
inline void TCompositeAnimationElement::_internal_set_isstartupanimation(bool value) {
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.isstartupanimation_ = value;
}
inline void TCompositeAnimationElement::set_isstartupanimation(bool value) {
  _internal_set_isstartupanimation(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TCompositeAnimationElement.isStartupAnimation)
}

// -------------------------------------------------------------------

// TCompositeAnimationTrigger

// optional .TIdentifier source = 1;
inline bool TCompositeAnimationTrigger::_internal_has_source() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.source_ != nullptr);
  return value;
}
inline bool TCompositeAnimationTrigger::has_source() const {
  return _internal_has_source();
}
inline const ::TIdentifier& TCompositeAnimationTrigger::_internal_source() const {
  const ::TIdentifier* p = _impl_.source_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCompositeAnimationTrigger::source() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationTrigger.source)
  return _internal_source();
}
inline void TCompositeAnimationTrigger::unsafe_arena_set_allocated_source(
    ::TIdentifier* source) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  _impl_.source_ = source;
  if (source) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationTrigger.source)
}
inline ::TIdentifier* TCompositeAnimationTrigger::release_source() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.source_;
  _impl_.source_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCompositeAnimationTrigger::unsafe_arena_release_source() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationTrigger.source)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.source_;
  _impl_.source_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCompositeAnimationTrigger::_internal_mutable_source() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.source_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.source_ = p;
  }
  return _impl_.source_;
}
inline ::TIdentifier* TCompositeAnimationTrigger::mutable_source() {
  ::TIdentifier* _msg = _internal_mutable_source();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationTrigger.source)
  return _msg;
}
inline void TCompositeAnimationTrigger::set_allocated_source(::TIdentifier* source) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.source_);
  }
  if (source) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(source));
    if (message_arena != submessage_arena) {
      source = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, source, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.source_ = source;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationTrigger.source)
}

// optional .HmiWidget.TEAnimationSignal signal = 2;
inline bool TCompositeAnimationTrigger::_internal_has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TCompositeAnimationTrigger::has_signal() const {
  return _internal_has_signal();
}
inline void TCompositeAnimationTrigger::clear_signal() {
  _impl_.signal_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::HmiWidget::TEAnimationSignal TCompositeAnimationTrigger::_internal_signal() const {
  return static_cast< ::HmiWidget::TEAnimationSignal >(_impl_.signal_);
}
inline ::HmiWidget::TEAnimationSignal TCompositeAnimationTrigger::signal() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationTrigger.signal)
  return _internal_signal();
}
inline void TCompositeAnimationTrigger::_internal_set_signal(::HmiWidget::TEAnimationSignal value) {
  assert(::HmiWidget::TEAnimationSignal_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.signal_ = value;
}
inline void TCompositeAnimationTrigger::set_signal(::HmiWidget::TEAnimationSignal value) {
  _internal_set_signal(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TCompositeAnimationTrigger.signal)
}

// optional .HmiWidget.TEAnimationSlot action = 3;
inline bool TCompositeAnimationTrigger::_internal_has_action() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  return value;
}
inline bool TCompositeAnimationTrigger::has_action() const {
  return _internal_has_action();
}
inline void TCompositeAnimationTrigger::clear_action() {
  _impl_.action_ = 0;
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline ::HmiWidget::TEAnimationSlot TCompositeAnimationTrigger::_internal_action() const {
  return static_cast< ::HmiWidget::TEAnimationSlot >(_impl_.action_);
}
inline ::HmiWidget::TEAnimationSlot TCompositeAnimationTrigger::action() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationTrigger.action)
  return _internal_action();
}
inline void TCompositeAnimationTrigger::_internal_set_action(::HmiWidget::TEAnimationSlot value) {
  assert(::HmiWidget::TEAnimationSlot_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000008u;
  _impl_.action_ = value;
}
inline void TCompositeAnimationTrigger::set_action(::HmiWidget::TEAnimationSlot value) {
  _internal_set_action(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TCompositeAnimationTrigger.action)
}

// optional .HmiWidget.TCommand widgetCommand = 4;
inline bool TCompositeAnimationTrigger::_internal_has_widgetcommand() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.widgetcommand_ != nullptr);
  return value;
}
inline bool TCompositeAnimationTrigger::has_widgetcommand() const {
  return _internal_has_widgetcommand();
}
inline void TCompositeAnimationTrigger::clear_widgetcommand() {
  if (_impl_.widgetcommand_ != nullptr) _impl_.widgetcommand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TCommand& TCompositeAnimationTrigger::_internal_widgetcommand() const {
  const ::HmiWidget::TCommand* p = _impl_.widgetcommand_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TCommand&>(
      ::HmiWidget::_TCommand_default_instance_);
}
inline const ::HmiWidget::TCommand& TCompositeAnimationTrigger::widgetcommand() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationTrigger.widgetCommand)
  return _internal_widgetcommand();
}
inline void TCompositeAnimationTrigger::unsafe_arena_set_allocated_widgetcommand(
    ::HmiWidget::TCommand* widgetcommand) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgetcommand_);
  }
  _impl_.widgetcommand_ = widgetcommand;
  if (widgetcommand) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationTrigger.widgetCommand)
}
inline ::HmiWidget::TCommand* TCompositeAnimationTrigger::release_widgetcommand() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TCommand* temp = _impl_.widgetcommand_;
  _impl_.widgetcommand_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TCommand* TCompositeAnimationTrigger::unsafe_arena_release_widgetcommand() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationTrigger.widgetCommand)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TCommand* temp = _impl_.widgetcommand_;
  _impl_.widgetcommand_ = nullptr;
  return temp;
}
inline ::HmiWidget::TCommand* TCompositeAnimationTrigger::_internal_mutable_widgetcommand() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.widgetcommand_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TCommand>(GetArenaForAllocation());
    _impl_.widgetcommand_ = p;
  }
  return _impl_.widgetcommand_;
}
inline ::HmiWidget::TCommand* TCompositeAnimationTrigger::mutable_widgetcommand() {
  ::HmiWidget::TCommand* _msg = _internal_mutable_widgetcommand();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationTrigger.widgetCommand)
  return _msg;
}
inline void TCompositeAnimationTrigger::set_allocated_widgetcommand(::HmiWidget::TCommand* widgetcommand) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widgetcommand_;
  }
  if (widgetcommand) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widgetcommand);
    if (message_arena != submessage_arena) {
      widgetcommand = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widgetcommand, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.widgetcommand_ = widgetcommand;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationTrigger.widgetCommand)
}

// -------------------------------------------------------------------

// TCompositeAnimationSubAnimationList

// required .TIdentifier identifier = 1;
inline bool TCompositeAnimationSubAnimationList::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TCompositeAnimationSubAnimationList::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TCompositeAnimationSubAnimationList::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCompositeAnimationSubAnimationList::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationSubAnimationList.identifier)
  return _internal_identifier();
}
inline void TCompositeAnimationSubAnimationList::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationSubAnimationList.identifier)
}
inline ::TIdentifier* TCompositeAnimationSubAnimationList::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCompositeAnimationSubAnimationList::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationSubAnimationList.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCompositeAnimationSubAnimationList::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TCompositeAnimationSubAnimationList::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationSubAnimationList.identifier)
  return _msg;
}
inline void TCompositeAnimationSubAnimationList::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationSubAnimationList.identifier)
}

// optional .HmiWidget.TWidgetAnimation widgetAnimation = 2;
inline bool TCompositeAnimationSubAnimationList::_internal_has_widgetanimation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.widgetanimation_ != nullptr);
  return value;
}
inline bool TCompositeAnimationSubAnimationList::has_widgetanimation() const {
  return _internal_has_widgetanimation();
}
inline void TCompositeAnimationSubAnimationList::clear_widgetanimation() {
  if (_impl_.widgetanimation_ != nullptr) _impl_.widgetanimation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TWidgetAnimation& TCompositeAnimationSubAnimationList::_internal_widgetanimation() const {
  const ::HmiWidget::TWidgetAnimation* p = _impl_.widgetanimation_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TWidgetAnimation&>(
      ::HmiWidget::_TWidgetAnimation_default_instance_);
}
inline const ::HmiWidget::TWidgetAnimation& TCompositeAnimationSubAnimationList::widgetanimation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationSubAnimationList.widgetAnimation)
  return _internal_widgetanimation();
}
inline void TCompositeAnimationSubAnimationList::unsafe_arena_set_allocated_widgetanimation(
    ::HmiWidget::TWidgetAnimation* widgetanimation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.widgetanimation_);
  }
  _impl_.widgetanimation_ = widgetanimation;
  if (widgetanimation) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationSubAnimationList.widgetAnimation)
}
inline ::HmiWidget::TWidgetAnimation* TCompositeAnimationSubAnimationList::release_widgetanimation() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TWidgetAnimation* temp = _impl_.widgetanimation_;
  _impl_.widgetanimation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TWidgetAnimation* TCompositeAnimationSubAnimationList::unsafe_arena_release_widgetanimation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationSubAnimationList.widgetAnimation)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TWidgetAnimation* temp = _impl_.widgetanimation_;
  _impl_.widgetanimation_ = nullptr;
  return temp;
}
inline ::HmiWidget::TWidgetAnimation* TCompositeAnimationSubAnimationList::_internal_mutable_widgetanimation() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.widgetanimation_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TWidgetAnimation>(GetArenaForAllocation());
    _impl_.widgetanimation_ = p;
  }
  return _impl_.widgetanimation_;
}
inline ::HmiWidget::TWidgetAnimation* TCompositeAnimationSubAnimationList::mutable_widgetanimation() {
  ::HmiWidget::TWidgetAnimation* _msg = _internal_mutable_widgetanimation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationSubAnimationList.widgetAnimation)
  return _msg;
}
inline void TCompositeAnimationSubAnimationList::set_allocated_widgetanimation(::HmiWidget::TWidgetAnimation* widgetanimation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.widgetanimation_;
  }
  if (widgetanimation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(widgetanimation);
    if (message_arena != submessage_arena) {
      widgetanimation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, widgetanimation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.widgetanimation_ = widgetanimation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationSubAnimationList.widgetAnimation)
}

// repeated .TIdentifier useImport = 3;
inline int TCompositeAnimationSubAnimationList::_internal_useimport_size() const {
  return _impl_.useimport_.size();
}
inline int TCompositeAnimationSubAnimationList::useimport_size() const {
  return _internal_useimport_size();
}
inline ::TIdentifier* TCompositeAnimationSubAnimationList::mutable_useimport(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationSubAnimationList.useImport)
  return _impl_.useimport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TCompositeAnimationSubAnimationList::mutable_useimport() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TCompositeAnimationSubAnimationList.useImport)
  return &_impl_.useimport_;
}
inline const ::TIdentifier& TCompositeAnimationSubAnimationList::_internal_useimport(int index) const {
  return _impl_.useimport_.Get(index);
}
inline const ::TIdentifier& TCompositeAnimationSubAnimationList::useimport(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationSubAnimationList.useImport)
  return _internal_useimport(index);
}
inline ::TIdentifier* TCompositeAnimationSubAnimationList::_internal_add_useimport() {
  return _impl_.useimport_.Add();
}
inline ::TIdentifier* TCompositeAnimationSubAnimationList::add_useimport() {
  ::TIdentifier* _add = _internal_add_useimport();
  // @@protoc_insertion_point(field_add:HmiWidget.TCompositeAnimationSubAnimationList.useImport)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TCompositeAnimationSubAnimationList::useimport() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TCompositeAnimationSubAnimationList.useImport)
  return _impl_.useimport_;
}

// repeated .HmiWidget.TCompositeAnimationTrigger trigger = 4;
inline int TCompositeAnimationSubAnimationList::_internal_trigger_size() const {
  return _impl_.trigger_.size();
}
inline int TCompositeAnimationSubAnimationList::trigger_size() const {
  return _internal_trigger_size();
}
inline void TCompositeAnimationSubAnimationList::clear_trigger() {
  _impl_.trigger_.Clear();
}
inline ::HmiWidget::TCompositeAnimationTrigger* TCompositeAnimationSubAnimationList::mutable_trigger(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationSubAnimationList.trigger)
  return _impl_.trigger_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationTrigger >*
TCompositeAnimationSubAnimationList::mutable_trigger() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TCompositeAnimationSubAnimationList.trigger)
  return &_impl_.trigger_;
}
inline const ::HmiWidget::TCompositeAnimationTrigger& TCompositeAnimationSubAnimationList::_internal_trigger(int index) const {
  return _impl_.trigger_.Get(index);
}
inline const ::HmiWidget::TCompositeAnimationTrigger& TCompositeAnimationSubAnimationList::trigger(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationSubAnimationList.trigger)
  return _internal_trigger(index);
}
inline ::HmiWidget::TCompositeAnimationTrigger* TCompositeAnimationSubAnimationList::_internal_add_trigger() {
  return _impl_.trigger_.Add();
}
inline ::HmiWidget::TCompositeAnimationTrigger* TCompositeAnimationSubAnimationList::add_trigger() {
  ::HmiWidget::TCompositeAnimationTrigger* _add = _internal_add_trigger();
  // @@protoc_insertion_point(field_add:HmiWidget.TCompositeAnimationSubAnimationList.trigger)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationTrigger >&
TCompositeAnimationSubAnimationList::trigger() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TCompositeAnimationSubAnimationList.trigger)
  return _impl_.trigger_;
}

// -------------------------------------------------------------------

// TCompositeAnimationReturnValue

// required .TIdentifier key = 1;
inline bool TCompositeAnimationReturnValue::_internal_has_key() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.key_ != nullptr);
  return value;
}
inline bool TCompositeAnimationReturnValue::has_key() const {
  return _internal_has_key();
}
inline const ::TIdentifier& TCompositeAnimationReturnValue::_internal_key() const {
  const ::TIdentifier* p = _impl_.key_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCompositeAnimationReturnValue::key() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationReturnValue.key)
  return _internal_key();
}
inline void TCompositeAnimationReturnValue::unsafe_arena_set_allocated_key(
    ::TIdentifier* key) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  _impl_.key_ = key;
  if (key) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationReturnValue.key)
}
inline ::TIdentifier* TCompositeAnimationReturnValue::release_key() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCompositeAnimationReturnValue::unsafe_arena_release_key() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationReturnValue.key)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.key_;
  _impl_.key_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCompositeAnimationReturnValue::_internal_mutable_key() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.key_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.key_ = p;
  }
  return _impl_.key_;
}
inline ::TIdentifier* TCompositeAnimationReturnValue::mutable_key() {
  ::TIdentifier* _msg = _internal_mutable_key();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationReturnValue.key)
  return _msg;
}
inline void TCompositeAnimationReturnValue::set_allocated_key(::TIdentifier* key) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.key_);
  }
  if (key) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(key));
    if (message_arena != submessage_arena) {
      key = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, key, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.key_ = key;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationReturnValue.key)
}

// repeated .HmiWidget.TCompositeAnimationSubAnimationList animation = 2;
inline int TCompositeAnimationReturnValue::_internal_animation_size() const {
  return _impl_.animation_.size();
}
inline int TCompositeAnimationReturnValue::animation_size() const {
  return _internal_animation_size();
}
inline void TCompositeAnimationReturnValue::clear_animation() {
  _impl_.animation_.Clear();
}
inline ::HmiWidget::TCompositeAnimationSubAnimationList* TCompositeAnimationReturnValue::mutable_animation(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationReturnValue.animation)
  return _impl_.animation_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationSubAnimationList >*
TCompositeAnimationReturnValue::mutable_animation() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TCompositeAnimationReturnValue.animation)
  return &_impl_.animation_;
}
inline const ::HmiWidget::TCompositeAnimationSubAnimationList& TCompositeAnimationReturnValue::_internal_animation(int index) const {
  return _impl_.animation_.Get(index);
}
inline const ::HmiWidget::TCompositeAnimationSubAnimationList& TCompositeAnimationReturnValue::animation(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationReturnValue.animation)
  return _internal_animation(index);
}
inline ::HmiWidget::TCompositeAnimationSubAnimationList* TCompositeAnimationReturnValue::_internal_add_animation() {
  return _impl_.animation_.Add();
}
inline ::HmiWidget::TCompositeAnimationSubAnimationList* TCompositeAnimationReturnValue::add_animation() {
  ::HmiWidget::TCompositeAnimationSubAnimationList* _add = _internal_add_animation();
  // @@protoc_insertion_point(field_add:HmiWidget.TCompositeAnimationReturnValue.animation)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationSubAnimationList >&
TCompositeAnimationReturnValue::animation() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TCompositeAnimationReturnValue.animation)
  return _impl_.animation_;
}

// required .TEDataType returnType = 3;
inline bool TCompositeAnimationReturnValue::_internal_has_returntype() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline bool TCompositeAnimationReturnValue::has_returntype() const {
  return _internal_has_returntype();
}
inline void TCompositeAnimationReturnValue::clear_returntype() {
  _impl_.returntype_ = 0;
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline ::TEDataType TCompositeAnimationReturnValue::_internal_returntype() const {
  return static_cast< ::TEDataType >(_impl_.returntype_);
}
inline ::TEDataType TCompositeAnimationReturnValue::returntype() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationReturnValue.returnType)
  return _internal_returntype();
}
inline void TCompositeAnimationReturnValue::_internal_set_returntype(::TEDataType value) {
  assert(::TEDataType_IsValid(value));
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.returntype_ = value;
}
inline void TCompositeAnimationReturnValue::set_returntype(::TEDataType value) {
  _internal_set_returntype(value);
  // @@protoc_insertion_point(field_set:HmiWidget.TCompositeAnimationReturnValue.returnType)
}

// optional .TVariant defaultValue = 4;
inline bool TCompositeAnimationReturnValue::_internal_has_defaultvalue() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.defaultvalue_ != nullptr);
  return value;
}
inline bool TCompositeAnimationReturnValue::has_defaultvalue() const {
  return _internal_has_defaultvalue();
}
inline const ::TVariant& TCompositeAnimationReturnValue::_internal_defaultvalue() const {
  const ::TVariant* p = _impl_.defaultvalue_;
  return p != nullptr ? *p : reinterpret_cast<const ::TVariant&>(
      ::_TVariant_default_instance_);
}
inline const ::TVariant& TCompositeAnimationReturnValue::defaultvalue() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimationReturnValue.defaultValue)
  return _internal_defaultvalue();
}
inline void TCompositeAnimationReturnValue::unsafe_arena_set_allocated_defaultvalue(
    ::TVariant* defaultvalue) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultvalue_);
  }
  _impl_.defaultvalue_ = defaultvalue;
  if (defaultvalue) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimationReturnValue.defaultValue)
}
inline ::TVariant* TCompositeAnimationReturnValue::release_defaultvalue() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariant* temp = _impl_.defaultvalue_;
  _impl_.defaultvalue_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TVariant* TCompositeAnimationReturnValue::unsafe_arena_release_defaultvalue() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimationReturnValue.defaultValue)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TVariant* temp = _impl_.defaultvalue_;
  _impl_.defaultvalue_ = nullptr;
  return temp;
}
inline ::TVariant* TCompositeAnimationReturnValue::_internal_mutable_defaultvalue() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.defaultvalue_ == nullptr) {
    auto* p = CreateMaybeMessage<::TVariant>(GetArenaForAllocation());
    _impl_.defaultvalue_ = p;
  }
  return _impl_.defaultvalue_;
}
inline ::TVariant* TCompositeAnimationReturnValue::mutable_defaultvalue() {
  ::TVariant* _msg = _internal_mutable_defaultvalue();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimationReturnValue.defaultValue)
  return _msg;
}
inline void TCompositeAnimationReturnValue::set_allocated_defaultvalue(::TVariant* defaultvalue) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultvalue_);
  }
  if (defaultvalue) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultvalue));
    if (message_arena != submessage_arena) {
      defaultvalue = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultvalue, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.defaultvalue_ = defaultvalue;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimationReturnValue.defaultValue)
}

// -------------------------------------------------------------------

// TCompositeAnimation

// required .TIdentifier compositeIdentifier = 1;
inline bool TCompositeAnimation::_internal_has_compositeidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.compositeidentifier_ != nullptr);
  return value;
}
inline bool TCompositeAnimation::has_compositeidentifier() const {
  return _internal_has_compositeidentifier();
}
inline const ::TIdentifier& TCompositeAnimation::_internal_compositeidentifier() const {
  const ::TIdentifier* p = _impl_.compositeidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TCompositeAnimation::compositeidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimation.compositeIdentifier)
  return _internal_compositeidentifier();
}
inline void TCompositeAnimation::unsafe_arena_set_allocated_compositeidentifier(
    ::TIdentifier* compositeidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compositeidentifier_);
  }
  _impl_.compositeidentifier_ = compositeidentifier;
  if (compositeidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TCompositeAnimation.compositeIdentifier)
}
inline ::TIdentifier* TCompositeAnimation::release_compositeidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.compositeidentifier_;
  _impl_.compositeidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TCompositeAnimation::unsafe_arena_release_compositeidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TCompositeAnimation.compositeIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.compositeidentifier_;
  _impl_.compositeidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TCompositeAnimation::_internal_mutable_compositeidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.compositeidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.compositeidentifier_ = p;
  }
  return _impl_.compositeidentifier_;
}
inline ::TIdentifier* TCompositeAnimation::mutable_compositeidentifier() {
  ::TIdentifier* _msg = _internal_mutable_compositeidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimation.compositeIdentifier)
  return _msg;
}
inline void TCompositeAnimation::set_allocated_compositeidentifier(::TIdentifier* compositeidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.compositeidentifier_);
  }
  if (compositeidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(compositeidentifier));
    if (message_arena != submessage_arena) {
      compositeidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, compositeidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.compositeidentifier_ = compositeidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TCompositeAnimation.compositeIdentifier)
}

// repeated .HmiWidget.TCompositeAnimationReturnValue returnValue = 4;
inline int TCompositeAnimation::_internal_returnvalue_size() const {
  return _impl_.returnvalue_.size();
}
inline int TCompositeAnimation::returnvalue_size() const {
  return _internal_returnvalue_size();
}
inline void TCompositeAnimation::clear_returnvalue() {
  _impl_.returnvalue_.Clear();
}
inline ::HmiWidget::TCompositeAnimationReturnValue* TCompositeAnimation::mutable_returnvalue(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TCompositeAnimation.returnValue)
  return _impl_.returnvalue_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationReturnValue >*
TCompositeAnimation::mutable_returnvalue() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TCompositeAnimation.returnValue)
  return &_impl_.returnvalue_;
}
inline const ::HmiWidget::TCompositeAnimationReturnValue& TCompositeAnimation::_internal_returnvalue(int index) const {
  return _impl_.returnvalue_.Get(index);
}
inline const ::HmiWidget::TCompositeAnimationReturnValue& TCompositeAnimation::returnvalue(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TCompositeAnimation.returnValue)
  return _internal_returnvalue(index);
}
inline ::HmiWidget::TCompositeAnimationReturnValue* TCompositeAnimation::_internal_add_returnvalue() {
  return _impl_.returnvalue_.Add();
}
inline ::HmiWidget::TCompositeAnimationReturnValue* TCompositeAnimation::add_returnvalue() {
  ::HmiWidget::TCompositeAnimationReturnValue* _add = _internal_add_returnvalue();
  // @@protoc_insertion_point(field_add:HmiWidget.TCompositeAnimation.returnValue)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TCompositeAnimationReturnValue >&
TCompositeAnimation::returnvalue() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TCompositeAnimation.returnValue)
  return _impl_.returnvalue_;
}

// -------------------------------------------------------------------

// TLayout

// required .TIdentifier identifier = 1;
inline bool TLayout::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayout::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayout::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayout::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.identifier)
  return _internal_identifier();
}
inline void TLayout::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.identifier)
}
inline ::TIdentifier* TLayout::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayout::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayout::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayout::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.identifier)
  return _msg;
}
inline void TLayout::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.identifier)
}

// optional .HmiWidget.TLayoutStatic staticLayout = 2;
inline bool TLayout::_internal_has_staticlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.staticlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_staticlayout() const {
  return _internal_has_staticlayout();
}
inline void TLayout::clear_staticlayout() {
  if (_impl_.staticlayout_ != nullptr) _impl_.staticlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutStatic& TLayout::_internal_staticlayout() const {
  const ::HmiWidget::TLayoutStatic* p = _impl_.staticlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutStatic&>(
      ::HmiWidget::_TLayoutStatic_default_instance_);
}
inline const ::HmiWidget::TLayoutStatic& TLayout::staticlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.staticLayout)
  return _internal_staticlayout();
}
inline void TLayout::unsafe_arena_set_allocated_staticlayout(
    ::HmiWidget::TLayoutStatic* staticlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.staticlayout_);
  }
  _impl_.staticlayout_ = staticlayout;
  if (staticlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.staticLayout)
}
inline ::HmiWidget::TLayoutStatic* TLayout::release_staticlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutStatic* temp = _impl_.staticlayout_;
  _impl_.staticlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutStatic* TLayout::unsafe_arena_release_staticlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.staticLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutStatic* temp = _impl_.staticlayout_;
  _impl_.staticlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutStatic* TLayout::_internal_mutable_staticlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.staticlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutStatic>(GetArenaForAllocation());
    _impl_.staticlayout_ = p;
  }
  return _impl_.staticlayout_;
}
inline ::HmiWidget::TLayoutStatic* TLayout::mutable_staticlayout() {
  ::HmiWidget::TLayoutStatic* _msg = _internal_mutable_staticlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.staticLayout)
  return _msg;
}
inline void TLayout::set_allocated_staticlayout(::HmiWidget::TLayoutStatic* staticlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.staticlayout_;
  }
  if (staticlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(staticlayout);
    if (message_arena != submessage_arena) {
      staticlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, staticlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.staticlayout_ = staticlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.staticLayout)
}

// optional .HmiWidget.TLayoutHorizontal horizontalLayout = 3;
inline bool TLayout::_internal_has_horizontallayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.horizontallayout_ != nullptr);
  return value;
}
inline bool TLayout::has_horizontallayout() const {
  return _internal_has_horizontallayout();
}
inline void TLayout::clear_horizontallayout() {
  if (_impl_.horizontallayout_ != nullptr) _impl_.horizontallayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::HmiWidget::TLayoutHorizontal& TLayout::_internal_horizontallayout() const {
  const ::HmiWidget::TLayoutHorizontal* p = _impl_.horizontallayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontal&>(
      ::HmiWidget::_TLayoutHorizontal_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontal& TLayout::horizontallayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.horizontalLayout)
  return _internal_horizontallayout();
}
inline void TLayout::unsafe_arena_set_allocated_horizontallayout(
    ::HmiWidget::TLayoutHorizontal* horizontallayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontallayout_);
  }
  _impl_.horizontallayout_ = horizontallayout;
  if (horizontallayout) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.horizontalLayout)
}
inline ::HmiWidget::TLayoutHorizontal* TLayout::release_horizontallayout() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TLayoutHorizontal* temp = _impl_.horizontallayout_;
  _impl_.horizontallayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontal* TLayout::unsafe_arena_release_horizontallayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.horizontalLayout)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::HmiWidget::TLayoutHorizontal* temp = _impl_.horizontallayout_;
  _impl_.horizontallayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontal* TLayout::_internal_mutable_horizontallayout() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.horizontallayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontal>(GetArenaForAllocation());
    _impl_.horizontallayout_ = p;
  }
  return _impl_.horizontallayout_;
}
inline ::HmiWidget::TLayoutHorizontal* TLayout::mutable_horizontallayout() {
  ::HmiWidget::TLayoutHorizontal* _msg = _internal_mutable_horizontallayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.horizontalLayout)
  return _msg;
}
inline void TLayout::set_allocated_horizontallayout(::HmiWidget::TLayoutHorizontal* horizontallayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.horizontallayout_;
  }
  if (horizontallayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(horizontallayout);
    if (message_arena != submessage_arena) {
      horizontallayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontallayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.horizontallayout_ = horizontallayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.horizontalLayout)
}

// optional .HmiWidget.TLayoutVertical verticalLayout = 4;
inline bool TLayout::_internal_has_verticallayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verticallayout_ != nullptr);
  return value;
}
inline bool TLayout::has_verticallayout() const {
  return _internal_has_verticallayout();
}
inline void TLayout::clear_verticallayout() {
  if (_impl_.verticallayout_ != nullptr) _impl_.verticallayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::HmiWidget::TLayoutVertical& TLayout::_internal_verticallayout() const {
  const ::HmiWidget::TLayoutVertical* p = _impl_.verticallayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVertical&>(
      ::HmiWidget::_TLayoutVertical_default_instance_);
}
inline const ::HmiWidget::TLayoutVertical& TLayout::verticallayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.verticalLayout)
  return _internal_verticallayout();
}
inline void TLayout::unsafe_arena_set_allocated_verticallayout(
    ::HmiWidget::TLayoutVertical* verticallayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verticallayout_);
  }
  _impl_.verticallayout_ = verticallayout;
  if (verticallayout) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.verticalLayout)
}
inline ::HmiWidget::TLayoutVertical* TLayout::release_verticallayout() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TLayoutVertical* temp = _impl_.verticallayout_;
  _impl_.verticallayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVertical* TLayout::unsafe_arena_release_verticallayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.verticalLayout)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::HmiWidget::TLayoutVertical* temp = _impl_.verticallayout_;
  _impl_.verticallayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVertical* TLayout::_internal_mutable_verticallayout() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.verticallayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVertical>(GetArenaForAllocation());
    _impl_.verticallayout_ = p;
  }
  return _impl_.verticallayout_;
}
inline ::HmiWidget::TLayoutVertical* TLayout::mutable_verticallayout() {
  ::HmiWidget::TLayoutVertical* _msg = _internal_mutable_verticallayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.verticalLayout)
  return _msg;
}
inline void TLayout::set_allocated_verticallayout(::HmiWidget::TLayoutVertical* verticallayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.verticallayout_;
  }
  if (verticallayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verticallayout);
    if (message_arena != submessage_arena) {
      verticallayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verticallayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.verticallayout_ = verticallayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.verticalLayout)
}

// optional .HmiWidget.TLayoutHorizontalDynamic horizontalDynamicLayout = 5;
inline bool TLayout::_internal_has_horizontaldynamiclayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.horizontaldynamiclayout_ != nullptr);
  return value;
}
inline bool TLayout::has_horizontaldynamiclayout() const {
  return _internal_has_horizontaldynamiclayout();
}
inline void TLayout::clear_horizontaldynamiclayout() {
  if (_impl_.horizontaldynamiclayout_ != nullptr) _impl_.horizontaldynamiclayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::HmiWidget::TLayoutHorizontalDynamic& TLayout::_internal_horizontaldynamiclayout() const {
  const ::HmiWidget::TLayoutHorizontalDynamic* p = _impl_.horizontaldynamiclayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontalDynamic&>(
      ::HmiWidget::_TLayoutHorizontalDynamic_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontalDynamic& TLayout::horizontaldynamiclayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.horizontalDynamicLayout)
  return _internal_horizontaldynamiclayout();
}
inline void TLayout::unsafe_arena_set_allocated_horizontaldynamiclayout(
    ::HmiWidget::TLayoutHorizontalDynamic* horizontaldynamiclayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontaldynamiclayout_);
  }
  _impl_.horizontaldynamiclayout_ = horizontaldynamiclayout;
  if (horizontaldynamiclayout) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.horizontalDynamicLayout)
}
inline ::HmiWidget::TLayoutHorizontalDynamic* TLayout::release_horizontaldynamiclayout() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TLayoutHorizontalDynamic* temp = _impl_.horizontaldynamiclayout_;
  _impl_.horizontaldynamiclayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalDynamic* TLayout::unsafe_arena_release_horizontaldynamiclayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.horizontalDynamicLayout)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::HmiWidget::TLayoutHorizontalDynamic* temp = _impl_.horizontaldynamiclayout_;
  _impl_.horizontaldynamiclayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalDynamic* TLayout::_internal_mutable_horizontaldynamiclayout() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.horizontaldynamiclayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontalDynamic>(GetArenaForAllocation());
    _impl_.horizontaldynamiclayout_ = p;
  }
  return _impl_.horizontaldynamiclayout_;
}
inline ::HmiWidget::TLayoutHorizontalDynamic* TLayout::mutable_horizontaldynamiclayout() {
  ::HmiWidget::TLayoutHorizontalDynamic* _msg = _internal_mutable_horizontaldynamiclayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.horizontalDynamicLayout)
  return _msg;
}
inline void TLayout::set_allocated_horizontaldynamiclayout(::HmiWidget::TLayoutHorizontalDynamic* horizontaldynamiclayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.horizontaldynamiclayout_;
  }
  if (horizontaldynamiclayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(horizontaldynamiclayout);
    if (message_arena != submessage_arena) {
      horizontaldynamiclayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontaldynamiclayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.horizontaldynamiclayout_ = horizontaldynamiclayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.horizontalDynamicLayout)
}

// optional .HmiWidget.TLayoutVerticalDynamic verticalDynamicLayout = 6;
inline bool TLayout::_internal_has_verticaldynamiclayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verticaldynamiclayout_ != nullptr);
  return value;
}
inline bool TLayout::has_verticaldynamiclayout() const {
  return _internal_has_verticaldynamiclayout();
}
inline void TLayout::clear_verticaldynamiclayout() {
  if (_impl_.verticaldynamiclayout_ != nullptr) _impl_.verticaldynamiclayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline const ::HmiWidget::TLayoutVerticalDynamic& TLayout::_internal_verticaldynamiclayout() const {
  const ::HmiWidget::TLayoutVerticalDynamic* p = _impl_.verticaldynamiclayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalDynamic&>(
      ::HmiWidget::_TLayoutVerticalDynamic_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalDynamic& TLayout::verticaldynamiclayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.verticalDynamicLayout)
  return _internal_verticaldynamiclayout();
}
inline void TLayout::unsafe_arena_set_allocated_verticaldynamiclayout(
    ::HmiWidget::TLayoutVerticalDynamic* verticaldynamiclayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verticaldynamiclayout_);
  }
  _impl_.verticaldynamiclayout_ = verticaldynamiclayout;
  if (verticaldynamiclayout) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.verticalDynamicLayout)
}
inline ::HmiWidget::TLayoutVerticalDynamic* TLayout::release_verticaldynamiclayout() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TLayoutVerticalDynamic* temp = _impl_.verticaldynamiclayout_;
  _impl_.verticaldynamiclayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalDynamic* TLayout::unsafe_arena_release_verticaldynamiclayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.verticalDynamicLayout)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::HmiWidget::TLayoutVerticalDynamic* temp = _impl_.verticaldynamiclayout_;
  _impl_.verticaldynamiclayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalDynamic* TLayout::_internal_mutable_verticaldynamiclayout() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.verticaldynamiclayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalDynamic>(GetArenaForAllocation());
    _impl_.verticaldynamiclayout_ = p;
  }
  return _impl_.verticaldynamiclayout_;
}
inline ::HmiWidget::TLayoutVerticalDynamic* TLayout::mutable_verticaldynamiclayout() {
  ::HmiWidget::TLayoutVerticalDynamic* _msg = _internal_mutable_verticaldynamiclayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.verticalDynamicLayout)
  return _msg;
}
inline void TLayout::set_allocated_verticaldynamiclayout(::HmiWidget::TLayoutVerticalDynamic* verticaldynamiclayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.verticaldynamiclayout_;
  }
  if (verticaldynamiclayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verticaldynamiclayout);
    if (message_arena != submessage_arena) {
      verticaldynamiclayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verticaldynamiclayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.verticaldynamiclayout_ = verticaldynamiclayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.verticalDynamicLayout)
}

// optional .HmiWidget.TLayoutSceneGraph sceneGraphLayout = 7;
inline bool TLayout::_internal_has_scenegraphlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scenegraphlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_scenegraphlayout() const {
  return _internal_has_scenegraphlayout();
}
inline void TLayout::clear_scenegraphlayout() {
  if (_impl_.scenegraphlayout_ != nullptr) _impl_.scenegraphlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline const ::HmiWidget::TLayoutSceneGraph& TLayout::_internal_scenegraphlayout() const {
  const ::HmiWidget::TLayoutSceneGraph* p = _impl_.scenegraphlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutSceneGraph&>(
      ::HmiWidget::_TLayoutSceneGraph_default_instance_);
}
inline const ::HmiWidget::TLayoutSceneGraph& TLayout::scenegraphlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.sceneGraphLayout)
  return _internal_scenegraphlayout();
}
inline void TLayout::unsafe_arena_set_allocated_scenegraphlayout(
    ::HmiWidget::TLayoutSceneGraph* scenegraphlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scenegraphlayout_);
  }
  _impl_.scenegraphlayout_ = scenegraphlayout;
  if (scenegraphlayout) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.sceneGraphLayout)
}
inline ::HmiWidget::TLayoutSceneGraph* TLayout::release_scenegraphlayout() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TLayoutSceneGraph* temp = _impl_.scenegraphlayout_;
  _impl_.scenegraphlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutSceneGraph* TLayout::unsafe_arena_release_scenegraphlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.sceneGraphLayout)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::HmiWidget::TLayoutSceneGraph* temp = _impl_.scenegraphlayout_;
  _impl_.scenegraphlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutSceneGraph* TLayout::_internal_mutable_scenegraphlayout() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.scenegraphlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutSceneGraph>(GetArenaForAllocation());
    _impl_.scenegraphlayout_ = p;
  }
  return _impl_.scenegraphlayout_;
}
inline ::HmiWidget::TLayoutSceneGraph* TLayout::mutable_scenegraphlayout() {
  ::HmiWidget::TLayoutSceneGraph* _msg = _internal_mutable_scenegraphlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.sceneGraphLayout)
  return _msg;
}
inline void TLayout::set_allocated_scenegraphlayout(::HmiWidget::TLayoutSceneGraph* scenegraphlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scenegraphlayout_;
  }
  if (scenegraphlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scenegraphlayout);
    if (message_arena != submessage_arena) {
      scenegraphlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenegraphlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.scenegraphlayout_ = scenegraphlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.sceneGraphLayout)
}

// optional .HmiWidget.TLayoutSceneGraphProject sceneGraphProjectLayout = 14;
inline bool TLayout::_internal_has_scenegraphprojectlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00002000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scenegraphprojectlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_scenegraphprojectlayout() const {
  return _internal_has_scenegraphprojectlayout();
}
inline void TLayout::clear_scenegraphprojectlayout() {
  if (_impl_.scenegraphprojectlayout_ != nullptr) _impl_.scenegraphprojectlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
inline const ::HmiWidget::TLayoutSceneGraphProject& TLayout::_internal_scenegraphprojectlayout() const {
  const ::HmiWidget::TLayoutSceneGraphProject* p = _impl_.scenegraphprojectlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutSceneGraphProject&>(
      ::HmiWidget::_TLayoutSceneGraphProject_default_instance_);
}
inline const ::HmiWidget::TLayoutSceneGraphProject& TLayout::scenegraphprojectlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.sceneGraphProjectLayout)
  return _internal_scenegraphprojectlayout();
}
inline void TLayout::unsafe_arena_set_allocated_scenegraphprojectlayout(
    ::HmiWidget::TLayoutSceneGraphProject* scenegraphprojectlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scenegraphprojectlayout_);
  }
  _impl_.scenegraphprojectlayout_ = scenegraphprojectlayout;
  if (scenegraphprojectlayout) {
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.sceneGraphProjectLayout)
}
inline ::HmiWidget::TLayoutSceneGraphProject* TLayout::release_scenegraphprojectlayout() {
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::HmiWidget::TLayoutSceneGraphProject* temp = _impl_.scenegraphprojectlayout_;
  _impl_.scenegraphprojectlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutSceneGraphProject* TLayout::unsafe_arena_release_scenegraphprojectlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.sceneGraphProjectLayout)
  _impl_._has_bits_[0] &= ~0x00002000u;
  ::HmiWidget::TLayoutSceneGraphProject* temp = _impl_.scenegraphprojectlayout_;
  _impl_.scenegraphprojectlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutSceneGraphProject* TLayout::_internal_mutable_scenegraphprojectlayout() {
  _impl_._has_bits_[0] |= 0x00002000u;
  if (_impl_.scenegraphprojectlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutSceneGraphProject>(GetArenaForAllocation());
    _impl_.scenegraphprojectlayout_ = p;
  }
  return _impl_.scenegraphprojectlayout_;
}
inline ::HmiWidget::TLayoutSceneGraphProject* TLayout::mutable_scenegraphprojectlayout() {
  ::HmiWidget::TLayoutSceneGraphProject* _msg = _internal_mutable_scenegraphprojectlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.sceneGraphProjectLayout)
  return _msg;
}
inline void TLayout::set_allocated_scenegraphprojectlayout(::HmiWidget::TLayoutSceneGraphProject* scenegraphprojectlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.scenegraphprojectlayout_;
  }
  if (scenegraphprojectlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(scenegraphprojectlayout);
    if (message_arena != submessage_arena) {
      scenegraphprojectlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scenegraphprojectlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00002000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00002000u;
  }
  _impl_.scenegraphprojectlayout_ = scenegraphprojectlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.sceneGraphProjectLayout)
}

// optional .HmiWidget.TLayoutCircle circleLayout = 8;
inline bool TLayout::_internal_has_circlelayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.circlelayout_ != nullptr);
  return value;
}
inline bool TLayout::has_circlelayout() const {
  return _internal_has_circlelayout();
}
inline void TLayout::clear_circlelayout() {
  if (_impl_.circlelayout_ != nullptr) _impl_.circlelayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline const ::HmiWidget::TLayoutCircle& TLayout::_internal_circlelayout() const {
  const ::HmiWidget::TLayoutCircle* p = _impl_.circlelayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutCircle&>(
      ::HmiWidget::_TLayoutCircle_default_instance_);
}
inline const ::HmiWidget::TLayoutCircle& TLayout::circlelayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.circleLayout)
  return _internal_circlelayout();
}
inline void TLayout::unsafe_arena_set_allocated_circlelayout(
    ::HmiWidget::TLayoutCircle* circlelayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.circlelayout_);
  }
  _impl_.circlelayout_ = circlelayout;
  if (circlelayout) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.circleLayout)
}
inline ::HmiWidget::TLayoutCircle* TLayout::release_circlelayout() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HmiWidget::TLayoutCircle* temp = _impl_.circlelayout_;
  _impl_.circlelayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutCircle* TLayout::unsafe_arena_release_circlelayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.circleLayout)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::HmiWidget::TLayoutCircle* temp = _impl_.circlelayout_;
  _impl_.circlelayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutCircle* TLayout::_internal_mutable_circlelayout() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.circlelayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutCircle>(GetArenaForAllocation());
    _impl_.circlelayout_ = p;
  }
  return _impl_.circlelayout_;
}
inline ::HmiWidget::TLayoutCircle* TLayout::mutable_circlelayout() {
  ::HmiWidget::TLayoutCircle* _msg = _internal_mutable_circlelayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.circleLayout)
  return _msg;
}
inline void TLayout::set_allocated_circlelayout(::HmiWidget::TLayoutCircle* circlelayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.circlelayout_;
  }
  if (circlelayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(circlelayout);
    if (message_arena != submessage_arena) {
      circlelayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, circlelayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.circlelayout_ = circlelayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.circleLayout)
}

// optional .HmiWidget.TLayoutHorizontalList horizontalListLayout = 9;
inline bool TLayout::_internal_has_horizontallistlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.horizontallistlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_horizontallistlayout() const {
  return _internal_has_horizontallistlayout();
}
inline void TLayout::clear_horizontallistlayout() {
  if (_impl_.horizontallistlayout_ != nullptr) _impl_.horizontallistlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline const ::HmiWidget::TLayoutHorizontalList& TLayout::_internal_horizontallistlayout() const {
  const ::HmiWidget::TLayoutHorizontalList* p = _impl_.horizontallistlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontalList&>(
      ::HmiWidget::_TLayoutHorizontalList_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontalList& TLayout::horizontallistlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.horizontalListLayout)
  return _internal_horizontallistlayout();
}
inline void TLayout::unsafe_arena_set_allocated_horizontallistlayout(
    ::HmiWidget::TLayoutHorizontalList* horizontallistlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontallistlayout_);
  }
  _impl_.horizontallistlayout_ = horizontallistlayout;
  if (horizontallistlayout) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.horizontalListLayout)
}
inline ::HmiWidget::TLayoutHorizontalList* TLayout::release_horizontallistlayout() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TLayoutHorizontalList* temp = _impl_.horizontallistlayout_;
  _impl_.horizontallistlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalList* TLayout::unsafe_arena_release_horizontallistlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.horizontalListLayout)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::HmiWidget::TLayoutHorizontalList* temp = _impl_.horizontallistlayout_;
  _impl_.horizontallistlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalList* TLayout::_internal_mutable_horizontallistlayout() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.horizontallistlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontalList>(GetArenaForAllocation());
    _impl_.horizontallistlayout_ = p;
  }
  return _impl_.horizontallistlayout_;
}
inline ::HmiWidget::TLayoutHorizontalList* TLayout::mutable_horizontallistlayout() {
  ::HmiWidget::TLayoutHorizontalList* _msg = _internal_mutable_horizontallistlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.horizontalListLayout)
  return _msg;
}
inline void TLayout::set_allocated_horizontallistlayout(::HmiWidget::TLayoutHorizontalList* horizontallistlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.horizontallistlayout_;
  }
  if (horizontallistlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(horizontallistlayout);
    if (message_arena != submessage_arena) {
      horizontallistlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontallistlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.horizontallistlayout_ = horizontallistlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.horizontalListLayout)
}

// optional .HmiWidget.TLayoutVerticalList verticalListLayout = 10;
inline bool TLayout::_internal_has_verticallistlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verticallistlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_verticallistlayout() const {
  return _internal_has_verticallistlayout();
}
inline void TLayout::clear_verticallistlayout() {
  if (_impl_.verticallistlayout_ != nullptr) _impl_.verticallistlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
inline const ::HmiWidget::TLayoutVerticalList& TLayout::_internal_verticallistlayout() const {
  const ::HmiWidget::TLayoutVerticalList* p = _impl_.verticallistlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalList&>(
      ::HmiWidget::_TLayoutVerticalList_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalList& TLayout::verticallistlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.verticalListLayout)
  return _internal_verticallistlayout();
}
inline void TLayout::unsafe_arena_set_allocated_verticallistlayout(
    ::HmiWidget::TLayoutVerticalList* verticallistlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verticallistlayout_);
  }
  _impl_.verticallistlayout_ = verticallistlayout;
  if (verticallistlayout) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.verticalListLayout)
}
inline ::HmiWidget::TLayoutVerticalList* TLayout::release_verticallistlayout() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HmiWidget::TLayoutVerticalList* temp = _impl_.verticallistlayout_;
  _impl_.verticallistlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalList* TLayout::unsafe_arena_release_verticallistlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.verticalListLayout)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::HmiWidget::TLayoutVerticalList* temp = _impl_.verticallistlayout_;
  _impl_.verticallistlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalList* TLayout::_internal_mutable_verticallistlayout() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.verticallistlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalList>(GetArenaForAllocation());
    _impl_.verticallistlayout_ = p;
  }
  return _impl_.verticallistlayout_;
}
inline ::HmiWidget::TLayoutVerticalList* TLayout::mutable_verticallistlayout() {
  ::HmiWidget::TLayoutVerticalList* _msg = _internal_mutable_verticallistlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.verticalListLayout)
  return _msg;
}
inline void TLayout::set_allocated_verticallistlayout(::HmiWidget::TLayoutVerticalList* verticallistlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.verticallistlayout_;
  }
  if (verticallistlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verticallistlayout);
    if (message_arena != submessage_arena) {
      verticallistlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verticallistlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.verticallistlayout_ = verticallistlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.verticalListLayout)
}

// optional .HmiWidget.TLayoutVerticalRoll verticalRollLayout = 11;
inline bool TLayout::_internal_has_verticalrolllayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verticalrolllayout_ != nullptr);
  return value;
}
inline bool TLayout::has_verticalrolllayout() const {
  return _internal_has_verticalrolllayout();
}
inline void TLayout::clear_verticalrolllayout() {
  if (_impl_.verticalrolllayout_ != nullptr) _impl_.verticalrolllayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
inline const ::HmiWidget::TLayoutVerticalRoll& TLayout::_internal_verticalrolllayout() const {
  const ::HmiWidget::TLayoutVerticalRoll* p = _impl_.verticalrolllayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalRoll&>(
      ::HmiWidget::_TLayoutVerticalRoll_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalRoll& TLayout::verticalrolllayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.verticalRollLayout)
  return _internal_verticalrolllayout();
}
inline void TLayout::unsafe_arena_set_allocated_verticalrolllayout(
    ::HmiWidget::TLayoutVerticalRoll* verticalrolllayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verticalrolllayout_);
  }
  _impl_.verticalrolllayout_ = verticalrolllayout;
  if (verticalrolllayout) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.verticalRollLayout)
}
inline ::HmiWidget::TLayoutVerticalRoll* TLayout::release_verticalrolllayout() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HmiWidget::TLayoutVerticalRoll* temp = _impl_.verticalrolllayout_;
  _impl_.verticalrolllayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalRoll* TLayout::unsafe_arena_release_verticalrolllayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.verticalRollLayout)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::HmiWidget::TLayoutVerticalRoll* temp = _impl_.verticalrolllayout_;
  _impl_.verticalrolllayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalRoll* TLayout::_internal_mutable_verticalrolllayout() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.verticalrolllayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalRoll>(GetArenaForAllocation());
    _impl_.verticalrolllayout_ = p;
  }
  return _impl_.verticalrolllayout_;
}
inline ::HmiWidget::TLayoutVerticalRoll* TLayout::mutable_verticalrolllayout() {
  ::HmiWidget::TLayoutVerticalRoll* _msg = _internal_mutable_verticalrolllayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.verticalRollLayout)
  return _msg;
}
inline void TLayout::set_allocated_verticalrolllayout(::HmiWidget::TLayoutVerticalRoll* verticalrolllayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.verticalrolllayout_;
  }
  if (verticalrolllayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verticalrolllayout);
    if (message_arena != submessage_arena) {
      verticalrolllayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verticalrolllayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.verticalrolllayout_ = verticalrolllayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.verticalRollLayout)
}

// optional .HmiWidget.TLayoutVerticalCurvedList verticalCurvedListLayout = 15;
inline bool TLayout::_internal_has_verticalcurvedlistlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00004000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verticalcurvedlistlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_verticalcurvedlistlayout() const {
  return _internal_has_verticalcurvedlistlayout();
}
inline void TLayout::clear_verticalcurvedlistlayout() {
  if (_impl_.verticalcurvedlistlayout_ != nullptr) _impl_.verticalcurvedlistlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
inline const ::HmiWidget::TLayoutVerticalCurvedList& TLayout::_internal_verticalcurvedlistlayout() const {
  const ::HmiWidget::TLayoutVerticalCurvedList* p = _impl_.verticalcurvedlistlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalCurvedList&>(
      ::HmiWidget::_TLayoutVerticalCurvedList_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalCurvedList& TLayout::verticalcurvedlistlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.verticalCurvedListLayout)
  return _internal_verticalcurvedlistlayout();
}
inline void TLayout::unsafe_arena_set_allocated_verticalcurvedlistlayout(
    ::HmiWidget::TLayoutVerticalCurvedList* verticalcurvedlistlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verticalcurvedlistlayout_);
  }
  _impl_.verticalcurvedlistlayout_ = verticalcurvedlistlayout;
  if (verticalcurvedlistlayout) {
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.verticalCurvedListLayout)
}
inline ::HmiWidget::TLayoutVerticalCurvedList* TLayout::release_verticalcurvedlistlayout() {
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::HmiWidget::TLayoutVerticalCurvedList* temp = _impl_.verticalcurvedlistlayout_;
  _impl_.verticalcurvedlistlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalCurvedList* TLayout::unsafe_arena_release_verticalcurvedlistlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.verticalCurvedListLayout)
  _impl_._has_bits_[0] &= ~0x00004000u;
  ::HmiWidget::TLayoutVerticalCurvedList* temp = _impl_.verticalcurvedlistlayout_;
  _impl_.verticalcurvedlistlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalCurvedList* TLayout::_internal_mutable_verticalcurvedlistlayout() {
  _impl_._has_bits_[0] |= 0x00004000u;
  if (_impl_.verticalcurvedlistlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalCurvedList>(GetArenaForAllocation());
    _impl_.verticalcurvedlistlayout_ = p;
  }
  return _impl_.verticalcurvedlistlayout_;
}
inline ::HmiWidget::TLayoutVerticalCurvedList* TLayout::mutable_verticalcurvedlistlayout() {
  ::HmiWidget::TLayoutVerticalCurvedList* _msg = _internal_mutable_verticalcurvedlistlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.verticalCurvedListLayout)
  return _msg;
}
inline void TLayout::set_allocated_verticalcurvedlistlayout(::HmiWidget::TLayoutVerticalCurvedList* verticalcurvedlistlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.verticalcurvedlistlayout_;
  }
  if (verticalcurvedlistlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(verticalcurvedlistlayout);
    if (message_arena != submessage_arena) {
      verticalcurvedlistlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verticalcurvedlistlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00004000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00004000u;
  }
  _impl_.verticalcurvedlistlayout_ = verticalcurvedlistlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.verticalCurvedListLayout)
}

// optional .HmiWidget.TLayoutGrid gridLayout = 12;
inline bool TLayout::_internal_has_gridlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000800u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.gridlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_gridlayout() const {
  return _internal_has_gridlayout();
}
inline void TLayout::clear_gridlayout() {
  if (_impl_.gridlayout_ != nullptr) _impl_.gridlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
inline const ::HmiWidget::TLayoutGrid& TLayout::_internal_gridlayout() const {
  const ::HmiWidget::TLayoutGrid* p = _impl_.gridlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutGrid&>(
      ::HmiWidget::_TLayoutGrid_default_instance_);
}
inline const ::HmiWidget::TLayoutGrid& TLayout::gridlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.gridLayout)
  return _internal_gridlayout();
}
inline void TLayout::unsafe_arena_set_allocated_gridlayout(
    ::HmiWidget::TLayoutGrid* gridlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.gridlayout_);
  }
  _impl_.gridlayout_ = gridlayout;
  if (gridlayout) {
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.gridLayout)
}
inline ::HmiWidget::TLayoutGrid* TLayout::release_gridlayout() {
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HmiWidget::TLayoutGrid* temp = _impl_.gridlayout_;
  _impl_.gridlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutGrid* TLayout::unsafe_arena_release_gridlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.gridLayout)
  _impl_._has_bits_[0] &= ~0x00000800u;
  ::HmiWidget::TLayoutGrid* temp = _impl_.gridlayout_;
  _impl_.gridlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutGrid* TLayout::_internal_mutable_gridlayout() {
  _impl_._has_bits_[0] |= 0x00000800u;
  if (_impl_.gridlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutGrid>(GetArenaForAllocation());
    _impl_.gridlayout_ = p;
  }
  return _impl_.gridlayout_;
}
inline ::HmiWidget::TLayoutGrid* TLayout::mutable_gridlayout() {
  ::HmiWidget::TLayoutGrid* _msg = _internal_mutable_gridlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.gridLayout)
  return _msg;
}
inline void TLayout::set_allocated_gridlayout(::HmiWidget::TLayoutGrid* gridlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.gridlayout_;
  }
  if (gridlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(gridlayout);
    if (message_arena != submessage_arena) {
      gridlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, gridlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000800u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000800u;
  }
  _impl_.gridlayout_ = gridlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.gridLayout)
}

// optional .HmiWidget.TLayoutMatrix matrixLayout = 13;
inline bool TLayout::_internal_has_matrixlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00001000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.matrixlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_matrixlayout() const {
  return _internal_has_matrixlayout();
}
inline void TLayout::clear_matrixlayout() {
  if (_impl_.matrixlayout_ != nullptr) _impl_.matrixlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
inline const ::HmiWidget::TLayoutMatrix& TLayout::_internal_matrixlayout() const {
  const ::HmiWidget::TLayoutMatrix* p = _impl_.matrixlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMatrix&>(
      ::HmiWidget::_TLayoutMatrix_default_instance_);
}
inline const ::HmiWidget::TLayoutMatrix& TLayout::matrixlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.matrixLayout)
  return _internal_matrixlayout();
}
inline void TLayout::unsafe_arena_set_allocated_matrixlayout(
    ::HmiWidget::TLayoutMatrix* matrixlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrixlayout_);
  }
  _impl_.matrixlayout_ = matrixlayout;
  if (matrixlayout) {
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.matrixLayout)
}
inline ::HmiWidget::TLayoutMatrix* TLayout::release_matrixlayout() {
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HmiWidget::TLayoutMatrix* temp = _impl_.matrixlayout_;
  _impl_.matrixlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMatrix* TLayout::unsafe_arena_release_matrixlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.matrixLayout)
  _impl_._has_bits_[0] &= ~0x00001000u;
  ::HmiWidget::TLayoutMatrix* temp = _impl_.matrixlayout_;
  _impl_.matrixlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMatrix* TLayout::_internal_mutable_matrixlayout() {
  _impl_._has_bits_[0] |= 0x00001000u;
  if (_impl_.matrixlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMatrix>(GetArenaForAllocation());
    _impl_.matrixlayout_ = p;
  }
  return _impl_.matrixlayout_;
}
inline ::HmiWidget::TLayoutMatrix* TLayout::mutable_matrixlayout() {
  ::HmiWidget::TLayoutMatrix* _msg = _internal_mutable_matrixlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.matrixLayout)
  return _msg;
}
inline void TLayout::set_allocated_matrixlayout(::HmiWidget::TLayoutMatrix* matrixlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.matrixlayout_;
  }
  if (matrixlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(matrixlayout);
    if (message_arena != submessage_arena) {
      matrixlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrixlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00001000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00001000u;
  }
  _impl_.matrixlayout_ = matrixlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.matrixLayout)
}

// optional .HmiWidget.TLayoutHorizontalPages horizontalPagesLayout = 16;
inline bool TLayout::_internal_has_horizontalpageslayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00008000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.horizontalpageslayout_ != nullptr);
  return value;
}
inline bool TLayout::has_horizontalpageslayout() const {
  return _internal_has_horizontalpageslayout();
}
inline void TLayout::clear_horizontalpageslayout() {
  if (_impl_.horizontalpageslayout_ != nullptr) _impl_.horizontalpageslayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
inline const ::HmiWidget::TLayoutHorizontalPages& TLayout::_internal_horizontalpageslayout() const {
  const ::HmiWidget::TLayoutHorizontalPages* p = _impl_.horizontalpageslayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontalPages&>(
      ::HmiWidget::_TLayoutHorizontalPages_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontalPages& TLayout::horizontalpageslayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.horizontalPagesLayout)
  return _internal_horizontalpageslayout();
}
inline void TLayout::unsafe_arena_set_allocated_horizontalpageslayout(
    ::HmiWidget::TLayoutHorizontalPages* horizontalpageslayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.horizontalpageslayout_);
  }
  _impl_.horizontalpageslayout_ = horizontalpageslayout;
  if (horizontalpageslayout) {
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.horizontalPagesLayout)
}
inline ::HmiWidget::TLayoutHorizontalPages* TLayout::release_horizontalpageslayout() {
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::HmiWidget::TLayoutHorizontalPages* temp = _impl_.horizontalpageslayout_;
  _impl_.horizontalpageslayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalPages* TLayout::unsafe_arena_release_horizontalpageslayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.horizontalPagesLayout)
  _impl_._has_bits_[0] &= ~0x00008000u;
  ::HmiWidget::TLayoutHorizontalPages* temp = _impl_.horizontalpageslayout_;
  _impl_.horizontalpageslayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalPages* TLayout::_internal_mutable_horizontalpageslayout() {
  _impl_._has_bits_[0] |= 0x00008000u;
  if (_impl_.horizontalpageslayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontalPages>(GetArenaForAllocation());
    _impl_.horizontalpageslayout_ = p;
  }
  return _impl_.horizontalpageslayout_;
}
inline ::HmiWidget::TLayoutHorizontalPages* TLayout::mutable_horizontalpageslayout() {
  ::HmiWidget::TLayoutHorizontalPages* _msg = _internal_mutable_horizontalpageslayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.horizontalPagesLayout)
  return _msg;
}
inline void TLayout::set_allocated_horizontalpageslayout(::HmiWidget::TLayoutHorizontalPages* horizontalpageslayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.horizontalpageslayout_;
  }
  if (horizontalpageslayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(horizontalpageslayout);
    if (message_arena != submessage_arena) {
      horizontalpageslayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, horizontalpageslayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00008000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00008000u;
  }
  _impl_.horizontalpageslayout_ = horizontalpageslayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.horizontalPagesLayout)
}

// optional .HmiWidget.TLayoutMenuBelt menuBeltLayout = 17;
inline bool TLayout::_internal_has_menubeltlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00010000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.menubeltlayout_ != nullptr);
  return value;
}
inline bool TLayout::has_menubeltlayout() const {
  return _internal_has_menubeltlayout();
}
inline void TLayout::clear_menubeltlayout() {
  if (_impl_.menubeltlayout_ != nullptr) _impl_.menubeltlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
inline const ::HmiWidget::TLayoutMenuBelt& TLayout::_internal_menubeltlayout() const {
  const ::HmiWidget::TLayoutMenuBelt* p = _impl_.menubeltlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMenuBelt&>(
      ::HmiWidget::_TLayoutMenuBelt_default_instance_);
}
inline const ::HmiWidget::TLayoutMenuBelt& TLayout::menubeltlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.menuBeltLayout)
  return _internal_menubeltlayout();
}
inline void TLayout::unsafe_arena_set_allocated_menubeltlayout(
    ::HmiWidget::TLayoutMenuBelt* menubeltlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.menubeltlayout_);
  }
  _impl_.menubeltlayout_ = menubeltlayout;
  if (menubeltlayout) {
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.menuBeltLayout)
}
inline ::HmiWidget::TLayoutMenuBelt* TLayout::release_menubeltlayout() {
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::HmiWidget::TLayoutMenuBelt* temp = _impl_.menubeltlayout_;
  _impl_.menubeltlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMenuBelt* TLayout::unsafe_arena_release_menubeltlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.menuBeltLayout)
  _impl_._has_bits_[0] &= ~0x00010000u;
  ::HmiWidget::TLayoutMenuBelt* temp = _impl_.menubeltlayout_;
  _impl_.menubeltlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMenuBelt* TLayout::_internal_mutable_menubeltlayout() {
  _impl_._has_bits_[0] |= 0x00010000u;
  if (_impl_.menubeltlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMenuBelt>(GetArenaForAllocation());
    _impl_.menubeltlayout_ = p;
  }
  return _impl_.menubeltlayout_;
}
inline ::HmiWidget::TLayoutMenuBelt* TLayout::mutable_menubeltlayout() {
  ::HmiWidget::TLayoutMenuBelt* _msg = _internal_mutable_menubeltlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.menuBeltLayout)
  return _msg;
}
inline void TLayout::set_allocated_menubeltlayout(::HmiWidget::TLayoutMenuBelt* menubeltlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.menubeltlayout_;
  }
  if (menubeltlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(menubeltlayout);
    if (message_arena != submessage_arena) {
      menubeltlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, menubeltlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00010000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00010000u;
  }
  _impl_.menubeltlayout_ = menubeltlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.menuBeltLayout)
}

// optional .HmiWidget.TLayoutMatrixDynamic matrixDynamicLayout = 18;
inline bool TLayout::_internal_has_matrixdynamiclayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00020000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.matrixdynamiclayout_ != nullptr);
  return value;
}
inline bool TLayout::has_matrixdynamiclayout() const {
  return _internal_has_matrixdynamiclayout();
}
inline void TLayout::clear_matrixdynamiclayout() {
  if (_impl_.matrixdynamiclayout_ != nullptr) _impl_.matrixdynamiclayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
inline const ::HmiWidget::TLayoutMatrixDynamic& TLayout::_internal_matrixdynamiclayout() const {
  const ::HmiWidget::TLayoutMatrixDynamic* p = _impl_.matrixdynamiclayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMatrixDynamic&>(
      ::HmiWidget::_TLayoutMatrixDynamic_default_instance_);
}
inline const ::HmiWidget::TLayoutMatrixDynamic& TLayout::matrixdynamiclayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.matrixDynamicLayout)
  return _internal_matrixdynamiclayout();
}
inline void TLayout::unsafe_arena_set_allocated_matrixdynamiclayout(
    ::HmiWidget::TLayoutMatrixDynamic* matrixdynamiclayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.matrixdynamiclayout_);
  }
  _impl_.matrixdynamiclayout_ = matrixdynamiclayout;
  if (matrixdynamiclayout) {
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.matrixDynamicLayout)
}
inline ::HmiWidget::TLayoutMatrixDynamic* TLayout::release_matrixdynamiclayout() {
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::HmiWidget::TLayoutMatrixDynamic* temp = _impl_.matrixdynamiclayout_;
  _impl_.matrixdynamiclayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMatrixDynamic* TLayout::unsafe_arena_release_matrixdynamiclayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.matrixDynamicLayout)
  _impl_._has_bits_[0] &= ~0x00020000u;
  ::HmiWidget::TLayoutMatrixDynamic* temp = _impl_.matrixdynamiclayout_;
  _impl_.matrixdynamiclayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMatrixDynamic* TLayout::_internal_mutable_matrixdynamiclayout() {
  _impl_._has_bits_[0] |= 0x00020000u;
  if (_impl_.matrixdynamiclayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMatrixDynamic>(GetArenaForAllocation());
    _impl_.matrixdynamiclayout_ = p;
  }
  return _impl_.matrixdynamiclayout_;
}
inline ::HmiWidget::TLayoutMatrixDynamic* TLayout::mutable_matrixdynamiclayout() {
  ::HmiWidget::TLayoutMatrixDynamic* _msg = _internal_mutable_matrixdynamiclayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.matrixDynamicLayout)
  return _msg;
}
inline void TLayout::set_allocated_matrixdynamiclayout(::HmiWidget::TLayoutMatrixDynamic* matrixdynamiclayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.matrixdynamiclayout_;
  }
  if (matrixdynamiclayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(matrixdynamiclayout);
    if (message_arena != submessage_arena) {
      matrixdynamiclayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, matrixdynamiclayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00020000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00020000u;
  }
  _impl_.matrixdynamiclayout_ = matrixdynamiclayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.matrixDynamicLayout)
}

// repeated .HmiWidget.TTriggeredSlot triggeredSlot = 20;
inline int TLayout::_internal_triggeredslot_size() const {
  return _impl_.triggeredslot_.size();
}
inline int TLayout::triggeredslot_size() const {
  return _internal_triggeredslot_size();
}
inline void TLayout::clear_triggeredslot() {
  _impl_.triggeredslot_.Clear();
}
inline ::HmiWidget::TTriggeredSlot* TLayout::mutable_triggeredslot(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.triggeredSlot)
  return _impl_.triggeredslot_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >*
TLayout::mutable_triggeredslot() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayout.triggeredSlot)
  return &_impl_.triggeredslot_;
}
inline const ::HmiWidget::TTriggeredSlot& TLayout::_internal_triggeredslot(int index) const {
  return _impl_.triggeredslot_.Get(index);
}
inline const ::HmiWidget::TTriggeredSlot& TLayout::triggeredslot(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.triggeredSlot)
  return _internal_triggeredslot(index);
}
inline ::HmiWidget::TTriggeredSlot* TLayout::_internal_add_triggeredslot() {
  return _impl_.triggeredslot_.Add();
}
inline ::HmiWidget::TTriggeredSlot* TLayout::add_triggeredslot() {
  ::HmiWidget::TTriggeredSlot* _add = _internal_add_triggeredslot();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayout.triggeredSlot)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TTriggeredSlot >&
TLayout::triggeredslot() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayout.triggeredSlot)
  return _impl_.triggeredslot_;
}

// optional .TDataBinding visibility = 21;
inline bool TLayout::_internal_has_visibility() const {
  bool value = (_impl_._has_bits_[0] & 0x00040000u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.visibility_ != nullptr);
  return value;
}
inline bool TLayout::has_visibility() const {
  return _internal_has_visibility();
}
inline const ::TDataBinding& TLayout::_internal_visibility() const {
  const ::TDataBinding* p = _impl_.visibility_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayout::visibility() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.visibility)
  return _internal_visibility();
}
inline void TLayout::unsafe_arena_set_allocated_visibility(
    ::TDataBinding* visibility) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visibility_);
  }
  _impl_.visibility_ = visibility;
  if (visibility) {
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayout.visibility)
}
inline ::TDataBinding* TLayout::release_visibility() {
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TDataBinding* temp = _impl_.visibility_;
  _impl_.visibility_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayout::unsafe_arena_release_visibility() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayout.visibility)
  _impl_._has_bits_[0] &= ~0x00040000u;
  ::TDataBinding* temp = _impl_.visibility_;
  _impl_.visibility_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayout::_internal_mutable_visibility() {
  _impl_._has_bits_[0] |= 0x00040000u;
  if (_impl_.visibility_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.visibility_ = p;
  }
  return _impl_.visibility_;
}
inline ::TDataBinding* TLayout::mutable_visibility() {
  ::TDataBinding* _msg = _internal_mutable_visibility();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.visibility)
  return _msg;
}
inline void TLayout::set_allocated_visibility(::TDataBinding* visibility) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.visibility_);
  }
  if (visibility) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(visibility));
    if (message_arena != submessage_arena) {
      visibility = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, visibility, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00040000u;
  } else {
    _impl_._has_bits_[0] &= ~0x00040000u;
  }
  _impl_.visibility_ = visibility;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayout.visibility)
}

// repeated .TIdentifier useImport = 22;
inline int TLayout::_internal_useimport_size() const {
  return _impl_.useimport_.size();
}
inline int TLayout::useimport_size() const {
  return _internal_useimport_size();
}
inline ::TIdentifier* TLayout::mutable_useimport(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayout.useImport)
  return _impl_.useimport_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >*
TLayout::mutable_useimport() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayout.useImport)
  return &_impl_.useimport_;
}
inline const ::TIdentifier& TLayout::_internal_useimport(int index) const {
  return _impl_.useimport_.Get(index);
}
inline const ::TIdentifier& TLayout::useimport(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayout.useImport)
  return _internal_useimport(index);
}
inline ::TIdentifier* TLayout::_internal_add_useimport() {
  return _impl_.useimport_.Add();
}
inline ::TIdentifier* TLayout::add_useimport() {
  ::TIdentifier* _add = _internal_add_useimport();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayout.useImport)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::TIdentifier >&
TLayout::useimport() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayout.useImport)
  return _impl_.useimport_;
}

// -------------------------------------------------------------------

// TLayoutStaticBase

// optional .TDataBinding leftMargin = 1;
inline bool TLayoutStaticBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutStaticBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutStaticBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutStaticBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticBase.leftMargin)
}
inline ::TDataBinding* TLayoutStaticBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutStaticBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticBase.leftMargin)
  return _msg;
}
inline void TLayoutStaticBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticBase.leftMargin)
}

// optional .TDataBinding rightMargin = 2;
inline bool TLayoutStaticBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutStaticBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutStaticBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutStaticBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticBase.rightMargin)
}
inline ::TDataBinding* TLayoutStaticBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutStaticBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticBase.rightMargin)
  return _msg;
}
inline void TLayoutStaticBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticBase.rightMargin)
}

// optional .TDataBinding topMargin = 3;
inline bool TLayoutStaticBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutStaticBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutStaticBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutStaticBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticBase.topMargin)
}
inline ::TDataBinding* TLayoutStaticBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutStaticBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticBase.topMargin)
  return _msg;
}
inline void TLayoutStaticBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticBase.topMargin)
}

// optional .TDataBinding bottomMargin = 4;
inline bool TLayoutStaticBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutStaticBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutStaticBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutStaticBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticBase.bottomMargin)
}
inline ::TDataBinding* TLayoutStaticBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutStaticBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticBase.bottomMargin)
  return _msg;
}
inline void TLayoutStaticBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticBase.bottomMargin)
}

// -------------------------------------------------------------------

// TLayoutStatic_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutStatic_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutStatic_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutStatic_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutStatic_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStatic.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutStatic_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStatic.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutStatic_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutStatic_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStatic.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutStatic_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutStatic_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStatic.TTemplate.identifier)
  return _msg;
}
inline void TLayoutStatic_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStatic.TTemplate.identifier)
}

// required .HmiWidget.TLayoutStaticElement element = 2;
inline bool TLayoutStatic_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutStatic_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutStatic_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutStaticElement& TLayoutStatic_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutStaticElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutStaticElement&>(
      ::HmiWidget::_TLayoutStaticElement_default_instance_);
}
inline const ::HmiWidget::TLayoutStaticElement& TLayoutStatic_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStatic.TTemplate.element)
  return _internal_element();
}
inline void TLayoutStatic_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutStaticElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStatic.TTemplate.element)
}
inline ::HmiWidget::TLayoutStaticElement* TLayoutStatic_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutStaticElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutStaticElement* TLayoutStatic_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStatic.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutStaticElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutStaticElement* TLayoutStatic_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutStaticElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutStaticElement* TLayoutStatic_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutStaticElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStatic.TTemplate.element)
  return _msg;
}
inline void TLayoutStatic_TTemplate::set_allocated_element(::HmiWidget::TLayoutStaticElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStatic.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutStatic

// repeated .HmiWidget.TLayoutStaticElement element = 1;
inline int TLayoutStatic::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutStatic::element_size() const {
  return _internal_element_size();
}
inline void TLayoutStatic::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutStaticElement* TLayoutStatic::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStatic.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStaticElement >*
TLayoutStatic::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutStatic.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutStaticElement& TLayoutStatic::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutStaticElement& TLayoutStatic::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStatic.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutStaticElement* TLayoutStatic::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutStaticElement* TLayoutStatic::add_element() {
  ::HmiWidget::TLayoutStaticElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutStatic.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStaticElement >&
TLayoutStatic::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutStatic.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutStatic.TTemplate elementTemplate = 2;
inline int TLayoutStatic::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutStatic::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutStatic::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutStatic_TTemplate* TLayoutStatic::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStatic.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStatic_TTemplate >*
TLayoutStatic::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutStatic.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutStatic_TTemplate& TLayoutStatic::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutStatic_TTemplate& TLayoutStatic::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStatic.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutStatic_TTemplate* TLayoutStatic::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutStatic_TTemplate* TLayoutStatic::add_elementtemplate() {
  ::HmiWidget::TLayoutStatic_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutStatic.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutStatic_TTemplate >&
TLayoutStatic::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutStatic.elementTemplate)
  return _impl_.elementtemplate_;
}

// optional .HmiWidget.TLayoutStaticBase base = 3;
inline bool TLayoutStatic::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutStatic::has_base() const {
  return _internal_has_base();
}
inline void TLayoutStatic::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutStaticBase& TLayoutStatic::_internal_base() const {
  const ::HmiWidget::TLayoutStaticBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutStaticBase&>(
      ::HmiWidget::_TLayoutStaticBase_default_instance_);
}
inline const ::HmiWidget::TLayoutStaticBase& TLayoutStatic::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStatic.base)
  return _internal_base();
}
inline void TLayoutStatic::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutStaticBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStatic.base)
}
inline ::HmiWidget::TLayoutStaticBase* TLayoutStatic::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutStaticBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutStaticBase* TLayoutStatic::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStatic.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutStaticBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutStaticBase* TLayoutStatic::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutStaticBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutStaticBase* TLayoutStatic::mutable_base() {
  ::HmiWidget::TLayoutStaticBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStatic.base)
  return _msg;
}
inline void TLayoutStatic::set_allocated_base(::HmiWidget::TLayoutStaticBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStatic.base)
}

// -------------------------------------------------------------------

// TLayoutStaticElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutStaticElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutStaticElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutStaticElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutStaticElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutStaticElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticElement.childIdentifier)
}
inline ::TIdentifier* TLayoutStaticElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutStaticElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutStaticElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutStaticElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticElement.childIdentifier)
  return _msg;
}
inline void TLayoutStaticElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutStaticElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutStaticElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutStaticElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutStaticElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutStaticElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutStaticElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutStaticElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutStaticElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutStaticElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutStaticElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticElement.nestedLayout)
  return _msg;
}
inline void TLayoutStaticElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticElement.nestedLayout)
}

// optional .TDataBinding size = 3;
inline bool TLayoutStaticElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool TLayoutStaticElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& TLayoutStaticElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticElement.size)
  return _internal_size();
}
inline void TLayoutStaticElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticElement.size)
}
inline ::TDataBinding* TLayoutStaticElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticElement.size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* TLayoutStaticElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticElement.size)
  return _msg;
}
inline void TLayoutStaticElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticElement.size)
}

// optional .TDataBinding rotation = 4;
inline bool TLayoutStaticElement::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool TLayoutStaticElement::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::TDataBinding& TLayoutStaticElement::_internal_rotation() const {
  const ::TDataBinding* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticElement::rotation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticElement.rotation)
  return _internal_rotation();
}
inline void TLayoutStaticElement::unsafe_arena_set_allocated_rotation(
    ::TDataBinding* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticElement.rotation)
}
inline ::TDataBinding* TLayoutStaticElement::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticElement.rotation)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::TDataBinding* TLayoutStaticElement::mutable_rotation() {
  ::TDataBinding* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticElement.rotation)
  return _msg;
}
inline void TLayoutStaticElement::set_allocated_rotation(::TDataBinding* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticElement.rotation)
}

// optional .TDataBinding position = 5;
inline bool TLayoutStaticElement::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool TLayoutStaticElement::has_position() const {
  return _internal_has_position();
}
inline const ::TDataBinding& TLayoutStaticElement::_internal_position() const {
  const ::TDataBinding* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticElement::position() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticElement.position)
  return _internal_position();
}
inline void TLayoutStaticElement::unsafe_arena_set_allocated_position(
    ::TDataBinding* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticElement.position)
}
inline ::TDataBinding* TLayoutStaticElement::release_position() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticElement.position)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::TDataBinding* TLayoutStaticElement::mutable_position() {
  ::TDataBinding* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticElement.position)
  return _msg;
}
inline void TLayoutStaticElement::set_allocated_position(::TDataBinding* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticElement.position)
}

// optional .TDataBinding alignment = 6;
inline bool TLayoutStaticElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool TLayoutStaticElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& TLayoutStaticElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticElement.alignment)
  return _internal_alignment();
}
inline void TLayoutStaticElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticElement.alignment)
}
inline ::TDataBinding* TLayoutStaticElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* TLayoutStaticElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticElement.alignment)
  return _msg;
}
inline void TLayoutStaticElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticElement.alignment)
}

// optional .TDataBinding sizePolicy = 7;
inline bool TLayoutStaticElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool TLayoutStaticElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& TLayoutStaticElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutStaticElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutStaticElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void TLayoutStaticElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutStaticElement.sizePolicy)
}
inline ::TDataBinding* TLayoutStaticElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutStaticElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutStaticElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* TLayoutStaticElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutStaticElement.sizePolicy)
  return _msg;
}
inline void TLayoutStaticElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutStaticElement.sizePolicy)
}

// -------------------------------------------------------------------

// TLayoutHorizontal_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutHorizontal_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutHorizontal_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutHorizontal_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutHorizontal_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontal.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutHorizontal_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontal.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutHorizontal_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutHorizontal_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontal.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutHorizontal_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutHorizontal_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontal.TTemplate.identifier)
  return _msg;
}
inline void TLayoutHorizontal_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontal.TTemplate.identifier)
}

// required .HmiWidget.TLayoutHorizontalElement element = 2;
inline bool TLayoutHorizontal_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutHorizontal_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutHorizontal_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontal_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutHorizontalElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontalElement&>(
      ::HmiWidget::_TLayoutHorizontalElement_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontal_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontal.TTemplate.element)
  return _internal_element();
}
inline void TLayoutHorizontal_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutHorizontalElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontal.TTemplate.element)
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontal_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontal_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontal.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontal_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontalElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontal_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutHorizontalElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontal.TTemplate.element)
  return _msg;
}
inline void TLayoutHorizontal_TTemplate::set_allocated_element(::HmiWidget::TLayoutHorizontalElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontal.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutHorizontal

// required .HmiWidget.TLayoutHVBase base = 1;
inline bool TLayoutHorizontal::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutHorizontal::has_base() const {
  return _internal_has_base();
}
inline void TLayoutHorizontal::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontal::_internal_base() const {
  const ::HmiWidget::TLayoutHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVBase&>(
      ::HmiWidget::_TLayoutHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontal::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontal.base)
  return _internal_base();
}
inline void TLayoutHorizontal::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontal.base)
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontal::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontal::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontal.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontal::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontal::mutable_base() {
  ::HmiWidget::TLayoutHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontal.base)
  return _msg;
}
inline void TLayoutHorizontal::set_allocated_base(::HmiWidget::TLayoutHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontal.base)
}

// repeated .HmiWidget.TLayoutHorizontalElement element = 2;
inline int TLayoutHorizontal::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutHorizontal::element_size() const {
  return _internal_element_size();
}
inline void TLayoutHorizontal::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontal::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontal.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >*
TLayoutHorizontal::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontal.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontal::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontal::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontal.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontal::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontal::add_element() {
  ::HmiWidget::TLayoutHorizontalElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontal.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >&
TLayoutHorizontal::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontal.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutHorizontal.TTemplate elementTemplate = 3;
inline int TLayoutHorizontal::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutHorizontal::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutHorizontal::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutHorizontal_TTemplate* TLayoutHorizontal::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontal.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontal_TTemplate >*
TLayoutHorizontal::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontal.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutHorizontal_TTemplate& TLayoutHorizontal::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontal_TTemplate& TLayoutHorizontal::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontal.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutHorizontal_TTemplate* TLayoutHorizontal::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutHorizontal_TTemplate* TLayoutHorizontal::add_elementtemplate() {
  ::HmiWidget::TLayoutHorizontal_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontal.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontal_TTemplate >&
TLayoutHorizontal::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontal.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutVertical_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutVertical_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutVertical_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutVertical_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutVertical_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVertical.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutVertical_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVertical.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutVertical_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutVertical_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVertical.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutVertical_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutVertical_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVertical.TTemplate.identifier)
  return _msg;
}
inline void TLayoutVertical_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVertical.TTemplate.identifier)
}

// required .HmiWidget.TLayoutVerticalElement element = 2;
inline bool TLayoutVertical_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutVertical_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutVertical_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutVerticalElement& TLayoutVertical_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutVerticalElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalElement&>(
      ::HmiWidget::_TLayoutVerticalElement_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalElement& TLayoutVertical_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVertical.TTemplate.element)
  return _internal_element();
}
inline void TLayoutVertical_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutVerticalElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVertical.TTemplate.element)
}
inline ::HmiWidget::TLayoutVerticalElement* TLayoutVertical_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalElement* TLayoutVertical_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVertical.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalElement* TLayoutVertical_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutVerticalElement* TLayoutVertical_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutVerticalElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVertical.TTemplate.element)
  return _msg;
}
inline void TLayoutVertical_TTemplate::set_allocated_element(::HmiWidget::TLayoutVerticalElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVertical.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutVertical

// required .HmiWidget.TLayoutHVBase base = 1;
inline bool TLayoutVertical::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVertical::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVertical::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutVertical::_internal_base() const {
  const ::HmiWidget::TLayoutHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVBase&>(
      ::HmiWidget::_TLayoutHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutVertical::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVertical.base)
  return _internal_base();
}
inline void TLayoutVertical::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVertical.base)
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVertical::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVertical::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVertical.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVertical::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVertical::mutable_base() {
  ::HmiWidget::TLayoutHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVertical.base)
  return _msg;
}
inline void TLayoutVertical::set_allocated_base(::HmiWidget::TLayoutHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVertical.base)
}

// repeated .HmiWidget.TLayoutVerticalElement element = 2;
inline int TLayoutVertical::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutVertical::element_size() const {
  return _internal_element_size();
}
inline void TLayoutVertical::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutVerticalElement* TLayoutVertical::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVertical.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalElement >*
TLayoutVertical::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVertical.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutVerticalElement& TLayoutVertical::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalElement& TLayoutVertical::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVertical.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutVerticalElement* TLayoutVertical::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutVerticalElement* TLayoutVertical::add_element() {
  ::HmiWidget::TLayoutVerticalElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVertical.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalElement >&
TLayoutVertical::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVertical.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutVertical.TTemplate elementTemplate = 3;
inline int TLayoutVertical::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutVertical::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutVertical::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutVertical_TTemplate* TLayoutVertical::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVertical.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVertical_TTemplate >*
TLayoutVertical::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVertical.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutVertical_TTemplate& TLayoutVertical::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutVertical_TTemplate& TLayoutVertical::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVertical.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutVertical_TTemplate* TLayoutVertical::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutVertical_TTemplate* TLayoutVertical::add_elementtemplate() {
  ::HmiWidget::TLayoutVertical_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVertical.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVertical_TTemplate >&
TLayoutVertical::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVertical.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutHorizontalDynamic_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutHorizontalDynamic_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalDynamic_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutHorizontalDynamic_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutHorizontalDynamic_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalDynamic.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutHorizontalDynamic_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalDynamic.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutHorizontalDynamic_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutHorizontalDynamic_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalDynamic.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutHorizontalDynamic_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutHorizontalDynamic_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalDynamic.TTemplate.identifier)
  return _msg;
}
inline void TLayoutHorizontalDynamic_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalDynamic.TTemplate.identifier)
}

// required .HmiWidget.TLayoutHorizontalDynamicElement element = 2;
inline bool TLayoutHorizontalDynamic_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalDynamic_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutHorizontalDynamic_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutHorizontalDynamicElement& TLayoutHorizontalDynamic_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutHorizontalDynamicElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontalDynamicElement&>(
      ::HmiWidget::_TLayoutHorizontalDynamicElement_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontalDynamicElement& TLayoutHorizontalDynamic_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalDynamic.TTemplate.element)
  return _internal_element();
}
inline void TLayoutHorizontalDynamic_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutHorizontalDynamicElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalDynamic.TTemplate.element)
}
inline ::HmiWidget::TLayoutHorizontalDynamicElement* TLayoutHorizontalDynamic_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalDynamicElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalDynamicElement* TLayoutHorizontalDynamic_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalDynamic.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalDynamicElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalDynamicElement* TLayoutHorizontalDynamic_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontalDynamicElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutHorizontalDynamicElement* TLayoutHorizontalDynamic_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutHorizontalDynamicElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalDynamic.TTemplate.element)
  return _msg;
}
inline void TLayoutHorizontalDynamic_TTemplate::set_allocated_element(::HmiWidget::TLayoutHorizontalDynamicElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalDynamic.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutHorizontalDynamic

// required .HmiWidget.TLayoutHVBase base = 1;
inline bool TLayoutHorizontalDynamic::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalDynamic::has_base() const {
  return _internal_has_base();
}
inline void TLayoutHorizontalDynamic::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontalDynamic::_internal_base() const {
  const ::HmiWidget::TLayoutHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVBase&>(
      ::HmiWidget::_TLayoutHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontalDynamic::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalDynamic.base)
  return _internal_base();
}
inline void TLayoutHorizontalDynamic::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalDynamic.base)
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalDynamic::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalDynamic::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalDynamic.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalDynamic::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalDynamic::mutable_base() {
  ::HmiWidget::TLayoutHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalDynamic.base)
  return _msg;
}
inline void TLayoutHorizontalDynamic::set_allocated_base(::HmiWidget::TLayoutHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalDynamic.base)
}

// repeated .HmiWidget.TLayoutHorizontalDynamicElement element = 2;
inline int TLayoutHorizontalDynamic::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutHorizontalDynamic::element_size() const {
  return _internal_element_size();
}
inline void TLayoutHorizontalDynamic::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutHorizontalDynamicElement* TLayoutHorizontalDynamic::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalDynamic.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamicElement >*
TLayoutHorizontalDynamic::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontalDynamic.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutHorizontalDynamicElement& TLayoutHorizontalDynamic::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontalDynamicElement& TLayoutHorizontalDynamic::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalDynamic.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutHorizontalDynamicElement* TLayoutHorizontalDynamic::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutHorizontalDynamicElement* TLayoutHorizontalDynamic::add_element() {
  ::HmiWidget::TLayoutHorizontalDynamicElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontalDynamic.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamicElement >&
TLayoutHorizontalDynamic::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontalDynamic.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutHorizontalDynamic.TTemplate elementTemplate = 3;
inline int TLayoutHorizontalDynamic::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutHorizontalDynamic::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutHorizontalDynamic::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* TLayoutHorizontalDynamic::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalDynamic.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamic_TTemplate >*
TLayoutHorizontalDynamic::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontalDynamic.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutHorizontalDynamic_TTemplate& TLayoutHorizontalDynamic::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontalDynamic_TTemplate& TLayoutHorizontalDynamic::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalDynamic.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* TLayoutHorizontalDynamic::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* TLayoutHorizontalDynamic::add_elementtemplate() {
  ::HmiWidget::TLayoutHorizontalDynamic_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontalDynamic.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalDynamic_TTemplate >&
TLayoutHorizontalDynamic::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontalDynamic.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutVerticalDynamic_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutVerticalDynamic_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutVerticalDynamic_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutVerticalDynamic_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutVerticalDynamic_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalDynamic.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutVerticalDynamic_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalDynamic.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutVerticalDynamic_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutVerticalDynamic_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalDynamic.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutVerticalDynamic_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutVerticalDynamic_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalDynamic.TTemplate.identifier)
  return _msg;
}
inline void TLayoutVerticalDynamic_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalDynamic.TTemplate.identifier)
}

// required .HmiWidget.TLayoutVerticalDynamicElement element = 2;
inline bool TLayoutVerticalDynamic_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutVerticalDynamic_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutVerticalDynamic_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutVerticalDynamicElement& TLayoutVerticalDynamic_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutVerticalDynamicElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalDynamicElement&>(
      ::HmiWidget::_TLayoutVerticalDynamicElement_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalDynamicElement& TLayoutVerticalDynamic_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalDynamic.TTemplate.element)
  return _internal_element();
}
inline void TLayoutVerticalDynamic_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutVerticalDynamicElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalDynamic.TTemplate.element)
}
inline ::HmiWidget::TLayoutVerticalDynamicElement* TLayoutVerticalDynamic_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalDynamicElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalDynamicElement* TLayoutVerticalDynamic_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalDynamic.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalDynamicElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalDynamicElement* TLayoutVerticalDynamic_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalDynamicElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutVerticalDynamicElement* TLayoutVerticalDynamic_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutVerticalDynamicElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalDynamic.TTemplate.element)
  return _msg;
}
inline void TLayoutVerticalDynamic_TTemplate::set_allocated_element(::HmiWidget::TLayoutVerticalDynamicElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalDynamic.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutVerticalDynamic

// required .HmiWidget.TLayoutHVBase base = 1;
inline bool TLayoutVerticalDynamic::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVerticalDynamic::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVerticalDynamic::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutVerticalDynamic::_internal_base() const {
  const ::HmiWidget::TLayoutHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVBase&>(
      ::HmiWidget::_TLayoutHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutVerticalDynamic::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalDynamic.base)
  return _internal_base();
}
inline void TLayoutVerticalDynamic::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalDynamic.base)
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalDynamic::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalDynamic::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalDynamic.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalDynamic::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalDynamic::mutable_base() {
  ::HmiWidget::TLayoutHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalDynamic.base)
  return _msg;
}
inline void TLayoutVerticalDynamic::set_allocated_base(::HmiWidget::TLayoutHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalDynamic.base)
}

// repeated .HmiWidget.TLayoutVerticalDynamicElement element = 2;
inline int TLayoutVerticalDynamic::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutVerticalDynamic::element_size() const {
  return _internal_element_size();
}
inline void TLayoutVerticalDynamic::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutVerticalDynamicElement* TLayoutVerticalDynamic::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalDynamic.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamicElement >*
TLayoutVerticalDynamic::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalDynamic.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutVerticalDynamicElement& TLayoutVerticalDynamic::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalDynamicElement& TLayoutVerticalDynamic::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalDynamic.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutVerticalDynamicElement* TLayoutVerticalDynamic::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutVerticalDynamicElement* TLayoutVerticalDynamic::add_element() {
  ::HmiWidget::TLayoutVerticalDynamicElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalDynamic.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamicElement >&
TLayoutVerticalDynamic::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalDynamic.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutVerticalDynamic.TTemplate elementTemplate = 3;
inline int TLayoutVerticalDynamic::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutVerticalDynamic::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutVerticalDynamic::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutVerticalDynamic_TTemplate* TLayoutVerticalDynamic::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalDynamic.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamic_TTemplate >*
TLayoutVerticalDynamic::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalDynamic.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutVerticalDynamic_TTemplate& TLayoutVerticalDynamic::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalDynamic_TTemplate& TLayoutVerticalDynamic::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalDynamic.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutVerticalDynamic_TTemplate* TLayoutVerticalDynamic::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutVerticalDynamic_TTemplate* TLayoutVerticalDynamic::add_elementtemplate() {
  ::HmiWidget::TLayoutVerticalDynamic_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalDynamic.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalDynamic_TTemplate >&
TLayoutVerticalDynamic::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalDynamic.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutHorizontalList_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutHorizontalList_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalList_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutHorizontalList_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutHorizontalList_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalList.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutHorizontalList_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalList.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutHorizontalList_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutHorizontalList_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalList.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutHorizontalList_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutHorizontalList_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalList.TTemplate.identifier)
  return _msg;
}
inline void TLayoutHorizontalList_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalList.TTemplate.identifier)
}

// required .HmiWidget.TLayoutHorizontalListElement element = 2;
inline bool TLayoutHorizontalList_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalList_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutHorizontalList_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutHorizontalListElement& TLayoutHorizontalList_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutHorizontalListElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontalListElement&>(
      ::HmiWidget::_TLayoutHorizontalListElement_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontalListElement& TLayoutHorizontalList_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalList.TTemplate.element)
  return _internal_element();
}
inline void TLayoutHorizontalList_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutHorizontalListElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalList.TTemplate.element)
}
inline ::HmiWidget::TLayoutHorizontalListElement* TLayoutHorizontalList_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalListElement* TLayoutHorizontalList_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalList.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalListElement* TLayoutHorizontalList_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontalListElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutHorizontalListElement* TLayoutHorizontalList_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutHorizontalListElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalList.TTemplate.element)
  return _msg;
}
inline void TLayoutHorizontalList_TTemplate::set_allocated_element(::HmiWidget::TLayoutHorizontalListElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalList.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutHorizontalList

// required .HmiWidget.TLayoutHVBase base = 1;
inline bool TLayoutHorizontalList::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalList::has_base() const {
  return _internal_has_base();
}
inline void TLayoutHorizontalList::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontalList::_internal_base() const {
  const ::HmiWidget::TLayoutHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVBase&>(
      ::HmiWidget::_TLayoutHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontalList::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalList.base)
  return _internal_base();
}
inline void TLayoutHorizontalList::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalList.base)
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalList::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalList::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalList.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalList::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalList::mutable_base() {
  ::HmiWidget::TLayoutHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalList.base)
  return _msg;
}
inline void TLayoutHorizontalList::set_allocated_base(::HmiWidget::TLayoutHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalList.base)
}

// repeated .HmiWidget.TLayoutHorizontalListElement element = 2;
inline int TLayoutHorizontalList::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutHorizontalList::element_size() const {
  return _internal_element_size();
}
inline void TLayoutHorizontalList::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutHorizontalListElement* TLayoutHorizontalList::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalList.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalListElement >*
TLayoutHorizontalList::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontalList.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutHorizontalListElement& TLayoutHorizontalList::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontalListElement& TLayoutHorizontalList::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalList.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutHorizontalListElement* TLayoutHorizontalList::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutHorizontalListElement* TLayoutHorizontalList::add_element() {
  ::HmiWidget::TLayoutHorizontalListElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontalList.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalListElement >&
TLayoutHorizontalList::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontalList.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutHorizontalList.TTemplate elementTemplate = 3;
inline int TLayoutHorizontalList::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutHorizontalList::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutHorizontalList::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutHorizontalList_TTemplate* TLayoutHorizontalList::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalList.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalList_TTemplate >*
TLayoutHorizontalList::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontalList.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutHorizontalList_TTemplate& TLayoutHorizontalList::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontalList_TTemplate& TLayoutHorizontalList::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalList.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutHorizontalList_TTemplate* TLayoutHorizontalList::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutHorizontalList_TTemplate* TLayoutHorizontalList::add_elementtemplate() {
  ::HmiWidget::TLayoutHorizontalList_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontalList.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalList_TTemplate >&
TLayoutHorizontalList::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontalList.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutVerticalList_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutVerticalList_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutVerticalList_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutVerticalList_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutVerticalList_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalList.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutVerticalList_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalList.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutVerticalList_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutVerticalList_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalList.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutVerticalList_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutVerticalList_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalList.TTemplate.identifier)
  return _msg;
}
inline void TLayoutVerticalList_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalList.TTemplate.identifier)
}

// required .HmiWidget.TLayoutVerticalListElement element = 2;
inline bool TLayoutVerticalList_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutVerticalList_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutVerticalList_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalList_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutVerticalListElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalListElement&>(
      ::HmiWidget::_TLayoutVerticalListElement_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalList_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalList.TTemplate.element)
  return _internal_element();
}
inline void TLayoutVerticalList_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutVerticalListElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalList.TTemplate.element)
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalList_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalList_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalList.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalList_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalListElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalList_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutVerticalListElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalList.TTemplate.element)
  return _msg;
}
inline void TLayoutVerticalList_TTemplate::set_allocated_element(::HmiWidget::TLayoutVerticalListElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalList.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutVerticalList

// required .HmiWidget.TLayoutHVBase base = 1;
inline bool TLayoutVerticalList::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVerticalList::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVerticalList::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutVerticalList::_internal_base() const {
  const ::HmiWidget::TLayoutHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVBase&>(
      ::HmiWidget::_TLayoutHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutVerticalList::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalList.base)
  return _internal_base();
}
inline void TLayoutVerticalList::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalList.base)
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalList::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalList::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalList.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalList::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutVerticalList::mutable_base() {
  ::HmiWidget::TLayoutHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalList.base)
  return _msg;
}
inline void TLayoutVerticalList::set_allocated_base(::HmiWidget::TLayoutHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalList.base)
}

// repeated .HmiWidget.TLayoutVerticalListElement element = 2;
inline int TLayoutVerticalList::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutVerticalList::element_size() const {
  return _internal_element_size();
}
inline void TLayoutVerticalList::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalList::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalList.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >*
TLayoutVerticalList::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalList.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalList::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalList::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalList.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalList::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalList::add_element() {
  ::HmiWidget::TLayoutVerticalListElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalList.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >&
TLayoutVerticalList::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalList.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutVerticalList.TTemplate elementTemplate = 3;
inline int TLayoutVerticalList::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutVerticalList::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutVerticalList::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutVerticalList_TTemplate* TLayoutVerticalList::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalList.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalList_TTemplate >*
TLayoutVerticalList::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalList.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutVerticalList_TTemplate& TLayoutVerticalList::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalList_TTemplate& TLayoutVerticalList::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalList.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutVerticalList_TTemplate* TLayoutVerticalList::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutVerticalList_TTemplate* TLayoutVerticalList::add_elementtemplate() {
  ::HmiWidget::TLayoutVerticalList_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalList.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalList_TTemplate >&
TLayoutVerticalList::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalList.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutVerticalCurvedList_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutVerticalCurvedList_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutVerticalCurvedList_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutVerticalCurvedList_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutVerticalCurvedList_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalCurvedList.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutVerticalCurvedList_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalCurvedList.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutVerticalCurvedList_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutVerticalCurvedList_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalCurvedList.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutVerticalCurvedList_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutVerticalCurvedList_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalCurvedList.TTemplate.identifier)
  return _msg;
}
inline void TLayoutVerticalCurvedList_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalCurvedList.TTemplate.identifier)
}

// required .HmiWidget.TLayoutVerticalListElement element = 2;
inline bool TLayoutVerticalCurvedList_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutVerticalCurvedList_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutVerticalCurvedList_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalCurvedList_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutVerticalListElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalListElement&>(
      ::HmiWidget::_TLayoutVerticalListElement_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalCurvedList_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalCurvedList.TTemplate.element)
  return _internal_element();
}
inline void TLayoutVerticalCurvedList_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutVerticalListElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalCurvedList.TTemplate.element)
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalCurvedList_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalCurvedList_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalCurvedList.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalCurvedList_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalListElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalCurvedList_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutVerticalListElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalCurvedList.TTemplate.element)
  return _msg;
}
inline void TLayoutVerticalCurvedList_TTemplate::set_allocated_element(::HmiWidget::TLayoutVerticalListElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalCurvedList.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutVerticalCurvedList

// required .HmiWidget.TLayoutCurvedHVBase base = 1;
inline bool TLayoutVerticalCurvedList::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVerticalCurvedList::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVerticalCurvedList::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutCurvedHVBase& TLayoutVerticalCurvedList::_internal_base() const {
  const ::HmiWidget::TLayoutCurvedHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutCurvedHVBase&>(
      ::HmiWidget::_TLayoutCurvedHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutCurvedHVBase& TLayoutVerticalCurvedList::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalCurvedList.base)
  return _internal_base();
}
inline void TLayoutVerticalCurvedList::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutCurvedHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalCurvedList.base)
}
inline ::HmiWidget::TLayoutCurvedHVBase* TLayoutVerticalCurvedList::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutCurvedHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutCurvedHVBase* TLayoutVerticalCurvedList::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalCurvedList.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutCurvedHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutCurvedHVBase* TLayoutVerticalCurvedList::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutCurvedHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutCurvedHVBase* TLayoutVerticalCurvedList::mutable_base() {
  ::HmiWidget::TLayoutCurvedHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalCurvedList.base)
  return _msg;
}
inline void TLayoutVerticalCurvedList::set_allocated_base(::HmiWidget::TLayoutCurvedHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalCurvedList.base)
}

// repeated .HmiWidget.TLayoutVerticalListElement element = 2;
inline int TLayoutVerticalCurvedList::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutVerticalCurvedList::element_size() const {
  return _internal_element_size();
}
inline void TLayoutVerticalCurvedList::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalCurvedList::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalCurvedList.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >*
TLayoutVerticalCurvedList::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalCurvedList.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalCurvedList::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalCurvedList::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalCurvedList.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalCurvedList::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalCurvedList::add_element() {
  ::HmiWidget::TLayoutVerticalListElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalCurvedList.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >&
TLayoutVerticalCurvedList::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalCurvedList.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutVerticalCurvedList.TTemplate elementTemplate = 3;
inline int TLayoutVerticalCurvedList::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutVerticalCurvedList::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutVerticalCurvedList::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* TLayoutVerticalCurvedList::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalCurvedList.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalCurvedList_TTemplate >*
TLayoutVerticalCurvedList::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalCurvedList.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutVerticalCurvedList_TTemplate& TLayoutVerticalCurvedList::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalCurvedList_TTemplate& TLayoutVerticalCurvedList::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalCurvedList.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* TLayoutVerticalCurvedList::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* TLayoutVerticalCurvedList::add_elementtemplate() {
  ::HmiWidget::TLayoutVerticalCurvedList_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalCurvedList.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalCurvedList_TTemplate >&
TLayoutVerticalCurvedList::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalCurvedList.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutVerticalRoll_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutVerticalRoll_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutVerticalRoll_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutVerticalRoll_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutVerticalRoll_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalRoll.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutVerticalRoll_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalRoll.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutVerticalRoll_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutVerticalRoll_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalRoll.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutVerticalRoll_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutVerticalRoll_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalRoll.TTemplate.identifier)
  return _msg;
}
inline void TLayoutVerticalRoll_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalRoll.TTemplate.identifier)
}

// required .HmiWidget.TLayoutVerticalListElement element = 2;
inline bool TLayoutVerticalRoll_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutVerticalRoll_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutVerticalRoll_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalRoll_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutVerticalListElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutVerticalListElement&>(
      ::HmiWidget::_TLayoutVerticalListElement_default_instance_);
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalRoll_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalRoll.TTemplate.element)
  return _internal_element();
}
inline void TLayoutVerticalRoll_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutVerticalListElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalRoll.TTemplate.element)
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalRoll_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalRoll_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalRoll.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutVerticalListElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalRoll_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutVerticalListElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalRoll_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutVerticalListElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalRoll.TTemplate.element)
  return _msg;
}
inline void TLayoutVerticalRoll_TTemplate::set_allocated_element(::HmiWidget::TLayoutVerticalListElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalRoll.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutVerticalRoll

// required .HmiWidget.TLayoutHVRollBase base = 1;
inline bool TLayoutVerticalRoll::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVerticalRoll::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVerticalRoll::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVRollBase& TLayoutVerticalRoll::_internal_base() const {
  const ::HmiWidget::TLayoutHVRollBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVRollBase&>(
      ::HmiWidget::_TLayoutHVRollBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVRollBase& TLayoutVerticalRoll::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalRoll.base)
  return _internal_base();
}
inline void TLayoutVerticalRoll::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVRollBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalRoll.base)
}
inline ::HmiWidget::TLayoutHVRollBase* TLayoutVerticalRoll::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVRollBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVRollBase* TLayoutVerticalRoll::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalRoll.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVRollBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVRollBase* TLayoutVerticalRoll::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVRollBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVRollBase* TLayoutVerticalRoll::mutable_base() {
  ::HmiWidget::TLayoutHVRollBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalRoll.base)
  return _msg;
}
inline void TLayoutVerticalRoll::set_allocated_base(::HmiWidget::TLayoutHVRollBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalRoll.base)
}

// repeated .HmiWidget.TLayoutVerticalListElement element = 2;
inline int TLayoutVerticalRoll::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutVerticalRoll::element_size() const {
  return _internal_element_size();
}
inline void TLayoutVerticalRoll::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalRoll::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalRoll.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >*
TLayoutVerticalRoll::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalRoll.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalRoll::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalListElement& TLayoutVerticalRoll::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalRoll.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalRoll::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutVerticalListElement* TLayoutVerticalRoll::add_element() {
  ::HmiWidget::TLayoutVerticalListElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalRoll.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalListElement >&
TLayoutVerticalRoll::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalRoll.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutVerticalRoll.TTemplate elementTemplate = 3;
inline int TLayoutVerticalRoll::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutVerticalRoll::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutVerticalRoll::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutVerticalRoll_TTemplate* TLayoutVerticalRoll::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalRoll.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalRoll_TTemplate >*
TLayoutVerticalRoll::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutVerticalRoll.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutVerticalRoll_TTemplate& TLayoutVerticalRoll::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutVerticalRoll_TTemplate& TLayoutVerticalRoll::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalRoll.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutVerticalRoll_TTemplate* TLayoutVerticalRoll::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutVerticalRoll_TTemplate* TLayoutVerticalRoll::add_elementtemplate() {
  ::HmiWidget::TLayoutVerticalRoll_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutVerticalRoll.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutVerticalRoll_TTemplate >&
TLayoutVerticalRoll::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutVerticalRoll.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutHorizontalPages_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutHorizontalPages_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalPages_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutHorizontalPages_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutHorizontalPages_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalPages.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutHorizontalPages_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalPages.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutHorizontalPages_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutHorizontalPages_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalPages.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutHorizontalPages_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutHorizontalPages_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalPages.TTemplate.identifier)
  return _msg;
}
inline void TLayoutHorizontalPages_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalPages.TTemplate.identifier)
}

// required .HmiWidget.TLayoutHorizontalElement element = 2;
inline bool TLayoutHorizontalPages_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalPages_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutHorizontalPages_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontalPages_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutHorizontalElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHorizontalElement&>(
      ::HmiWidget::_TLayoutHorizontalElement_default_instance_);
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontalPages_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalPages.TTemplate.element)
  return _internal_element();
}
inline void TLayoutHorizontalPages_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutHorizontalElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalPages.TTemplate.element)
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontalPages_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontalPages_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalPages.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutHorizontalElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontalPages_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHorizontalElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontalPages_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutHorizontalElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalPages.TTemplate.element)
  return _msg;
}
inline void TLayoutHorizontalPages_TTemplate::set_allocated_element(::HmiWidget::TLayoutHorizontalElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalPages.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutHorizontalPages

// required .HmiWidget.TLayoutHVBase base = 1;
inline bool TLayoutHorizontalPages::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalPages::has_base() const {
  return _internal_has_base();
}
inline void TLayoutHorizontalPages::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontalPages::_internal_base() const {
  const ::HmiWidget::TLayoutHVBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutHVBase&>(
      ::HmiWidget::_TLayoutHVBase_default_instance_);
}
inline const ::HmiWidget::TLayoutHVBase& TLayoutHorizontalPages::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalPages.base)
  return _internal_base();
}
inline void TLayoutHorizontalPages::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutHVBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalPages.base)
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalPages::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalPages::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalPages.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutHVBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalPages::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutHVBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutHVBase* TLayoutHorizontalPages::mutable_base() {
  ::HmiWidget::TLayoutHVBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalPages.base)
  return _msg;
}
inline void TLayoutHorizontalPages::set_allocated_base(::HmiWidget::TLayoutHVBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalPages.base)
}

// repeated .HmiWidget.TLayoutHorizontalElement element = 2;
inline int TLayoutHorizontalPages::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutHorizontalPages::element_size() const {
  return _internal_element_size();
}
inline void TLayoutHorizontalPages::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontalPages::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalPages.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >*
TLayoutHorizontalPages::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontalPages.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontalPages::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontalElement& TLayoutHorizontalPages::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalPages.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontalPages::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutHorizontalElement* TLayoutHorizontalPages::add_element() {
  ::HmiWidget::TLayoutHorizontalElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontalPages.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalElement >&
TLayoutHorizontalPages::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontalPages.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutHorizontalPages.TTemplate elementTemplate = 3;
inline int TLayoutHorizontalPages::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutHorizontalPages::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutHorizontalPages::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutHorizontalPages_TTemplate* TLayoutHorizontalPages::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalPages.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalPages_TTemplate >*
TLayoutHorizontalPages::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutHorizontalPages.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutHorizontalPages_TTemplate& TLayoutHorizontalPages::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutHorizontalPages_TTemplate& TLayoutHorizontalPages::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalPages.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutHorizontalPages_TTemplate* TLayoutHorizontalPages::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutHorizontalPages_TTemplate* TLayoutHorizontalPages::add_elementtemplate() {
  ::HmiWidget::TLayoutHorizontalPages_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutHorizontalPages.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutHorizontalPages_TTemplate >&
TLayoutHorizontalPages::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutHorizontalPages.elementTemplate)
  return _impl_.elementtemplate_;
}

// optional .TDataBinding pageSize = 4;
inline bool TLayoutHorizontalPages::_internal_has_pagesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagesize_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalPages::has_pagesize() const {
  return _internal_has_pagesize();
}
inline const ::TDataBinding& TLayoutHorizontalPages::_internal_pagesize() const {
  const ::TDataBinding* p = _impl_.pagesize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHorizontalPages::pagesize() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalPages.pageSize)
  return _internal_pagesize();
}
inline void TLayoutHorizontalPages::unsafe_arena_set_allocated_pagesize(
    ::TDataBinding* pagesize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagesize_);
  }
  _impl_.pagesize_ = pagesize;
  if (pagesize) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalPages.pageSize)
}
inline ::TDataBinding* TLayoutHorizontalPages::release_pagesize() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.pagesize_;
  _impl_.pagesize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHorizontalPages::unsafe_arena_release_pagesize() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalPages.pageSize)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.pagesize_;
  _impl_.pagesize_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHorizontalPages::_internal_mutable_pagesize() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.pagesize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.pagesize_ = p;
  }
  return _impl_.pagesize_;
}
inline ::TDataBinding* TLayoutHorizontalPages::mutable_pagesize() {
  ::TDataBinding* _msg = _internal_mutable_pagesize();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalPages.pageSize)
  return _msg;
}
inline void TLayoutHorizontalPages::set_allocated_pagesize(::TDataBinding* pagesize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagesize_);
  }
  if (pagesize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagesize));
    if (message_arena != submessage_arena) {
      pagesize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagesize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.pagesize_ = pagesize;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalPages.pageSize)
}

// optional .TDataBinding pageSpacing = 5;
inline bool TLayoutHorizontalPages::_internal_has_pagespacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagespacing_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalPages::has_pagespacing() const {
  return _internal_has_pagespacing();
}
inline const ::TDataBinding& TLayoutHorizontalPages::_internal_pagespacing() const {
  const ::TDataBinding* p = _impl_.pagespacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHorizontalPages::pagespacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalPages.pageSpacing)
  return _internal_pagespacing();
}
inline void TLayoutHorizontalPages::unsafe_arena_set_allocated_pagespacing(
    ::TDataBinding* pagespacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagespacing_);
  }
  _impl_.pagespacing_ = pagespacing;
  if (pagespacing) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalPages.pageSpacing)
}
inline ::TDataBinding* TLayoutHorizontalPages::release_pagespacing() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.pagespacing_;
  _impl_.pagespacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHorizontalPages::unsafe_arena_release_pagespacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalPages.pageSpacing)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.pagespacing_;
  _impl_.pagespacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHorizontalPages::_internal_mutable_pagespacing() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.pagespacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.pagespacing_ = p;
  }
  return _impl_.pagespacing_;
}
inline ::TDataBinding* TLayoutHorizontalPages::mutable_pagespacing() {
  ::TDataBinding* _msg = _internal_mutable_pagespacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalPages.pageSpacing)
  return _msg;
}
inline void TLayoutHorizontalPages::set_allocated_pagespacing(::TDataBinding* pagespacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagespacing_);
  }
  if (pagespacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagespacing));
    if (message_arena != submessage_arena) {
      pagespacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagespacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.pagespacing_ = pagespacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalPages.pageSpacing)
}

// -------------------------------------------------------------------

// TLayoutHVBase

// optional .TDataBinding orientation = 1;
inline bool TLayoutHVBase::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool TLayoutHVBase::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::TDataBinding& TLayoutHVBase::_internal_orientation() const {
  const ::TDataBinding* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVBase::orientation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVBase.orientation)
  return _internal_orientation();
}
inline void TLayoutHVBase::unsafe_arena_set_allocated_orientation(
    ::TDataBinding* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVBase.orientation)
}
inline ::TDataBinding* TLayoutHVBase::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVBase.orientation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::TDataBinding* TLayoutHVBase::mutable_orientation() {
  ::TDataBinding* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVBase.orientation)
  return _msg;
}
inline void TLayoutHVBase::set_allocated_orientation(::TDataBinding* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVBase.orientation)
}

// optional .TDataBinding leftMargin = 2;
inline bool TLayoutHVBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutHVBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutHVBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutHVBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVBase.leftMargin)
}
inline ::TDataBinding* TLayoutHVBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutHVBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVBase.leftMargin)
  return _msg;
}
inline void TLayoutHVBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVBase.leftMargin)
}

// optional .TDataBinding rightMargin = 3;
inline bool TLayoutHVBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutHVBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutHVBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutHVBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVBase.rightMargin)
}
inline ::TDataBinding* TLayoutHVBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutHVBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVBase.rightMargin)
  return _msg;
}
inline void TLayoutHVBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVBase.rightMargin)
}

// optional .TDataBinding topMargin = 4;
inline bool TLayoutHVBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutHVBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutHVBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutHVBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVBase.topMargin)
}
inline ::TDataBinding* TLayoutHVBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutHVBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVBase.topMargin)
  return _msg;
}
inline void TLayoutHVBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVBase.topMargin)
}

// optional .TDataBinding bottomMargin = 5;
inline bool TLayoutHVBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutHVBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutHVBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutHVBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVBase.bottomMargin)
}
inline ::TDataBinding* TLayoutHVBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutHVBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVBase.bottomMargin)
  return _msg;
}
inline void TLayoutHVBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVBase.bottomMargin)
}

// optional .TDataBinding spacing = 6;
inline bool TLayoutHVBase::_internal_has_spacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spacing_ != nullptr);
  return value;
}
inline bool TLayoutHVBase::has_spacing() const {
  return _internal_has_spacing();
}
inline const ::TDataBinding& TLayoutHVBase::_internal_spacing() const {
  const ::TDataBinding* p = _impl_.spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVBase::spacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVBase.spacing)
  return _internal_spacing();
}
inline void TLayoutHVBase::unsafe_arena_set_allocated_spacing(
    ::TDataBinding* spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  _impl_.spacing_ = spacing;
  if (spacing) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVBase.spacing)
}
inline ::TDataBinding* TLayoutHVBase::release_spacing() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::unsafe_arena_release_spacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVBase.spacing)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::_internal_mutable_spacing() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.spacing_ = p;
  }
  return _impl_.spacing_;
}
inline ::TDataBinding* TLayoutHVBase::mutable_spacing() {
  ::TDataBinding* _msg = _internal_mutable_spacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVBase.spacing)
  return _msg;
}
inline void TLayoutHVBase::set_allocated_spacing(::TDataBinding* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacing));
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVBase.spacing)
}

// optional .TDataBinding raster = 7;
inline bool TLayoutHVBase::_internal_has_raster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.raster_ != nullptr);
  return value;
}
inline bool TLayoutHVBase::has_raster() const {
  return _internal_has_raster();
}
inline const ::TDataBinding& TLayoutHVBase::_internal_raster() const {
  const ::TDataBinding* p = _impl_.raster_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVBase::raster() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVBase.raster)
  return _internal_raster();
}
inline void TLayoutHVBase::unsafe_arena_set_allocated_raster(
    ::TDataBinding* raster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raster_);
  }
  _impl_.raster_ = raster;
  if (raster) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVBase.raster)
}
inline ::TDataBinding* TLayoutHVBase::release_raster() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.raster_;
  _impl_.raster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::unsafe_arena_release_raster() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVBase.raster)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.raster_;
  _impl_.raster_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVBase::_internal_mutable_raster() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.raster_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.raster_ = p;
  }
  return _impl_.raster_;
}
inline ::TDataBinding* TLayoutHVBase::mutable_raster() {
  ::TDataBinding* _msg = _internal_mutable_raster();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVBase.raster)
  return _msg;
}
inline void TLayoutHVBase::set_allocated_raster(::TDataBinding* raster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raster_);
  }
  if (raster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raster));
    if (message_arena != submessage_arena) {
      raster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raster, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.raster_ = raster;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVBase.raster)
}

// -------------------------------------------------------------------

// TLayoutHVRollBase

// optional .TDataBinding orientation = 1;
inline bool TLayoutHVRollBase::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_orientation() const {
  const ::TDataBinding* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::orientation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.orientation)
  return _internal_orientation();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_orientation(
    ::TDataBinding* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.orientation)
}
inline ::TDataBinding* TLayoutHVRollBase::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.orientation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_orientation() {
  ::TDataBinding* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.orientation)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_orientation(::TDataBinding* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.orientation)
}

// optional .TDataBinding leftMargin = 2;
inline bool TLayoutHVRollBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.leftMargin)
}
inline ::TDataBinding* TLayoutHVRollBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.leftMargin)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.leftMargin)
}

// optional .TDataBinding rightMargin = 3;
inline bool TLayoutHVRollBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.rightMargin)
}
inline ::TDataBinding* TLayoutHVRollBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.rightMargin)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.rightMargin)
}

// optional .TDataBinding topMargin = 4;
inline bool TLayoutHVRollBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.topMargin)
}
inline ::TDataBinding* TLayoutHVRollBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.topMargin)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.topMargin)
}

// optional .TDataBinding bottomMargin = 5;
inline bool TLayoutHVRollBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.bottomMargin)
}
inline ::TDataBinding* TLayoutHVRollBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.bottomMargin)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.bottomMargin)
}

// optional .TDataBinding spacing = 6;
inline bool TLayoutHVRollBase::_internal_has_spacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spacing_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_spacing() const {
  return _internal_has_spacing();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_spacing() const {
  const ::TDataBinding* p = _impl_.spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::spacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.spacing)
  return _internal_spacing();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_spacing(
    ::TDataBinding* spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  _impl_.spacing_ = spacing;
  if (spacing) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.spacing)
}
inline ::TDataBinding* TLayoutHVRollBase::release_spacing() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_spacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.spacing)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_spacing() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.spacing_ = p;
  }
  return _impl_.spacing_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_spacing() {
  ::TDataBinding* _msg = _internal_mutable_spacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.spacing)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_spacing(::TDataBinding* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacing));
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.spacing)
}

// optional .TDataBinding raster = 7;
inline bool TLayoutHVRollBase::_internal_has_raster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.raster_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_raster() const {
  return _internal_has_raster();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_raster() const {
  const ::TDataBinding* p = _impl_.raster_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::raster() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.raster)
  return _internal_raster();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_raster(
    ::TDataBinding* raster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raster_);
  }
  _impl_.raster_ = raster;
  if (raster) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.raster)
}
inline ::TDataBinding* TLayoutHVRollBase::release_raster() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.raster_;
  _impl_.raster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_raster() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.raster)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.raster_;
  _impl_.raster_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_raster() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.raster_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.raster_ = p;
  }
  return _impl_.raster_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_raster() {
  ::TDataBinding* _msg = _internal_mutable_raster();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.raster)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_raster(::TDataBinding* raster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raster_);
  }
  if (raster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raster));
    if (message_arena != submessage_arena) {
      raster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raster, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.raster_ = raster;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.raster)
}

// optional .TDataBinding focusedChild = 8;
inline bool TLayoutHVRollBase::_internal_has_focusedchild() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.focusedchild_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_focusedchild() const {
  return _internal_has_focusedchild();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_focusedchild() const {
  const ::TDataBinding* p = _impl_.focusedchild_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::focusedchild() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.focusedChild)
  return _internal_focusedchild();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_focusedchild(
    ::TDataBinding* focusedchild) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focusedchild_);
  }
  _impl_.focusedchild_ = focusedchild;
  if (focusedchild) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.focusedChild)
}
inline ::TDataBinding* TLayoutHVRollBase::release_focusedchild() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.focusedchild_;
  _impl_.focusedchild_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_focusedchild() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.focusedChild)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.focusedchild_;
  _impl_.focusedchild_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_focusedchild() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.focusedchild_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.focusedchild_ = p;
  }
  return _impl_.focusedchild_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_focusedchild() {
  ::TDataBinding* _msg = _internal_mutable_focusedchild();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.focusedChild)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_focusedchild(::TDataBinding* focusedchild) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.focusedchild_);
  }
  if (focusedchild) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(focusedchild));
    if (message_arena != submessage_arena) {
      focusedchild = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, focusedchild, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.focusedchild_ = focusedchild;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.focusedChild)
}

// optional .TDataBinding wrapAround = 9;
inline bool TLayoutHVRollBase::_internal_has_wraparound() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.wraparound_ != nullptr);
  return value;
}
inline bool TLayoutHVRollBase::has_wraparound() const {
  return _internal_has_wraparound();
}
inline const ::TDataBinding& TLayoutHVRollBase::_internal_wraparound() const {
  const ::TDataBinding* p = _impl_.wraparound_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutHVRollBase::wraparound() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHVRollBase.wrapAround)
  return _internal_wraparound();
}
inline void TLayoutHVRollBase::unsafe_arena_set_allocated_wraparound(
    ::TDataBinding* wraparound) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wraparound_);
  }
  _impl_.wraparound_ = wraparound;
  if (wraparound) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHVRollBase.wrapAround)
}
inline ::TDataBinding* TLayoutHVRollBase::release_wraparound() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.wraparound_;
  _impl_.wraparound_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::unsafe_arena_release_wraparound() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHVRollBase.wrapAround)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.wraparound_;
  _impl_.wraparound_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutHVRollBase::_internal_mutable_wraparound() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.wraparound_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.wraparound_ = p;
  }
  return _impl_.wraparound_;
}
inline ::TDataBinding* TLayoutHVRollBase::mutable_wraparound() {
  ::TDataBinding* _msg = _internal_mutable_wraparound();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHVRollBase.wrapAround)
  return _msg;
}
inline void TLayoutHVRollBase::set_allocated_wraparound(::TDataBinding* wraparound) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.wraparound_);
  }
  if (wraparound) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(wraparound));
    if (message_arena != submessage_arena) {
      wraparound = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, wraparound, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.wraparound_ = wraparound;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHVRollBase.wrapAround)
}

// -------------------------------------------------------------------

// TLayoutCurvedHVBase

// required .TDataBinding radius = 1;
inline bool TLayoutCurvedHVBase::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.radius_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_radius() const {
  return _internal_has_radius();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_radius() const {
  const ::TDataBinding* p = _impl_.radius_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::radius() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.radius)
  return _internal_radius();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_radius(
    ::TDataBinding* radius) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  _impl_.radius_ = radius;
  if (radius) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.radius)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_radius() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_radius() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.radius)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_radius() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.radius_ = p;
  }
  return _impl_.radius_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_radius() {
  ::TDataBinding* _msg = _internal_mutable_radius();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.radius)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_radius(::TDataBinding* radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  if (radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius));
    if (message_arena != submessage_arena) {
      radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radius, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.radius_ = radius;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.radius)
}

// required .TDataBinding origin = 2;
inline bool TLayoutCurvedHVBase::_internal_has_origin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.origin_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_origin() const {
  return _internal_has_origin();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_origin() const {
  const ::TDataBinding* p = _impl_.origin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::origin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.origin)
  return _internal_origin();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_origin(
    ::TDataBinding* origin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  _impl_.origin_ = origin;
  if (origin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.origin)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_origin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_origin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.origin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.origin_;
  _impl_.origin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_origin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.origin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.origin_ = p;
  }
  return _impl_.origin_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_origin() {
  ::TDataBinding* _msg = _internal_mutable_origin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.origin)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_origin(::TDataBinding* origin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.origin_);
  }
  if (origin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(origin));
    if (message_arena != submessage_arena) {
      origin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, origin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.origin_ = origin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.origin)
}

// optional .TDataBinding orientation = 3;
inline bool TLayoutCurvedHVBase::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_orientation() const {
  const ::TDataBinding* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::orientation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.orientation)
  return _internal_orientation();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_orientation(
    ::TDataBinding* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.orientation)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.orientation)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_orientation() {
  ::TDataBinding* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.orientation)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_orientation(::TDataBinding* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.orientation)
}

// optional .TDataBinding leftMargin = 4;
inline bool TLayoutCurvedHVBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.leftMargin)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.leftMargin)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.leftMargin)
}

// optional .TDataBinding rightMargin = 5;
inline bool TLayoutCurvedHVBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.rightMargin)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.rightMargin)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.rightMargin)
}

// optional .TDataBinding topMargin = 6;
inline bool TLayoutCurvedHVBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.topMargin)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.topMargin)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.topMargin)
}

// optional .TDataBinding bottomMargin = 7;
inline bool TLayoutCurvedHVBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.bottomMargin)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.bottomMargin)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.bottomMargin)
}

// optional .TDataBinding spacing = 8;
inline bool TLayoutCurvedHVBase::_internal_has_spacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spacing_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_spacing() const {
  return _internal_has_spacing();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_spacing() const {
  const ::TDataBinding* p = _impl_.spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::spacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.spacing)
  return _internal_spacing();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_spacing(
    ::TDataBinding* spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  _impl_.spacing_ = spacing;
  if (spacing) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.spacing)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_spacing() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_spacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.spacing)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_spacing() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.spacing_ = p;
  }
  return _impl_.spacing_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_spacing() {
  ::TDataBinding* _msg = _internal_mutable_spacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.spacing)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_spacing(::TDataBinding* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacing));
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.spacing)
}

// optional .TDataBinding raster = 9;
inline bool TLayoutCurvedHVBase::_internal_has_raster() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.raster_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_raster() const {
  return _internal_has_raster();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_raster() const {
  const ::TDataBinding* p = _impl_.raster_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::raster() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.raster)
  return _internal_raster();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_raster(
    ::TDataBinding* raster) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raster_);
  }
  _impl_.raster_ = raster;
  if (raster) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.raster)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_raster() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.raster_;
  _impl_.raster_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_raster() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.raster)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.raster_;
  _impl_.raster_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_raster() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.raster_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.raster_ = p;
  }
  return _impl_.raster_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_raster() {
  ::TDataBinding* _msg = _internal_mutable_raster();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.raster)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_raster(::TDataBinding* raster) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.raster_);
  }
  if (raster) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(raster));
    if (message_arena != submessage_arena) {
      raster = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, raster, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.raster_ = raster;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.raster)
}

// optional .TDataBinding originAlignment = 10;
inline bool TLayoutCurvedHVBase::_internal_has_originalignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000200u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.originalignment_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_originalignment() const {
  return _internal_has_originalignment();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_originalignment() const {
  const ::TDataBinding* p = _impl_.originalignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::originalignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.originAlignment)
  return _internal_originalignment();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_originalignment(
    ::TDataBinding* originalignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.originalignment_);
  }
  _impl_.originalignment_ = originalignment;
  if (originalignment) {
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.originAlignment)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_originalignment() {
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TDataBinding* temp = _impl_.originalignment_;
  _impl_.originalignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_originalignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.originAlignment)
  _impl_._has_bits_[0] &= ~0x00000200u;
  ::TDataBinding* temp = _impl_.originalignment_;
  _impl_.originalignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_originalignment() {
  _impl_._has_bits_[0] |= 0x00000200u;
  if (_impl_.originalignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.originalignment_ = p;
  }
  return _impl_.originalignment_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_originalignment() {
  ::TDataBinding* _msg = _internal_mutable_originalignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.originAlignment)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_originalignment(::TDataBinding* originalignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.originalignment_);
  }
  if (originalignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(originalignment));
    if (message_arena != submessage_arena) {
      originalignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, originalignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000200u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000200u;
  }
  _impl_.originalignment_ = originalignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.originAlignment)
}

// optional .TDataBinding scrollAreaHeight = 11;
inline bool TLayoutCurvedHVBase::_internal_has_scrollareaheight() const {
  bool value = (_impl_._has_bits_[0] & 0x00000400u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.scrollareaheight_ != nullptr);
  return value;
}
inline bool TLayoutCurvedHVBase::has_scrollareaheight() const {
  return _internal_has_scrollareaheight();
}
inline const ::TDataBinding& TLayoutCurvedHVBase::_internal_scrollareaheight() const {
  const ::TDataBinding* p = _impl_.scrollareaheight_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCurvedHVBase::scrollareaheight() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCurvedHVBase.scrollAreaHeight)
  return _internal_scrollareaheight();
}
inline void TLayoutCurvedHVBase::unsafe_arena_set_allocated_scrollareaheight(
    ::TDataBinding* scrollareaheight) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scrollareaheight_);
  }
  _impl_.scrollareaheight_ = scrollareaheight;
  if (scrollareaheight) {
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCurvedHVBase.scrollAreaHeight)
}
inline ::TDataBinding* TLayoutCurvedHVBase::release_scrollareaheight() {
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TDataBinding* temp = _impl_.scrollareaheight_;
  _impl_.scrollareaheight_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::unsafe_arena_release_scrollareaheight() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCurvedHVBase.scrollAreaHeight)
  _impl_._has_bits_[0] &= ~0x00000400u;
  ::TDataBinding* temp = _impl_.scrollareaheight_;
  _impl_.scrollareaheight_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCurvedHVBase::_internal_mutable_scrollareaheight() {
  _impl_._has_bits_[0] |= 0x00000400u;
  if (_impl_.scrollareaheight_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.scrollareaheight_ = p;
  }
  return _impl_.scrollareaheight_;
}
inline ::TDataBinding* TLayoutCurvedHVBase::mutable_scrollareaheight() {
  ::TDataBinding* _msg = _internal_mutable_scrollareaheight();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCurvedHVBase.scrollAreaHeight)
  return _msg;
}
inline void TLayoutCurvedHVBase::set_allocated_scrollareaheight(::TDataBinding* scrollareaheight) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.scrollareaheight_);
  }
  if (scrollareaheight) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(scrollareaheight));
    if (message_arena != submessage_arena) {
      scrollareaheight = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, scrollareaheight, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000400u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000400u;
  }
  _impl_.scrollareaheight_ = scrollareaheight;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCurvedHVBase.scrollAreaHeight)
}

// -------------------------------------------------------------------

// TLayoutHorizontalElement

// required .HmiWidget.THVBaseElement base = 1;
inline bool TLayoutHorizontalElement::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalElement::has_base() const {
  return _internal_has_base();
}
inline void TLayoutHorizontalElement::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::THVBaseElement& TLayoutHorizontalElement::_internal_base() const {
  const ::HmiWidget::THVBaseElement* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::THVBaseElement&>(
      ::HmiWidget::_THVBaseElement_default_instance_);
}
inline const ::HmiWidget::THVBaseElement& TLayoutHorizontalElement::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalElement.base)
  return _internal_base();
}
inline void TLayoutHorizontalElement::unsafe_arena_set_allocated_base(
    ::HmiWidget::THVBaseElement* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalElement.base)
}
inline ::HmiWidget::THVBaseElement* TLayoutHorizontalElement::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::THVBaseElement* TLayoutHorizontalElement::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalElement.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::THVBaseElement* TLayoutHorizontalElement::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::THVBaseElement>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::THVBaseElement* TLayoutHorizontalElement::mutable_base() {
  ::HmiWidget::THVBaseElement* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalElement.base)
  return _msg;
}
inline void TLayoutHorizontalElement::set_allocated_base(::HmiWidget::THVBaseElement* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalElement.base)
}

// -------------------------------------------------------------------

// TLayoutVerticalElement

// required .HmiWidget.THVBaseElement base = 1;
inline bool TLayoutVerticalElement::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVerticalElement::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVerticalElement::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::THVBaseElement& TLayoutVerticalElement::_internal_base() const {
  const ::HmiWidget::THVBaseElement* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::THVBaseElement&>(
      ::HmiWidget::_THVBaseElement_default_instance_);
}
inline const ::HmiWidget::THVBaseElement& TLayoutVerticalElement::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalElement.base)
  return _internal_base();
}
inline void TLayoutVerticalElement::unsafe_arena_set_allocated_base(
    ::HmiWidget::THVBaseElement* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalElement.base)
}
inline ::HmiWidget::THVBaseElement* TLayoutVerticalElement::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::THVBaseElement* TLayoutVerticalElement::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalElement.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::THVBaseElement* TLayoutVerticalElement::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::THVBaseElement>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::THVBaseElement* TLayoutVerticalElement::mutable_base() {
  ::HmiWidget::THVBaseElement* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalElement.base)
  return _msg;
}
inline void TLayoutVerticalElement::set_allocated_base(::HmiWidget::THVBaseElement* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalElement.base)
}

// -------------------------------------------------------------------

// THVBaseElement

// optional .TIdentifier childIdentifier = 1;
inline bool THVBaseElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool THVBaseElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& THVBaseElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& THVBaseElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVBaseElement.childIdentifier)
  return _internal_childidentifier();
}
inline void THVBaseElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVBaseElement.childIdentifier)
}
inline ::TIdentifier* THVBaseElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* THVBaseElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVBaseElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* THVBaseElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* THVBaseElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVBaseElement.childIdentifier)
  return _msg;
}
inline void THVBaseElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVBaseElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool THVBaseElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool THVBaseElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void THVBaseElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& THVBaseElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& THVBaseElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVBaseElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void THVBaseElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVBaseElement.nestedLayout)
}
inline ::HmiWidget::TLayout* THVBaseElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* THVBaseElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVBaseElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* THVBaseElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* THVBaseElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVBaseElement.nestedLayout)
  return _msg;
}
inline void THVBaseElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVBaseElement.nestedLayout)
}

// optional .TDataBinding size = 3;
inline bool THVBaseElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool THVBaseElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& THVBaseElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVBaseElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVBaseElement.size)
  return _internal_size();
}
inline void THVBaseElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVBaseElement.size)
}
inline ::TDataBinding* THVBaseElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVBaseElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVBaseElement.size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVBaseElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* THVBaseElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVBaseElement.size)
  return _msg;
}
inline void THVBaseElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVBaseElement.size)
}

// optional .TDataBinding stretchFactor = 4;
inline bool THVBaseElement::_internal_has_stretchfactor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stretchfactor_ != nullptr);
  return value;
}
inline bool THVBaseElement::has_stretchfactor() const {
  return _internal_has_stretchfactor();
}
inline const ::TDataBinding& THVBaseElement::_internal_stretchfactor() const {
  const ::TDataBinding* p = _impl_.stretchfactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVBaseElement::stretchfactor() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVBaseElement.stretchFactor)
  return _internal_stretchfactor();
}
inline void THVBaseElement::unsafe_arena_set_allocated_stretchfactor(
    ::TDataBinding* stretchfactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stretchfactor_);
  }
  _impl_.stretchfactor_ = stretchfactor;
  if (stretchfactor) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVBaseElement.stretchFactor)
}
inline ::TDataBinding* THVBaseElement::release_stretchfactor() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.stretchfactor_;
  _impl_.stretchfactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVBaseElement::unsafe_arena_release_stretchfactor() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVBaseElement.stretchFactor)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.stretchfactor_;
  _impl_.stretchfactor_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVBaseElement::_internal_mutable_stretchfactor() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.stretchfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.stretchfactor_ = p;
  }
  return _impl_.stretchfactor_;
}
inline ::TDataBinding* THVBaseElement::mutable_stretchfactor() {
  ::TDataBinding* _msg = _internal_mutable_stretchfactor();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVBaseElement.stretchFactor)
  return _msg;
}
inline void THVBaseElement::set_allocated_stretchfactor(::TDataBinding* stretchfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stretchfactor_);
  }
  if (stretchfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stretchfactor));
    if (message_arena != submessage_arena) {
      stretchfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stretchfactor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.stretchfactor_ = stretchfactor;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVBaseElement.stretchFactor)
}

// optional .TDataBinding sizePolicy = 5;
inline bool THVBaseElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool THVBaseElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& THVBaseElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVBaseElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVBaseElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void THVBaseElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVBaseElement.sizePolicy)
}
inline ::TDataBinding* THVBaseElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVBaseElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVBaseElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVBaseElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* THVBaseElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVBaseElement.sizePolicy)
  return _msg;
}
inline void THVBaseElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVBaseElement.sizePolicy)
}

// optional .TDataBinding alignment = 6;
inline bool THVBaseElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool THVBaseElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& THVBaseElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVBaseElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVBaseElement.alignment)
  return _internal_alignment();
}
inline void THVBaseElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVBaseElement.alignment)
}
inline ::TDataBinding* THVBaseElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVBaseElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVBaseElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVBaseElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* THVBaseElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVBaseElement.alignment)
  return _msg;
}
inline void THVBaseElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVBaseElement.alignment)
}

// -------------------------------------------------------------------

// TLayoutHorizontalDynamicElement

// required .HmiWidget.THVDynamicBaseElement base = 1;
inline bool TLayoutHorizontalDynamicElement::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalDynamicElement::has_base() const {
  return _internal_has_base();
}
inline void TLayoutHorizontalDynamicElement::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::THVDynamicBaseElement& TLayoutHorizontalDynamicElement::_internal_base() const {
  const ::HmiWidget::THVDynamicBaseElement* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::THVDynamicBaseElement&>(
      ::HmiWidget::_THVDynamicBaseElement_default_instance_);
}
inline const ::HmiWidget::THVDynamicBaseElement& TLayoutHorizontalDynamicElement::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalDynamicElement.base)
  return _internal_base();
}
inline void TLayoutHorizontalDynamicElement::unsafe_arena_set_allocated_base(
    ::HmiWidget::THVDynamicBaseElement* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalDynamicElement.base)
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutHorizontalDynamicElement::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVDynamicBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutHorizontalDynamicElement::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalDynamicElement.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVDynamicBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutHorizontalDynamicElement::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::THVDynamicBaseElement>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutHorizontalDynamicElement::mutable_base() {
  ::HmiWidget::THVDynamicBaseElement* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalDynamicElement.base)
  return _msg;
}
inline void TLayoutHorizontalDynamicElement::set_allocated_base(::HmiWidget::THVDynamicBaseElement* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalDynamicElement.base)
}

// -------------------------------------------------------------------

// TLayoutVerticalDynamicElement

// required .HmiWidget.THVDynamicBaseElement base = 1;
inline bool TLayoutVerticalDynamicElement::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVerticalDynamicElement::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVerticalDynamicElement::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::THVDynamicBaseElement& TLayoutVerticalDynamicElement::_internal_base() const {
  const ::HmiWidget::THVDynamicBaseElement* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::THVDynamicBaseElement&>(
      ::HmiWidget::_THVDynamicBaseElement_default_instance_);
}
inline const ::HmiWidget::THVDynamicBaseElement& TLayoutVerticalDynamicElement::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalDynamicElement.base)
  return _internal_base();
}
inline void TLayoutVerticalDynamicElement::unsafe_arena_set_allocated_base(
    ::HmiWidget::THVDynamicBaseElement* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalDynamicElement.base)
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutVerticalDynamicElement::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVDynamicBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutVerticalDynamicElement::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalDynamicElement.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVDynamicBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutVerticalDynamicElement::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::THVDynamicBaseElement>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::THVDynamicBaseElement* TLayoutVerticalDynamicElement::mutable_base() {
  ::HmiWidget::THVDynamicBaseElement* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalDynamicElement.base)
  return _msg;
}
inline void TLayoutVerticalDynamicElement::set_allocated_base(::HmiWidget::THVDynamicBaseElement* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalDynamicElement.base)
}

// -------------------------------------------------------------------

// THVDynamicBaseElement

// optional .TIdentifier childIdentifier = 1;
inline bool THVDynamicBaseElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool THVDynamicBaseElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& THVDynamicBaseElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& THVDynamicBaseElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVDynamicBaseElement.childIdentifier)
  return _internal_childidentifier();
}
inline void THVDynamicBaseElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVDynamicBaseElement.childIdentifier)
}
inline ::TIdentifier* THVDynamicBaseElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* THVDynamicBaseElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVDynamicBaseElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* THVDynamicBaseElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* THVDynamicBaseElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVDynamicBaseElement.childIdentifier)
  return _msg;
}
inline void THVDynamicBaseElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVDynamicBaseElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool THVDynamicBaseElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool THVDynamicBaseElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void THVDynamicBaseElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& THVDynamicBaseElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& THVDynamicBaseElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVDynamicBaseElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void THVDynamicBaseElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVDynamicBaseElement.nestedLayout)
}
inline ::HmiWidget::TLayout* THVDynamicBaseElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* THVDynamicBaseElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVDynamicBaseElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* THVDynamicBaseElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* THVDynamicBaseElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVDynamicBaseElement.nestedLayout)
  return _msg;
}
inline void THVDynamicBaseElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVDynamicBaseElement.nestedLayout)
}

// optional .TDataBinding sizeMin = 3;
inline bool THVDynamicBaseElement::_internal_has_sizemin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizemin_ != nullptr);
  return value;
}
inline bool THVDynamicBaseElement::has_sizemin() const {
  return _internal_has_sizemin();
}
inline const ::TDataBinding& THVDynamicBaseElement::_internal_sizemin() const {
  const ::TDataBinding* p = _impl_.sizemin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVDynamicBaseElement::sizemin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVDynamicBaseElement.sizeMin)
  return _internal_sizemin();
}
inline void THVDynamicBaseElement::unsafe_arena_set_allocated_sizemin(
    ::TDataBinding* sizemin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizemin_);
  }
  _impl_.sizemin_ = sizemin;
  if (sizemin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVDynamicBaseElement.sizeMin)
}
inline ::TDataBinding* THVDynamicBaseElement::release_sizemin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.sizemin_;
  _impl_.sizemin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::unsafe_arena_release_sizemin() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVDynamicBaseElement.sizeMin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.sizemin_;
  _impl_.sizemin_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::_internal_mutable_sizemin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.sizemin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizemin_ = p;
  }
  return _impl_.sizemin_;
}
inline ::TDataBinding* THVDynamicBaseElement::mutable_sizemin() {
  ::TDataBinding* _msg = _internal_mutable_sizemin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVDynamicBaseElement.sizeMin)
  return _msg;
}
inline void THVDynamicBaseElement::set_allocated_sizemin(::TDataBinding* sizemin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizemin_);
  }
  if (sizemin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizemin));
    if (message_arena != submessage_arena) {
      sizemin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizemin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.sizemin_ = sizemin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVDynamicBaseElement.sizeMin)
}

// optional .TDataBinding sizeMax = 4;
inline bool THVDynamicBaseElement::_internal_has_sizemax() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizemax_ != nullptr);
  return value;
}
inline bool THVDynamicBaseElement::has_sizemax() const {
  return _internal_has_sizemax();
}
inline const ::TDataBinding& THVDynamicBaseElement::_internal_sizemax() const {
  const ::TDataBinding* p = _impl_.sizemax_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVDynamicBaseElement::sizemax() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVDynamicBaseElement.sizeMax)
  return _internal_sizemax();
}
inline void THVDynamicBaseElement::unsafe_arena_set_allocated_sizemax(
    ::TDataBinding* sizemax) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizemax_);
  }
  _impl_.sizemax_ = sizemax;
  if (sizemax) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVDynamicBaseElement.sizeMax)
}
inline ::TDataBinding* THVDynamicBaseElement::release_sizemax() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.sizemax_;
  _impl_.sizemax_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::unsafe_arena_release_sizemax() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVDynamicBaseElement.sizeMax)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.sizemax_;
  _impl_.sizemax_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::_internal_mutable_sizemax() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sizemax_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizemax_ = p;
  }
  return _impl_.sizemax_;
}
inline ::TDataBinding* THVDynamicBaseElement::mutable_sizemax() {
  ::TDataBinding* _msg = _internal_mutable_sizemax();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVDynamicBaseElement.sizeMax)
  return _msg;
}
inline void THVDynamicBaseElement::set_allocated_sizemax(::TDataBinding* sizemax) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizemax_);
  }
  if (sizemax) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizemax));
    if (message_arena != submessage_arena) {
      sizemax = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizemax, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sizemax_ = sizemax;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVDynamicBaseElement.sizeMax)
}

// optional .TDataBinding priority = 5;
inline bool THVDynamicBaseElement::_internal_has_priority() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.priority_ != nullptr);
  return value;
}
inline bool THVDynamicBaseElement::has_priority() const {
  return _internal_has_priority();
}
inline const ::TDataBinding& THVDynamicBaseElement::_internal_priority() const {
  const ::TDataBinding* p = _impl_.priority_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVDynamicBaseElement::priority() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVDynamicBaseElement.priority)
  return _internal_priority();
}
inline void THVDynamicBaseElement::unsafe_arena_set_allocated_priority(
    ::TDataBinding* priority) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.priority_);
  }
  _impl_.priority_ = priority;
  if (priority) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVDynamicBaseElement.priority)
}
inline ::TDataBinding* THVDynamicBaseElement::release_priority() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::unsafe_arena_release_priority() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVDynamicBaseElement.priority)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.priority_;
  _impl_.priority_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::_internal_mutable_priority() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.priority_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.priority_ = p;
  }
  return _impl_.priority_;
}
inline ::TDataBinding* THVDynamicBaseElement::mutable_priority() {
  ::TDataBinding* _msg = _internal_mutable_priority();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVDynamicBaseElement.priority)
  return _msg;
}
inline void THVDynamicBaseElement::set_allocated_priority(::TDataBinding* priority) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.priority_);
  }
  if (priority) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(priority));
    if (message_arena != submessage_arena) {
      priority = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, priority, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.priority_ = priority;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVDynamicBaseElement.priority)
}

// optional .TDataBinding sizePolicy = 6;
inline bool THVDynamicBaseElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool THVDynamicBaseElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& THVDynamicBaseElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVDynamicBaseElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVDynamicBaseElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void THVDynamicBaseElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVDynamicBaseElement.sizePolicy)
}
inline ::TDataBinding* THVDynamicBaseElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVDynamicBaseElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* THVDynamicBaseElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVDynamicBaseElement.sizePolicy)
  return _msg;
}
inline void THVDynamicBaseElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVDynamicBaseElement.sizePolicy)
}

// optional .TDataBinding alignment = 7;
inline bool THVDynamicBaseElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool THVDynamicBaseElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& THVDynamicBaseElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVDynamicBaseElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVDynamicBaseElement.alignment)
  return _internal_alignment();
}
inline void THVDynamicBaseElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVDynamicBaseElement.alignment)
}
inline ::TDataBinding* THVDynamicBaseElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVDynamicBaseElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVDynamicBaseElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* THVDynamicBaseElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVDynamicBaseElement.alignment)
  return _msg;
}
inline void THVDynamicBaseElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVDynamicBaseElement.alignment)
}

// -------------------------------------------------------------------

// TLayoutHorizontalListElement

// required .HmiWidget.THVListBaseElement base = 1;
inline bool TLayoutHorizontalListElement::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutHorizontalListElement::has_base() const {
  return _internal_has_base();
}
inline void TLayoutHorizontalListElement::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::THVListBaseElement& TLayoutHorizontalListElement::_internal_base() const {
  const ::HmiWidget::THVListBaseElement* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::THVListBaseElement&>(
      ::HmiWidget::_THVListBaseElement_default_instance_);
}
inline const ::HmiWidget::THVListBaseElement& TLayoutHorizontalListElement::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutHorizontalListElement.base)
  return _internal_base();
}
inline void TLayoutHorizontalListElement::unsafe_arena_set_allocated_base(
    ::HmiWidget::THVListBaseElement* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutHorizontalListElement.base)
}
inline ::HmiWidget::THVListBaseElement* TLayoutHorizontalListElement::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVListBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::THVListBaseElement* TLayoutHorizontalListElement::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutHorizontalListElement.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVListBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::THVListBaseElement* TLayoutHorizontalListElement::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::THVListBaseElement>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::THVListBaseElement* TLayoutHorizontalListElement::mutable_base() {
  ::HmiWidget::THVListBaseElement* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutHorizontalListElement.base)
  return _msg;
}
inline void TLayoutHorizontalListElement::set_allocated_base(::HmiWidget::THVListBaseElement* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutHorizontalListElement.base)
}

// -------------------------------------------------------------------

// TLayoutVerticalListElement

// required .HmiWidget.THVListBaseElement base = 1;
inline bool TLayoutVerticalListElement::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutVerticalListElement::has_base() const {
  return _internal_has_base();
}
inline void TLayoutVerticalListElement::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::THVListBaseElement& TLayoutVerticalListElement::_internal_base() const {
  const ::HmiWidget::THVListBaseElement* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::THVListBaseElement&>(
      ::HmiWidget::_THVListBaseElement_default_instance_);
}
inline const ::HmiWidget::THVListBaseElement& TLayoutVerticalListElement::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutVerticalListElement.base)
  return _internal_base();
}
inline void TLayoutVerticalListElement::unsafe_arena_set_allocated_base(
    ::HmiWidget::THVListBaseElement* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutVerticalListElement.base)
}
inline ::HmiWidget::THVListBaseElement* TLayoutVerticalListElement::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVListBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::THVListBaseElement* TLayoutVerticalListElement::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutVerticalListElement.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::THVListBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::THVListBaseElement* TLayoutVerticalListElement::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::THVListBaseElement>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::THVListBaseElement* TLayoutVerticalListElement::mutable_base() {
  ::HmiWidget::THVListBaseElement* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutVerticalListElement.base)
  return _msg;
}
inline void TLayoutVerticalListElement::set_allocated_base(::HmiWidget::THVListBaseElement* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutVerticalListElement.base)
}

// -------------------------------------------------------------------

// THVListBaseElement

// optional .TIdentifier childIdentifier = 1;
inline bool THVListBaseElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool THVListBaseElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& THVListBaseElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& THVListBaseElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVListBaseElement.childIdentifier)
  return _internal_childidentifier();
}
inline void THVListBaseElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVListBaseElement.childIdentifier)
}
inline ::TIdentifier* THVListBaseElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* THVListBaseElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVListBaseElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* THVListBaseElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* THVListBaseElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVListBaseElement.childIdentifier)
  return _msg;
}
inline void THVListBaseElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVListBaseElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool THVListBaseElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool THVListBaseElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void THVListBaseElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& THVListBaseElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& THVListBaseElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVListBaseElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void THVListBaseElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVListBaseElement.nestedLayout)
}
inline ::HmiWidget::TLayout* THVListBaseElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* THVListBaseElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVListBaseElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* THVListBaseElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* THVListBaseElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVListBaseElement.nestedLayout)
  return _msg;
}
inline void THVListBaseElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVListBaseElement.nestedLayout)
}

// optional .TDataBinding size = 3;
inline bool THVListBaseElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool THVListBaseElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& THVListBaseElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVListBaseElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVListBaseElement.size)
  return _internal_size();
}
inline void THVListBaseElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVListBaseElement.size)
}
inline ::TDataBinding* THVListBaseElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVListBaseElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVListBaseElement.size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVListBaseElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* THVListBaseElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVListBaseElement.size)
  return _msg;
}
inline void THVListBaseElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVListBaseElement.size)
}

// optional .TDataBinding sizeMin = 6;
inline bool THVListBaseElement::_internal_has_sizemin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizemin_ != nullptr);
  return value;
}
inline bool THVListBaseElement::has_sizemin() const {
  return _internal_has_sizemin();
}
inline const ::TDataBinding& THVListBaseElement::_internal_sizemin() const {
  const ::TDataBinding* p = _impl_.sizemin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVListBaseElement::sizemin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVListBaseElement.sizeMin)
  return _internal_sizemin();
}
inline void THVListBaseElement::unsafe_arena_set_allocated_sizemin(
    ::TDataBinding* sizemin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizemin_);
  }
  _impl_.sizemin_ = sizemin;
  if (sizemin) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVListBaseElement.sizeMin)
}
inline ::TDataBinding* THVListBaseElement::release_sizemin() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.sizemin_;
  _impl_.sizemin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVListBaseElement::unsafe_arena_release_sizemin() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVListBaseElement.sizeMin)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.sizemin_;
  _impl_.sizemin_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVListBaseElement::_internal_mutable_sizemin() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.sizemin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizemin_ = p;
  }
  return _impl_.sizemin_;
}
inline ::TDataBinding* THVListBaseElement::mutable_sizemin() {
  ::TDataBinding* _msg = _internal_mutable_sizemin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVListBaseElement.sizeMin)
  return _msg;
}
inline void THVListBaseElement::set_allocated_sizemin(::TDataBinding* sizemin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizemin_);
  }
  if (sizemin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizemin));
    if (message_arena != submessage_arena) {
      sizemin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizemin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.sizemin_ = sizemin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVListBaseElement.sizeMin)
}

// optional .TDataBinding sizePolicy = 5;
inline bool THVListBaseElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool THVListBaseElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& THVListBaseElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVListBaseElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVListBaseElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void THVListBaseElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVListBaseElement.sizePolicy)
}
inline ::TDataBinding* THVListBaseElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVListBaseElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVListBaseElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVListBaseElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* THVListBaseElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVListBaseElement.sizePolicy)
  return _msg;
}
inline void THVListBaseElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVListBaseElement.sizePolicy)
}

// optional .TDataBinding alignment = 4;
inline bool THVListBaseElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool THVListBaseElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& THVListBaseElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& THVListBaseElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.THVListBaseElement.alignment)
  return _internal_alignment();
}
inline void THVListBaseElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.THVListBaseElement.alignment)
}
inline ::TDataBinding* THVListBaseElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* THVListBaseElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.THVListBaseElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* THVListBaseElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* THVListBaseElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.THVListBaseElement.alignment)
  return _msg;
}
inline void THVListBaseElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.THVListBaseElement.alignment)
}

// -------------------------------------------------------------------

// TLayoutSceneGraph_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutSceneGraph_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraph_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutSceneGraph_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutSceneGraph_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraph.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutSceneGraph_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraph.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutSceneGraph_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutSceneGraph_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraph.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutSceneGraph_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutSceneGraph_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraph.TTemplate.identifier)
  return _msg;
}
inline void TLayoutSceneGraph_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraph.TTemplate.identifier)
}

// required .HmiWidget.TLayoutSceneGraphElement element = 2;
inline bool TLayoutSceneGraph_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraph_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutSceneGraph_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutSceneGraphElement& TLayoutSceneGraph_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutSceneGraphElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutSceneGraphElement&>(
      ::HmiWidget::_TLayoutSceneGraphElement_default_instance_);
}
inline const ::HmiWidget::TLayoutSceneGraphElement& TLayoutSceneGraph_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraph.TTemplate.element)
  return _internal_element();
}
inline void TLayoutSceneGraph_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutSceneGraphElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraph.TTemplate.element)
}
inline ::HmiWidget::TLayoutSceneGraphElement* TLayoutSceneGraph_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutSceneGraphElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutSceneGraphElement* TLayoutSceneGraph_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraph.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutSceneGraphElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutSceneGraphElement* TLayoutSceneGraph_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutSceneGraphElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutSceneGraphElement* TLayoutSceneGraph_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutSceneGraphElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraph.TTemplate.element)
  return _msg;
}
inline void TLayoutSceneGraph_TTemplate::set_allocated_element(::HmiWidget::TLayoutSceneGraphElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraph.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutSceneGraph

// repeated .HmiWidget.TLayoutSceneGraphElement element = 1;
inline int TLayoutSceneGraph::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutSceneGraph::element_size() const {
  return _internal_element_size();
}
inline void TLayoutSceneGraph::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutSceneGraphElement* TLayoutSceneGraph::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraph.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphElement >*
TLayoutSceneGraph::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutSceneGraph.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutSceneGraphElement& TLayoutSceneGraph::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutSceneGraphElement& TLayoutSceneGraph::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraph.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutSceneGraphElement* TLayoutSceneGraph::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutSceneGraphElement* TLayoutSceneGraph::add_element() {
  ::HmiWidget::TLayoutSceneGraphElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutSceneGraph.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphElement >&
TLayoutSceneGraph::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutSceneGraph.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutSceneGraph.TTemplate elementTemplate = 2;
inline int TLayoutSceneGraph::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutSceneGraph::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutSceneGraph::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutSceneGraph_TTemplate* TLayoutSceneGraph::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraph.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraph_TTemplate >*
TLayoutSceneGraph::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutSceneGraph.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutSceneGraph_TTemplate& TLayoutSceneGraph::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutSceneGraph_TTemplate& TLayoutSceneGraph::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraph.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutSceneGraph_TTemplate* TLayoutSceneGraph::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutSceneGraph_TTemplate* TLayoutSceneGraph::add_elementtemplate() {
  ::HmiWidget::TLayoutSceneGraph_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutSceneGraph.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraph_TTemplate >&
TLayoutSceneGraph::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutSceneGraph.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutSceneGraphElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutSceneGraphElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutSceneGraphElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutSceneGraphElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.childIdentifier)
}
inline ::TIdentifier* TLayoutSceneGraphElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutSceneGraphElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutSceneGraphElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutSceneGraphElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.childIdentifier)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutSceneGraphElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutSceneGraphElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutSceneGraphElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutSceneGraphElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.nestedLayout)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.nestedLayout)
}

// required .TDataBinding rootNodeName = 3;
inline bool TLayoutSceneGraphElement::_internal_has_rootnodename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rootnodename_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_rootnodename() const {
  return _internal_has_rootnodename();
}
inline const ::TDataBinding& TLayoutSceneGraphElement::_internal_rootnodename() const {
  const ::TDataBinding* p = _impl_.rootnodename_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphElement::rootnodename() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.rootNodeName)
  return _internal_rootnodename();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_rootnodename(
    ::TDataBinding* rootnodename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootnodename_);
  }
  _impl_.rootnodename_ = rootnodename;
  if (rootnodename) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.rootNodeName)
}
inline ::TDataBinding* TLayoutSceneGraphElement::release_rootnodename() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rootnodename_;
  _impl_.rootnodename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::unsafe_arena_release_rootnodename() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.rootNodeName)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rootnodename_;
  _impl_.rootnodename_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::_internal_mutable_rootnodename() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rootnodename_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rootnodename_ = p;
  }
  return _impl_.rootnodename_;
}
inline ::TDataBinding* TLayoutSceneGraphElement::mutable_rootnodename() {
  ::TDataBinding* _msg = _internal_mutable_rootnodename();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.rootNodeName)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_rootnodename(::TDataBinding* rootnodename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rootnodename_);
  }
  if (rootnodename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rootnodename));
    if (message_arena != submessage_arena) {
      rootnodename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rootnodename, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rootnodename_ = rootnodename;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.rootNodeName)
}

// optional .TDataBinding searchRoot = 4;
inline bool TLayoutSceneGraphElement::_internal_has_searchroot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.searchroot_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_searchroot() const {
  return _internal_has_searchroot();
}
inline const ::TDataBinding& TLayoutSceneGraphElement::_internal_searchroot() const {
  const ::TDataBinding* p = _impl_.searchroot_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphElement::searchroot() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.searchRoot)
  return _internal_searchroot();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_searchroot(
    ::TDataBinding* searchroot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchroot_);
  }
  _impl_.searchroot_ = searchroot;
  if (searchroot) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.searchRoot)
}
inline ::TDataBinding* TLayoutSceneGraphElement::release_searchroot() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.searchroot_;
  _impl_.searchroot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::unsafe_arena_release_searchroot() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.searchRoot)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.searchroot_;
  _impl_.searchroot_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::_internal_mutable_searchroot() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.searchroot_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.searchroot_ = p;
  }
  return _impl_.searchroot_;
}
inline ::TDataBinding* TLayoutSceneGraphElement::mutable_searchroot() {
  ::TDataBinding* _msg = _internal_mutable_searchroot();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.searchRoot)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_searchroot(::TDataBinding* searchroot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchroot_);
  }
  if (searchroot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(searchroot));
    if (message_arena != submessage_arena) {
      searchroot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchroot, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.searchroot_ = searchroot;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.searchRoot)
}

// optional .TDataBinding size = 5;
inline bool TLayoutSceneGraphElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& TLayoutSceneGraphElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.size)
  return _internal_size();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.size)
}
inline ::TDataBinding* TLayoutSceneGraphElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.size)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* TLayoutSceneGraphElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.size)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.size)
}

// optional .TDataBinding rotation = 6;
inline bool TLayoutSceneGraphElement::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::TDataBinding& TLayoutSceneGraphElement::_internal_rotation() const {
  const ::TDataBinding* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphElement::rotation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.rotation)
  return _internal_rotation();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_rotation(
    ::TDataBinding* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.rotation)
}
inline ::TDataBinding* TLayoutSceneGraphElement::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.rotation)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::TDataBinding* TLayoutSceneGraphElement::mutable_rotation() {
  ::TDataBinding* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.rotation)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_rotation(::TDataBinding* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.rotation)
}

// optional .TDataBinding position = 7;
inline bool TLayoutSceneGraphElement::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_position() const {
  return _internal_has_position();
}
inline const ::TDataBinding& TLayoutSceneGraphElement::_internal_position() const {
  const ::TDataBinding* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphElement::position() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.position)
  return _internal_position();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_position(
    ::TDataBinding* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.position)
}
inline ::TDataBinding* TLayoutSceneGraphElement::release_position() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.position)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::TDataBinding* TLayoutSceneGraphElement::mutable_position() {
  ::TDataBinding* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.position)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_position(::TDataBinding* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.position)
}

// optional .TDataBinding alignment = 8;
inline bool TLayoutSceneGraphElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& TLayoutSceneGraphElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.alignment)
  return _internal_alignment();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.alignment)
}
inline ::TDataBinding* TLayoutSceneGraphElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* TLayoutSceneGraphElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.alignment)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.alignment)
}

// optional .TDataBinding sizePolicy = 9;
inline bool TLayoutSceneGraphElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& TLayoutSceneGraphElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void TLayoutSceneGraphElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphElement.sizePolicy)
}
inline ::TDataBinding* TLayoutSceneGraphElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* TLayoutSceneGraphElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphElement.sizePolicy)
  return _msg;
}
inline void TLayoutSceneGraphElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphElement.sizePolicy)
}

// -------------------------------------------------------------------

// TLayoutSceneGraphProject

// optional .TDataBinding searchRoot = 1;
inline bool TLayoutSceneGraphProject::_internal_has_searchroot() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.searchroot_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProject::has_searchroot() const {
  return _internal_has_searchroot();
}
inline const ::TDataBinding& TLayoutSceneGraphProject::_internal_searchroot() const {
  const ::TDataBinding* p = _impl_.searchroot_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProject::searchroot() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProject.searchRoot)
  return _internal_searchroot();
}
inline void TLayoutSceneGraphProject::unsafe_arena_set_allocated_searchroot(
    ::TDataBinding* searchroot) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchroot_);
  }
  _impl_.searchroot_ = searchroot;
  if (searchroot) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProject.searchRoot)
}
inline ::TDataBinding* TLayoutSceneGraphProject::release_searchroot() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.searchroot_;
  _impl_.searchroot_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProject::unsafe_arena_release_searchroot() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProject.searchRoot)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.searchroot_;
  _impl_.searchroot_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProject::_internal_mutable_searchroot() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.searchroot_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.searchroot_ = p;
  }
  return _impl_.searchroot_;
}
inline ::TDataBinding* TLayoutSceneGraphProject::mutable_searchroot() {
  ::TDataBinding* _msg = _internal_mutable_searchroot();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProject.searchRoot)
  return _msg;
}
inline void TLayoutSceneGraphProject::set_allocated_searchroot(::TDataBinding* searchroot) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.searchroot_);
  }
  if (searchroot) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(searchroot));
    if (message_arena != submessage_arena) {
      searchroot = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, searchroot, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.searchroot_ = searchroot;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProject.searchRoot)
}

// repeated .HmiWidget.TLayoutSceneGraphProjectElement element = 2;
inline int TLayoutSceneGraphProject::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutSceneGraphProject::element_size() const {
  return _internal_element_size();
}
inline void TLayoutSceneGraphProject::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutSceneGraphProjectElement* TLayoutSceneGraphProject::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProject.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphProjectElement >*
TLayoutSceneGraphProject::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutSceneGraphProject.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutSceneGraphProjectElement& TLayoutSceneGraphProject::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutSceneGraphProjectElement& TLayoutSceneGraphProject::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProject.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutSceneGraphProjectElement* TLayoutSceneGraphProject::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutSceneGraphProjectElement* TLayoutSceneGraphProject::add_element() {
  ::HmiWidget::TLayoutSceneGraphProjectElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutSceneGraphProject.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutSceneGraphProjectElement >&
TLayoutSceneGraphProject::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutSceneGraphProject.element)
  return _impl_.element_;
}

// -------------------------------------------------------------------

// TLayoutSceneGraphProjectElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutSceneGraphProjectElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutSceneGraphProjectElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutSceneGraphProjectElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.childIdentifier)
}
inline ::TIdentifier* TLayoutSceneGraphProjectElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutSceneGraphProjectElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutSceneGraphProjectElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutSceneGraphProjectElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.childIdentifier)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutSceneGraphProjectElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutSceneGraphProjectElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutSceneGraphProjectElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutSceneGraphProjectElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphProjectElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphProjectElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphProjectElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutSceneGraphProjectElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.nestedLayout)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.nestedLayout)
}

// required .TDataBinding nodeName = 3;
inline bool TLayoutSceneGraphProjectElement::_internal_has_nodename() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nodename_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_nodename() const {
  return _internal_has_nodename();
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::_internal_nodename() const {
  const ::TDataBinding* p = _impl_.nodename_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::nodename() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.nodeName)
  return _internal_nodename();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_nodename(
    ::TDataBinding* nodename) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nodename_);
  }
  _impl_.nodename_ = nodename;
  if (nodename) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.nodeName)
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::release_nodename() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.nodename_;
  _impl_.nodename_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::unsafe_arena_release_nodename() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.nodeName)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.nodename_;
  _impl_.nodename_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::_internal_mutable_nodename() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.nodename_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.nodename_ = p;
  }
  return _impl_.nodename_;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::mutable_nodename() {
  ::TDataBinding* _msg = _internal_mutable_nodename();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.nodeName)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_nodename(::TDataBinding* nodename) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nodename_);
  }
  if (nodename) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(nodename));
    if (message_arena != submessage_arena) {
      nodename = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nodename, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.nodename_ = nodename;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.nodeName)
}

// optional .TDataBinding offset = 4;
inline bool TLayoutSceneGraphProjectElement::_internal_has_offset() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.offset_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_offset() const {
  return _internal_has_offset();
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::_internal_offset() const {
  const ::TDataBinding* p = _impl_.offset_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::offset() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.offset)
  return _internal_offset();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_offset(
    ::TDataBinding* offset) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  _impl_.offset_ = offset;
  if (offset) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.offset)
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::release_offset() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::unsafe_arena_release_offset() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.offset)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.offset_;
  _impl_.offset_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::_internal_mutable_offset() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.offset_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.offset_ = p;
  }
  return _impl_.offset_;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::mutable_offset() {
  ::TDataBinding* _msg = _internal_mutable_offset();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.offset)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_offset(::TDataBinding* offset) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.offset_);
  }
  if (offset) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(offset));
    if (message_arena != submessage_arena) {
      offset = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, offset, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.offset_ = offset;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.offset)
}

// optional .TDataBinding size = 5;
inline bool TLayoutSceneGraphProjectElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.size)
  return _internal_size();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.size)
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.size)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.size)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.size)
}

// optional .TDataBinding rotation = 6;
inline bool TLayoutSceneGraphProjectElement::_internal_has_rotation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rotation_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_rotation() const {
  return _internal_has_rotation();
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::_internal_rotation() const {
  const ::TDataBinding* p = _impl_.rotation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::rotation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.rotation)
  return _internal_rotation();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_rotation(
    ::TDataBinding* rotation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  _impl_.rotation_ = rotation;
  if (rotation) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.rotation)
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::release_rotation() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::unsafe_arena_release_rotation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.rotation)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.rotation_;
  _impl_.rotation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::_internal_mutable_rotation() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.rotation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rotation_ = p;
  }
  return _impl_.rotation_;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::mutable_rotation() {
  ::TDataBinding* _msg = _internal_mutable_rotation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.rotation)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_rotation(::TDataBinding* rotation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rotation_);
  }
  if (rotation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rotation));
    if (message_arena != submessage_arena) {
      rotation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rotation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.rotation_ = rotation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.rotation)
}

// optional .TDataBinding position = 7;
inline bool TLayoutSceneGraphProjectElement::_internal_has_position() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.position_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_position() const {
  return _internal_has_position();
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::_internal_position() const {
  const ::TDataBinding* p = _impl_.position_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::position() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.position)
  return _internal_position();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_position(
    ::TDataBinding* position) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  _impl_.position_ = position;
  if (position) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.position)
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::release_position() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.position_;
  _impl_.position_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::unsafe_arena_release_position() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.position)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.position_;
  _impl_.position_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::_internal_mutable_position() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.position_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.position_ = p;
  }
  return _impl_.position_;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::mutable_position() {
  ::TDataBinding* _msg = _internal_mutable_position();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.position)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_position(::TDataBinding* position) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.position_);
  }
  if (position) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(position));
    if (message_arena != submessage_arena) {
      position = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, position, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.position_ = position;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.position)
}

// optional .TDataBinding alignment = 8;
inline bool TLayoutSceneGraphProjectElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.alignment)
  return _internal_alignment();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.alignment)
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.alignment)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.alignment)
}

// optional .TDataBinding sizePolicy = 9;
inline bool TLayoutSceneGraphProjectElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool TLayoutSceneGraphProjectElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutSceneGraphProjectElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutSceneGraphProjectElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void TLayoutSceneGraphProjectElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.sizePolicy)
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutSceneGraphProjectElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* TLayoutSceneGraphProjectElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutSceneGraphProjectElement.sizePolicy)
  return _msg;
}
inline void TLayoutSceneGraphProjectElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutSceneGraphProjectElement.sizePolicy)
}

// -------------------------------------------------------------------

// TLayoutCircle_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutCircle_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutCircle_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutCircle_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutCircle_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircle.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutCircle_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircle.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutCircle_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutCircle_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircle.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutCircle_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutCircle_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircle.TTemplate.identifier)
  return _msg;
}
inline void TLayoutCircle_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircle.TTemplate.identifier)
}

// required .HmiWidget.TLayoutCircleElement element = 2;
inline bool TLayoutCircle_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutCircle_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutCircle_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutCircleElement& TLayoutCircle_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutCircleElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutCircleElement&>(
      ::HmiWidget::_TLayoutCircleElement_default_instance_);
}
inline const ::HmiWidget::TLayoutCircleElement& TLayoutCircle_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircle.TTemplate.element)
  return _internal_element();
}
inline void TLayoutCircle_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutCircleElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircle.TTemplate.element)
}
inline ::HmiWidget::TLayoutCircleElement* TLayoutCircle_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutCircleElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutCircleElement* TLayoutCircle_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircle.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutCircleElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutCircleElement* TLayoutCircle_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutCircleElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutCircleElement* TLayoutCircle_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutCircleElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircle.TTemplate.element)
  return _msg;
}
inline void TLayoutCircle_TTemplate::set_allocated_element(::HmiWidget::TLayoutCircleElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircle.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutCircle

// required .HmiWidget.TLayoutCircleBase base = 1;
inline bool TLayoutCircle::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutCircle::has_base() const {
  return _internal_has_base();
}
inline void TLayoutCircle::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutCircleBase& TLayoutCircle::_internal_base() const {
  const ::HmiWidget::TLayoutCircleBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutCircleBase&>(
      ::HmiWidget::_TLayoutCircleBase_default_instance_);
}
inline const ::HmiWidget::TLayoutCircleBase& TLayoutCircle::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircle.base)
  return _internal_base();
}
inline void TLayoutCircle::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutCircleBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircle.base)
}
inline ::HmiWidget::TLayoutCircleBase* TLayoutCircle::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutCircleBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutCircleBase* TLayoutCircle::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircle.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutCircleBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutCircleBase* TLayoutCircle::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutCircleBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutCircleBase* TLayoutCircle::mutable_base() {
  ::HmiWidget::TLayoutCircleBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircle.base)
  return _msg;
}
inline void TLayoutCircle::set_allocated_base(::HmiWidget::TLayoutCircleBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircle.base)
}

// repeated .HmiWidget.TLayoutCircleElement element = 2;
inline int TLayoutCircle::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutCircle::element_size() const {
  return _internal_element_size();
}
inline void TLayoutCircle::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutCircleElement* TLayoutCircle::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircle.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircleElement >*
TLayoutCircle::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutCircle.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutCircleElement& TLayoutCircle::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutCircleElement& TLayoutCircle::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircle.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutCircleElement* TLayoutCircle::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutCircleElement* TLayoutCircle::add_element() {
  ::HmiWidget::TLayoutCircleElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutCircle.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircleElement >&
TLayoutCircle::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutCircle.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutCircle.TTemplate elementTemplate = 3;
inline int TLayoutCircle::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutCircle::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutCircle::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutCircle_TTemplate* TLayoutCircle::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircle.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircle_TTemplate >*
TLayoutCircle::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutCircle.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutCircle_TTemplate& TLayoutCircle::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutCircle_TTemplate& TLayoutCircle::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircle.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutCircle_TTemplate* TLayoutCircle::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutCircle_TTemplate* TLayoutCircle::add_elementtemplate() {
  ::HmiWidget::TLayoutCircle_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutCircle.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutCircle_TTemplate >&
TLayoutCircle::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutCircle.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutCircleBase

// optional .TDataBinding orientation = 1;
inline bool TLayoutCircleBase::_internal_has_orientation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientation_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_orientation() const {
  return _internal_has_orientation();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_orientation() const {
  const ::TDataBinding* p = _impl_.orientation_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::orientation() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.orientation)
  return _internal_orientation();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_orientation(
    ::TDataBinding* orientation) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  _impl_.orientation_ = orientation;
  if (orientation) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.orientation)
}
inline ::TDataBinding* TLayoutCircleBase::release_orientation() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_orientation() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.orientation)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.orientation_;
  _impl_.orientation_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_orientation() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.orientation_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientation_ = p;
  }
  return _impl_.orientation_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_orientation() {
  ::TDataBinding* _msg = _internal_mutable_orientation();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.orientation)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_orientation(::TDataBinding* orientation) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientation_);
  }
  if (orientation) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientation));
    if (message_arena != submessage_arena) {
      orientation = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientation, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.orientation_ = orientation;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.orientation)
}

// optional .TDataBinding leftMargin = 2;
inline bool TLayoutCircleBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.leftMargin)
}
inline ::TDataBinding* TLayoutCircleBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.leftMargin)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.leftMargin)
}

// optional .TDataBinding rightMargin = 3;
inline bool TLayoutCircleBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.rightMargin)
}
inline ::TDataBinding* TLayoutCircleBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.rightMargin)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.rightMargin)
}

// optional .TDataBinding topMargin = 4;
inline bool TLayoutCircleBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.topMargin)
}
inline ::TDataBinding* TLayoutCircleBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.topMargin)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.topMargin)
}

// optional .TDataBinding bottomMargin = 5;
inline bool TLayoutCircleBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.bottomMargin)
}
inline ::TDataBinding* TLayoutCircleBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.bottomMargin)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.bottomMargin)
}

// optional .TDataBinding spacing = 6;
inline bool TLayoutCircleBase::_internal_has_spacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spacing_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_spacing() const {
  return _internal_has_spacing();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_spacing() const {
  const ::TDataBinding* p = _impl_.spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::spacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.spacing)
  return _internal_spacing();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_spacing(
    ::TDataBinding* spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  _impl_.spacing_ = spacing;
  if (spacing) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.spacing)
}
inline ::TDataBinding* TLayoutCircleBase::release_spacing() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_spacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.spacing)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_spacing() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.spacing_ = p;
  }
  return _impl_.spacing_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_spacing() {
  ::TDataBinding* _msg = _internal_mutable_spacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.spacing)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_spacing(::TDataBinding* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacing));
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.spacing)
}

// optional .TDataBinding startAngle = 7;
inline bool TLayoutCircleBase::_internal_has_startangle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.startangle_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_startangle() const {
  return _internal_has_startangle();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_startangle() const {
  const ::TDataBinding* p = _impl_.startangle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::startangle() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.startAngle)
  return _internal_startangle();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_startangle(
    ::TDataBinding* startangle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startangle_);
  }
  _impl_.startangle_ = startangle;
  if (startangle) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.startAngle)
}
inline ::TDataBinding* TLayoutCircleBase::release_startangle() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.startangle_;
  _impl_.startangle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_startangle() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.startAngle)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.startangle_;
  _impl_.startangle_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_startangle() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.startangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.startangle_ = p;
  }
  return _impl_.startangle_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_startangle() {
  ::TDataBinding* _msg = _internal_mutable_startangle();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.startAngle)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_startangle(::TDataBinding* startangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.startangle_);
  }
  if (startangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(startangle));
    if (message_arena != submessage_arena) {
      startangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, startangle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.startangle_ = startangle;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.startAngle)
}

// optional .TDataBinding endAngle = 8;
inline bool TLayoutCircleBase::_internal_has_endangle() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.endangle_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_endangle() const {
  return _internal_has_endangle();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_endangle() const {
  const ::TDataBinding* p = _impl_.endangle_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::endangle() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.endAngle)
  return _internal_endangle();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_endangle(
    ::TDataBinding* endangle) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endangle_);
  }
  _impl_.endangle_ = endangle;
  if (endangle) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.endAngle)
}
inline ::TDataBinding* TLayoutCircleBase::release_endangle() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.endangle_;
  _impl_.endangle_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_endangle() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.endAngle)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.endangle_;
  _impl_.endangle_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_endangle() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.endangle_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.endangle_ = p;
  }
  return _impl_.endangle_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_endangle() {
  ::TDataBinding* _msg = _internal_mutable_endangle();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.endAngle)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_endangle(::TDataBinding* endangle) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.endangle_);
  }
  if (endangle) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(endangle));
    if (message_arena != submessage_arena) {
      endangle = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, endangle, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.endangle_ = endangle;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.endAngle)
}

// optional .TDataBinding radius = 9;
inline bool TLayoutCircleBase::_internal_has_radius() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.radius_ != nullptr);
  return value;
}
inline bool TLayoutCircleBase::has_radius() const {
  return _internal_has_radius();
}
inline const ::TDataBinding& TLayoutCircleBase::_internal_radius() const {
  const ::TDataBinding* p = _impl_.radius_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBase::radius() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBase.radius)
  return _internal_radius();
}
inline void TLayoutCircleBase::unsafe_arena_set_allocated_radius(
    ::TDataBinding* radius) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  _impl_.radius_ = radius;
  if (radius) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBase.radius)
}
inline ::TDataBinding* TLayoutCircleBase::release_radius() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::unsafe_arena_release_radius() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBase.radius)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.radius_;
  _impl_.radius_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBase::_internal_mutable_radius() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.radius_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.radius_ = p;
  }
  return _impl_.radius_;
}
inline ::TDataBinding* TLayoutCircleBase::mutable_radius() {
  ::TDataBinding* _msg = _internal_mutable_radius();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBase.radius)
  return _msg;
}
inline void TLayoutCircleBase::set_allocated_radius(::TDataBinding* radius) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.radius_);
  }
  if (radius) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(radius));
    if (message_arena != submessage_arena) {
      radius = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, radius, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.radius_ = radius;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBase.radius)
}

// -------------------------------------------------------------------

// TLayoutCircleElement

// required .HmiWidget.TLayoutCircleBaseElement base = 1;
inline bool TLayoutCircleElement::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutCircleElement::has_base() const {
  return _internal_has_base();
}
inline void TLayoutCircleElement::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutCircleBaseElement& TLayoutCircleElement::_internal_base() const {
  const ::HmiWidget::TLayoutCircleBaseElement* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutCircleBaseElement&>(
      ::HmiWidget::_TLayoutCircleBaseElement_default_instance_);
}
inline const ::HmiWidget::TLayoutCircleBaseElement& TLayoutCircleElement::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleElement.base)
  return _internal_base();
}
inline void TLayoutCircleElement::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutCircleBaseElement* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleElement.base)
}
inline ::HmiWidget::TLayoutCircleBaseElement* TLayoutCircleElement::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutCircleBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutCircleBaseElement* TLayoutCircleElement::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleElement.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutCircleBaseElement* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutCircleBaseElement* TLayoutCircleElement::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutCircleBaseElement>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutCircleBaseElement* TLayoutCircleElement::mutable_base() {
  ::HmiWidget::TLayoutCircleBaseElement* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleElement.base)
  return _msg;
}
inline void TLayoutCircleElement::set_allocated_base(::HmiWidget::TLayoutCircleBaseElement* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleElement.base)
}

// -------------------------------------------------------------------

// TLayoutCircleBaseElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutCircleBaseElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutCircleBaseElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutCircleBaseElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutCircleBaseElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBaseElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutCircleBaseElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBaseElement.childIdentifier)
}
inline ::TIdentifier* TLayoutCircleBaseElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutCircleBaseElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBaseElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutCircleBaseElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutCircleBaseElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBaseElement.childIdentifier)
  return _msg;
}
inline void TLayoutCircleBaseElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBaseElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutCircleBaseElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutCircleBaseElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutCircleBaseElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutCircleBaseElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutCircleBaseElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBaseElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutCircleBaseElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBaseElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutCircleBaseElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutCircleBaseElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBaseElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutCircleBaseElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutCircleBaseElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBaseElement.nestedLayout)
  return _msg;
}
inline void TLayoutCircleBaseElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBaseElement.nestedLayout)
}

// optional .TDataBinding size = 3;
inline bool TLayoutCircleBaseElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool TLayoutCircleBaseElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& TLayoutCircleBaseElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBaseElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBaseElement.size)
  return _internal_size();
}
inline void TLayoutCircleBaseElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBaseElement.size)
}
inline ::TDataBinding* TLayoutCircleBaseElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBaseElement.size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* TLayoutCircleBaseElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBaseElement.size)
  return _msg;
}
inline void TLayoutCircleBaseElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBaseElement.size)
}

// optional .TDataBinding stretchFactor = 4;
inline bool TLayoutCircleBaseElement::_internal_has_stretchfactor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stretchfactor_ != nullptr);
  return value;
}
inline bool TLayoutCircleBaseElement::has_stretchfactor() const {
  return _internal_has_stretchfactor();
}
inline const ::TDataBinding& TLayoutCircleBaseElement::_internal_stretchfactor() const {
  const ::TDataBinding* p = _impl_.stretchfactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBaseElement::stretchfactor() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBaseElement.stretchFactor)
  return _internal_stretchfactor();
}
inline void TLayoutCircleBaseElement::unsafe_arena_set_allocated_stretchfactor(
    ::TDataBinding* stretchfactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stretchfactor_);
  }
  _impl_.stretchfactor_ = stretchfactor;
  if (stretchfactor) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBaseElement.stretchFactor)
}
inline ::TDataBinding* TLayoutCircleBaseElement::release_stretchfactor() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.stretchfactor_;
  _impl_.stretchfactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::unsafe_arena_release_stretchfactor() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBaseElement.stretchFactor)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.stretchfactor_;
  _impl_.stretchfactor_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::_internal_mutable_stretchfactor() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.stretchfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.stretchfactor_ = p;
  }
  return _impl_.stretchfactor_;
}
inline ::TDataBinding* TLayoutCircleBaseElement::mutable_stretchfactor() {
  ::TDataBinding* _msg = _internal_mutable_stretchfactor();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBaseElement.stretchFactor)
  return _msg;
}
inline void TLayoutCircleBaseElement::set_allocated_stretchfactor(::TDataBinding* stretchfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stretchfactor_);
  }
  if (stretchfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stretchfactor));
    if (message_arena != submessage_arena) {
      stretchfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stretchfactor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.stretchfactor_ = stretchfactor;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBaseElement.stretchFactor)
}

// optional .TDataBinding sizePolicy = 5;
inline bool TLayoutCircleBaseElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool TLayoutCircleBaseElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& TLayoutCircleBaseElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBaseElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBaseElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void TLayoutCircleBaseElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBaseElement.sizePolicy)
}
inline ::TDataBinding* TLayoutCircleBaseElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBaseElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* TLayoutCircleBaseElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBaseElement.sizePolicy)
  return _msg;
}
inline void TLayoutCircleBaseElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBaseElement.sizePolicy)
}

// optional .TDataBinding alignment = 6;
inline bool TLayoutCircleBaseElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool TLayoutCircleBaseElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& TLayoutCircleBaseElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutCircleBaseElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutCircleBaseElement.alignment)
  return _internal_alignment();
}
inline void TLayoutCircleBaseElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutCircleBaseElement.alignment)
}
inline ::TDataBinding* TLayoutCircleBaseElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutCircleBaseElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutCircleBaseElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* TLayoutCircleBaseElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutCircleBaseElement.alignment)
  return _msg;
}
inline void TLayoutCircleBaseElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutCircleBaseElement.alignment)
}

// -------------------------------------------------------------------

// TLayoutGrid_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutGrid_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutGrid_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutGrid_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutGrid_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGrid.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutGrid_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGrid.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutGrid_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutGrid_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGrid.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutGrid_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutGrid_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGrid.TTemplate.identifier)
  return _msg;
}
inline void TLayoutGrid_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGrid.TTemplate.identifier)
}

// required .HmiWidget.TLayoutGridElement element = 2;
inline bool TLayoutGrid_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutGrid_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutGrid_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutGridElement& TLayoutGrid_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutGridElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutGridElement&>(
      ::HmiWidget::_TLayoutGridElement_default_instance_);
}
inline const ::HmiWidget::TLayoutGridElement& TLayoutGrid_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGrid.TTemplate.element)
  return _internal_element();
}
inline void TLayoutGrid_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutGridElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGrid.TTemplate.element)
}
inline ::HmiWidget::TLayoutGridElement* TLayoutGrid_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutGridElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutGridElement* TLayoutGrid_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGrid.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutGridElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutGridElement* TLayoutGrid_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutGridElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutGridElement* TLayoutGrid_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutGridElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGrid.TTemplate.element)
  return _msg;
}
inline void TLayoutGrid_TTemplate::set_allocated_element(::HmiWidget::TLayoutGridElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGrid.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutGrid

// optional .HmiWidget.TLayoutGridBase base = 1;
inline bool TLayoutGrid::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutGrid::has_base() const {
  return _internal_has_base();
}
inline void TLayoutGrid::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutGridBase& TLayoutGrid::_internal_base() const {
  const ::HmiWidget::TLayoutGridBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutGridBase&>(
      ::HmiWidget::_TLayoutGridBase_default_instance_);
}
inline const ::HmiWidget::TLayoutGridBase& TLayoutGrid::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGrid.base)
  return _internal_base();
}
inline void TLayoutGrid::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutGridBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGrid.base)
}
inline ::HmiWidget::TLayoutGridBase* TLayoutGrid::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutGridBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutGridBase* TLayoutGrid::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGrid.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutGridBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutGridBase* TLayoutGrid::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutGridBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutGridBase* TLayoutGrid::mutable_base() {
  ::HmiWidget::TLayoutGridBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGrid.base)
  return _msg;
}
inline void TLayoutGrid::set_allocated_base(::HmiWidget::TLayoutGridBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGrid.base)
}

// optional .TDataBinding numberOfRows = 2;
inline bool TLayoutGrid::_internal_has_numberofrows() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.numberofrows_ != nullptr);
  return value;
}
inline bool TLayoutGrid::has_numberofrows() const {
  return _internal_has_numberofrows();
}
inline const ::TDataBinding& TLayoutGrid::_internal_numberofrows() const {
  const ::TDataBinding* p = _impl_.numberofrows_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGrid::numberofrows() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGrid.numberOfRows)
  return _internal_numberofrows();
}
inline void TLayoutGrid::unsafe_arena_set_allocated_numberofrows(
    ::TDataBinding* numberofrows) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.numberofrows_);
  }
  _impl_.numberofrows_ = numberofrows;
  if (numberofrows) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGrid.numberOfRows)
}
inline ::TDataBinding* TLayoutGrid::release_numberofrows() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.numberofrows_;
  _impl_.numberofrows_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGrid::unsafe_arena_release_numberofrows() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGrid.numberOfRows)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.numberofrows_;
  _impl_.numberofrows_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGrid::_internal_mutable_numberofrows() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.numberofrows_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.numberofrows_ = p;
  }
  return _impl_.numberofrows_;
}
inline ::TDataBinding* TLayoutGrid::mutable_numberofrows() {
  ::TDataBinding* _msg = _internal_mutable_numberofrows();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGrid.numberOfRows)
  return _msg;
}
inline void TLayoutGrid::set_allocated_numberofrows(::TDataBinding* numberofrows) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.numberofrows_);
  }
  if (numberofrows) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numberofrows));
    if (message_arena != submessage_arena) {
      numberofrows = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numberofrows, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.numberofrows_ = numberofrows;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGrid.numberOfRows)
}

// optional .TDataBinding numberOfColumns = 3;
inline bool TLayoutGrid::_internal_has_numberofcolumns() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.numberofcolumns_ != nullptr);
  return value;
}
inline bool TLayoutGrid::has_numberofcolumns() const {
  return _internal_has_numberofcolumns();
}
inline const ::TDataBinding& TLayoutGrid::_internal_numberofcolumns() const {
  const ::TDataBinding* p = _impl_.numberofcolumns_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGrid::numberofcolumns() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGrid.numberOfColumns)
  return _internal_numberofcolumns();
}
inline void TLayoutGrid::unsafe_arena_set_allocated_numberofcolumns(
    ::TDataBinding* numberofcolumns) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.numberofcolumns_);
  }
  _impl_.numberofcolumns_ = numberofcolumns;
  if (numberofcolumns) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGrid.numberOfColumns)
}
inline ::TDataBinding* TLayoutGrid::release_numberofcolumns() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.numberofcolumns_;
  _impl_.numberofcolumns_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGrid::unsafe_arena_release_numberofcolumns() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGrid.numberOfColumns)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.numberofcolumns_;
  _impl_.numberofcolumns_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGrid::_internal_mutable_numberofcolumns() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.numberofcolumns_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.numberofcolumns_ = p;
  }
  return _impl_.numberofcolumns_;
}
inline ::TDataBinding* TLayoutGrid::mutable_numberofcolumns() {
  ::TDataBinding* _msg = _internal_mutable_numberofcolumns();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGrid.numberOfColumns)
  return _msg;
}
inline void TLayoutGrid::set_allocated_numberofcolumns(::TDataBinding* numberofcolumns) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.numberofcolumns_);
  }
  if (numberofcolumns) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(numberofcolumns));
    if (message_arena != submessage_arena) {
      numberofcolumns = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, numberofcolumns, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.numberofcolumns_ = numberofcolumns;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGrid.numberOfColumns)
}

// repeated .HmiWidget.TLayoutGridElement element = 4;
inline int TLayoutGrid::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutGrid::element_size() const {
  return _internal_element_size();
}
inline void TLayoutGrid::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutGridElement* TLayoutGrid::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGrid.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGridElement >*
TLayoutGrid::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutGrid.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutGridElement& TLayoutGrid::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutGridElement& TLayoutGrid::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGrid.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutGridElement* TLayoutGrid::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutGridElement* TLayoutGrid::add_element() {
  ::HmiWidget::TLayoutGridElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutGrid.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGridElement >&
TLayoutGrid::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutGrid.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutGrid.TTemplate elementTemplate = 5;
inline int TLayoutGrid::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutGrid::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutGrid::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutGrid_TTemplate* TLayoutGrid::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGrid.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGrid_TTemplate >*
TLayoutGrid::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutGrid.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutGrid_TTemplate& TLayoutGrid::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutGrid_TTemplate& TLayoutGrid::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGrid.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutGrid_TTemplate* TLayoutGrid::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutGrid_TTemplate* TLayoutGrid::add_elementtemplate() {
  ::HmiWidget::TLayoutGrid_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutGrid.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutGrid_TTemplate >&
TLayoutGrid::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutGrid.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutGridBase

// optional .TDataBinding leftMargin = 1;
inline bool TLayoutGridBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutGridBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutGridBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutGridBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridBase.leftMargin)
}
inline ::TDataBinding* TLayoutGridBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutGridBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridBase.leftMargin)
  return _msg;
}
inline void TLayoutGridBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridBase.leftMargin)
}

// optional .TDataBinding rightMargin = 2;
inline bool TLayoutGridBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutGridBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutGridBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutGridBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridBase.rightMargin)
}
inline ::TDataBinding* TLayoutGridBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutGridBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridBase.rightMargin)
  return _msg;
}
inline void TLayoutGridBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridBase.rightMargin)
}

// optional .TDataBinding topMargin = 3;
inline bool TLayoutGridBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutGridBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutGridBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutGridBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridBase.topMargin)
}
inline ::TDataBinding* TLayoutGridBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutGridBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridBase.topMargin)
  return _msg;
}
inline void TLayoutGridBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridBase.topMargin)
}

// optional .TDataBinding bottomMargin = 4;
inline bool TLayoutGridBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutGridBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutGridBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutGridBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridBase.bottomMargin)
}
inline ::TDataBinding* TLayoutGridBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutGridBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridBase.bottomMargin)
  return _msg;
}
inline void TLayoutGridBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridBase.bottomMargin)
}

// -------------------------------------------------------------------

// TLayoutGridElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutGridElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutGridElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutGridElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutGridElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutGridElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridElement.childIdentifier)
}
inline ::TIdentifier* TLayoutGridElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutGridElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutGridElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutGridElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridElement.childIdentifier)
  return _msg;
}
inline void TLayoutGridElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutGridElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutGridElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutGridElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutGridElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutGridElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutGridElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutGridElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutGridElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutGridElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutGridElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridElement.nestedLayout)
  return _msg;
}
inline void TLayoutGridElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridElement.nestedLayout)
}

// optional .TDataBinding row = 3;
inline bool TLayoutGridElement::_internal_has_row() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.row_ != nullptr);
  return value;
}
inline bool TLayoutGridElement::has_row() const {
  return _internal_has_row();
}
inline const ::TDataBinding& TLayoutGridElement::_internal_row() const {
  const ::TDataBinding* p = _impl_.row_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridElement::row() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridElement.row)
  return _internal_row();
}
inline void TLayoutGridElement::unsafe_arena_set_allocated_row(
    ::TDataBinding* row) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_);
  }
  _impl_.row_ = row;
  if (row) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridElement.row)
}
inline ::TDataBinding* TLayoutGridElement::release_row() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.row_;
  _impl_.row_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::unsafe_arena_release_row() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridElement.row)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.row_;
  _impl_.row_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::_internal_mutable_row() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.row_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.row_ = p;
  }
  return _impl_.row_;
}
inline ::TDataBinding* TLayoutGridElement::mutable_row() {
  ::TDataBinding* _msg = _internal_mutable_row();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridElement.row)
  return _msg;
}
inline void TLayoutGridElement::set_allocated_row(::TDataBinding* row) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.row_);
  }
  if (row) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(row));
    if (message_arena != submessage_arena) {
      row = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, row, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.row_ = row;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridElement.row)
}

// optional .TDataBinding column = 4;
inline bool TLayoutGridElement::_internal_has_column() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.column_ != nullptr);
  return value;
}
inline bool TLayoutGridElement::has_column() const {
  return _internal_has_column();
}
inline const ::TDataBinding& TLayoutGridElement::_internal_column() const {
  const ::TDataBinding* p = _impl_.column_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridElement::column() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridElement.column)
  return _internal_column();
}
inline void TLayoutGridElement::unsafe_arena_set_allocated_column(
    ::TDataBinding* column) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_);
  }
  _impl_.column_ = column;
  if (column) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridElement.column)
}
inline ::TDataBinding* TLayoutGridElement::release_column() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.column_;
  _impl_.column_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::unsafe_arena_release_column() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridElement.column)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.column_;
  _impl_.column_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::_internal_mutable_column() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.column_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.column_ = p;
  }
  return _impl_.column_;
}
inline ::TDataBinding* TLayoutGridElement::mutable_column() {
  ::TDataBinding* _msg = _internal_mutable_column();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridElement.column)
  return _msg;
}
inline void TLayoutGridElement::set_allocated_column(::TDataBinding* column) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.column_);
  }
  if (column) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(column));
    if (message_arena != submessage_arena) {
      column = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, column, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.column_ = column;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridElement.column)
}

// optional .TDataBinding rowSpan = 5;
inline bool TLayoutGridElement::_internal_has_rowspan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rowspan_ != nullptr);
  return value;
}
inline bool TLayoutGridElement::has_rowspan() const {
  return _internal_has_rowspan();
}
inline const ::TDataBinding& TLayoutGridElement::_internal_rowspan() const {
  const ::TDataBinding* p = _impl_.rowspan_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridElement::rowspan() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridElement.rowSpan)
  return _internal_rowspan();
}
inline void TLayoutGridElement::unsafe_arena_set_allocated_rowspan(
    ::TDataBinding* rowspan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rowspan_);
  }
  _impl_.rowspan_ = rowspan;
  if (rowspan) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridElement.rowSpan)
}
inline ::TDataBinding* TLayoutGridElement::release_rowspan() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.rowspan_;
  _impl_.rowspan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::unsafe_arena_release_rowspan() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridElement.rowSpan)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.rowspan_;
  _impl_.rowspan_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::_internal_mutable_rowspan() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.rowspan_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rowspan_ = p;
  }
  return _impl_.rowspan_;
}
inline ::TDataBinding* TLayoutGridElement::mutable_rowspan() {
  ::TDataBinding* _msg = _internal_mutable_rowspan();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridElement.rowSpan)
  return _msg;
}
inline void TLayoutGridElement::set_allocated_rowspan(::TDataBinding* rowspan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rowspan_);
  }
  if (rowspan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rowspan));
    if (message_arena != submessage_arena) {
      rowspan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rowspan, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.rowspan_ = rowspan;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridElement.rowSpan)
}

// optional .TDataBinding columnSpan = 6;
inline bool TLayoutGridElement::_internal_has_columnspan() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.columnspan_ != nullptr);
  return value;
}
inline bool TLayoutGridElement::has_columnspan() const {
  return _internal_has_columnspan();
}
inline const ::TDataBinding& TLayoutGridElement::_internal_columnspan() const {
  const ::TDataBinding* p = _impl_.columnspan_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutGridElement::columnspan() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutGridElement.columnSpan)
  return _internal_columnspan();
}
inline void TLayoutGridElement::unsafe_arena_set_allocated_columnspan(
    ::TDataBinding* columnspan) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.columnspan_);
  }
  _impl_.columnspan_ = columnspan;
  if (columnspan) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutGridElement.columnSpan)
}
inline ::TDataBinding* TLayoutGridElement::release_columnspan() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.columnspan_;
  _impl_.columnspan_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::unsafe_arena_release_columnspan() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutGridElement.columnSpan)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.columnspan_;
  _impl_.columnspan_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutGridElement::_internal_mutable_columnspan() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.columnspan_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.columnspan_ = p;
  }
  return _impl_.columnspan_;
}
inline ::TDataBinding* TLayoutGridElement::mutable_columnspan() {
  ::TDataBinding* _msg = _internal_mutable_columnspan();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutGridElement.columnSpan)
  return _msg;
}
inline void TLayoutGridElement::set_allocated_columnspan(::TDataBinding* columnspan) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.columnspan_);
  }
  if (columnspan) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(columnspan));
    if (message_arena != submessage_arena) {
      columnspan = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, columnspan, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.columnspan_ = columnspan;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutGridElement.columnSpan)
}

// -------------------------------------------------------------------

// TLayoutMatrix_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutMatrix_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutMatrix_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutMatrix_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutMatrix_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrix.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutMatrix_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrix.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutMatrix_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutMatrix_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrix.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutMatrix_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutMatrix_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrix.TTemplate.identifier)
  return _msg;
}
inline void TLayoutMatrix_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrix.TTemplate.identifier)
}

// required .HmiWidget.TLayoutMatrixElement element = 2;
inline bool TLayoutMatrix_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutMatrix_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutMatrix_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutMatrixElement& TLayoutMatrix_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutMatrixElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMatrixElement&>(
      ::HmiWidget::_TLayoutMatrixElement_default_instance_);
}
inline const ::HmiWidget::TLayoutMatrixElement& TLayoutMatrix_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrix.TTemplate.element)
  return _internal_element();
}
inline void TLayoutMatrix_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutMatrixElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrix.TTemplate.element)
}
inline ::HmiWidget::TLayoutMatrixElement* TLayoutMatrix_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutMatrixElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMatrixElement* TLayoutMatrix_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrix.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutMatrixElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMatrixElement* TLayoutMatrix_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMatrixElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutMatrixElement* TLayoutMatrix_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutMatrixElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrix.TTemplate.element)
  return _msg;
}
inline void TLayoutMatrix_TTemplate::set_allocated_element(::HmiWidget::TLayoutMatrixElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrix.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutMatrix

// optional .HmiWidget.TLayoutMatrixBase base = 1;
inline bool TLayoutMatrix::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutMatrix::has_base() const {
  return _internal_has_base();
}
inline void TLayoutMatrix::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutMatrixBase& TLayoutMatrix::_internal_base() const {
  const ::HmiWidget::TLayoutMatrixBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMatrixBase&>(
      ::HmiWidget::_TLayoutMatrixBase_default_instance_);
}
inline const ::HmiWidget::TLayoutMatrixBase& TLayoutMatrix::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrix.base)
  return _internal_base();
}
inline void TLayoutMatrix::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutMatrixBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrix.base)
}
inline ::HmiWidget::TLayoutMatrixBase* TLayoutMatrix::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutMatrixBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMatrixBase* TLayoutMatrix::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrix.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutMatrixBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMatrixBase* TLayoutMatrix::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMatrixBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutMatrixBase* TLayoutMatrix::mutable_base() {
  ::HmiWidget::TLayoutMatrixBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrix.base)
  return _msg;
}
inline void TLayoutMatrix::set_allocated_base(::HmiWidget::TLayoutMatrixBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrix.base)
}

// required .TDataBinding cellSize = 2;
inline bool TLayoutMatrix::_internal_has_cellsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.cellsize_ != nullptr);
  return value;
}
inline bool TLayoutMatrix::has_cellsize() const {
  return _internal_has_cellsize();
}
inline const ::TDataBinding& TLayoutMatrix::_internal_cellsize() const {
  const ::TDataBinding* p = _impl_.cellsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrix::cellsize() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrix.cellSize)
  return _internal_cellsize();
}
inline void TLayoutMatrix::unsafe_arena_set_allocated_cellsize(
    ::TDataBinding* cellsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellsize_);
  }
  _impl_.cellsize_ = cellsize;
  if (cellsize) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrix.cellSize)
}
inline ::TDataBinding* TLayoutMatrix::release_cellsize() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.cellsize_;
  _impl_.cellsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrix::unsafe_arena_release_cellsize() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrix.cellSize)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.cellsize_;
  _impl_.cellsize_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrix::_internal_mutable_cellsize() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.cellsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.cellsize_ = p;
  }
  return _impl_.cellsize_;
}
inline ::TDataBinding* TLayoutMatrix::mutable_cellsize() {
  ::TDataBinding* _msg = _internal_mutable_cellsize();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrix.cellSize)
  return _msg;
}
inline void TLayoutMatrix::set_allocated_cellsize(::TDataBinding* cellsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.cellsize_);
  }
  if (cellsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(cellsize));
    if (message_arena != submessage_arena) {
      cellsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, cellsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.cellsize_ = cellsize;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrix.cellSize)
}

// repeated .HmiWidget.TLayoutMatrixElement element = 3;
inline int TLayoutMatrix::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutMatrix::element_size() const {
  return _internal_element_size();
}
inline void TLayoutMatrix::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutMatrixElement* TLayoutMatrix::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrix.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixElement >*
TLayoutMatrix::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutMatrix.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutMatrixElement& TLayoutMatrix::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutMatrixElement& TLayoutMatrix::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrix.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutMatrixElement* TLayoutMatrix::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutMatrixElement* TLayoutMatrix::add_element() {
  ::HmiWidget::TLayoutMatrixElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutMatrix.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixElement >&
TLayoutMatrix::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutMatrix.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutMatrix.TTemplate elementTemplate = 4;
inline int TLayoutMatrix::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutMatrix::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutMatrix::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutMatrix_TTemplate* TLayoutMatrix::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrix.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrix_TTemplate >*
TLayoutMatrix::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutMatrix.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutMatrix_TTemplate& TLayoutMatrix::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutMatrix_TTemplate& TLayoutMatrix::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrix.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutMatrix_TTemplate* TLayoutMatrix::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutMatrix_TTemplate* TLayoutMatrix::add_elementtemplate() {
  ::HmiWidget::TLayoutMatrix_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutMatrix.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrix_TTemplate >&
TLayoutMatrix::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutMatrix.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutMatrixBase

// optional .TDataBinding leftMargin = 1;
inline bool TLayoutMatrixBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutMatrixBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutMatrixBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixBase.leftMargin)
}
inline ::TDataBinding* TLayoutMatrixBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutMatrixBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixBase.leftMargin)
  return _msg;
}
inline void TLayoutMatrixBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixBase.leftMargin)
}

// optional .TDataBinding rightMargin = 2;
inline bool TLayoutMatrixBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutMatrixBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutMatrixBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixBase.rightMargin)
}
inline ::TDataBinding* TLayoutMatrixBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutMatrixBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixBase.rightMargin)
  return _msg;
}
inline void TLayoutMatrixBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixBase.rightMargin)
}

// optional .TDataBinding topMargin = 3;
inline bool TLayoutMatrixBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutMatrixBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutMatrixBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixBase.topMargin)
}
inline ::TDataBinding* TLayoutMatrixBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutMatrixBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixBase.topMargin)
  return _msg;
}
inline void TLayoutMatrixBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixBase.topMargin)
}

// optional .TDataBinding bottomMargin = 4;
inline bool TLayoutMatrixBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutMatrixBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutMatrixBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixBase.bottomMargin)
}
inline ::TDataBinding* TLayoutMatrixBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutMatrixBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixBase.bottomMargin)
  return _msg;
}
inline void TLayoutMatrixBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixBase.bottomMargin)
}

// optional .TDataBinding orientationX = 5;
inline bool TLayoutMatrixBase::_internal_has_orientationx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientationx_ != nullptr);
  return value;
}
inline bool TLayoutMatrixBase::has_orientationx() const {
  return _internal_has_orientationx();
}
inline const ::TDataBinding& TLayoutMatrixBase::_internal_orientationx() const {
  const ::TDataBinding* p = _impl_.orientationx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixBase::orientationx() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixBase.orientationX)
  return _internal_orientationx();
}
inline void TLayoutMatrixBase::unsafe_arena_set_allocated_orientationx(
    ::TDataBinding* orientationx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationx_);
  }
  _impl_.orientationx_ = orientationx;
  if (orientationx) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixBase.orientationX)
}
inline ::TDataBinding* TLayoutMatrixBase::release_orientationx() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.orientationx_;
  _impl_.orientationx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::unsafe_arena_release_orientationx() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixBase.orientationX)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.orientationx_;
  _impl_.orientationx_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::_internal_mutable_orientationx() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.orientationx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientationx_ = p;
  }
  return _impl_.orientationx_;
}
inline ::TDataBinding* TLayoutMatrixBase::mutable_orientationx() {
  ::TDataBinding* _msg = _internal_mutable_orientationx();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixBase.orientationX)
  return _msg;
}
inline void TLayoutMatrixBase::set_allocated_orientationx(::TDataBinding* orientationx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationx_);
  }
  if (orientationx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationx));
    if (message_arena != submessage_arena) {
      orientationx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientationx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.orientationx_ = orientationx;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixBase.orientationX)
}

// optional .TDataBinding orientationY = 6;
inline bool TLayoutMatrixBase::_internal_has_orientationy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientationy_ != nullptr);
  return value;
}
inline bool TLayoutMatrixBase::has_orientationy() const {
  return _internal_has_orientationy();
}
inline const ::TDataBinding& TLayoutMatrixBase::_internal_orientationy() const {
  const ::TDataBinding* p = _impl_.orientationy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixBase::orientationy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixBase.orientationY)
  return _internal_orientationy();
}
inline void TLayoutMatrixBase::unsafe_arena_set_allocated_orientationy(
    ::TDataBinding* orientationy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationy_);
  }
  _impl_.orientationy_ = orientationy;
  if (orientationy) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixBase.orientationY)
}
inline ::TDataBinding* TLayoutMatrixBase::release_orientationy() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.orientationy_;
  _impl_.orientationy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::unsafe_arena_release_orientationy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixBase.orientationY)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.orientationy_;
  _impl_.orientationy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::_internal_mutable_orientationy() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.orientationy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientationy_ = p;
  }
  return _impl_.orientationy_;
}
inline ::TDataBinding* TLayoutMatrixBase::mutable_orientationy() {
  ::TDataBinding* _msg = _internal_mutable_orientationy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixBase.orientationY)
  return _msg;
}
inline void TLayoutMatrixBase::set_allocated_orientationy(::TDataBinding* orientationy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationy_);
  }
  if (orientationy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationy));
    if (message_arena != submessage_arena) {
      orientationy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientationy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.orientationy_ = orientationy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixBase.orientationY)
}

// optional .TDataBinding spacing = 7;
inline bool TLayoutMatrixBase::_internal_has_spacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spacing_ != nullptr);
  return value;
}
inline bool TLayoutMatrixBase::has_spacing() const {
  return _internal_has_spacing();
}
inline const ::TDataBinding& TLayoutMatrixBase::_internal_spacing() const {
  const ::TDataBinding* p = _impl_.spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixBase::spacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixBase.spacing)
  return _internal_spacing();
}
inline void TLayoutMatrixBase::unsafe_arena_set_allocated_spacing(
    ::TDataBinding* spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  _impl_.spacing_ = spacing;
  if (spacing) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixBase.spacing)
}
inline ::TDataBinding* TLayoutMatrixBase::release_spacing() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::unsafe_arena_release_spacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixBase.spacing)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixBase::_internal_mutable_spacing() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.spacing_ = p;
  }
  return _impl_.spacing_;
}
inline ::TDataBinding* TLayoutMatrixBase::mutable_spacing() {
  ::TDataBinding* _msg = _internal_mutable_spacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixBase.spacing)
  return _msg;
}
inline void TLayoutMatrixBase::set_allocated_spacing(::TDataBinding* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacing));
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixBase.spacing)
}

// -------------------------------------------------------------------

// TLayoutMatrixElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutMatrixElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutMatrixElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutMatrixElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutMatrixElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutMatrixElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixElement.childIdentifier)
}
inline ::TIdentifier* TLayoutMatrixElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutMatrixElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutMatrixElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutMatrixElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixElement.childIdentifier)
  return _msg;
}
inline void TLayoutMatrixElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutMatrixElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutMatrixElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutMatrixElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutMatrixElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutMatrixElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutMatrixElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutMatrixElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutMatrixElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutMatrixElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutMatrixElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixElement.nestedLayout)
  return _msg;
}
inline void TLayoutMatrixElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixElement.nestedLayout)
}

// optional .TDataBinding alignment = 3;
inline bool TLayoutMatrixElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool TLayoutMatrixElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& TLayoutMatrixElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixElement.alignment)
  return _internal_alignment();
}
inline void TLayoutMatrixElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixElement.alignment)
}
inline ::TDataBinding* TLayoutMatrixElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* TLayoutMatrixElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixElement.alignment)
  return _msg;
}
inline void TLayoutMatrixElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixElement.alignment)
}

// -------------------------------------------------------------------

// TLayoutMatrixDynamic_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutMatrixDynamic_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamic_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutMatrixDynamic_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutMatrixDynamic_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamic.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutMatrixDynamic_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamic.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutMatrixDynamic_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutMatrixDynamic_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamic.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutMatrixDynamic_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutMatrixDynamic_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamic.TTemplate.identifier)
  return _msg;
}
inline void TLayoutMatrixDynamic_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamic.TTemplate.identifier)
}

// required .HmiWidget.TLayoutMatrixDynamicElement element = 2;
inline bool TLayoutMatrixDynamic_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamic_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutMatrixDynamic_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutMatrixDynamicElement& TLayoutMatrixDynamic_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutMatrixDynamicElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMatrixDynamicElement&>(
      ::HmiWidget::_TLayoutMatrixDynamicElement_default_instance_);
}
inline const ::HmiWidget::TLayoutMatrixDynamicElement& TLayoutMatrixDynamic_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamic.TTemplate.element)
  return _internal_element();
}
inline void TLayoutMatrixDynamic_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutMatrixDynamicElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamic.TTemplate.element)
}
inline ::HmiWidget::TLayoutMatrixDynamicElement* TLayoutMatrixDynamic_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutMatrixDynamicElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMatrixDynamicElement* TLayoutMatrixDynamic_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamic.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutMatrixDynamicElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMatrixDynamicElement* TLayoutMatrixDynamic_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMatrixDynamicElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutMatrixDynamicElement* TLayoutMatrixDynamic_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutMatrixDynamicElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamic.TTemplate.element)
  return _msg;
}
inline void TLayoutMatrixDynamic_TTemplate::set_allocated_element(::HmiWidget::TLayoutMatrixDynamicElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamic.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutMatrixDynamic

// optional .HmiWidget.TLayoutMatrixDynamicBase base = 1;
inline bool TLayoutMatrixDynamic::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamic::has_base() const {
  return _internal_has_base();
}
inline void TLayoutMatrixDynamic::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutMatrixDynamicBase& TLayoutMatrixDynamic::_internal_base() const {
  const ::HmiWidget::TLayoutMatrixDynamicBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMatrixDynamicBase&>(
      ::HmiWidget::_TLayoutMatrixDynamicBase_default_instance_);
}
inline const ::HmiWidget::TLayoutMatrixDynamicBase& TLayoutMatrixDynamic::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamic.base)
  return _internal_base();
}
inline void TLayoutMatrixDynamic::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutMatrixDynamicBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamic.base)
}
inline ::HmiWidget::TLayoutMatrixDynamicBase* TLayoutMatrixDynamic::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutMatrixDynamicBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMatrixDynamicBase* TLayoutMatrixDynamic::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamic.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutMatrixDynamicBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMatrixDynamicBase* TLayoutMatrixDynamic::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMatrixDynamicBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutMatrixDynamicBase* TLayoutMatrixDynamic::mutable_base() {
  ::HmiWidget::TLayoutMatrixDynamicBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamic.base)
  return _msg;
}
inline void TLayoutMatrixDynamic::set_allocated_base(::HmiWidget::TLayoutMatrixDynamicBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamic.base)
}

// optional .TDataBinding defaultCellSize = 2;
inline bool TLayoutMatrixDynamic::_internal_has_defaultcellsize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.defaultcellsize_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamic::has_defaultcellsize() const {
  return _internal_has_defaultcellsize();
}
inline const ::TDataBinding& TLayoutMatrixDynamic::_internal_defaultcellsize() const {
  const ::TDataBinding* p = _impl_.defaultcellsize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamic::defaultcellsize() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamic.defaultCellSize)
  return _internal_defaultcellsize();
}
inline void TLayoutMatrixDynamic::unsafe_arena_set_allocated_defaultcellsize(
    ::TDataBinding* defaultcellsize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultcellsize_);
  }
  _impl_.defaultcellsize_ = defaultcellsize;
  if (defaultcellsize) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamic.defaultCellSize)
}
inline ::TDataBinding* TLayoutMatrixDynamic::release_defaultcellsize() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.defaultcellsize_;
  _impl_.defaultcellsize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamic::unsafe_arena_release_defaultcellsize() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamic.defaultCellSize)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.defaultcellsize_;
  _impl_.defaultcellsize_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamic::_internal_mutable_defaultcellsize() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.defaultcellsize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.defaultcellsize_ = p;
  }
  return _impl_.defaultcellsize_;
}
inline ::TDataBinding* TLayoutMatrixDynamic::mutable_defaultcellsize() {
  ::TDataBinding* _msg = _internal_mutable_defaultcellsize();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamic.defaultCellSize)
  return _msg;
}
inline void TLayoutMatrixDynamic::set_allocated_defaultcellsize(::TDataBinding* defaultcellsize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.defaultcellsize_);
  }
  if (defaultcellsize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(defaultcellsize));
    if (message_arena != submessage_arena) {
      defaultcellsize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, defaultcellsize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.defaultcellsize_ = defaultcellsize;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamic.defaultCellSize)
}

// repeated .HmiWidget.TLayoutMatrixDynamicElement element = 3;
inline int TLayoutMatrixDynamic::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutMatrixDynamic::element_size() const {
  return _internal_element_size();
}
inline void TLayoutMatrixDynamic::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutMatrixDynamicElement* TLayoutMatrixDynamic::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamic.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamicElement >*
TLayoutMatrixDynamic::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutMatrixDynamic.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutMatrixDynamicElement& TLayoutMatrixDynamic::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutMatrixDynamicElement& TLayoutMatrixDynamic::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamic.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutMatrixDynamicElement* TLayoutMatrixDynamic::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutMatrixDynamicElement* TLayoutMatrixDynamic::add_element() {
  ::HmiWidget::TLayoutMatrixDynamicElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutMatrixDynamic.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamicElement >&
TLayoutMatrixDynamic::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutMatrixDynamic.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutMatrixDynamic.TTemplate elementTemplate = 4;
inline int TLayoutMatrixDynamic::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutMatrixDynamic::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutMatrixDynamic::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutMatrixDynamic_TTemplate* TLayoutMatrixDynamic::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamic.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamic_TTemplate >*
TLayoutMatrixDynamic::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutMatrixDynamic.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutMatrixDynamic_TTemplate& TLayoutMatrixDynamic::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutMatrixDynamic_TTemplate& TLayoutMatrixDynamic::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamic.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutMatrixDynamic_TTemplate* TLayoutMatrixDynamic::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutMatrixDynamic_TTemplate* TLayoutMatrixDynamic::add_elementtemplate() {
  ::HmiWidget::TLayoutMatrixDynamic_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutMatrixDynamic.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMatrixDynamic_TTemplate >&
TLayoutMatrixDynamic::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutMatrixDynamic.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutMatrixDynamicBase

// optional .TDataBinding leftMargin = 1;
inline bool TLayoutMatrixDynamicBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutMatrixDynamicBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.leftMargin)
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicBase.leftMargin)
  return _msg;
}
inline void TLayoutMatrixDynamicBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.leftMargin)
}

// optional .TDataBinding rightMargin = 2;
inline bool TLayoutMatrixDynamicBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutMatrixDynamicBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.rightMargin)
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicBase.rightMargin)
  return _msg;
}
inline void TLayoutMatrixDynamicBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.rightMargin)
}

// optional .TDataBinding topMargin = 3;
inline bool TLayoutMatrixDynamicBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutMatrixDynamicBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.topMargin)
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicBase.topMargin)
  return _msg;
}
inline void TLayoutMatrixDynamicBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.topMargin)
}

// optional .TDataBinding bottomMargin = 4;
inline bool TLayoutMatrixDynamicBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutMatrixDynamicBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.bottomMargin)
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicBase.bottomMargin)
  return _msg;
}
inline void TLayoutMatrixDynamicBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.bottomMargin)
}

// optional .TDataBinding orientationX = 5;
inline bool TLayoutMatrixDynamicBase::_internal_has_orientationx() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientationx_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicBase::has_orientationx() const {
  return _internal_has_orientationx();
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::_internal_orientationx() const {
  const ::TDataBinding* p = _impl_.orientationx_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::orientationx() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicBase.orientationX)
  return _internal_orientationx();
}
inline void TLayoutMatrixDynamicBase::unsafe_arena_set_allocated_orientationx(
    ::TDataBinding* orientationx) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationx_);
  }
  _impl_.orientationx_ = orientationx;
  if (orientationx) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.orientationX)
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::release_orientationx() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.orientationx_;
  _impl_.orientationx_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::unsafe_arena_release_orientationx() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicBase.orientationX)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.orientationx_;
  _impl_.orientationx_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::_internal_mutable_orientationx() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.orientationx_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientationx_ = p;
  }
  return _impl_.orientationx_;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::mutable_orientationx() {
  ::TDataBinding* _msg = _internal_mutable_orientationx();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicBase.orientationX)
  return _msg;
}
inline void TLayoutMatrixDynamicBase::set_allocated_orientationx(::TDataBinding* orientationx) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationx_);
  }
  if (orientationx) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationx));
    if (message_arena != submessage_arena) {
      orientationx = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientationx, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.orientationx_ = orientationx;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.orientationX)
}

// optional .TDataBinding orientationY = 6;
inline bool TLayoutMatrixDynamicBase::_internal_has_orientationy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orientationy_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicBase::has_orientationy() const {
  return _internal_has_orientationy();
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::_internal_orientationy() const {
  const ::TDataBinding* p = _impl_.orientationy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::orientationy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicBase.orientationY)
  return _internal_orientationy();
}
inline void TLayoutMatrixDynamicBase::unsafe_arena_set_allocated_orientationy(
    ::TDataBinding* orientationy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationy_);
  }
  _impl_.orientationy_ = orientationy;
  if (orientationy) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.orientationY)
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::release_orientationy() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.orientationy_;
  _impl_.orientationy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::unsafe_arena_release_orientationy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicBase.orientationY)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.orientationy_;
  _impl_.orientationy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::_internal_mutable_orientationy() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.orientationy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.orientationy_ = p;
  }
  return _impl_.orientationy_;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::mutable_orientationy() {
  ::TDataBinding* _msg = _internal_mutable_orientationy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicBase.orientationY)
  return _msg;
}
inline void TLayoutMatrixDynamicBase::set_allocated_orientationy(::TDataBinding* orientationy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.orientationy_);
  }
  if (orientationy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(orientationy));
    if (message_arena != submessage_arena) {
      orientationy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, orientationy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.orientationy_ = orientationy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.orientationY)
}

// optional .TDataBinding spacing = 7;
inline bool TLayoutMatrixDynamicBase::_internal_has_spacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.spacing_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicBase::has_spacing() const {
  return _internal_has_spacing();
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::_internal_spacing() const {
  const ::TDataBinding* p = _impl_.spacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicBase::spacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicBase.spacing)
  return _internal_spacing();
}
inline void TLayoutMatrixDynamicBase::unsafe_arena_set_allocated_spacing(
    ::TDataBinding* spacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  _impl_.spacing_ = spacing;
  if (spacing) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.spacing)
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::release_spacing() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::unsafe_arena_release_spacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicBase.spacing)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.spacing_;
  _impl_.spacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::_internal_mutable_spacing() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.spacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.spacing_ = p;
  }
  return _impl_.spacing_;
}
inline ::TDataBinding* TLayoutMatrixDynamicBase::mutable_spacing() {
  ::TDataBinding* _msg = _internal_mutable_spacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicBase.spacing)
  return _msg;
}
inline void TLayoutMatrixDynamicBase::set_allocated_spacing(::TDataBinding* spacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.spacing_);
  }
  if (spacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(spacing));
    if (message_arena != submessage_arena) {
      spacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, spacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.spacing_ = spacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicBase.spacing)
}

// -------------------------------------------------------------------

// TLayoutMatrixDynamicElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutMatrixDynamicElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutMatrixDynamicElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutMatrixDynamicElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutMatrixDynamicElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.childIdentifier)
}
inline ::TIdentifier* TLayoutMatrixDynamicElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutMatrixDynamicElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutMatrixDynamicElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutMatrixDynamicElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicElement.childIdentifier)
  return _msg;
}
inline void TLayoutMatrixDynamicElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutMatrixDynamicElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutMatrixDynamicElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutMatrixDynamicElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutMatrixDynamicElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutMatrixDynamicElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutMatrixDynamicElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutMatrixDynamicElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutMatrixDynamicElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutMatrixDynamicElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicElement.nestedLayout)
  return _msg;
}
inline void TLayoutMatrixDynamicElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.nestedLayout)
}

// optional .TDataBinding alignment = 3;
inline bool TLayoutMatrixDynamicElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicElement.alignment)
  return _internal_alignment();
}
inline void TLayoutMatrixDynamicElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.alignment)
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicElement.alignment)
  return _msg;
}
inline void TLayoutMatrixDynamicElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.alignment)
}

// optional .TDataBinding sizePolicy = 4;
inline bool TLayoutMatrixDynamicElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void TLayoutMatrixDynamicElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.sizePolicy)
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicElement.sizePolicy)
  return _msg;
}
inline void TLayoutMatrixDynamicElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.sizePolicy)
}

// optional .TDataBinding size = 5;
inline bool TLayoutMatrixDynamicElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicElement.size)
  return _internal_size();
}
inline void TLayoutMatrixDynamicElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.size)
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicElement.size)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicElement.size)
  return _msg;
}
inline void TLayoutMatrixDynamicElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.size)
}

// optional .TDataBinding stretchFactor = 6;
inline bool TLayoutMatrixDynamicElement::_internal_has_stretchfactor() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stretchfactor_ != nullptr);
  return value;
}
inline bool TLayoutMatrixDynamicElement::has_stretchfactor() const {
  return _internal_has_stretchfactor();
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::_internal_stretchfactor() const {
  const ::TDataBinding* p = _impl_.stretchfactor_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMatrixDynamicElement::stretchfactor() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMatrixDynamicElement.stretchFactor)
  return _internal_stretchfactor();
}
inline void TLayoutMatrixDynamicElement::unsafe_arena_set_allocated_stretchfactor(
    ::TDataBinding* stretchfactor) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stretchfactor_);
  }
  _impl_.stretchfactor_ = stretchfactor;
  if (stretchfactor) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.stretchFactor)
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::release_stretchfactor() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.stretchfactor_;
  _impl_.stretchfactor_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::unsafe_arena_release_stretchfactor() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMatrixDynamicElement.stretchFactor)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.stretchfactor_;
  _impl_.stretchfactor_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::_internal_mutable_stretchfactor() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.stretchfactor_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.stretchfactor_ = p;
  }
  return _impl_.stretchfactor_;
}
inline ::TDataBinding* TLayoutMatrixDynamicElement::mutable_stretchfactor() {
  ::TDataBinding* _msg = _internal_mutable_stretchfactor();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMatrixDynamicElement.stretchFactor)
  return _msg;
}
inline void TLayoutMatrixDynamicElement::set_allocated_stretchfactor(::TDataBinding* stretchfactor) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.stretchfactor_);
  }
  if (stretchfactor) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(stretchfactor));
    if (message_arena != submessage_arena) {
      stretchfactor = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, stretchfactor, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.stretchfactor_ = stretchfactor;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMatrixDynamicElement.stretchFactor)
}

// -------------------------------------------------------------------

// TLayoutMenuBelt_TTemplate

// required .TIdentifier identifier = 1;
inline bool TLayoutMenuBelt_TTemplate::_internal_has_identifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.identifier_ != nullptr);
  return value;
}
inline bool TLayoutMenuBelt_TTemplate::has_identifier() const {
  return _internal_has_identifier();
}
inline const ::TIdentifier& TLayoutMenuBelt_TTemplate::_internal_identifier() const {
  const ::TIdentifier* p = _impl_.identifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutMenuBelt_TTemplate::identifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBelt.TTemplate.identifier)
  return _internal_identifier();
}
inline void TLayoutMenuBelt_TTemplate::unsafe_arena_set_allocated_identifier(
    ::TIdentifier* identifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  _impl_.identifier_ = identifier;
  if (identifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBelt.TTemplate.identifier)
}
inline ::TIdentifier* TLayoutMenuBelt_TTemplate::release_identifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutMenuBelt_TTemplate::unsafe_arena_release_identifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBelt.TTemplate.identifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.identifier_;
  _impl_.identifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutMenuBelt_TTemplate::_internal_mutable_identifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.identifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.identifier_ = p;
  }
  return _impl_.identifier_;
}
inline ::TIdentifier* TLayoutMenuBelt_TTemplate::mutable_identifier() {
  ::TIdentifier* _msg = _internal_mutable_identifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBelt.TTemplate.identifier)
  return _msg;
}
inline void TLayoutMenuBelt_TTemplate::set_allocated_identifier(::TIdentifier* identifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.identifier_);
  }
  if (identifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(identifier));
    if (message_arena != submessage_arena) {
      identifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, identifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.identifier_ = identifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBelt.TTemplate.identifier)
}

// required .HmiWidget.TLayoutMenuBeltElement element = 2;
inline bool TLayoutMenuBelt_TTemplate::_internal_has_element() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.element_ != nullptr);
  return value;
}
inline bool TLayoutMenuBelt_TTemplate::has_element() const {
  return _internal_has_element();
}
inline void TLayoutMenuBelt_TTemplate::clear_element() {
  if (_impl_.element_ != nullptr) _impl_.element_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayoutMenuBeltElement& TLayoutMenuBelt_TTemplate::_internal_element() const {
  const ::HmiWidget::TLayoutMenuBeltElement* p = _impl_.element_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMenuBeltElement&>(
      ::HmiWidget::_TLayoutMenuBeltElement_default_instance_);
}
inline const ::HmiWidget::TLayoutMenuBeltElement& TLayoutMenuBelt_TTemplate::element() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBelt.TTemplate.element)
  return _internal_element();
}
inline void TLayoutMenuBelt_TTemplate::unsafe_arena_set_allocated_element(
    ::HmiWidget::TLayoutMenuBeltElement* element) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.element_);
  }
  _impl_.element_ = element;
  if (element) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBelt.TTemplate.element)
}
inline ::HmiWidget::TLayoutMenuBeltElement* TLayoutMenuBelt_TTemplate::release_element() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutMenuBeltElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMenuBeltElement* TLayoutMenuBelt_TTemplate::unsafe_arena_release_element() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBelt.TTemplate.element)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayoutMenuBeltElement* temp = _impl_.element_;
  _impl_.element_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMenuBeltElement* TLayoutMenuBelt_TTemplate::_internal_mutable_element() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.element_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMenuBeltElement>(GetArenaForAllocation());
    _impl_.element_ = p;
  }
  return _impl_.element_;
}
inline ::HmiWidget::TLayoutMenuBeltElement* TLayoutMenuBelt_TTemplate::mutable_element() {
  ::HmiWidget::TLayoutMenuBeltElement* _msg = _internal_mutable_element();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBelt.TTemplate.element)
  return _msg;
}
inline void TLayoutMenuBelt_TTemplate::set_allocated_element(::HmiWidget::TLayoutMenuBeltElement* element) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.element_;
  }
  if (element) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(element);
    if (message_arena != submessage_arena) {
      element = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, element, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.element_ = element;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBelt.TTemplate.element)
}

// -------------------------------------------------------------------

// TLayoutMenuBelt

// optional .HmiWidget.TLayoutMenuBeltBase base = 1;
inline bool TLayoutMenuBelt::_internal_has_base() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.base_ != nullptr);
  return value;
}
inline bool TLayoutMenuBelt::has_base() const {
  return _internal_has_base();
}
inline void TLayoutMenuBelt::clear_base() {
  if (_impl_.base_ != nullptr) _impl_.base_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::HmiWidget::TLayoutMenuBeltBase& TLayoutMenuBelt::_internal_base() const {
  const ::HmiWidget::TLayoutMenuBeltBase* p = _impl_.base_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayoutMenuBeltBase&>(
      ::HmiWidget::_TLayoutMenuBeltBase_default_instance_);
}
inline const ::HmiWidget::TLayoutMenuBeltBase& TLayoutMenuBelt::base() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBelt.base)
  return _internal_base();
}
inline void TLayoutMenuBelt::unsafe_arena_set_allocated_base(
    ::HmiWidget::TLayoutMenuBeltBase* base) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.base_);
  }
  _impl_.base_ = base;
  if (base) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBelt.base)
}
inline ::HmiWidget::TLayoutMenuBeltBase* TLayoutMenuBelt::release_base() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutMenuBeltBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayoutMenuBeltBase* TLayoutMenuBelt::unsafe_arena_release_base() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBelt.base)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::HmiWidget::TLayoutMenuBeltBase* temp = _impl_.base_;
  _impl_.base_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayoutMenuBeltBase* TLayoutMenuBelt::_internal_mutable_base() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.base_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayoutMenuBeltBase>(GetArenaForAllocation());
    _impl_.base_ = p;
  }
  return _impl_.base_;
}
inline ::HmiWidget::TLayoutMenuBeltBase* TLayoutMenuBelt::mutable_base() {
  ::HmiWidget::TLayoutMenuBeltBase* _msg = _internal_mutable_base();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBelt.base)
  return _msg;
}
inline void TLayoutMenuBelt::set_allocated_base(::HmiWidget::TLayoutMenuBeltBase* base) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.base_;
  }
  if (base) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(base);
    if (message_arena != submessage_arena) {
      base = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, base, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.base_ = base;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBelt.base)
}

// repeated .HmiWidget.TLayoutMenuBeltElement element = 2;
inline int TLayoutMenuBelt::_internal_element_size() const {
  return _impl_.element_.size();
}
inline int TLayoutMenuBelt::element_size() const {
  return _internal_element_size();
}
inline void TLayoutMenuBelt::clear_element() {
  _impl_.element_.Clear();
}
inline ::HmiWidget::TLayoutMenuBeltElement* TLayoutMenuBelt::mutable_element(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBelt.element)
  return _impl_.element_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBeltElement >*
TLayoutMenuBelt::mutable_element() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutMenuBelt.element)
  return &_impl_.element_;
}
inline const ::HmiWidget::TLayoutMenuBeltElement& TLayoutMenuBelt::_internal_element(int index) const {
  return _impl_.element_.Get(index);
}
inline const ::HmiWidget::TLayoutMenuBeltElement& TLayoutMenuBelt::element(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBelt.element)
  return _internal_element(index);
}
inline ::HmiWidget::TLayoutMenuBeltElement* TLayoutMenuBelt::_internal_add_element() {
  return _impl_.element_.Add();
}
inline ::HmiWidget::TLayoutMenuBeltElement* TLayoutMenuBelt::add_element() {
  ::HmiWidget::TLayoutMenuBeltElement* _add = _internal_add_element();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutMenuBelt.element)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBeltElement >&
TLayoutMenuBelt::element() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutMenuBelt.element)
  return _impl_.element_;
}

// repeated .HmiWidget.TLayoutMenuBelt.TTemplate elementTemplate = 3;
inline int TLayoutMenuBelt::_internal_elementtemplate_size() const {
  return _impl_.elementtemplate_.size();
}
inline int TLayoutMenuBelt::elementtemplate_size() const {
  return _internal_elementtemplate_size();
}
inline void TLayoutMenuBelt::clear_elementtemplate() {
  _impl_.elementtemplate_.Clear();
}
inline ::HmiWidget::TLayoutMenuBelt_TTemplate* TLayoutMenuBelt::mutable_elementtemplate(int index) {
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBelt.elementTemplate)
  return _impl_.elementtemplate_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBelt_TTemplate >*
TLayoutMenuBelt::mutable_elementtemplate() {
  // @@protoc_insertion_point(field_mutable_list:HmiWidget.TLayoutMenuBelt.elementTemplate)
  return &_impl_.elementtemplate_;
}
inline const ::HmiWidget::TLayoutMenuBelt_TTemplate& TLayoutMenuBelt::_internal_elementtemplate(int index) const {
  return _impl_.elementtemplate_.Get(index);
}
inline const ::HmiWidget::TLayoutMenuBelt_TTemplate& TLayoutMenuBelt::elementtemplate(int index) const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBelt.elementTemplate)
  return _internal_elementtemplate(index);
}
inline ::HmiWidget::TLayoutMenuBelt_TTemplate* TLayoutMenuBelt::_internal_add_elementtemplate() {
  return _impl_.elementtemplate_.Add();
}
inline ::HmiWidget::TLayoutMenuBelt_TTemplate* TLayoutMenuBelt::add_elementtemplate() {
  ::HmiWidget::TLayoutMenuBelt_TTemplate* _add = _internal_add_elementtemplate();
  // @@protoc_insertion_point(field_add:HmiWidget.TLayoutMenuBelt.elementTemplate)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::HmiWidget::TLayoutMenuBelt_TTemplate >&
TLayoutMenuBelt::elementtemplate() const {
  // @@protoc_insertion_point(field_list:HmiWidget.TLayoutMenuBelt.elementTemplate)
  return _impl_.elementtemplate_;
}

// -------------------------------------------------------------------

// TLayoutMenuBeltBase

// optional .TDataBinding leftMargin = 1;
inline bool TLayoutMenuBeltBase::_internal_has_leftmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.leftmargin_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_leftmargin() const {
  return _internal_has_leftmargin();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_leftmargin() const {
  const ::TDataBinding* p = _impl_.leftmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::leftmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.leftMargin)
  return _internal_leftmargin();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_leftmargin(
    ::TDataBinding* leftmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  _impl_.leftmargin_ = leftmargin;
  if (leftmargin) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.leftMargin)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_leftmargin() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_leftmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.leftMargin)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TDataBinding* temp = _impl_.leftmargin_;
  _impl_.leftmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_leftmargin() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.leftmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.leftmargin_ = p;
  }
  return _impl_.leftmargin_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_leftmargin() {
  ::TDataBinding* _msg = _internal_mutable_leftmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.leftMargin)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_leftmargin(::TDataBinding* leftmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.leftmargin_);
  }
  if (leftmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(leftmargin));
    if (message_arena != submessage_arena) {
      leftmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, leftmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.leftmargin_ = leftmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.leftMargin)
}

// optional .TDataBinding rightMargin = 2;
inline bool TLayoutMenuBeltBase::_internal_has_rightmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.rightmargin_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_rightmargin() const {
  return _internal_has_rightmargin();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_rightmargin() const {
  const ::TDataBinding* p = _impl_.rightmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::rightmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.rightMargin)
  return _internal_rightmargin();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_rightmargin(
    ::TDataBinding* rightmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  _impl_.rightmargin_ = rightmargin;
  if (rightmargin) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.rightMargin)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_rightmargin() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_rightmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.rightMargin)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::TDataBinding* temp = _impl_.rightmargin_;
  _impl_.rightmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_rightmargin() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.rightmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.rightmargin_ = p;
  }
  return _impl_.rightmargin_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_rightmargin() {
  ::TDataBinding* _msg = _internal_mutable_rightmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.rightMargin)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_rightmargin(::TDataBinding* rightmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.rightmargin_);
  }
  if (rightmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(rightmargin));
    if (message_arena != submessage_arena) {
      rightmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, rightmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.rightmargin_ = rightmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.rightMargin)
}

// optional .TDataBinding topMargin = 3;
inline bool TLayoutMenuBeltBase::_internal_has_topmargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.topmargin_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_topmargin() const {
  return _internal_has_topmargin();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_topmargin() const {
  const ::TDataBinding* p = _impl_.topmargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::topmargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.topMargin)
  return _internal_topmargin();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_topmargin(
    ::TDataBinding* topmargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  _impl_.topmargin_ = topmargin;
  if (topmargin) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.topMargin)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_topmargin() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_topmargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.topMargin)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.topmargin_;
  _impl_.topmargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_topmargin() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.topmargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.topmargin_ = p;
  }
  return _impl_.topmargin_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_topmargin() {
  ::TDataBinding* _msg = _internal_mutable_topmargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.topMargin)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_topmargin(::TDataBinding* topmargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.topmargin_);
  }
  if (topmargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(topmargin));
    if (message_arena != submessage_arena) {
      topmargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, topmargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.topmargin_ = topmargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.topMargin)
}

// optional .TDataBinding bottomMargin = 4;
inline bool TLayoutMenuBeltBase::_internal_has_bottommargin() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.bottommargin_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_bottommargin() const {
  return _internal_has_bottommargin();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_bottommargin() const {
  const ::TDataBinding* p = _impl_.bottommargin_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::bottommargin() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.bottomMargin)
  return _internal_bottommargin();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_bottommargin(
    ::TDataBinding* bottommargin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  _impl_.bottommargin_ = bottommargin;
  if (bottommargin) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.bottomMargin)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_bottommargin() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_bottommargin() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.bottomMargin)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.bottommargin_;
  _impl_.bottommargin_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_bottommargin() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.bottommargin_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.bottommargin_ = p;
  }
  return _impl_.bottommargin_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_bottommargin() {
  ::TDataBinding* _msg = _internal_mutable_bottommargin();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.bottomMargin)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_bottommargin(::TDataBinding* bottommargin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.bottommargin_);
  }
  if (bottommargin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(bottommargin));
    if (message_arena != submessage_arena) {
      bottommargin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, bottommargin, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.bottommargin_ = bottommargin;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.bottomMargin)
}

// optional .TDataBinding pageSize = 5;
inline bool TLayoutMenuBeltBase::_internal_has_pagesize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagesize_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_pagesize() const {
  return _internal_has_pagesize();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_pagesize() const {
  const ::TDataBinding* p = _impl_.pagesize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::pagesize() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.pageSize)
  return _internal_pagesize();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_pagesize(
    ::TDataBinding* pagesize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagesize_);
  }
  _impl_.pagesize_ = pagesize;
  if (pagesize) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.pageSize)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_pagesize() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.pagesize_;
  _impl_.pagesize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_pagesize() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.pageSize)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.pagesize_;
  _impl_.pagesize_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_pagesize() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.pagesize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.pagesize_ = p;
  }
  return _impl_.pagesize_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_pagesize() {
  ::TDataBinding* _msg = _internal_mutable_pagesize();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.pageSize)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_pagesize(::TDataBinding* pagesize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagesize_);
  }
  if (pagesize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagesize));
    if (message_arena != submessage_arena) {
      pagesize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagesize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.pagesize_ = pagesize;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.pageSize)
}

// optional .TDataBinding pageBlockSize = 6;
inline bool TLayoutMenuBeltBase::_internal_has_pageblocksize() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pageblocksize_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_pageblocksize() const {
  return _internal_has_pageblocksize();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_pageblocksize() const {
  const ::TDataBinding* p = _impl_.pageblocksize_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::pageblocksize() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.pageBlockSize)
  return _internal_pageblocksize();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_pageblocksize(
    ::TDataBinding* pageblocksize) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pageblocksize_);
  }
  _impl_.pageblocksize_ = pageblocksize;
  if (pageblocksize) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.pageBlockSize)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_pageblocksize() {
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.pageblocksize_;
  _impl_.pageblocksize_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_pageblocksize() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.pageBlockSize)
  _impl_._has_bits_[0] &= ~0x00000020u;
  ::TDataBinding* temp = _impl_.pageblocksize_;
  _impl_.pageblocksize_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_pageblocksize() {
  _impl_._has_bits_[0] |= 0x00000020u;
  if (_impl_.pageblocksize_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.pageblocksize_ = p;
  }
  return _impl_.pageblocksize_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_pageblocksize() {
  ::TDataBinding* _msg = _internal_mutable_pageblocksize();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.pageBlockSize)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_pageblocksize(::TDataBinding* pageblocksize) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pageblocksize_);
  }
  if (pageblocksize) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pageblocksize));
    if (message_arena != submessage_arena) {
      pageblocksize = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pageblocksize, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  _impl_.pageblocksize_ = pageblocksize;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.pageBlockSize)
}

// optional .TDataBinding elementShift = 7;
inline bool TLayoutMenuBeltBase::_internal_has_elementshift() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.elementshift_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_elementshift() const {
  return _internal_has_elementshift();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_elementshift() const {
  const ::TDataBinding* p = _impl_.elementshift_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::elementshift() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.elementShift)
  return _internal_elementshift();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_elementshift(
    ::TDataBinding* elementshift) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elementshift_);
  }
  _impl_.elementshift_ = elementshift;
  if (elementshift) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.elementShift)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_elementshift() {
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.elementshift_;
  _impl_.elementshift_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_elementshift() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.elementShift)
  _impl_._has_bits_[0] &= ~0x00000040u;
  ::TDataBinding* temp = _impl_.elementshift_;
  _impl_.elementshift_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_elementshift() {
  _impl_._has_bits_[0] |= 0x00000040u;
  if (_impl_.elementshift_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.elementshift_ = p;
  }
  return _impl_.elementshift_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_elementshift() {
  ::TDataBinding* _msg = _internal_mutable_elementshift();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.elementShift)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_elementshift(::TDataBinding* elementshift) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.elementshift_);
  }
  if (elementshift) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(elementshift));
    if (message_arena != submessage_arena) {
      elementshift = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, elementshift, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  _impl_.elementshift_ = elementshift;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.elementShift)
}

// optional .TDataBinding pageSpacing = 8;
inline bool TLayoutMenuBeltBase::_internal_has_pagespacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.pagespacing_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_pagespacing() const {
  return _internal_has_pagespacing();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_pagespacing() const {
  const ::TDataBinding* p = _impl_.pagespacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::pagespacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.pageSpacing)
  return _internal_pagespacing();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_pagespacing(
    ::TDataBinding* pagespacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagespacing_);
  }
  _impl_.pagespacing_ = pagespacing;
  if (pagespacing) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.pageSpacing)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_pagespacing() {
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.pagespacing_;
  _impl_.pagespacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_pagespacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.pageSpacing)
  _impl_._has_bits_[0] &= ~0x00000080u;
  ::TDataBinding* temp = _impl_.pagespacing_;
  _impl_.pagespacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_pagespacing() {
  _impl_._has_bits_[0] |= 0x00000080u;
  if (_impl_.pagespacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.pagespacing_ = p;
  }
  return _impl_.pagespacing_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_pagespacing() {
  ::TDataBinding* _msg = _internal_mutable_pagespacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.pageSpacing)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_pagespacing(::TDataBinding* pagespacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.pagespacing_);
  }
  if (pagespacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(pagespacing));
    if (message_arena != submessage_arena) {
      pagespacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pagespacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  _impl_.pagespacing_ = pagespacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.pageSpacing)
}

// optional .TDataBinding verticalSpacing = 9;
inline bool TLayoutMenuBeltBase::_internal_has_verticalspacing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.verticalspacing_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltBase::has_verticalspacing() const {
  return _internal_has_verticalspacing();
}
inline const ::TDataBinding& TLayoutMenuBeltBase::_internal_verticalspacing() const {
  const ::TDataBinding* p = _impl_.verticalspacing_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltBase::verticalspacing() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltBase.verticalSpacing)
  return _internal_verticalspacing();
}
inline void TLayoutMenuBeltBase::unsafe_arena_set_allocated_verticalspacing(
    ::TDataBinding* verticalspacing) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verticalspacing_);
  }
  _impl_.verticalspacing_ = verticalspacing;
  if (verticalspacing) {
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltBase.verticalSpacing)
}
inline ::TDataBinding* TLayoutMenuBeltBase::release_verticalspacing() {
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.verticalspacing_;
  _impl_.verticalspacing_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::unsafe_arena_release_verticalspacing() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltBase.verticalSpacing)
  _impl_._has_bits_[0] &= ~0x00000100u;
  ::TDataBinding* temp = _impl_.verticalspacing_;
  _impl_.verticalspacing_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltBase::_internal_mutable_verticalspacing() {
  _impl_._has_bits_[0] |= 0x00000100u;
  if (_impl_.verticalspacing_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.verticalspacing_ = p;
  }
  return _impl_.verticalspacing_;
}
inline ::TDataBinding* TLayoutMenuBeltBase::mutable_verticalspacing() {
  ::TDataBinding* _msg = _internal_mutable_verticalspacing();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltBase.verticalSpacing)
  return _msg;
}
inline void TLayoutMenuBeltBase::set_allocated_verticalspacing(::TDataBinding* verticalspacing) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.verticalspacing_);
  }
  if (verticalspacing) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(verticalspacing));
    if (message_arena != submessage_arena) {
      verticalspacing = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, verticalspacing, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000100u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000100u;
  }
  _impl_.verticalspacing_ = verticalspacing;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltBase.verticalSpacing)
}

// -------------------------------------------------------------------

// TLayoutMenuBeltElement

// optional .TIdentifier childIdentifier = 1;
inline bool TLayoutMenuBeltElement::_internal_has_childidentifier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.childidentifier_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltElement::has_childidentifier() const {
  return _internal_has_childidentifier();
}
inline const ::TIdentifier& TLayoutMenuBeltElement::_internal_childidentifier() const {
  const ::TIdentifier* p = _impl_.childidentifier_;
  return p != nullptr ? *p : reinterpret_cast<const ::TIdentifier&>(
      ::_TIdentifier_default_instance_);
}
inline const ::TIdentifier& TLayoutMenuBeltElement::childidentifier() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltElement.childIdentifier)
  return _internal_childidentifier();
}
inline void TLayoutMenuBeltElement::unsafe_arena_set_allocated_childidentifier(
    ::TIdentifier* childidentifier) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  _impl_.childidentifier_ = childidentifier;
  if (childidentifier) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltElement.childIdentifier)
}
inline ::TIdentifier* TLayoutMenuBeltElement::release_childidentifier() {
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TIdentifier* TLayoutMenuBeltElement::unsafe_arena_release_childidentifier() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltElement.childIdentifier)
  _impl_._has_bits_[0] &= ~0x00000001u;
  ::TIdentifier* temp = _impl_.childidentifier_;
  _impl_.childidentifier_ = nullptr;
  return temp;
}
inline ::TIdentifier* TLayoutMenuBeltElement::_internal_mutable_childidentifier() {
  _impl_._has_bits_[0] |= 0x00000001u;
  if (_impl_.childidentifier_ == nullptr) {
    auto* p = CreateMaybeMessage<::TIdentifier>(GetArenaForAllocation());
    _impl_.childidentifier_ = p;
  }
  return _impl_.childidentifier_;
}
inline ::TIdentifier* TLayoutMenuBeltElement::mutable_childidentifier() {
  ::TIdentifier* _msg = _internal_mutable_childidentifier();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltElement.childIdentifier)
  return _msg;
}
inline void TLayoutMenuBeltElement::set_allocated_childidentifier(::TIdentifier* childidentifier) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.childidentifier_);
  }
  if (childidentifier) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(childidentifier));
    if (message_arena != submessage_arena) {
      childidentifier = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, childidentifier, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.childidentifier_ = childidentifier;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltElement.childIdentifier)
}

// optional .HmiWidget.TLayout nestedLayout = 2;
inline bool TLayoutMenuBeltElement::_internal_has_nestedlayout() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.nestedlayout_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltElement::has_nestedlayout() const {
  return _internal_has_nestedlayout();
}
inline void TLayoutMenuBeltElement::clear_nestedlayout() {
  if (_impl_.nestedlayout_ != nullptr) _impl_.nestedlayout_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::HmiWidget::TLayout& TLayoutMenuBeltElement::_internal_nestedlayout() const {
  const ::HmiWidget::TLayout* p = _impl_.nestedlayout_;
  return p != nullptr ? *p : reinterpret_cast<const ::HmiWidget::TLayout&>(
      ::HmiWidget::_TLayout_default_instance_);
}
inline const ::HmiWidget::TLayout& TLayoutMenuBeltElement::nestedlayout() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltElement.nestedLayout)
  return _internal_nestedlayout();
}
inline void TLayoutMenuBeltElement::unsafe_arena_set_allocated_nestedlayout(
    ::HmiWidget::TLayout* nestedlayout) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.nestedlayout_);
  }
  _impl_.nestedlayout_ = nestedlayout;
  if (nestedlayout) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltElement.nestedLayout)
}
inline ::HmiWidget::TLayout* TLayoutMenuBeltElement::release_nestedlayout() {
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutMenuBeltElement::unsafe_arena_release_nestedlayout() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltElement.nestedLayout)
  _impl_._has_bits_[0] &= ~0x00000002u;
  ::HmiWidget::TLayout* temp = _impl_.nestedlayout_;
  _impl_.nestedlayout_ = nullptr;
  return temp;
}
inline ::HmiWidget::TLayout* TLayoutMenuBeltElement::_internal_mutable_nestedlayout() {
  _impl_._has_bits_[0] |= 0x00000002u;
  if (_impl_.nestedlayout_ == nullptr) {
    auto* p = CreateMaybeMessage<::HmiWidget::TLayout>(GetArenaForAllocation());
    _impl_.nestedlayout_ = p;
  }
  return _impl_.nestedlayout_;
}
inline ::HmiWidget::TLayout* TLayoutMenuBeltElement::mutable_nestedlayout() {
  ::HmiWidget::TLayout* _msg = _internal_mutable_nestedlayout();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltElement.nestedLayout)
  return _msg;
}
inline void TLayoutMenuBeltElement::set_allocated_nestedlayout(::HmiWidget::TLayout* nestedlayout) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete _impl_.nestedlayout_;
  }
  if (nestedlayout) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(nestedlayout);
    if (message_arena != submessage_arena) {
      nestedlayout = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nestedlayout, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.nestedlayout_ = nestedlayout;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltElement.nestedLayout)
}

// optional .TDataBinding size = 3;
inline bool TLayoutMenuBeltElement::_internal_has_size() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.size_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltElement::has_size() const {
  return _internal_has_size();
}
inline const ::TDataBinding& TLayoutMenuBeltElement::_internal_size() const {
  const ::TDataBinding* p = _impl_.size_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltElement::size() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltElement.size)
  return _internal_size();
}
inline void TLayoutMenuBeltElement::unsafe_arena_set_allocated_size(
    ::TDataBinding* size) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  _impl_.size_ = size;
  if (size) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltElement.size)
}
inline ::TDataBinding* TLayoutMenuBeltElement::release_size() {
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltElement::unsafe_arena_release_size() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltElement.size)
  _impl_._has_bits_[0] &= ~0x00000004u;
  ::TDataBinding* temp = _impl_.size_;
  _impl_.size_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltElement::_internal_mutable_size() {
  _impl_._has_bits_[0] |= 0x00000004u;
  if (_impl_.size_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.size_ = p;
  }
  return _impl_.size_;
}
inline ::TDataBinding* TLayoutMenuBeltElement::mutable_size() {
  ::TDataBinding* _msg = _internal_mutable_size();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltElement.size)
  return _msg;
}
inline void TLayoutMenuBeltElement::set_allocated_size(::TDataBinding* size) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.size_);
  }
  if (size) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(size));
    if (message_arena != submessage_arena) {
      size = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, size, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.size_ = size;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltElement.size)
}

// optional .TDataBinding sizePolicy = 4;
inline bool TLayoutMenuBeltElement::_internal_has_sizepolicy() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.sizepolicy_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltElement::has_sizepolicy() const {
  return _internal_has_sizepolicy();
}
inline const ::TDataBinding& TLayoutMenuBeltElement::_internal_sizepolicy() const {
  const ::TDataBinding* p = _impl_.sizepolicy_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltElement::sizepolicy() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltElement.sizePolicy)
  return _internal_sizepolicy();
}
inline void TLayoutMenuBeltElement::unsafe_arena_set_allocated_sizepolicy(
    ::TDataBinding* sizepolicy) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  _impl_.sizepolicy_ = sizepolicy;
  if (sizepolicy) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltElement.sizePolicy)
}
inline ::TDataBinding* TLayoutMenuBeltElement::release_sizepolicy() {
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltElement::unsafe_arena_release_sizepolicy() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltElement.sizePolicy)
  _impl_._has_bits_[0] &= ~0x00000008u;
  ::TDataBinding* temp = _impl_.sizepolicy_;
  _impl_.sizepolicy_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltElement::_internal_mutable_sizepolicy() {
  _impl_._has_bits_[0] |= 0x00000008u;
  if (_impl_.sizepolicy_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.sizepolicy_ = p;
  }
  return _impl_.sizepolicy_;
}
inline ::TDataBinding* TLayoutMenuBeltElement::mutable_sizepolicy() {
  ::TDataBinding* _msg = _internal_mutable_sizepolicy();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltElement.sizePolicy)
  return _msg;
}
inline void TLayoutMenuBeltElement::set_allocated_sizepolicy(::TDataBinding* sizepolicy) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.sizepolicy_);
  }
  if (sizepolicy) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(sizepolicy));
    if (message_arena != submessage_arena) {
      sizepolicy = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, sizepolicy, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  _impl_.sizepolicy_ = sizepolicy;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltElement.sizePolicy)
}

// optional .TDataBinding alignment = 5;
inline bool TLayoutMenuBeltElement::_internal_has_alignment() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.alignment_ != nullptr);
  return value;
}
inline bool TLayoutMenuBeltElement::has_alignment() const {
  return _internal_has_alignment();
}
inline const ::TDataBinding& TLayoutMenuBeltElement::_internal_alignment() const {
  const ::TDataBinding* p = _impl_.alignment_;
  return p != nullptr ? *p : reinterpret_cast<const ::TDataBinding&>(
      ::_TDataBinding_default_instance_);
}
inline const ::TDataBinding& TLayoutMenuBeltElement::alignment() const {
  // @@protoc_insertion_point(field_get:HmiWidget.TLayoutMenuBeltElement.alignment)
  return _internal_alignment();
}
inline void TLayoutMenuBeltElement::unsafe_arena_set_allocated_alignment(
    ::TDataBinding* alignment) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  _impl_.alignment_ = alignment;
  if (alignment) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:HmiWidget.TLayoutMenuBeltElement.alignment)
}
inline ::TDataBinding* TLayoutMenuBeltElement::release_alignment() {
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltElement::unsafe_arena_release_alignment() {
  // @@protoc_insertion_point(field_release:HmiWidget.TLayoutMenuBeltElement.alignment)
  _impl_._has_bits_[0] &= ~0x00000010u;
  ::TDataBinding* temp = _impl_.alignment_;
  _impl_.alignment_ = nullptr;
  return temp;
}
inline ::TDataBinding* TLayoutMenuBeltElement::_internal_mutable_alignment() {
  _impl_._has_bits_[0] |= 0x00000010u;
  if (_impl_.alignment_ == nullptr) {
    auto* p = CreateMaybeMessage<::TDataBinding>(GetArenaForAllocation());
    _impl_.alignment_ = p;
  }
  return _impl_.alignment_;
}
inline ::TDataBinding* TLayoutMenuBeltElement::mutable_alignment() {
  ::TDataBinding* _msg = _internal_mutable_alignment();
  // @@protoc_insertion_point(field_mutable:HmiWidget.TLayoutMenuBeltElement.alignment)
  return _msg;
}
inline void TLayoutMenuBeltElement::set_allocated_alignment(::TDataBinding* alignment) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(_impl_.alignment_);
  }
  if (alignment) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalGetOwningArena(
                reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(alignment));
    if (message_arena != submessage_arena) {
      alignment = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alignment, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  _impl_.alignment_ = alignment;
  // @@protoc_insertion_point(field_set_allocated:HmiWidget.TLayoutMenuBeltElement.alignment)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace HmiWidget

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::HmiWidget::TETriggerCategory> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TETriggerCategory>() {
  return ::HmiWidget::TETriggerCategory_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TETriggerExecMode> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TETriggerExecMode>() {
  return ::HmiWidget::TETriggerExecMode_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TETouchTargetDomain> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TETouchTargetDomain>() {
  return ::HmiWidget::TETouchTargetDomain_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TETouchVolumeSource> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TETouchVolumeSource>() {
  return ::HmiWidget::TETouchVolumeSource_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TELevelSelection> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TELevelSelection>() {
  return ::HmiWidget::TELevelSelection_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TEAssignmentTarget> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TEAssignmentTarget>() {
  return ::HmiWidget::TEAssignmentTarget_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TESignalTarget> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TESignalTarget>() {
  return ::HmiWidget::TESignalTarget_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TEAnimationAction> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TEAnimationAction>() {
  return ::HmiWidget::TEAnimationAction_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TEAnimationBindingBehaviour> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TEAnimationBindingBehaviour>() {
  return ::HmiWidget::TEAnimationBindingBehaviour_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TEAnimationSignal> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TEAnimationSignal>() {
  return ::HmiWidget::TEAnimationSignal_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TEAnimationSlot> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TEAnimationSlot>() {
  return ::HmiWidget::TEAnimationSlot_descriptor();
}
template <> struct is_proto_enum< ::HmiWidget::TELayoutOrientation> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::HmiWidget::TELayoutOrientation>() {
  return ::HmiWidget::TELayoutOrientation_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_HmiWidget_2eproto
