// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Common.proto

#include "proto/Common.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TIdentifier::TIdentifier(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.valuestring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.invalid_)*/false} {}
struct TIdentifierDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TIdentifierDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TIdentifierDefaultTypeInternal() {}
  union {
    TIdentifier _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TIdentifierDefaultTypeInternal _TIdentifier_default_instance_;
PROTOBUF_CONSTEXPR TAlignment::TAlignment(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.width_)*/0
  , /*decltype(_impl_.height_)*/0
  , /*decltype(_impl_.depth_)*/0} {}
struct TAlignmentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TAlignmentDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TAlignmentDefaultTypeInternal() {}
  union {
    TAlignment _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TAlignmentDefaultTypeInternal _TAlignment_default_instance_;
PROTOBUF_CONSTEXPR TVariant::TVariant(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.asciistring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.hmistring_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utf8string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.resourceid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.assetid_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.utf32string_)*/{&::_pbi::fixed_address_empty_string, ::_pbi::ConstantInitialized{}}
  , /*decltype(_impl_.numeric_)*/nullptr
  , /*decltype(_impl_.identifier_)*/nullptr
  , /*decltype(_impl_.aabb_)*/nullptr
  , /*decltype(_impl_.alignment_)*/nullptr
  , /*decltype(_impl_.widgetdescription_)*/nullptr
  , /*decltype(_impl_.bool__)*/false
  , /*decltype(_impl_.color_)*/0u
  , /*decltype(_impl_.identifiertype_)*/0
  , /*decltype(_impl_.stringid_)*/0u
  , /*decltype(_impl_.resourceidnumeric_)*/0u
  , /*decltype(_impl_.orientation_)*/0
  , /*decltype(_impl_.sizepolicy_)*/0
  , /*decltype(_impl_.inputmodality_)*/0
  , /*decltype(_impl_.daytime_)*/0
  , /*decltype(_impl_.screenlocation_)*/0
  , /*decltype(_impl_.activecategory_)*/0
  , /*decltype(_impl_.controllertype_)*/0
  , /*decltype(_impl_.cursortype_)*/0
  , /*decltype(_impl_.fontid_)*/0
  , /*decltype(_impl_.textalignment_)*/0
  , /*decltype(_impl_.textcut_)*/0
  , /*decltype(_impl_.textformat_)*/0
  , /*decltype(_impl_.touchevent_)*/0
  , /*decltype(_impl_.scrollareadirection_)*/0
  , /*decltype(_impl_.fontstyle_)*/0
  , /*decltype(_impl_.scrollbarposition_)*/0
  , /*decltype(_impl_.scalaralignment_)*/0
  , /*decltype(_impl_.layoutsearchroot_)*/0
  , /*decltype(_impl_.textvariant_)*/0
  , /*decltype(_impl_.face_)*/1
  , /*decltype(_impl_.winding_)*/1
  , /*decltype(_impl_.comparefunction_)*/1
  , /*decltype(_impl_.blendfactor_)*/1
  , /*decltype(_impl_.blendoperation_)*/1
  , /*decltype(_impl_.stenciloperation_)*/1
  , /*decltype(_impl_.texturefilter_)*/1
  , /*decltype(_impl_.texturewrapmode_)*/1} {}
struct TVariantDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TVariantDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TVariantDefaultTypeInternal() {}
  union {
    TVariant _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TVariantDefaultTypeInternal _TVariant_default_instance_;
PROTOBUF_CONSTEXPR TEWidgetDescription::TEWidgetDescription(
    ::_pbi::ConstantInitialized) {}
struct TEWidgetDescriptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TEWidgetDescriptionDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TEWidgetDescriptionDefaultTypeInternal() {}
  union {
    TEWidgetDescription _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TEWidgetDescriptionDefaultTypeInternal _TEWidgetDescription_default_instance_;
static ::_pb::Metadata file_level_metadata_Common_2eproto[4];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_Common_2eproto[33];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_Common_2eproto = nullptr;

const uint32_t TableStruct_Common_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TIdentifier, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TIdentifier, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TIdentifier, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TIdentifier, _impl_.valuestring_),
  PROTOBUF_FIELD_OFFSET(::TIdentifier, _impl_.invalid_),
  1,
  0,
  2,
  PROTOBUF_FIELD_OFFSET(::TAlignment, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TAlignment, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TAlignment, _impl_.width_),
  PROTOBUF_FIELD_OFFSET(::TAlignment, _impl_.height_),
  PROTOBUF_FIELD_OFFSET(::TAlignment, _impl_.depth_),
  0,
  1,
  2,
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.bool__),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.asciistring_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.hmistring_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.color_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.numeric_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.identifiertype_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.identifier_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.aabb_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.utf8string_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.resourceid_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.assetid_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.stringid_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.resourceidnumeric_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.utf32string_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.alignment_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.orientation_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.sizepolicy_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.inputmodality_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.daytime_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.screenlocation_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.activecategory_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.controllertype_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.cursortype_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.face_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.winding_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.comparefunction_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.blendfactor_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.blendoperation_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.stenciloperation_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.texturefilter_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.texturewrapmode_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.fontid_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.textalignment_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.textcut_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.textformat_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.touchevent_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.scrollareadirection_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.fontstyle_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.scrollbarposition_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.scalaralignment_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.layoutsearchroot_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.textvariant_),
  PROTOBUF_FIELD_OFFSET(::TVariant, _impl_.widgetdescription_),
  11,
  0,
  1,
  12,
  6,
  13,
  7,
  8,
  2,
  3,
  4,
  14,
  15,
  5,
  9,
  16,
  17,
  18,
  19,
  20,
  21,
  22,
  23,
  35,
  36,
  37,
  38,
  39,
  40,
  41,
  42,
  24,
  25,
  26,
  27,
  28,
  29,
  30,
  31,
  32,
  33,
  34,
  10,
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::TEWidgetDescription, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 9, -1, sizeof(::TIdentifier)},
  { 12, 21, -1, sizeof(::TAlignment)},
  { 24, 73, -1, sizeof(::TVariant)},
  { 116, -1, -1, sizeof(::TEWidgetDescription)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TIdentifier_default_instance_._instance,
  &::_TAlignment_default_instance_._instance,
  &::_TVariant_default_instance_._instance,
  &::_TEWidgetDescription_default_instance_._instance,
};

const char descriptor_table_protodef_Common_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\014Common.proto\032\rNumeric.proto\"B\n\013TIdenti"
  "fier\022\r\n\005value\030\001 \001(\r\022\023\n\013valueString\030\002 \001(\t"
  "\022\017\n\007invalid\030\003 \001(\010\"d\n\nTAlignment\022\033\n\005width"
  "\030\001 \001(\0162\014.TEAlignment\022\034\n\006height\030\002 \001(\0162\014.T"
  "EAlignment\022\033\n\005depth\030\003 \001(\0162\014.TEAlignment\""
  "\325\013\n\010TVariant\022\014\n\004Bool\030\001 \001(\010\022\023\n\013AsciiStrin"
  "g\030\002 \001(\t\022\021\n\tHmiString\030\003 \001(\t\022\r\n\005Color\030\004 \001("
  "\007\022\037\n\007Numeric\030\005 \001(\0132\016.TNumericValue\022)\n\016Id"
  "entifierType\030\006 \001(\0162\021.TEIdentifierType\022 \n"
  "\nIdentifier\030\007 \001(\0132\014.TIdentifier\022&\n\004AABB\030"
  "\010 \001(\0132\030.TAxisAlignedBoundingBox\022\022\n\nUtf8S"
  "tring\030\t \001(\t\022\022\n\nResourceId\030\n \001(\t\022\017\n\007Asset"
  "Id\030\013 \001(\t\022\020\n\010StringId\030\014 \001(\r\022\031\n\021ResourceId"
  "Numeric\030\r \001(\r\022\023\n\013Utf32String\030\016 \001(\t\022\036\n\tAl"
  "ignment\030\024 \001(\0132\013.TAlignment\022)\n\013Orientatio"
  "n\030( \001(\0162\024.TELayoutOrientation\022!\n\nSizePol"
  "icy\030) \001(\0162\r.TESizePolicy\022\'\n\rInputModalit"
  "y\030* \001(\0162\020.TEInputModality\022\033\n\007DayTime\030+ \001"
  "(\0162\n.TEDayTime\022)\n\016ScreenLocation\030, \001(\0162\021"
  ".TEScreenLocation\022)\n\016ActiveCategory\030- \001("
  "\0162\021.TEActiveCategory\022)\n\016ControllerType\030."
  " \001(\0162\021.TEControllerType\022!\n\nCursorType\030/ "
  "\001(\0162\r.TECursorType\022\025\n\004Face\0300 \001(\0162\007.TEFac"
  "e\022\033\n\007Winding\0301 \001(\0162\n.TEWinding\022+\n\017Compar"
  "eFunction\0302 \001(\0162\022.TECompareFunction\022#\n\013B"
  "lendFactor\0303 \001(\0162\016.TEBlendFactor\022)\n\016Blen"
  "dOperation\0304 \001(\0162\021.TEBlendOperation\022-\n\020S"
  "tencilOperation\0305 \001(\0162\023.TEStencilOperati"
  "on\022\'\n\rTextureFilter\0306 \001(\0162\020.TETextureFil"
  "ter\022+\n\017TextureWrapMode\0307 \001(\0162\022.TETexture"
  "WrapMode\022\031\n\006FontId\0308 \001(\0162\t.TEFontId\022\'\n\rT"
  "extAlignment\0309 \001(\0162\020.TETextAlignment\022$\n\007"
  "TextCut\030: \001(\0162\023.TETextCuttingStyle\022!\n\nTe"
  "xtFormat\030; \001(\0162\r.TETextFormat\022!\n\nTouchEv"
  "ent\030< \001(\0162\r.TETouchEvent\0223\n\023ScrollAreaDi"
  "rection\030= \001(\0162\026.TEScrollAreaDirection\022\037\n"
  "\tFontStyle\030> \001(\0162\014.TEFontStyle\022/\n\021Scroll"
  "barPosition\030\? \001(\0162\024.TEScrollbarPosition\022"
  "%\n\017ScalarAlignment\030@ \001(\0162\014.TEAlignment\0221"
  "\n\020LayoutSearchRoot\030A \001(\0162\027.TESceneGraphS"
  "earchRoot\022#\n\013TextVariant\030B \001(\0162\016.TETextV"
  "ariant\022/\n\021WidgetDescription\030C \001(\0132\024.TEWi"
  "dgetDescription\"\025\n\023TEWidgetDescription*\213"
  "\007\n\020TEIdentifierType\022\033\n\027TEIdentifierType_"
  "Widget\020\000\022\037\n\033TEIdentifierType_WidgetType\020"
  "\001\022\033\n\027TEIdentifierType_Layout\020\002\022\037\n\033TEIden"
  "tifierType_LayoutType\020\003\022$\n TEIdentifierT"
  "ype_WidgetAnimation\020\004\022\'\n#TEIdentifierTyp"
  "e_CompositeAnimation\020\005\022\031\n\025TEIdentifierTy"
  "pe_Slot\020\006\022\033\n\027TEIdentifierType_Script\020\007\022 "
  "\n\034TEIdentifierType_DataTrigger\020\010\022\033\n\027TEId"
  "entifierType_Signal\020\t\022\036\n\032TEIdentifierTyp"
  "e_Parameter\020\n\022\"\n\036TEIdentifierType_NodePa"
  "rameter\020\013\022 \n\034TEIdentifierType_LayoutGrou"
  "p\020\014\022 \n\034TEIdentifierType_LayoutState\020\r\022&\n"
  "\"TEIdentifierType_UIComponentAction\020\016\022%\n"
  "!TEIdentifierType_ImportDefinition\020\017\022#\n\037"
  "TEIdentifierType_ParameterValue\020\020\022*\n&TEI"
  "dentifierType_LayoutElementTemplate\020\021\022\032\n"
  "\026TEIdentifierType_Curve\020\022\022!\n\035TEIdentifie"
  "rType_TextProperty\020\023\022 \n\034TEIdentifierType"
  "_GalResource\020\024\022!\n\035TEIdentifierType_GalAt"
  "tribute\020\025\022\037\n\033TEIdentifierType_GalUniform"
  "\020\026\022\034\n\030TEIdentifierType_GalNode\020\027\022\"\n\036TEId"
  "entifierType_GalRenderPass\020\030\022&\n\"TEIdenti"
  "fierType_GalRenderOrderBin\020\031*f\n\017TEInputM"
  "odality\022\031\n\025TEInputModality_Touch\020\000\022\036\n\032TE"
  "InputModality_Controller\020\001\022\030\n\024TEInputMod"
  "ality_Idle\020\002*3\n\tTEDayTime\022\021\n\rTEDayTime_D"
  "ay\020\000\022\023\n\017TEDayTime_Night\020\001*\200\002\n\020TEScreenLo"
  "cation\022 \n\034TEScreenLocation_FrontDriver\020\000"
  "\022#\n\037TEScreenLocation_FrontPassenger\020\001\022\035\n"
  "\031TEScreenLocation_RearLeft\020\002\022\036\n\032TEScreen"
  "Location_RearRight\020\003\022&\n\"TEScreenLocation"
  "_InstrumentCluster\020\004\022\030\n\024TEScreenLocation"
  "_Hud\020\005\022$\n TEScreenLocation_TouchControll"
  "er\020\006*\370\001\n\020TEActiveCategory\022\032\n\026TEActiveCat"
  "egory_Media\020\000\022\"\n\036TEActiveCategory_Commun"
  "ication\020\001\022\037\n\033TEActiveCategory_Navigation"
  "\020\002\022#\n\037TEActiveCategory_ConnectedDrive\020\003\022"
  "\034\n\030TEActiveCategory_Vehicle\020\004\022\"\n\036TEActiv"
  "eCategory_Notifications\020\005\022\034\n\030TEActiveCat"
  "egory_Invalid\020\006*\376\003\n\020TEControllerType\022\035\n\031"
  "TEControllerType_Standard\020\000\022\035\n\031TEControl"
  "lerType_MainMenu\020\001\022\034\n\030TEControllerType_S"
  "peller\020\002\022\035\n\031TEControllerType_MapScale\020\003\022"
  " \n\034TEControllerType_Splitscreen\020\004\022 \n\034TEC"
  "ontrollerType_QuickAccess\020\005\022\033\n\027TEControl"
  "lerType_Player\020\006\022\034\n\030TEControllerType_Pie"
  "Menu\020\007\022\037\n\033TEControllerType_PreviewMap\020\010\022"
  "&\n\"TEControllerType_Speller_Frequency\020\t\022"
  " \n\034TEControllerType_SplitConfig\020\n\022\030\n\024TEC"
  "ontrollerType_IBA\020\013\022\032\n\026TEControllerType_"
  "Popup\020\014\022#\n\037TEControllerType_Speller_Matr"
  "ix\020\r\022*\n&TEControllerType_Speller_Battery"
  "Charge\020\016*l\n\014TETouchEvent\022\025\n\021TETouchEvent"
  "_None\020\000\022\026\n\022TETouchEvent_Start\020\001\022\027\n\023TETou"
  "chEvent_Update\020\002\022\024\n\020TETouchEvent_End\020\003*\302"
  "\003\n\016TETouchGesture\022\032\n\026TETouchGesture_Inva"
  "lid\020\000\022\026\n\022TETouchGesture_Tap\020\001\022\034\n\030TETouch"
  "Gesture_LongPress\020\002\022\026\n\022TETouchGesture_Pa"
  "n\020\003\022\027\n\023TETouchGesture_PanX\020\004\022\027\n\023TETouchG"
  "esture_PanY\020\005\022\030\n\024TETouchGesture_Swipe\020\006\022"
  "\031\n\025TETouchGesture_SwipeX\020\007\022\031\n\025TETouchGes"
  "ture_SwipeY\020\010\022\031\n\025TETouchGesture_Spread\020\t"
  "\022\030\n\024TETouchGesture_Pinch\020\n\022\031\n\025TETouchGes"
  "ture_Scroll\020\013\022\034\n\030TETouchGesture_DoubleTa"
  "p\020\014\022\031\n\025TETouchGesture_Rotate\020\r\022\036\n\032TETouc"
  "hGesture_HandWriting\020\016\022\033\n\027TETouchGesture"
  "_RawInput\020\017*\305\001\n\rTETouchDevice\022\030\n\024TETouch"
  "Device_NotSet\020\000\022\030\n\024TETouchDevice_Screen\020"
  "\001\022\025\n\021TETouchDevice_Pad\020\002\022\032\n\026TETouchDevic"
  "e_PadRueko\020\003\022\031\n\025TETouchDevice_Command\020\004\022"
  "\033\n\027TETouchDevice_Freespace\020\005\022\025\n\021TETouchD"
  "evice_All\020\006*\354\005\n\014TECursorType\022\025\n\021TECursor"
  "Type_List\020\000\022\030\n\024TECursorType_Speller\020\001\022\031\n"
  "\025TECursorType_MainMenu\020\002\022\026\n\022TECursorType"
  "_Store\020\003\022\037\n\033TECursorType_Speller_Matrix\020"
  "\004\022\"\n\036TECursorType_Speller_Frequency\020\005\022\035\n"
  "\031TECursorType_Functionlist\020\006\022\034\n\030TECursor"
  "Type_QuickAccess\020\007\022\030\n\024TECursorType_Readi"
  "ng\020\010\022\024\n\020TECursorType_Pie\020\t\022\037\n\033TECursorTy"
  "pe_InteractiveMap\020\n\022!\n\035TECursorType_Spel"
  "ler_Extended\020\013\022&\n\"TECursorType_Functionl"
  "ist_Extended\020\014\022\025\n\021TECursorType_Link\020\r\022\034\n"
  "\030TECursorType_List_NoGlow\020\016\022\030\n\024TECursorT"
  "ype_Invalid\020\017\022\034\n\030TECursorType_Splitscree"
  "n\020\020\022\037\n\033TECursorType_Speller_Slider\020\021\022\026\n\022"
  "TECursorType_Popup\020\022\022\034\n\030TECursorType_Pag"
  "ePreview\020\023\022\035\n\031TECursorType_Lettersquare\020"
  "\024\022\037\n\033TECursorType_MainMenuWidget\020\025\022\032\n\026TE"
  "CursorType_DragNDrop\020\026\022\037\n\033TECursorType_H"
  "orizontalList\020\027\022\031\n\025TECursorType_Toolbelt"
  "\020\030*U\n\006TEFace\022\020\n\014TEFace_Front\020\001\022\017\n\013TEFace"
  "_Back\020\002\022\027\n\023TEFace_FrontAndBack\020\003\022\017\n\013TEFa"
  "ce_None\020\004*D\n\tTEWinding\022\027\n\023TEWinding_Cloc"
  "kWise\020\001\022\036\n\032TEWinding_CounterClockWise\020\002*"
  "\213\002\n\021TECompareFunction\022\033\n\027TECompareFuncti"
  "on_Never\020\001\022\032\n\026TECompareFunction_Less\020\002\022\037"
  "\n\033TECompareFunction_LessEqual\020\003\022\033\n\027TECom"
  "pareFunction_Equal\020\004\022\036\n\032TECompareFunctio"
  "n_NotEqual\020\005\022\"\n\036TECompareFunction_Greate"
  "rEqual\020\006\022\035\n\031TECompareFunction_Greater\020\007\022"
  "\034\n\030TECompareFunction_Always\020\010*\237\004\n\rTEBlen"
  "dFactor\022\026\n\022TEBlendFactor_Zero\020\001\022\025\n\021TEBle"
  "ndFactor_One\020\002\022\035\n\031TEBlendFactor_SourceCo"
  "lor\020\003\022$\n TEBlendFactor_InverseSourceColo"
  "r\020\004\022\035\n\031TEBlendFactor_SourceAlpha\020\005\022%\n!TE"
  "BlendFactor_SourceAlphaSaturate\020\006\022$\n TEB"
  "lendFactor_InverseSourceAlpha\020\007\022\"\n\036TEBle"
  "ndFactor_DestinationColor\020\010\022)\n%TEBlendFa"
  "ctor_InverseDestinationColor\020\t\022\"\n\036TEBlen"
  "dFactor_DestinationAlpha\020\n\022)\n%TEBlendFac"
  "tor_InverseDestinationAlpha\020\013\022\037\n\033TEBlend"
  "Factor_ConstantColor\020\014\022&\n\"TEBlendFactor_"
  "InverseConstantColor\020\r\022\037\n\033TEBlendFactor_"
  "ConstantAlpha\020\016\022&\n\"TEBlendFactor_Inverse"
  "ConstantAlpha\020\017*\214\001\n\020TEBlendOperation\022\031\n\025"
  "TEBlendOperation_None\020\001\022\030\n\024TEBlendOperat"
  "ion_Add\020\002\022\035\n\031TEBlendOperation_Subtract\020\003"
  "\022$\n TEBlendOperation_ReverseSubtract\020\004*\235"
  "\002\n\022TEStencilOperation\022\033\n\027TEStencilOperat"
  "ion_Zero\020\001\022\033\n\027TEStencilOperation_Keep\020\002\022"
  "\036\n\032TEStencilOperation_Replace\020\003\022 \n\034TESte"
  "ncilOperation_Decrement\020\004\022$\n TEStencilOp"
  "eration_DecrementWrap\020\005\022 \n\034TEStencilOper"
  "ation_Increment\020\006\022$\n TEStencilOperation_"
  "IncrementWrap\020\007\022\035\n\031TEStencilOperation_In"
  "vert\020\010*\356\001\n\017TETextureFilter\022\033\n\027TETextureF"
  "ilter_Nearest\020\001\022\032\n\026TETextureFilter_Linea"
  "r\020\002\022(\n$TETextureFilter_NearestMipMapNear"
  "est\020\003\022\'\n#TETextureFilter_NearestMipMapLi"
  "near\020\004\022\'\n#TETextureFilter_LinearMipMapNe"
  "arest\020\005\022&\n\"TETextureFilter_LinearMipMapL"
  "inear\020\006*U\n\007TEScope\022\020\n\014TEScope_None\020\001\022\022\n\016"
  "TEScope_Global\020\002\022\021\n\rTEScope_Scene\020\003\022\021\n\rT"
  "EScope_Local\020\004*z\n\021TETextureWrapMode\022\034\n\030T"
  "ETextureWrapMode_Repeat\020\001\022!\n\035TETextureWr"
  "apMode_ClampToEdge\020\002\022$\n TETextureWrapMod"
  "e_MirroredRepeat\020\003*\334\001\n\023TELayoutOrientati"
  "on\022\034\n\030TELayoutOrientation_Left\020\000\022\035\n\031TELa"
  "youtOrientation_Right\020\001\022\033\n\027TELayoutOrien"
  "tation_Top\020\002\022\036\n\032TELayoutOrientation_Bott"
  "om\020\003\022!\n\035TELayoutOrientation_Clockwise\020\004\022"
  "(\n$TELayoutOrientation_CounterClockwise\020"
  "\005*\233\007\n\rTEPixelFormat\022\027\n\023TEPixelFormat_DEP"
  "TH\020\000\022\037\n\033TEPixelFormat_DEPTH_STENCIL\020\001\022\031\n"
  "\025TEPixelFormat_STENCIL\020\002\022\033\n\027TEPixelForma"
  "t_LUMINANCE\020\003\022\027\n\023TEPixelFormat_ALPHA\020\004\022!"
  "\n\035TEPixelFormat_LUMINANCE_ALPHA\020\005\022\025\n\021TEP"
  "ixelFormat_RGB\020\006\022\026\n\022TEPixelFormat_RGBA\020\007"
  "\022\031\n\025TEPixelFormat_DEPTH16\020\n\022\031\n\025TEPixelFo"
  "rmat_DEPTH24\020\013\022\032\n\026TEPixelFormat_DEPTH32F"
  "\020\014\022\"\n\036TEPixelFormat_DEPTH24_STENCIL8\020\r\022#"
  "\n\037TEPixelFormat_DEPTH32F_STENCIL8\020\016\022\024\n\020T"
  "EPixelFormat_R8\020\024\022\025\n\021TEPixelFormat_RG8\020\025"
  "\022\026\n\022TEPixelFormat_RGB8\020\026\022\027\n\023TEPixelForma"
  "t_RGBA8\020\027\022\026\n\022TEPixelFormat_R16F\020\030\022\027\n\023TEP"
  "ixelFormat_RG16F\020\031\022\030\n\024TEPixelFormat_RGB1"
  "6F\020\032\022\031\n\025TEPixelFormat_RGBA16F\020\033\022\026\n\022TEPix"
  "elFormat_R32F\020\034\022\027\n\023TEPixelFormat_RG32F\020\035"
  "\022\030\n\024TEPixelFormat_RGB32F\020\036\022\031\n\025TEPixelFor"
  "mat_RGBA32F\020\037\022\026\n\022TEPixelFormat_BGR8\020 \022\030\n"
  "\024TEPixelFormat_RGB565\020!\022\027\n\023TEPixelFormat"
  "_RGBA4\020\"\022\032\n\026TEPixelFormat_RGBA5551\020#\022\027\n\023"
  "TEPixelFormat_BGRA8\020$\022\027\n\023TEPixelFormat_S"
  "RGB8\020%\022\030\n\024TEPixelFormat_SRGBA8\020&\022\031\n\025TEPi"
  "xelFormat_ETC2RGB\020\'\022\032\n\026TEPixelFormat_ETC"
  "2RGBA\020(*\235\002\n\014TESizePolicy\022\024\n\020TESizePolicy"
  "_Fix\020\000\022\025\n\021TESizePolicy_Grow\020\001\022\027\n\023TESizeP"
  "olicy_Shrink\020\002\022\034\n\030TESizePolicy_Grow_Shri"
  "nk\020\003\022\032\n\026TESizePolicy_Preferred\020\004\022\037\n\033TESi"
  "zePolicy_Preferred_Grow\020\005\022!\n\035TESizePolic"
  "y_Preferred_Shrink\020\006\022&\n\"TESizePolicy_Pre"
  "ferred_Grow_Shrink\020\007\022!\n\035TESizePolicy_Cus"
  "tom_Separator\020\010*\201\006\n\nTEDataType\022\022\n\016TEData"
  "Type_Int\020\000\022\023\n\017TEDataType_UInt\020\001\022\024\n\020TEDat"
  "aType_Float\020\002\022\025\n\021TEDataType_Double\020\003\022\023\n\017"
  "TEDataType_Vec2\020\004\022\023\n\017TEDataType_Vec3\020\005\022\023"
  "\n\017TEDataType_Vec4\020\006\022\024\n\020TEDataType_IVec2\020"
  "\007\022\024\n\020TEDataType_IVec3\020\010\022\024\n\020TEDataType_IV"
  "ec4\020\t\022\025\n\021TEDataType_String\020\n\022\023\n\017TEDataTy"
  "pe_Bool\020\013\022\024\n\020TEDataType_Color\020\014\022\031\n\025TEDat"
  "aType_Identifier\020\r\022\032\n\026TEDataType_AsciiSt"
  "ring\020\016\022\031\n\025TEDataType_ResourceId\020\017\022\036\n\032TED"
  "ataType_EControllerType\020d\022\032\n\026TEDataType_"
  "ECursorType\020e\022!\n\035TEDataType_EInputModali"
  "tyType\020f\022\031\n\025TEDataType_EFontStyle\020g\022\031\n\025T"
  "EDataType_EAlignment\020h\022\035\n\031TEDataType_ETe"
  "xtAlignment\020i\022\032\n\026TEDataType_ETextFormat\020"
  "j\022\033\n\027TEDataType_ETextVariant\020k\022\027\n\023TEData"
  "Type_EDayTime\020l\022\036\n\032TEDataType_EActiveCat"
  "egory\020m\022\032\n\026TEDataType_ETouchEvent\020n\022#\n\037T"
  "EDataType_EScrollAreaDirection\020o\022!\n\035TEDa"
  "taType_ELayoutOrientation\020p*\266\001\n\010TEFontId"
  "\022\026\n\022TEFontId_Automatic\020\000\022\022\n\016TEFontId_Lat"
  "in\020\001\022\022\n\016TEFontId_Japan\020\002\022\022\n\016TEFontId_Kor"
  "ea\020\003\022\023\n\017TEFontId_Taiwan\020\004\022\022\n\016TEFontId_Ch"
  "ina\020\005\022\027\n\023TEFontId_Japan_ARIB\020\006\022\024\n\020TEFont"
  "Id_Special\020\007*=\n\013TEFontStyle\022\027\n\023TEFontSty"
  "le_Regular\020\000\022\025\n\021TEFontStyle_Light\020\001*\261\002\n\017"
  "TETextAlignment\022\036\n\032TETextAlignment_Botto"
  "mLeft\020\000\022\036\n\032TETextAlignment_MiddleLeft\020\001\022"
  "\033\n\027TETextAlignment_TopLeft\020\002\022 \n\034TETextAl"
  "ignment_BottomMiddle\020\003\022 \n\034TETextAlignmen"
  "t_MiddleMiddle\020\004\022\035\n\031TETextAlignment_TopM"
  "iddle\020\005\022\037\n\033TETextAlignment_BottomRight\020\006"
  "\022\037\n\033TETextAlignment_MiddleRight\020\007\022\034\n\030TET"
  "extAlignment_TopRight\020\010*\326\001\n\022TETextCuttin"
  "gStyle\022 \n\034TETextCuttingStyle_BreakNone\020\000"
  "\022&\n\"TETextCuttingStyle_BreakCharacters\020\001"
  "\022+\n\'TETextCuttingStyle_BreakCharactersFr"
  "ont\020\002\022!\n\035TETextCuttingStyle_BreakWords\020\003"
  "\022&\n\"TETextCuttingStyle_BreakWordsFront\020\004"
  "*o\n\014TETextFormat\022\035\n\031TETextFormat_Standar"
  "dText\020\000\022\037\n\033TETextFormat_RichTextFormat\020\001"
  "\022\037\n\033TETextFormat_LinkTextFormat\020\002*r\n\rTET"
  "extVariant\022\031\n\025TETextVariant_Default\020\000\022\025\n"
  "\021TETextVariant_FBM\020\001\022\026\n\022TETextVariant_Lo"
  "ng\020\002\022\027\n\023TETextVariant_Short\020\003*\254\001\n\013TEAlig"
  "nment\022\024\n\020TEAlignment_Left\020\000\022\026\n\022TEAlignme"
  "nt_Bottom\020\001\022\025\n\021TEAlignment_Front\020\002\022\026\n\022TE"
  "Alignment_Center\020\003\022\025\n\021TEAlignment_Right\020"
  "\004\022\023\n\017TEAlignment_Top\020\005\022\024\n\020TEAlignment_Ba"
  "ck\020\006*\211\001\n\025TEScrollAreaDirection\022\"\n\036TEScro"
  "llAreaDirection_Disabled\020\000\022%\n!TEScrollAr"
  "eaDirection_LeftToRight\020\001\022%\n!TEScrollAre"
  "aDirection_TopToBottom\020\002*\322\001\n\023TEScrollbar"
  "Position\022\037\n\033TEScrollbarPosition_Default\020"
  "\000\022\034\n\030TEScrollbarPosition_Left\020\001\022\035\n\031TEScr"
  "ollbarPosition_Right\020\002\022\033\n\027TEScrollbarPos"
  "ition_Top\020\003\022\036\n\032TEScrollbarPosition_Botto"
  "m\020\004\022 \n\034TEScrollbarPosition_Disabled\020\005*b\n"
  "\026TESceneGraphSearchRoot\022\027\n\023TESearchRoot_"
  "Widget\020\000\022\026\n\022TESearchRoot_Scene\020\001\022\027\n\023TESe"
  "archRoot_Layout\020\002"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_Common_2eproto_deps[1] = {
  &::descriptor_table_Numeric_2eproto,
};
static ::_pbi::once_flag descriptor_table_Common_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_Common_2eproto = {
    false, false, 11017, descriptor_table_protodef_Common_2eproto,
    "Common.proto",
    &descriptor_table_Common_2eproto_once, descriptor_table_Common_2eproto_deps, 1, 4,
    schemas, file_default_instances, TableStruct_Common_2eproto::offsets,
    file_level_metadata_Common_2eproto, file_level_enum_descriptors_Common_2eproto,
    file_level_service_descriptors_Common_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_Common_2eproto_getter() {
  return &descriptor_table_Common_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_Common_2eproto(&descriptor_table_Common_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEIdentifierType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[0];
}
bool TEIdentifierType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEInputModality_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[1];
}
bool TEInputModality_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEDayTime_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[2];
}
bool TEDayTime_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEScreenLocation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[3];
}
bool TEScreenLocation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEActiveCategory_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[4];
}
bool TEActiveCategory_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEControllerType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[5];
}
bool TEControllerType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETouchEvent_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[6];
}
bool TETouchEvent_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETouchGesture_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[7];
}
bool TETouchGesture_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETouchDevice_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[8];
}
bool TETouchDevice_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TECursorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[9];
}
bool TECursorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEFace_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[10];
}
bool TEFace_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEWinding_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[11];
}
bool TEWinding_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TECompareFunction_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[12];
}
bool TECompareFunction_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEBlendFactor_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[13];
}
bool TEBlendFactor_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEBlendOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[14];
}
bool TEBlendOperation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEStencilOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[15];
}
bool TEStencilOperation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETextureFilter_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[16];
}
bool TETextureFilter_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEScope_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[17];
}
bool TEScope_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETextureWrapMode_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[18];
}
bool TETextureWrapMode_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TELayoutOrientation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[19];
}
bool TELayoutOrientation_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEPixelFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[20];
}
bool TEPixelFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TESizePolicy_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[21];
}
bool TESizePolicy_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEDataType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[22];
}
bool TEDataType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 100:
    case 101:
    case 102:
    case 103:
    case 104:
    case 105:
    case 106:
    case 107:
    case 108:
    case 109:
    case 110:
    case 111:
    case 112:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEFontId_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[23];
}
bool TEFontId_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEFontStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[24];
}
bool TEFontStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETextAlignment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[25];
}
bool TETextAlignment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETextCuttingStyle_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[26];
}
bool TETextCuttingStyle_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETextFormat_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[27];
}
bool TETextFormat_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TETextVariant_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[28];
}
bool TETextVariant_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAlignment_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[29];
}
bool TEAlignment_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEScrollAreaDirection_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[30];
}
bool TEScrollAreaDirection_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEScrollbarPosition_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[31];
}
bool TEScrollbarPosition_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TESceneGraphSearchRoot_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_Common_2eproto);
  return file_level_enum_descriptors_Common_2eproto[32];
}
bool TESceneGraphSearchRoot_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TIdentifier::_Internal {
 public:
  using HasBits = decltype(std::declval<TIdentifier>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TIdentifier, _impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_valuestring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_invalid(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TIdentifier::TIdentifier(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TIdentifier)
}
TIdentifier::TIdentifier(const TIdentifier& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TIdentifier* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.valuestring_){}
    , decltype(_impl_.value_){}
    , decltype(_impl_.invalid_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.valuestring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuestring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_valuestring()) {
    _this->_impl_.valuestring_.Set(from._internal_valuestring(), 
      _this->GetArenaForAllocation());
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.invalid_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.invalid_));
  // @@protoc_insertion_point(copy_constructor:TIdentifier)
}

inline void TIdentifier::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.valuestring_){}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.invalid_){false}
  };
  _impl_.valuestring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.valuestring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TIdentifier::~TIdentifier() {
  // @@protoc_insertion_point(destructor:TIdentifier)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TIdentifier::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.valuestring_.Destroy();
}

void TIdentifier::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TIdentifier::Clear() {
// @@protoc_insertion_point(message_clear_start:TIdentifier)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.valuestring_.ClearNonDefaultToEmpty();
  }
  if (cached_has_bits & 0x00000006u) {
    ::memset(&_impl_.value_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.invalid_) -
        reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.invalid_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TIdentifier::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional uint32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string valueString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_valuestring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TIdentifier.valueString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional bool invalid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_invalid(&has_bits);
          _impl_.invalid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TIdentifier::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TIdentifier)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional uint32 value = 1;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(1, this->_internal_value(), target);
  }

  // optional string valueString = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_valuestring().data(), static_cast<int>(this->_internal_valuestring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TIdentifier.valueString");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_valuestring(), target);
  }

  // optional bool invalid = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(3, this->_internal_invalid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TIdentifier)
  return target;
}

size_t TIdentifier::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TIdentifier)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional string valueString = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_valuestring());
    }

    // optional uint32 value = 1;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_value());
    }

    // optional bool invalid = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TIdentifier::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TIdentifier::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TIdentifier::GetClassData() const { return &_class_data_; }


void TIdentifier::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TIdentifier*>(&to_msg);
  auto& from = static_cast<const TIdentifier&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TIdentifier)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_valuestring(from._internal_valuestring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.invalid_ = from._impl_.invalid_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TIdentifier::CopyFrom(const TIdentifier& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TIdentifier)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TIdentifier::IsInitialized() const {
  return true;
}

void TIdentifier::InternalSwap(TIdentifier* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.valuestring_, lhs_arena,
      &other->_impl_.valuestring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TIdentifier, _impl_.invalid_)
      + sizeof(TIdentifier::_impl_.invalid_)
      - PROTOBUF_FIELD_OFFSET(TIdentifier, _impl_.value_)>(
          reinterpret_cast<char*>(&_impl_.value_),
          reinterpret_cast<char*>(&other->_impl_.value_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TIdentifier::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[0]);
}

// ===================================================================

class TAlignment::_Internal {
 public:
  using HasBits = decltype(std::declval<TAlignment>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TAlignment, _impl_._has_bits_);
  static void set_has_width(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_height(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_depth(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
};

TAlignment::TAlignment(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TAlignment)
}
TAlignment::TAlignment(const TAlignment& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TAlignment* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_){}
    , decltype(_impl_.height_){}
    , decltype(_impl_.depth_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&_impl_.width_, &from._impl_.width_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.depth_) -
    reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.depth_));
  // @@protoc_insertion_point(copy_constructor:TAlignment)
}

inline void TAlignment::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.width_){0}
    , decltype(_impl_.height_){0}
    , decltype(_impl_.depth_){0}
  };
}

TAlignment::~TAlignment() {
  // @@protoc_insertion_point(destructor:TAlignment)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TAlignment::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void TAlignment::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TAlignment::Clear() {
// @@protoc_insertion_point(message_clear_start:TAlignment)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    ::memset(&_impl_.width_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.depth_) -
        reinterpret_cast<char*>(&_impl_.width_)) + sizeof(_impl_.depth_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TAlignment::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TEAlignment width = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEAlignment_IsValid(val))) {
            _internal_set_width(static_cast<::TEAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEAlignment height = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEAlignment_IsValid(val))) {
            _internal_set_height(static_cast<::TEAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEAlignment depth = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEAlignment_IsValid(val))) {
            _internal_set_depth(static_cast<::TEAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(3, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TAlignment::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TAlignment)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TEAlignment width = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_width(), target);
  }

  // optional .TEAlignment height = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_height(), target);
  }

  // optional .TEAlignment depth = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      3, this->_internal_depth(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TAlignment)
  return target;
}

size_t TAlignment::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TAlignment)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    // optional .TEAlignment width = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_width());
    }

    // optional .TEAlignment height = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_height());
    }

    // optional .TEAlignment depth = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_depth());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TAlignment::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TAlignment::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TAlignment::GetClassData() const { return &_class_data_; }


void TAlignment::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TAlignment*>(&to_msg);
  auto& from = static_cast<const TAlignment&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TAlignment)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.width_ = from._impl_.width_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.height_ = from._impl_.height_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.depth_ = from._impl_.depth_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TAlignment::CopyFrom(const TAlignment& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TAlignment)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TAlignment::IsInitialized() const {
  return true;
}

void TAlignment::InternalSwap(TAlignment* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TAlignment, _impl_.depth_)
      + sizeof(TAlignment::_impl_.depth_)
      - PROTOBUF_FIELD_OFFSET(TAlignment, _impl_.width_)>(
          reinterpret_cast<char*>(&_impl_.width_),
          reinterpret_cast<char*>(&other->_impl_.width_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TAlignment::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[1]);
}

// ===================================================================

class TVariant::_Internal {
 public:
  using HasBits = decltype(std::declval<TVariant>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TVariant, _impl_._has_bits_);
  static void set_has_bool_(HasBits* has_bits) {
    (*has_bits)[0] |= 2048u;
  }
  static void set_has_asciistring(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_hmistring(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_color(HasBits* has_bits) {
    (*has_bits)[0] |= 4096u;
  }
  static const ::TNumericValue& numeric(const TVariant* msg);
  static void set_has_numeric(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
  static void set_has_identifiertype(HasBits* has_bits) {
    (*has_bits)[0] |= 8192u;
  }
  static const ::TIdentifier& identifier(const TVariant* msg);
  static void set_has_identifier(HasBits* has_bits) {
    (*has_bits)[0] |= 128u;
  }
  static const ::TAxisAlignedBoundingBox& aabb(const TVariant* msg);
  static void set_has_aabb(HasBits* has_bits) {
    (*has_bits)[0] |= 256u;
  }
  static void set_has_utf8string(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_resourceid(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_assetid(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_stringid(HasBits* has_bits) {
    (*has_bits)[0] |= 16384u;
  }
  static void set_has_resourceidnumeric(HasBits* has_bits) {
    (*has_bits)[0] |= 32768u;
  }
  static void set_has_utf32string(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TAlignment& alignment(const TVariant* msg);
  static void set_has_alignment(HasBits* has_bits) {
    (*has_bits)[0] |= 512u;
  }
  static void set_has_orientation(HasBits* has_bits) {
    (*has_bits)[0] |= 65536u;
  }
  static void set_has_sizepolicy(HasBits* has_bits) {
    (*has_bits)[0] |= 131072u;
  }
  static void set_has_inputmodality(HasBits* has_bits) {
    (*has_bits)[0] |= 262144u;
  }
  static void set_has_daytime(HasBits* has_bits) {
    (*has_bits)[0] |= 524288u;
  }
  static void set_has_screenlocation(HasBits* has_bits) {
    (*has_bits)[0] |= 1048576u;
  }
  static void set_has_activecategory(HasBits* has_bits) {
    (*has_bits)[0] |= 2097152u;
  }
  static void set_has_controllertype(HasBits* has_bits) {
    (*has_bits)[0] |= 4194304u;
  }
  static void set_has_cursortype(HasBits* has_bits) {
    (*has_bits)[0] |= 8388608u;
  }
  static void set_has_face(HasBits* has_bits) {
    (*has_bits)[1] |= 8u;
  }
  static void set_has_winding(HasBits* has_bits) {
    (*has_bits)[1] |= 16u;
  }
  static void set_has_comparefunction(HasBits* has_bits) {
    (*has_bits)[1] |= 32u;
  }
  static void set_has_blendfactor(HasBits* has_bits) {
    (*has_bits)[1] |= 64u;
  }
  static void set_has_blendoperation(HasBits* has_bits) {
    (*has_bits)[1] |= 128u;
  }
  static void set_has_stenciloperation(HasBits* has_bits) {
    (*has_bits)[1] |= 256u;
  }
  static void set_has_texturefilter(HasBits* has_bits) {
    (*has_bits)[1] |= 512u;
  }
  static void set_has_texturewrapmode(HasBits* has_bits) {
    (*has_bits)[1] |= 1024u;
  }
  static void set_has_fontid(HasBits* has_bits) {
    (*has_bits)[0] |= 16777216u;
  }
  static void set_has_textalignment(HasBits* has_bits) {
    (*has_bits)[0] |= 33554432u;
  }
  static void set_has_textcut(HasBits* has_bits) {
    (*has_bits)[0] |= 67108864u;
  }
  static void set_has_textformat(HasBits* has_bits) {
    (*has_bits)[0] |= 134217728u;
  }
  static void set_has_touchevent(HasBits* has_bits) {
    (*has_bits)[0] |= 268435456u;
  }
  static void set_has_scrollareadirection(HasBits* has_bits) {
    (*has_bits)[0] |= 536870912u;
  }
  static void set_has_fontstyle(HasBits* has_bits) {
    (*has_bits)[0] |= 1073741824u;
  }
  static void set_has_scrollbarposition(HasBits* has_bits) {
    (*has_bits)[0] |= 2147483648u;
  }
  static void set_has_scalaralignment(HasBits* has_bits) {
    (*has_bits)[1] |= 1u;
  }
  static void set_has_layoutsearchroot(HasBits* has_bits) {
    (*has_bits)[1] |= 2u;
  }
  static void set_has_textvariant(HasBits* has_bits) {
    (*has_bits)[1] |= 4u;
  }
  static const ::TEWidgetDescription& widgetdescription(const TVariant* msg);
  static void set_has_widgetdescription(HasBits* has_bits) {
    (*has_bits)[0] |= 1024u;
  }
};

const ::TNumericValue&
TVariant::_Internal::numeric(const TVariant* msg) {
  return *msg->_impl_.numeric_;
}
const ::TIdentifier&
TVariant::_Internal::identifier(const TVariant* msg) {
  return *msg->_impl_.identifier_;
}
const ::TAxisAlignedBoundingBox&
TVariant::_Internal::aabb(const TVariant* msg) {
  return *msg->_impl_.aabb_;
}
const ::TAlignment&
TVariant::_Internal::alignment(const TVariant* msg) {
  return *msg->_impl_.alignment_;
}
const ::TEWidgetDescription&
TVariant::_Internal::widgetdescription(const TVariant* msg) {
  return *msg->_impl_.widgetdescription_;
}
void TVariant::clear_numeric() {
  if (_impl_.numeric_ != nullptr) _impl_.numeric_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void TVariant::clear_aabb() {
  if (_impl_.aabb_ != nullptr) _impl_.aabb_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
TVariant::TVariant(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TVariant)
}
TVariant::TVariant(const TVariant& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TVariant* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asciistring_){}
    , decltype(_impl_.hmistring_){}
    , decltype(_impl_.utf8string_){}
    , decltype(_impl_.resourceid_){}
    , decltype(_impl_.assetid_){}
    , decltype(_impl_.utf32string_){}
    , decltype(_impl_.numeric_){nullptr}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.aabb_){nullptr}
    , decltype(_impl_.alignment_){nullptr}
    , decltype(_impl_.widgetdescription_){nullptr}
    , decltype(_impl_.bool__){}
    , decltype(_impl_.color_){}
    , decltype(_impl_.identifiertype_){}
    , decltype(_impl_.stringid_){}
    , decltype(_impl_.resourceidnumeric_){}
    , decltype(_impl_.orientation_){}
    , decltype(_impl_.sizepolicy_){}
    , decltype(_impl_.inputmodality_){}
    , decltype(_impl_.daytime_){}
    , decltype(_impl_.screenlocation_){}
    , decltype(_impl_.activecategory_){}
    , decltype(_impl_.controllertype_){}
    , decltype(_impl_.cursortype_){}
    , decltype(_impl_.fontid_){}
    , decltype(_impl_.textalignment_){}
    , decltype(_impl_.textcut_){}
    , decltype(_impl_.textformat_){}
    , decltype(_impl_.touchevent_){}
    , decltype(_impl_.scrollareadirection_){}
    , decltype(_impl_.fontstyle_){}
    , decltype(_impl_.scrollbarposition_){}
    , decltype(_impl_.scalaralignment_){}
    , decltype(_impl_.layoutsearchroot_){}
    , decltype(_impl_.textvariant_){}
    , decltype(_impl_.face_){}
    , decltype(_impl_.winding_){}
    , decltype(_impl_.comparefunction_){}
    , decltype(_impl_.blendfactor_){}
    , decltype(_impl_.blendoperation_){}
    , decltype(_impl_.stenciloperation_){}
    , decltype(_impl_.texturefilter_){}
    , decltype(_impl_.texturewrapmode_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_.asciistring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asciistring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_asciistring()) {
    _this->_impl_.asciistring_.Set(from._internal_asciistring(), 
      _this->GetArenaForAllocation());
  }
  _impl_.hmistring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmistring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_hmistring()) {
    _this->_impl_.hmistring_.Set(from._internal_hmistring(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utf8string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utf8string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_utf8string()) {
    _this->_impl_.utf8string_.Set(from._internal_utf8string(), 
      _this->GetArenaForAllocation());
  }
  _impl_.resourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_resourceid()) {
    _this->_impl_.resourceid_.Set(from._internal_resourceid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.assetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_assetid()) {
    _this->_impl_.assetid_.Set(from._internal_assetid(), 
      _this->GetArenaForAllocation());
  }
  _impl_.utf32string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utf32string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (from._internal_has_utf32string()) {
    _this->_impl_.utf32string_.Set(from._internal_utf32string(), 
      _this->GetArenaForAllocation());
  }
  if (from._internal_has_numeric()) {
    _this->_impl_.numeric_ = new ::TNumericValue(*from._impl_.numeric_);
  }
  if (from._internal_has_identifier()) {
    _this->_impl_.identifier_ = new ::TIdentifier(*from._impl_.identifier_);
  }
  if (from._internal_has_aabb()) {
    _this->_impl_.aabb_ = new ::TAxisAlignedBoundingBox(*from._impl_.aabb_);
  }
  if (from._internal_has_alignment()) {
    _this->_impl_.alignment_ = new ::TAlignment(*from._impl_.alignment_);
  }
  if (from._internal_has_widgetdescription()) {
    _this->_impl_.widgetdescription_ = new ::TEWidgetDescription(*from._impl_.widgetdescription_);
  }
  ::memcpy(&_impl_.bool__, &from._impl_.bool__,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.texturewrapmode_) -
    reinterpret_cast<char*>(&_impl_.bool__)) + sizeof(_impl_.texturewrapmode_));
  // @@protoc_insertion_point(copy_constructor:TVariant)
}

inline void TVariant::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.asciistring_){}
    , decltype(_impl_.hmistring_){}
    , decltype(_impl_.utf8string_){}
    , decltype(_impl_.resourceid_){}
    , decltype(_impl_.assetid_){}
    , decltype(_impl_.utf32string_){}
    , decltype(_impl_.numeric_){nullptr}
    , decltype(_impl_.identifier_){nullptr}
    , decltype(_impl_.aabb_){nullptr}
    , decltype(_impl_.alignment_){nullptr}
    , decltype(_impl_.widgetdescription_){nullptr}
    , decltype(_impl_.bool__){false}
    , decltype(_impl_.color_){0u}
    , decltype(_impl_.identifiertype_){0}
    , decltype(_impl_.stringid_){0u}
    , decltype(_impl_.resourceidnumeric_){0u}
    , decltype(_impl_.orientation_){0}
    , decltype(_impl_.sizepolicy_){0}
    , decltype(_impl_.inputmodality_){0}
    , decltype(_impl_.daytime_){0}
    , decltype(_impl_.screenlocation_){0}
    , decltype(_impl_.activecategory_){0}
    , decltype(_impl_.controllertype_){0}
    , decltype(_impl_.cursortype_){0}
    , decltype(_impl_.fontid_){0}
    , decltype(_impl_.textalignment_){0}
    , decltype(_impl_.textcut_){0}
    , decltype(_impl_.textformat_){0}
    , decltype(_impl_.touchevent_){0}
    , decltype(_impl_.scrollareadirection_){0}
    , decltype(_impl_.fontstyle_){0}
    , decltype(_impl_.scrollbarposition_){0}
    , decltype(_impl_.scalaralignment_){0}
    , decltype(_impl_.layoutsearchroot_){0}
    , decltype(_impl_.textvariant_){0}
    , decltype(_impl_.face_){1}
    , decltype(_impl_.winding_){1}
    , decltype(_impl_.comparefunction_){1}
    , decltype(_impl_.blendfactor_){1}
    , decltype(_impl_.blendoperation_){1}
    , decltype(_impl_.stenciloperation_){1}
    , decltype(_impl_.texturefilter_){1}
    , decltype(_impl_.texturewrapmode_){1}
  };
  _impl_.asciistring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.asciistring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.hmistring_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.hmistring_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utf8string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utf8string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.resourceid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.resourceid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.assetid_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.assetid_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  _impl_.utf32string_.InitDefault();
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    _impl_.utf32string_.Set("", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

TVariant::~TVariant() {
  // @@protoc_insertion_point(destructor:TVariant)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TVariant::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.asciistring_.Destroy();
  _impl_.hmistring_.Destroy();
  _impl_.utf8string_.Destroy();
  _impl_.resourceid_.Destroy();
  _impl_.assetid_.Destroy();
  _impl_.utf32string_.Destroy();
  if (this != internal_default_instance()) delete _impl_.numeric_;
  if (this != internal_default_instance()) delete _impl_.identifier_;
  if (this != internal_default_instance()) delete _impl_.aabb_;
  if (this != internal_default_instance()) delete _impl_.alignment_;
  if (this != internal_default_instance()) delete _impl_.widgetdescription_;
}

void TVariant::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TVariant::Clear() {
// @@protoc_insertion_point(message_clear_start:TVariant)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.asciistring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.hmistring_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000004u) {
      _impl_.utf8string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000008u) {
      _impl_.resourceid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000010u) {
      _impl_.assetid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000020u) {
      _impl_.utf32string_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000040u) {
      GOOGLE_DCHECK(_impl_.numeric_ != nullptr);
      _impl_.numeric_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      GOOGLE_DCHECK(_impl_.identifier_ != nullptr);
      _impl_.identifier_->Clear();
    }
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      GOOGLE_DCHECK(_impl_.aabb_ != nullptr);
      _impl_.aabb_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      GOOGLE_DCHECK(_impl_.alignment_ != nullptr);
      _impl_.alignment_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      GOOGLE_DCHECK(_impl_.widgetdescription_ != nullptr);
      _impl_.widgetdescription_->Clear();
    }
  }
  if (cached_has_bits & 0x0000f800u) {
    ::memset(&_impl_.bool__, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.resourceidnumeric_) -
        reinterpret_cast<char*>(&_impl_.bool__)) + sizeof(_impl_.resourceidnumeric_));
  }
  if (cached_has_bits & 0x00ff0000u) {
    ::memset(&_impl_.orientation_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.cursortype_) -
        reinterpret_cast<char*>(&_impl_.orientation_)) + sizeof(_impl_.cursortype_));
  }
  if (cached_has_bits & 0xff000000u) {
    ::memset(&_impl_.fontid_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.scrollbarposition_) -
        reinterpret_cast<char*>(&_impl_.fontid_)) + sizeof(_impl_.scrollbarposition_));
  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    ::memset(&_impl_.scalaralignment_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.textvariant_) -
        reinterpret_cast<char*>(&_impl_.scalaralignment_)) + sizeof(_impl_.textvariant_));
    _impl_.face_ = 1;
    _impl_.winding_ = 1;
    _impl_.comparefunction_ = 1;
    _impl_.blendfactor_ = 1;
    _impl_.blendoperation_ = 1;
  }
  if (cached_has_bits & 0x00000700u) {
    _impl_.stenciloperation_ = 1;
    _impl_.texturefilter_ = 1;
    _impl_.texturewrapmode_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVariant::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional bool Bool = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          _Internal::set_has_bool_(&_impl_._has_bits_);
          _impl_.bool__ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string AsciiString = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_asciistring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TVariant.AsciiString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string HmiString = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_hmistring();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TVariant.HmiString");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional fixed32 Color = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_color(&_impl_._has_bits_);
          _impl_.color_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .TNumericValue Numeric = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_numeric(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TEIdentifierType IdentifierType = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 48)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEIdentifierType_IsValid(val))) {
            _internal_set_identifiertype(static_cast<::TEIdentifierType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(6, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TIdentifier Identifier = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_identifier(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TAxisAlignedBoundingBox AABB = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_aabb(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Utf8String = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          auto str = _internal_mutable_utf8string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TVariant.Utf8String");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string ResourceId = 10;
      case 10:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 82)) {
          auto str = _internal_mutable_resourceid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TVariant.ResourceId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional string AssetId = 11;
      case 11:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 90)) {
          auto str = _internal_mutable_assetid();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TVariant.AssetId");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional uint32 StringId = 12;
      case 12:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          _Internal::set_has_stringid(&_impl_._has_bits_);
          _impl_.stringid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 ResourceIdNumeric = 13;
      case 13:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          _Internal::set_has_resourceidnumeric(&_impl_._has_bits_);
          _impl_.resourceidnumeric_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional string Utf32String = 14;
      case 14:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 114)) {
          auto str = _internal_mutable_utf32string();
          ptr = ::_pbi::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
          #ifndef NDEBUG
          ::_pbi::VerifyUTF8(str, "TVariant.Utf32String");
          #endif  // !NDEBUG
        } else
          goto handle_unusual;
        continue;
      // optional .TAlignment Alignment = 20;
      case 20:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 162)) {
          ptr = ctx->ParseMessage(_internal_mutable_alignment(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TELayoutOrientation Orientation = 40;
      case 40:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 64)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TELayoutOrientation_IsValid(val))) {
            _internal_set_orientation(static_cast<::TELayoutOrientation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(40, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TESizePolicy SizePolicy = 41;
      case 41:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 72)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TESizePolicy_IsValid(val))) {
            _internal_set_sizepolicy(static_cast<::TESizePolicy>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(41, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEInputModality InputModality = 42;
      case 42:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 80)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEInputModality_IsValid(val))) {
            _internal_set_inputmodality(static_cast<::TEInputModality>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(42, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEDayTime DayTime = 43;
      case 43:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 88)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEDayTime_IsValid(val))) {
            _internal_set_daytime(static_cast<::TEDayTime>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(43, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEScreenLocation ScreenLocation = 44;
      case 44:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 96)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEScreenLocation_IsValid(val))) {
            _internal_set_screenlocation(static_cast<::TEScreenLocation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(44, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEActiveCategory ActiveCategory = 45;
      case 45:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 104)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEActiveCategory_IsValid(val))) {
            _internal_set_activecategory(static_cast<::TEActiveCategory>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(45, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEControllerType ControllerType = 46;
      case 46:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 112)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEControllerType_IsValid(val))) {
            _internal_set_controllertype(static_cast<::TEControllerType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(46, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TECursorType CursorType = 47;
      case 47:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 120)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TECursorType_IsValid(val))) {
            _internal_set_cursortype(static_cast<::TECursorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(47, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEFace Face = 48;
      case 48:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 128)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEFace_IsValid(val))) {
            _internal_set_face(static_cast<::TEFace>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(48, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEWinding Winding = 49;
      case 49:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 136)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEWinding_IsValid(val))) {
            _internal_set_winding(static_cast<::TEWinding>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(49, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TECompareFunction CompareFunction = 50;
      case 50:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 144)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TECompareFunction_IsValid(val))) {
            _internal_set_comparefunction(static_cast<::TECompareFunction>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(50, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEBlendFactor BlendFactor = 51;
      case 51:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 152)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEBlendFactor_IsValid(val))) {
            _internal_set_blendfactor(static_cast<::TEBlendFactor>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(51, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEBlendOperation BlendOperation = 52;
      case 52:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 160)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEBlendOperation_IsValid(val))) {
            _internal_set_blendoperation(static_cast<::TEBlendOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(52, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEStencilOperation StencilOperation = 53;
      case 53:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 168)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEStencilOperation_IsValid(val))) {
            _internal_set_stenciloperation(static_cast<::TEStencilOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(53, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TETextureFilter TextureFilter = 54;
      case 54:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 176)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TETextureFilter_IsValid(val))) {
            _internal_set_texturefilter(static_cast<::TETextureFilter>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(54, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TETextureWrapMode TextureWrapMode = 55;
      case 55:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 184)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TETextureWrapMode_IsValid(val))) {
            _internal_set_texturewrapmode(static_cast<::TETextureWrapMode>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(55, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEFontId FontId = 56;
      case 56:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 192)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEFontId_IsValid(val))) {
            _internal_set_fontid(static_cast<::TEFontId>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(56, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TETextAlignment TextAlignment = 57;
      case 57:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 200)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TETextAlignment_IsValid(val))) {
            _internal_set_textalignment(static_cast<::TETextAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(57, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TETextCuttingStyle TextCut = 58;
      case 58:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 208)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TETextCuttingStyle_IsValid(val))) {
            _internal_set_textcut(static_cast<::TETextCuttingStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(58, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TETextFormat TextFormat = 59;
      case 59:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 216)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TETextFormat_IsValid(val))) {
            _internal_set_textformat(static_cast<::TETextFormat>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(59, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TETouchEvent TouchEvent = 60;
      case 60:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 224)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TETouchEvent_IsValid(val))) {
            _internal_set_touchevent(static_cast<::TETouchEvent>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(60, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEScrollAreaDirection ScrollAreaDirection = 61;
      case 61:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 232)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEScrollAreaDirection_IsValid(val))) {
            _internal_set_scrollareadirection(static_cast<::TEScrollAreaDirection>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(61, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEFontStyle FontStyle = 62;
      case 62:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 240)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEFontStyle_IsValid(val))) {
            _internal_set_fontstyle(static_cast<::TEFontStyle>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(62, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEScrollbarPosition ScrollbarPosition = 63;
      case 63:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 248)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEScrollbarPosition_IsValid(val))) {
            _internal_set_scrollbarposition(static_cast<::TEScrollbarPosition>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(63, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEAlignment ScalarAlignment = 64;
      case 64:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 0)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEAlignment_IsValid(val))) {
            _internal_set_scalaralignment(static_cast<::TEAlignment>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(64, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TESceneGraphSearchRoot LayoutSearchRoot = 65;
      case 65:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TESceneGraphSearchRoot_IsValid(val))) {
            _internal_set_layoutsearchroot(static_cast<::TESceneGraphSearchRoot>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(65, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TETextVariant TextVariant = 66;
      case 66:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TETextVariant_IsValid(val))) {
            _internal_set_textvariant(static_cast<::TETextVariant>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(66, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TEWidgetDescription WidgetDescription = 67;
      case 67:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_widgetdescription(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVariant::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TVariant)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional bool Bool = 1;
  if (cached_has_bits & 0x00000800u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(1, this->_internal_bool_(), target);
  }

  // optional string AsciiString = 2;
  if (cached_has_bits & 0x00000001u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_asciistring().data(), static_cast<int>(this->_internal_asciistring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TVariant.AsciiString");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_asciistring(), target);
  }

  // optional string HmiString = 3;
  if (cached_has_bits & 0x00000002u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_hmistring().data(), static_cast<int>(this->_internal_hmistring().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TVariant.HmiString");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_hmistring(), target);
  }

  // optional fixed32 Color = 4;
  if (cached_has_bits & 0x00001000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(4, this->_internal_color(), target);
  }

  // optional .TNumericValue Numeric = 5;
  if (cached_has_bits & 0x00000040u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::numeric(this),
        _Internal::numeric(this).GetCachedSize(), target, stream);
  }

  // optional .TEIdentifierType IdentifierType = 6;
  if (cached_has_bits & 0x00002000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      6, this->_internal_identifiertype(), target);
  }

  // optional .TIdentifier Identifier = 7;
  if (cached_has_bits & 0x00000080u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::identifier(this),
        _Internal::identifier(this).GetCachedSize(), target, stream);
  }

  // optional .TAxisAlignedBoundingBox AABB = 8;
  if (cached_has_bits & 0x00000100u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::aabb(this),
        _Internal::aabb(this).GetCachedSize(), target, stream);
  }

  // optional string Utf8String = 9;
  if (cached_has_bits & 0x00000004u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_utf8string().data(), static_cast<int>(this->_internal_utf8string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TVariant.Utf8String");
    target = stream->WriteStringMaybeAliased(
        9, this->_internal_utf8string(), target);
  }

  // optional string ResourceId = 10;
  if (cached_has_bits & 0x00000008u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_resourceid().data(), static_cast<int>(this->_internal_resourceid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TVariant.ResourceId");
    target = stream->WriteStringMaybeAliased(
        10, this->_internal_resourceid(), target);
  }

  // optional string AssetId = 11;
  if (cached_has_bits & 0x00000010u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_assetid().data(), static_cast<int>(this->_internal_assetid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TVariant.AssetId");
    target = stream->WriteStringMaybeAliased(
        11, this->_internal_assetid(), target);
  }

  // optional uint32 StringId = 12;
  if (cached_has_bits & 0x00004000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(12, this->_internal_stringid(), target);
  }

  // optional uint32 ResourceIdNumeric = 13;
  if (cached_has_bits & 0x00008000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(13, this->_internal_resourceidnumeric(), target);
  }

  // optional string Utf32String = 14;
  if (cached_has_bits & 0x00000020u) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::VerifyUTF8StringNamedField(
      this->_internal_utf32string().data(), static_cast<int>(this->_internal_utf32string().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::SERIALIZE,
      "TVariant.Utf32String");
    target = stream->WriteStringMaybeAliased(
        14, this->_internal_utf32string(), target);
  }

  // optional .TAlignment Alignment = 20;
  if (cached_has_bits & 0x00000200u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(20, _Internal::alignment(this),
        _Internal::alignment(this).GetCachedSize(), target, stream);
  }

  // optional .TELayoutOrientation Orientation = 40;
  if (cached_has_bits & 0x00010000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      40, this->_internal_orientation(), target);
  }

  // optional .TESizePolicy SizePolicy = 41;
  if (cached_has_bits & 0x00020000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      41, this->_internal_sizepolicy(), target);
  }

  // optional .TEInputModality InputModality = 42;
  if (cached_has_bits & 0x00040000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      42, this->_internal_inputmodality(), target);
  }

  // optional .TEDayTime DayTime = 43;
  if (cached_has_bits & 0x00080000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      43, this->_internal_daytime(), target);
  }

  // optional .TEScreenLocation ScreenLocation = 44;
  if (cached_has_bits & 0x00100000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      44, this->_internal_screenlocation(), target);
  }

  // optional .TEActiveCategory ActiveCategory = 45;
  if (cached_has_bits & 0x00200000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      45, this->_internal_activecategory(), target);
  }

  // optional .TEControllerType ControllerType = 46;
  if (cached_has_bits & 0x00400000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      46, this->_internal_controllertype(), target);
  }

  // optional .TECursorType CursorType = 47;
  if (cached_has_bits & 0x00800000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      47, this->_internal_cursortype(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TEFace Face = 48;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      48, this->_internal_face(), target);
  }

  // optional .TEWinding Winding = 49;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      49, this->_internal_winding(), target);
  }

  // optional .TECompareFunction CompareFunction = 50;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      50, this->_internal_comparefunction(), target);
  }

  // optional .TEBlendFactor BlendFactor = 51;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      51, this->_internal_blendfactor(), target);
  }

  // optional .TEBlendOperation BlendOperation = 52;
  if (cached_has_bits & 0x00000080u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      52, this->_internal_blendoperation(), target);
  }

  // optional .TEStencilOperation StencilOperation = 53;
  if (cached_has_bits & 0x00000100u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      53, this->_internal_stenciloperation(), target);
  }

  // optional .TETextureFilter TextureFilter = 54;
  if (cached_has_bits & 0x00000200u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      54, this->_internal_texturefilter(), target);
  }

  // optional .TETextureWrapMode TextureWrapMode = 55;
  if (cached_has_bits & 0x00000400u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      55, this->_internal_texturewrapmode(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TEFontId FontId = 56;
  if (cached_has_bits & 0x01000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      56, this->_internal_fontid(), target);
  }

  // optional .TETextAlignment TextAlignment = 57;
  if (cached_has_bits & 0x02000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      57, this->_internal_textalignment(), target);
  }

  // optional .TETextCuttingStyle TextCut = 58;
  if (cached_has_bits & 0x04000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      58, this->_internal_textcut(), target);
  }

  // optional .TETextFormat TextFormat = 59;
  if (cached_has_bits & 0x08000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      59, this->_internal_textformat(), target);
  }

  // optional .TETouchEvent TouchEvent = 60;
  if (cached_has_bits & 0x10000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      60, this->_internal_touchevent(), target);
  }

  // optional .TEScrollAreaDirection ScrollAreaDirection = 61;
  if (cached_has_bits & 0x20000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      61, this->_internal_scrollareadirection(), target);
  }

  // optional .TEFontStyle FontStyle = 62;
  if (cached_has_bits & 0x40000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      62, this->_internal_fontstyle(), target);
  }

  // optional .TEScrollbarPosition ScrollbarPosition = 63;
  if (cached_has_bits & 0x80000000u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      63, this->_internal_scrollbarposition(), target);
  }

  cached_has_bits = _impl_._has_bits_[1];
  // optional .TEAlignment ScalarAlignment = 64;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      64, this->_internal_scalaralignment(), target);
  }

  // optional .TESceneGraphSearchRoot LayoutSearchRoot = 65;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      65, this->_internal_layoutsearchroot(), target);
  }

  // optional .TETextVariant TextVariant = 66;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      66, this->_internal_textvariant(), target);
  }

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TEWidgetDescription WidgetDescription = 67;
  if (cached_has_bits & 0x00000400u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(67, _Internal::widgetdescription(this),
        _Internal::widgetdescription(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TVariant)
  return target;
}

size_t TVariant::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TVariant)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    // optional string AsciiString = 2;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_asciistring());
    }

    // optional string HmiString = 3;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_hmistring());
    }

    // optional string Utf8String = 9;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_utf8string());
    }

    // optional string ResourceId = 10;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_resourceid());
    }

    // optional string AssetId = 11;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_assetid());
    }

    // optional string Utf32String = 14;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
          this->_internal_utf32string());
    }

    // optional .TNumericValue Numeric = 5;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.numeric_);
    }

    // optional .TIdentifier Identifier = 7;
    if (cached_has_bits & 0x00000080u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.identifier_);
    }

  }
  if (cached_has_bits & 0x0000ff00u) {
    // optional .TAxisAlignedBoundingBox AABB = 8;
    if (cached_has_bits & 0x00000100u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.aabb_);
    }

    // optional .TAlignment Alignment = 20;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.alignment_);
    }

    // optional .TEWidgetDescription WidgetDescription = 67;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.widgetdescription_);
    }

    // optional bool Bool = 1;
    if (cached_has_bits & 0x00000800u) {
      total_size += 1 + 1;
    }

    // optional fixed32 Color = 4;
    if (cached_has_bits & 0x00001000u) {
      total_size += 1 + 4;
    }

    // optional .TEIdentifierType IdentifierType = 6;
    if (cached_has_bits & 0x00002000u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_identifiertype());
    }

    // optional uint32 StringId = 12;
    if (cached_has_bits & 0x00004000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_stringid());
    }

    // optional uint32 ResourceIdNumeric = 13;
    if (cached_has_bits & 0x00008000u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_resourceidnumeric());
    }

  }
  if (cached_has_bits & 0x00ff0000u) {
    // optional .TELayoutOrientation Orientation = 40;
    if (cached_has_bits & 0x00010000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_orientation());
    }

    // optional .TESizePolicy SizePolicy = 41;
    if (cached_has_bits & 0x00020000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_sizepolicy());
    }

    // optional .TEInputModality InputModality = 42;
    if (cached_has_bits & 0x00040000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_inputmodality());
    }

    // optional .TEDayTime DayTime = 43;
    if (cached_has_bits & 0x00080000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_daytime());
    }

    // optional .TEScreenLocation ScreenLocation = 44;
    if (cached_has_bits & 0x00100000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_screenlocation());
    }

    // optional .TEActiveCategory ActiveCategory = 45;
    if (cached_has_bits & 0x00200000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_activecategory());
    }

    // optional .TEControllerType ControllerType = 46;
    if (cached_has_bits & 0x00400000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_controllertype());
    }

    // optional .TECursorType CursorType = 47;
    if (cached_has_bits & 0x00800000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_cursortype());
    }

  }
  if (cached_has_bits & 0xff000000u) {
    // optional .TEFontId FontId = 56;
    if (cached_has_bits & 0x01000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fontid());
    }

    // optional .TETextAlignment TextAlignment = 57;
    if (cached_has_bits & 0x02000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_textalignment());
    }

    // optional .TETextCuttingStyle TextCut = 58;
    if (cached_has_bits & 0x04000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_textcut());
    }

    // optional .TETextFormat TextFormat = 59;
    if (cached_has_bits & 0x08000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_textformat());
    }

    // optional .TETouchEvent TouchEvent = 60;
    if (cached_has_bits & 0x10000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_touchevent());
    }

    // optional .TEScrollAreaDirection ScrollAreaDirection = 61;
    if (cached_has_bits & 0x20000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scrollareadirection());
    }

    // optional .TEFontStyle FontStyle = 62;
    if (cached_has_bits & 0x40000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_fontstyle());
    }

    // optional .TEScrollbarPosition ScrollbarPosition = 63;
    if (cached_has_bits & 0x80000000u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scrollbarposition());
    }

  }
  cached_has_bits = _impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    // optional .TEAlignment ScalarAlignment = 64;
    if (cached_has_bits & 0x00000001u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_scalaralignment());
    }

    // optional .TESceneGraphSearchRoot LayoutSearchRoot = 65;
    if (cached_has_bits & 0x00000002u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_layoutsearchroot());
    }

    // optional .TETextVariant TextVariant = 66;
    if (cached_has_bits & 0x00000004u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_textvariant());
    }

    // optional .TEFace Face = 48;
    if (cached_has_bits & 0x00000008u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_face());
    }

    // optional .TEWinding Winding = 49;
    if (cached_has_bits & 0x00000010u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_winding());
    }

    // optional .TECompareFunction CompareFunction = 50;
    if (cached_has_bits & 0x00000020u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_comparefunction());
    }

    // optional .TEBlendFactor BlendFactor = 51;
    if (cached_has_bits & 0x00000040u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_blendfactor());
    }

    // optional .TEBlendOperation BlendOperation = 52;
    if (cached_has_bits & 0x00000080u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_blendoperation());
    }

  }
  if (cached_has_bits & 0x00000700u) {
    // optional .TEStencilOperation StencilOperation = 53;
    if (cached_has_bits & 0x00000100u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_stenciloperation());
    }

    // optional .TETextureFilter TextureFilter = 54;
    if (cached_has_bits & 0x00000200u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_texturefilter());
    }

    // optional .TETextureWrapMode TextureWrapMode = 55;
    if (cached_has_bits & 0x00000400u) {
      total_size += 2 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_texturewrapmode());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVariant::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TVariant::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVariant::GetClassData() const { return &_class_data_; }


void TVariant::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TVariant*>(&to_msg);
  auto& from = static_cast<const TVariant&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TVariant)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_asciistring(from._internal_asciistring());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_hmistring(from._internal_hmistring());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_set_utf8string(from._internal_utf8string());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_set_resourceid(from._internal_resourceid());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_set_assetid(from._internal_assetid());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_internal_set_utf32string(from._internal_utf32string());
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_internal_mutable_numeric()->::TNumericValue::MergeFrom(
          from._internal_numeric());
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_internal_mutable_identifier()->::TIdentifier::MergeFrom(
          from._internal_identifier());
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_internal_mutable_aabb()->::TAxisAlignedBoundingBox::MergeFrom(
          from._internal_aabb());
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_internal_mutable_alignment()->::TAlignment::MergeFrom(
          from._internal_alignment());
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_internal_mutable_widgetdescription()->::TEWidgetDescription::MergeFrom(
          from._internal_widgetdescription());
    }
    if (cached_has_bits & 0x00000800u) {
      _this->_impl_.bool__ = from._impl_.bool__;
    }
    if (cached_has_bits & 0x00001000u) {
      _this->_impl_.color_ = from._impl_.color_;
    }
    if (cached_has_bits & 0x00002000u) {
      _this->_impl_.identifiertype_ = from._impl_.identifiertype_;
    }
    if (cached_has_bits & 0x00004000u) {
      _this->_impl_.stringid_ = from._impl_.stringid_;
    }
    if (cached_has_bits & 0x00008000u) {
      _this->_impl_.resourceidnumeric_ = from._impl_.resourceidnumeric_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00ff0000u) {
    if (cached_has_bits & 0x00010000u) {
      _this->_impl_.orientation_ = from._impl_.orientation_;
    }
    if (cached_has_bits & 0x00020000u) {
      _this->_impl_.sizepolicy_ = from._impl_.sizepolicy_;
    }
    if (cached_has_bits & 0x00040000u) {
      _this->_impl_.inputmodality_ = from._impl_.inputmodality_;
    }
    if (cached_has_bits & 0x00080000u) {
      _this->_impl_.daytime_ = from._impl_.daytime_;
    }
    if (cached_has_bits & 0x00100000u) {
      _this->_impl_.screenlocation_ = from._impl_.screenlocation_;
    }
    if (cached_has_bits & 0x00200000u) {
      _this->_impl_.activecategory_ = from._impl_.activecategory_;
    }
    if (cached_has_bits & 0x00400000u) {
      _this->_impl_.controllertype_ = from._impl_.controllertype_;
    }
    if (cached_has_bits & 0x00800000u) {
      _this->_impl_.cursortype_ = from._impl_.cursortype_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  if (cached_has_bits & 0xff000000u) {
    if (cached_has_bits & 0x01000000u) {
      _this->_impl_.fontid_ = from._impl_.fontid_;
    }
    if (cached_has_bits & 0x02000000u) {
      _this->_impl_.textalignment_ = from._impl_.textalignment_;
    }
    if (cached_has_bits & 0x04000000u) {
      _this->_impl_.textcut_ = from._impl_.textcut_;
    }
    if (cached_has_bits & 0x08000000u) {
      _this->_impl_.textformat_ = from._impl_.textformat_;
    }
    if (cached_has_bits & 0x10000000u) {
      _this->_impl_.touchevent_ = from._impl_.touchevent_;
    }
    if (cached_has_bits & 0x20000000u) {
      _this->_impl_.scrollareadirection_ = from._impl_.scrollareadirection_;
    }
    if (cached_has_bits & 0x40000000u) {
      _this->_impl_.fontstyle_ = from._impl_.fontstyle_;
    }
    if (cached_has_bits & 0x80000000u) {
      _this->_impl_.scrollbarposition_ = from._impl_.scrollbarposition_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  cached_has_bits = from._impl_._has_bits_[1];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.scalaralignment_ = from._impl_.scalaralignment_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.layoutsearchroot_ = from._impl_.layoutsearchroot_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.textvariant_ = from._impl_.textvariant_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.face_ = from._impl_.face_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.winding_ = from._impl_.winding_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.comparefunction_ = from._impl_.comparefunction_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.blendfactor_ = from._impl_.blendfactor_;
    }
    if (cached_has_bits & 0x00000080u) {
      _this->_impl_.blendoperation_ = from._impl_.blendoperation_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  if (cached_has_bits & 0x00000700u) {
    if (cached_has_bits & 0x00000100u) {
      _this->_impl_.stenciloperation_ = from._impl_.stenciloperation_;
    }
    if (cached_has_bits & 0x00000200u) {
      _this->_impl_.texturefilter_ = from._impl_.texturefilter_;
    }
    if (cached_has_bits & 0x00000400u) {
      _this->_impl_.texturewrapmode_ = from._impl_.texturewrapmode_;
    }
    _this->_impl_._has_bits_[1] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVariant::CopyFrom(const TVariant& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TVariant)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVariant::IsInitialized() const {
  if (_internal_has_numeric()) {
    if (!_impl_.numeric_->IsInitialized()) return false;
  }
  if (_internal_has_aabb()) {
    if (!_impl_.aabb_->IsInitialized()) return false;
  }
  return true;
}

void TVariant::InternalSwap(TVariant* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_._has_bits_[1], other->_impl_._has_bits_[1]);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.asciistring_, lhs_arena,
      &other->_impl_.asciistring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.hmistring_, lhs_arena,
      &other->_impl_.hmistring_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utf8string_, lhs_arena,
      &other->_impl_.utf8string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.resourceid_, lhs_arena,
      &other->_impl_.resourceid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.assetid_, lhs_arena,
      &other->_impl_.assetid_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &_impl_.utf32string_, lhs_arena,
      &other->_impl_.utf32string_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TVariant, _impl_.textvariant_)
      + sizeof(TVariant::_impl_.textvariant_)
      - PROTOBUF_FIELD_OFFSET(TVariant, _impl_.numeric_)>(
          reinterpret_cast<char*>(&_impl_.numeric_),
          reinterpret_cast<char*>(&other->_impl_.numeric_));
  swap(_impl_.face_, other->_impl_.face_);
  swap(_impl_.winding_, other->_impl_.winding_);
  swap(_impl_.comparefunction_, other->_impl_.comparefunction_);
  swap(_impl_.blendfactor_, other->_impl_.blendfactor_);
  swap(_impl_.blendoperation_, other->_impl_.blendoperation_);
  swap(_impl_.stenciloperation_, other->_impl_.stenciloperation_);
  swap(_impl_.texturefilter_, other->_impl_.texturefilter_);
  swap(_impl_.texturewrapmode_, other->_impl_.texturewrapmode_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TVariant::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[2]);
}

// ===================================================================

class TEWidgetDescription::_Internal {
 public:
};

TEWidgetDescription::TEWidgetDescription(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase(arena, is_message_owned) {
  // @@protoc_insertion_point(arena_constructor:TEWidgetDescription)
}
TEWidgetDescription::TEWidgetDescription(const TEWidgetDescription& from)
  : ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase() {
  TEWidgetDescription* const _this = this; (void)_this;
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:TEWidgetDescription)
}





const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TEWidgetDescription::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::CopyImpl,
    ::PROTOBUF_NAMESPACE_ID::internal::ZeroFieldsBase::MergeImpl,
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TEWidgetDescription::GetClassData() const { return &_class_data_; }







::PROTOBUF_NAMESPACE_ID::Metadata TEWidgetDescription::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_Common_2eproto_getter, &descriptor_table_Common_2eproto_once,
      file_level_metadata_Common_2eproto[3]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TIdentifier*
Arena::CreateMaybeMessage< ::TIdentifier >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TIdentifier >(arena);
}
template<> PROTOBUF_NOINLINE ::TAlignment*
Arena::CreateMaybeMessage< ::TAlignment >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TAlignment >(arena);
}
template<> PROTOBUF_NOINLINE ::TVariant*
Arena::CreateMaybeMessage< ::TVariant >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TVariant >(arena);
}
template<> PROTOBUF_NOINLINE ::TEWidgetDescription*
Arena::CreateMaybeMessage< ::TEWidgetDescription >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TEWidgetDescription >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
