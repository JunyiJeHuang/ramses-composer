// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HmiBase.proto

#include "proto/HmiBase.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG

namespace _pb = ::PROTOBUF_NAMESPACE_ID;
namespace _pbi = _pb::internal;

PROTOBUF_CONSTEXPR TVariantFlag::TVariantFlag(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.operand1_)*/nullptr
  , /*decltype(_impl_.operand2_)*/nullptr
  , /*decltype(_impl_.value_)*/0u
  , /*decltype(_impl_.operation_)*/1} {}
struct TVariantFlagDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TVariantFlagDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TVariantFlagDefaultTypeInternal() {}
  union {
    TVariantFlag _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TVariantFlagDefaultTypeInternal _TVariantFlag_default_instance_;
PROTOBUF_CONSTEXPR TDataBinding::TDataBinding(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.key_)*/nullptr
  , /*decltype(_impl_.provider_)*/nullptr} {}
struct TDataBindingDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDataBindingDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDataBindingDefaultTypeInternal() {}
  union {
    TDataBinding _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDataBindingDefaultTypeInternal _TDataBinding_default_instance_;
PROTOBUF_CONSTEXPR TDataProvider::TDataProvider(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._extensions_)*/{}
  , /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.variant_)*/nullptr
  , /*decltype(_impl_.operation_)*/nullptr
  , /*decltype(_impl_.lightweightanimation_)*/nullptr
  , /*decltype(_impl_.entryexitanimation_)*/nullptr
  , /*decltype(_impl_.loopanimation_)*/nullptr
  , /*decltype(_impl_.source_)*/0} {}
struct TDataProviderDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TDataProviderDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TDataProviderDefaultTypeInternal() {}
  union {
    TDataProvider _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TDataProviderDefaultTypeInternal _TDataProvider_default_instance_;
PROTOBUF_CONSTEXPR TOperation::TOperation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.datatype_)*/{}
  , /*decltype(_impl_.operand_)*/{}
  , /*decltype(_impl_.operator__)*/0} {}
struct TOperationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TOperationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TOperationDefaultTypeInternal() {}
  union {
    TOperation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TOperationDefaultTypeInternal _TOperation_default_instance_;
PROTOBUF_CONSTEXPR TLightweightAnimation::TLightweightAnimation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.target_)*/nullptr
  , /*decltype(_impl_.skip_)*/nullptr
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.init_)*/0
  , /*decltype(_impl_.distance_)*/0
  , /*decltype(_impl_.updateinterval_)*/0u
  , /*decltype(_impl_.interpolator_)*/0} {}
struct TLightweightAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TLightweightAnimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TLightweightAnimationDefaultTypeInternal() {}
  union {
    TLightweightAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TLightweightAnimationDefaultTypeInternal _TLightweightAnimation_default_instance_;
PROTOBUF_CONSTEXPR TEntryExitAnimation::TEntryExitAnimation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.entry_)*/nullptr
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.updateinterval_)*/0u
  , /*decltype(_impl_.threshold_)*/0} {}
struct TEntryExitAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TEntryExitAnimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TEntryExitAnimationDefaultTypeInternal() {}
  union {
    TEntryExitAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TEntryExitAnimationDefaultTypeInternal _TEntryExitAnimation_default_instance_;
PROTOBUF_CONSTEXPR TLoopAnimation::TLoopAnimation(
    ::_pbi::ConstantInitialized): _impl_{
    /*decltype(_impl_._has_bits_)*/{}
  , /*decltype(_impl_._cached_size_)*/{}
  , /*decltype(_impl_.play_)*/nullptr
  , /*decltype(_impl_.duration_)*/0u
  , /*decltype(_impl_.updateinterval_)*/0u
  , /*decltype(_impl_.alternate_)*/false} {}
struct TLoopAnimationDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TLoopAnimationDefaultTypeInternal()
      : _instance(::_pbi::ConstantInitialized{}) {}
  ~TLoopAnimationDefaultTypeInternal() {}
  union {
    TLoopAnimation _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TLoopAnimationDefaultTypeInternal _TLoopAnimation_default_instance_;
static ::_pb::Metadata file_level_metadata_HmiBase_2eproto[7];
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_HmiBase_2eproto[4];
static constexpr ::_pb::ServiceDescriptor const** file_level_service_descriptors_HmiBase_2eproto = nullptr;

const uint32_t TableStruct_HmiBase_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  PROTOBUF_FIELD_OFFSET(::TVariantFlag, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TVariantFlag, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TVariantFlag, _impl_.value_),
  PROTOBUF_FIELD_OFFSET(::TVariantFlag, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::TVariantFlag, _impl_.operand1_),
  PROTOBUF_FIELD_OFFSET(::TVariantFlag, _impl_.operand2_),
  2,
  3,
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TDataBinding, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TDataBinding, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDataBinding, _impl_.key_),
  PROTOBUF_FIELD_OFFSET(::TDataBinding, _impl_.provider_),
  0,
  1,
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _internal_metadata_),
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_._extensions_),
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_.variant_),
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_.source_),
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_.operation_),
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_.lightweightanimation_),
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_.entryexitanimation_),
  PROTOBUF_FIELD_OFFSET(::TDataProvider, _impl_.loopanimation_),
  0,
  5,
  1,
  2,
  3,
  4,
  PROTOBUF_FIELD_OFFSET(::TOperation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TOperation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TOperation, _impl_.operator__),
  PROTOBUF_FIELD_OFFSET(::TOperation, _impl_.datatype_),
  PROTOBUF_FIELD_OFFSET(::TOperation, _impl_.operand_),
  0,
  ~0u,
  ~0u,
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_.target_),
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_.init_),
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_.distance_),
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_.updateinterval_),
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_.skip_),
  PROTOBUF_FIELD_OFFSET(::TLightweightAnimation, _impl_.interpolator_),
  0,
  2,
  3,
  4,
  5,
  1,
  6,
  PROTOBUF_FIELD_OFFSET(::TEntryExitAnimation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TEntryExitAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TEntryExitAnimation, _impl_.entry_),
  PROTOBUF_FIELD_OFFSET(::TEntryExitAnimation, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::TEntryExitAnimation, _impl_.updateinterval_),
  PROTOBUF_FIELD_OFFSET(::TEntryExitAnimation, _impl_.threshold_),
  0,
  1,
  2,
  3,
  PROTOBUF_FIELD_OFFSET(::TLoopAnimation, _impl_._has_bits_),
  PROTOBUF_FIELD_OFFSET(::TLoopAnimation, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::TLoopAnimation, _impl_.play_),
  PROTOBUF_FIELD_OFFSET(::TLoopAnimation, _impl_.duration_),
  PROTOBUF_FIELD_OFFSET(::TLoopAnimation, _impl_.updateinterval_),
  PROTOBUF_FIELD_OFFSET(::TLoopAnimation, _impl_.alternate_),
  0,
  1,
  2,
  3,
};
static const ::_pbi::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, 10, -1, sizeof(::TVariantFlag)},
  { 14, 22, -1, sizeof(::TDataBinding)},
  { 24, 36, -1, sizeof(::TDataProvider)},
  { 42, 51, -1, sizeof(::TOperation)},
  { 54, 67, -1, sizeof(::TLightweightAnimation)},
  { 74, 84, -1, sizeof(::TEntryExitAnimation)},
  { 88, 98, -1, sizeof(::TLoopAnimation)},
};

static const ::_pb::Message* const file_default_instances[] = {
  &::_TVariantFlag_default_instance_._instance,
  &::_TDataBinding_default_instance_._instance,
  &::_TDataProvider_default_instance_._instance,
  &::_TOperation_default_instance_._instance,
  &::_TLightweightAnimation_default_instance_._instance,
  &::_TEntryExitAnimation_default_instance_._instance,
  &::_TLoopAnimation_default_instance_._instance,
};

const char descriptor_table_protodef_HmiBase_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rHmiBase.proto\032\014Common.proto\"\213\001\n\014TVaria"
  "ntFlag\022\r\n\005value\030\001 \001(\007\022*\n\toperation\030\002 \001(\016"
  "2\027.TEVariantFlagOperation\022\037\n\010operand1\030\003 "
  "\001(\0132\r.TVariantFlag\022\037\n\010operand2\030\004 \001(\0132\r.T"
  "VariantFlag\"K\n\014TDataBinding\022\031\n\003key\030\001 \001(\013"
  "2\014.TIdentifier\022 \n\010provider\030\002 \002(\0132\016.TData"
  "Provider\"\204\002\n\rTDataProvider\022\032\n\007variant\030\001 "
  "\001(\0132\t.TVariant\022!\n\006source\030\004 \001(\0162\021.TEProvi"
  "derSource\022\036\n\toperation\030\005 \001(\0132\013.TOperatio"
  "n\0224\n\024lightweightAnimation\030\006 \001(\0132\026.TLight"
  "weightAnimation\0220\n\022entryExitAnimation\030\007 "
  "\001(\0132\024.TEntryExitAnimation\022&\n\rloopAnimati"
  "on\030\010 \001(\0132\017.TLoopAnimation*\004\010\n\020\037\"n\n\nTOper"
  "ation\022!\n\010operator\030\001 \002(\0162\017.TEOperatorType"
  "\022\035\n\010dataType\030\002 \003(\0162\013.TEDataType\022\036\n\007opera"
  "nd\030\003 \003(\0132\r.TDataBinding\"\315\001\n\025TLightweight"
  "Animation\022\035\n\006target\030\001 \001(\0132\r.TDataBinding"
  "\022\020\n\010duration\030\002 \001(\r\022\014\n\004init\030\003 \001(\002\022\020\n\010dist"
  "ance\030\004 \001(\002\022\026\n\016updateInterval\030\005 \001(\r\022\033\n\004sk"
  "ip\030\006 \001(\0132\r.TDataBinding\022.\n\014interpolator\030"
  "\007 \001(\0162\030.TEAnimationInterpolator\"p\n\023TEntr"
  "yExitAnimation\022\034\n\005entry\030\001 \001(\0132\r.TDataBin"
  "ding\022\020\n\010duration\030\002 \001(\r\022\026\n\016updateInterval"
  "\030\003 \001(\r\022\021\n\tthreshold\030\004 \001(\002\"j\n\016TLoopAnimat"
  "ion\022\033\n\004play\030\001 \001(\0132\r.TDataBinding\022\020\n\010dura"
  "tion\030\002 \001(\r\022\026\n\016updateInterval\030\003 \001(\r\022\021\n\tal"
  "ternate\030\004 \001(\010*\207\n\n\016TEOperatorType\022\026\n\022TEOp"
  "eratorType_Not\020\000\022\026\n\022TEOperatorType_Neg\020\001"
  "\022\026\n\022TEOperatorType_Inv\020\002\022\026\n\022TEOperatorTy"
  "pe_Abs\020\003\022\026\n\022TEOperatorType_And\020\004\022\025\n\021TEOp"
  "eratorType_Or\020\005\022\026\n\022TEOperatorType_Add\020\006\022"
  "\026\n\022TEOperatorType_Sub\020\007\022\026\n\022TEOperatorTyp"
  "e_Mul\020\010\022\026\n\022TEOperatorType_Div\020\t\022\026\n\022TEOpe"
  "ratorType_Min\020\n\022\026\n\022TEOperatorType_Max\020\013\022"
  "\030\n\024TEOperatorType_Equal\020\014\022\033\n\027TEOperatorT"
  "ype_NotEqual\020\r\022\027\n\023TEOperatorType_Less\020\016\022"
  "\032\n\026TEOperatorType_Greater\020\017\022\034\n\030TEOperato"
  "rType_LessEqual\020\020\022\037\n\033TEOperatorType_Grea"
  "terEqual\020\021\022\035\n\031TEOperatorType_IfThenElse\020"
  "\022\022\030\n\024TEOperatorType_Clamp\020\023\022\032\n\026TEOperato"
  "rType_MuxVec2\020\024\022\032\n\026TEOperatorType_MuxVec"
  "3\020\025\022\032\n\026TEOperatorType_MuxVec4\020\026\022\034\n\030TEOpe"
  "ratorType_ColorFade\020\027\022#\n\037TEOperatorType_"
  "NormalizeInRange\020\030\022#\n\037TEOperatorType_isR"
  "essourceValid\020\031\022\032\n\026TEOperatorType_IsEmpt"
  "y\020\032\022\037\n\033TEOperatorType_MuxAlignment\020\033\022\026\n\022"
  "TEOperatorType_Mix\020\034\022\027\n\023TEOperatorType_S"
  "tep\020\035\022\035\n\031TEOperatorType_SmoothStep\020\036\022\035\n\031"
  "TEOperatorType_RemapValue\020\037\022\026\n\022TEOperato"
  "rType_Pow\020 \022\031\n\025TEOperatorType_Switch\020!\022\033"
  "\n\027TEOperatorType_LogBaseE\020\"\022\032\n\026TEOperato"
  "rType_Convert\020#\022\036\n\032TEOperatorType_DebugO"
  "utput\020$\022\026\n\022TEOperatorType_Sin\020%\022\026\n\022TEOpe"
  "ratorType_Cos\020&\022\026\n\022TEOperatorType_Tan\020\'\022"
  "\026\n\022TEOperatorType_XOr\020(\022\033\n\027TEOperatorTyp"
  "e_DemuxVec\020)\022\026\n\022TEOperatorType_Mod\020*\022\030\n\024"
  "TEOperatorType_Round\020+\022+\n\'TEOperatorType"
  "_CubicBezierInterpolation\020,\022\"\n\036TEOperato"
  "rType_IsRessourceType\020-*\265\002\n\020TEProviderSo"
  "urce\022\"\n\036TEProviderSource_ExtModelValue\020\000"
  "\022\"\n\036TEProviderSource_IntModelValue\020\001\022$\n "
  "TEProviderSource_VariantRegistry\020\002\022\"\n\036TE"
  "ProviderSource_ColorRegistry\020\003\022\"\n\036TEProv"
  "iderSource_ConstRegistry\020\004\022\"\n\036TEProvider"
  "Source_PropertyModel\020\005\022\036\n\032TEProviderSour"
  "ce_DataModel\020\006\022\'\n#TEProviderSource_Widge"
  "tDataExchange\020\007*w\n\026TEVariantFlagOperatio"
  "n\022\036\n\032TEVariantFlagOperation_Not\020\001\022\036\n\032TEV"
  "ariantFlagOperation_And\020\002\022\035\n\031TEVariantFl"
  "agOperation_Or\020\003*\373\003\n\027TEAnimationInterpol"
  "ator\022\"\n\036TEAnimationInterpolator_Linear\020\000"
  "\022\"\n\036TEAnimationInterpolator_SineIn\020\001\022#\n\037"
  "TEAnimationInterpolator_SineOut\020\002\022 \n\034TEA"
  "nimationInterpolator_Sine\020\003\022#\n\037TEAnimati"
  "onInterpolator_Arcsine\020\004\022 \n\034TEAnimationI"
  "nterpolator_Step\020\005\022\"\n\036TEAnimationInterpo"
  "lator_Switch\020\006\022#\n\037TEAnimationInterpolato"
  "r_Squared\020\007\022*\n&TEAnimationInterpolator_I"
  "nverseSquared\020\010\022&\n\"TEAnimationInterpolat"
  "or_SmoothStep\020\t\022 \n\034TEAnimationInterpolat"
  "or_Bump\020\n\022\'\n#TEAnimationInterpolator_Swi"
  "tchAtEnd\020\013\022\"\n\036TEAnimationInterpolator_Si"
  "neX2\020\014"
  ;
static const ::_pbi::DescriptorTable* const descriptor_table_HmiBase_2eproto_deps[1] = {
  &::descriptor_table_Common_2eproto,
};
static ::_pbi::once_flag descriptor_table_HmiBase_2eproto_once;
const ::_pbi::DescriptorTable descriptor_table_HmiBase_2eproto = {
    false, false, 3286, descriptor_table_protodef_HmiBase_2eproto,
    "HmiBase.proto",
    &descriptor_table_HmiBase_2eproto_once, descriptor_table_HmiBase_2eproto_deps, 1, 7,
    schemas, file_default_instances, TableStruct_HmiBase_2eproto::offsets,
    file_level_metadata_HmiBase_2eproto, file_level_enum_descriptors_HmiBase_2eproto,
    file_level_service_descriptors_HmiBase_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::_pbi::DescriptorTable* descriptor_table_HmiBase_2eproto_getter() {
  return &descriptor_table_HmiBase_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::_pbi::AddDescriptorsRunner dynamic_init_dummy_HmiBase_2eproto(&descriptor_table_HmiBase_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEOperatorType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HmiBase_2eproto);
  return file_level_enum_descriptors_HmiBase_2eproto[0];
}
bool TEOperatorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
    case 15:
    case 16:
    case 17:
    case 18:
    case 19:
    case 20:
    case 21:
    case 22:
    case 23:
    case 24:
    case 25:
    case 26:
    case 27:
    case 28:
    case 29:
    case 30:
    case 31:
    case 32:
    case 33:
    case 34:
    case 35:
    case 36:
    case 37:
    case 38:
    case 39:
    case 40:
    case 41:
    case 42:
    case 43:
    case 44:
    case 45:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEProviderSource_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HmiBase_2eproto);
  return file_level_enum_descriptors_HmiBase_2eproto[1];
}
bool TEProviderSource_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEVariantFlagOperation_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HmiBase_2eproto);
  return file_level_enum_descriptors_HmiBase_2eproto[2];
}
bool TEVariantFlagOperation_IsValid(int value) {
  switch (value) {
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* TEAnimationInterpolator_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_HmiBase_2eproto);
  return file_level_enum_descriptors_HmiBase_2eproto[3];
}
bool TEAnimationInterpolator_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class TVariantFlag::_Internal {
 public:
  using HasBits = decltype(std::declval<TVariantFlag>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TVariantFlag, _impl_._has_bits_);
  static void set_has_value(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TVariantFlag& operand1(const TVariantFlag* msg);
  static void set_has_operand1(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TVariantFlag& operand2(const TVariantFlag* msg);
  static void set_has_operand2(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
};

const ::TVariantFlag&
TVariantFlag::_Internal::operand1(const TVariantFlag* msg) {
  return *msg->_impl_.operand1_;
}
const ::TVariantFlag&
TVariantFlag::_Internal::operand2(const TVariantFlag* msg) {
  return *msg->_impl_.operand2_;
}
TVariantFlag::TVariantFlag(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TVariantFlag)
}
TVariantFlag::TVariantFlag(const TVariantFlag& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TVariantFlag* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operand1_){nullptr}
    , decltype(_impl_.operand2_){nullptr}
    , decltype(_impl_.value_){}
    , decltype(_impl_.operation_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_operand1()) {
    _this->_impl_.operand1_ = new ::TVariantFlag(*from._impl_.operand1_);
  }
  if (from._internal_has_operand2()) {
    _this->_impl_.operand2_ = new ::TVariantFlag(*from._impl_.operand2_);
  }
  ::memcpy(&_impl_.value_, &from._impl_.value_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.operation_) -
    reinterpret_cast<char*>(&_impl_.value_)) + sizeof(_impl_.operation_));
  // @@protoc_insertion_point(copy_constructor:TVariantFlag)
}

inline void TVariantFlag::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.operand1_){nullptr}
    , decltype(_impl_.operand2_){nullptr}
    , decltype(_impl_.value_){0u}
    , decltype(_impl_.operation_){1}
  };
}

TVariantFlag::~TVariantFlag() {
  // @@protoc_insertion_point(destructor:TVariantFlag)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TVariantFlag::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.operand1_;
  if (this != internal_default_instance()) delete _impl_.operand2_;
}

void TVariantFlag::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TVariantFlag::Clear() {
// @@protoc_insertion_point(message_clear_start:TVariantFlag)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.operand1_ != nullptr);
      _impl_.operand1_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.operand2_ != nullptr);
      _impl_.operand2_->Clear();
    }
  }
  if (cached_has_bits & 0x0000000cu) {
    _impl_.value_ = 0u;
    _impl_.operation_ = 1;
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TVariantFlag::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional fixed32 value = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 13)) {
          _Internal::set_has_value(&has_bits);
          _impl_.value_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<uint32_t>(ptr);
          ptr += sizeof(uint32_t);
        } else
          goto handle_unusual;
        continue;
      // optional .TEVariantFlagOperation operation = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEVariantFlagOperation_IsValid(val))) {
            _internal_set_operation(static_cast<::TEVariantFlagOperation>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TVariantFlag operand1 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_operand1(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TVariantFlag operand2 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_operand2(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TVariantFlag::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TVariantFlag)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional fixed32 value = 1;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFixed32ToArray(1, this->_internal_value(), target);
  }

  // optional .TEVariantFlagOperation operation = 2;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      2, this->_internal_operation(), target);
  }

  // optional .TVariantFlag operand1 = 3;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, _Internal::operand1(this),
        _Internal::operand1(this).GetCachedSize(), target, stream);
  }

  // optional .TVariantFlag operand2 = 4;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, _Internal::operand2(this),
        _Internal::operand2(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TVariantFlag)
  return target;
}

size_t TVariantFlag::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TVariantFlag)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TVariantFlag operand1 = 3;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operand1_);
    }

    // optional .TVariantFlag operand2 = 4;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operand2_);
    }

    // optional fixed32 value = 1;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 + 4;
    }

    // optional .TEVariantFlagOperation operation = 2;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_operation());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TVariantFlag::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TVariantFlag::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TVariantFlag::GetClassData() const { return &_class_data_; }


void TVariantFlag::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TVariantFlag*>(&to_msg);
  auto& from = static_cast<const TVariantFlag&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TVariantFlag)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_operand1()->::TVariantFlag::MergeFrom(
          from._internal_operand1());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_operand2()->::TVariantFlag::MergeFrom(
          from._internal_operand2());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.value_ = from._impl_.value_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.operation_ = from._impl_.operation_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TVariantFlag::CopyFrom(const TVariantFlag& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TVariantFlag)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TVariantFlag::IsInitialized() const {
  return true;
}

void TVariantFlag::InternalSwap(TVariantFlag* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TVariantFlag, _impl_.value_)
      + sizeof(TVariantFlag::_impl_.value_)
      - PROTOBUF_FIELD_OFFSET(TVariantFlag, _impl_.operand1_)>(
          reinterpret_cast<char*>(&_impl_.operand1_),
          reinterpret_cast<char*>(&other->_impl_.operand1_));
  swap(_impl_.operation_, other->_impl_.operation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata TVariantFlag::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HmiBase_2eproto_getter, &descriptor_table_HmiBase_2eproto_once,
      file_level_metadata_HmiBase_2eproto[0]);
}

// ===================================================================

class TDataBinding::_Internal {
 public:
  using HasBits = decltype(std::declval<TDataBinding>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TDataBinding, _impl_._has_bits_);
  static const ::TIdentifier& key(const TDataBinding* msg);
  static void set_has_key(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static const ::TDataProvider& provider(const TDataBinding* msg);
  static void set_has_provider(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000002) ^ 0x00000002) != 0;
  }
};

const ::TIdentifier&
TDataBinding::_Internal::key(const TDataBinding* msg) {
  return *msg->_impl_.key_;
}
const ::TDataProvider&
TDataBinding::_Internal::provider(const TDataBinding* msg) {
  return *msg->_impl_.provider_;
}
void TDataBinding::clear_key() {
  if (_impl_.key_ != nullptr) _impl_.key_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TDataBinding::TDataBinding(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TDataBinding)
}
TDataBinding::TDataBinding(const TDataBinding& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDataBinding* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.provider_){nullptr}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_key()) {
    _this->_impl_.key_ = new ::TIdentifier(*from._impl_.key_);
  }
  if (from._internal_has_provider()) {
    _this->_impl_.provider_ = new ::TDataProvider(*from._impl_.provider_);
  }
  // @@protoc_insertion_point(copy_constructor:TDataBinding)
}

inline void TDataBinding::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.key_){nullptr}
    , decltype(_impl_.provider_){nullptr}
  };
}

TDataBinding::~TDataBinding() {
  // @@protoc_insertion_point(destructor:TDataBinding)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDataBinding::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.key_;
  if (this != internal_default_instance()) delete _impl_.provider_;
}

void TDataBinding::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDataBinding::Clear() {
// @@protoc_insertion_point(message_clear_start:TDataBinding)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.key_ != nullptr);
      _impl_.key_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.provider_ != nullptr);
      _impl_.provider_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDataBinding::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TIdentifier key = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_key(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // required .TDataProvider provider = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_provider(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDataBinding::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDataBinding)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TIdentifier key = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::key(this),
        _Internal::key(this).GetCachedSize(), target, stream);
  }

  // required .TDataProvider provider = 2;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, _Internal::provider(this),
        _Internal::provider(this).GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDataBinding)
  return target;
}

size_t TDataBinding::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDataBinding)
  size_t total_size = 0;

  // required .TDataProvider provider = 2;
  if (_internal_has_provider()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.provider_);
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // optional .TIdentifier key = 1;
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *_impl_.key_);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDataBinding::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDataBinding::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDataBinding::GetClassData() const { return &_class_data_; }


void TDataBinding::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDataBinding*>(&to_msg);
  auto& from = static_cast<const TDataBinding&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TDataBinding)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_key()->::TIdentifier::MergeFrom(
          from._internal_key());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_provider()->::TDataProvider::MergeFrom(
          from._internal_provider());
    }
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDataBinding::CopyFrom(const TDataBinding& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDataBinding)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDataBinding::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (_internal_has_provider()) {
    if (!_impl_.provider_->IsInitialized()) return false;
  }
  return true;
}

void TDataBinding::InternalSwap(TDataBinding* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDataBinding, _impl_.provider_)
      + sizeof(TDataBinding::_impl_.provider_)
      - PROTOBUF_FIELD_OFFSET(TDataBinding, _impl_.key_)>(
          reinterpret_cast<char*>(&_impl_.key_),
          reinterpret_cast<char*>(&other->_impl_.key_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDataBinding::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HmiBase_2eproto_getter, &descriptor_table_HmiBase_2eproto_once,
      file_level_metadata_HmiBase_2eproto[1]);
}

// ===================================================================

class TDataProvider::_Internal {
 public:
  using HasBits = decltype(std::declval<TDataProvider>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TDataProvider, _impl_._has_bits_);
  static const ::TVariant& variant(const TDataProvider* msg);
  static void set_has_variant(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_source(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TOperation& operation(const TDataProvider* msg);
  static void set_has_operation(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static const ::TLightweightAnimation& lightweightanimation(const TDataProvider* msg);
  static void set_has_lightweightanimation(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static const ::TEntryExitAnimation& entryexitanimation(const TDataProvider* msg);
  static void set_has_entryexitanimation(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static const ::TLoopAnimation& loopanimation(const TDataProvider* msg);
  static void set_has_loopanimation(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
};

const ::TVariant&
TDataProvider::_Internal::variant(const TDataProvider* msg) {
  return *msg->_impl_.variant_;
}
const ::TOperation&
TDataProvider::_Internal::operation(const TDataProvider* msg) {
  return *msg->_impl_.operation_;
}
const ::TLightweightAnimation&
TDataProvider::_Internal::lightweightanimation(const TDataProvider* msg) {
  return *msg->_impl_.lightweightanimation_;
}
const ::TEntryExitAnimation&
TDataProvider::_Internal::entryexitanimation(const TDataProvider* msg) {
  return *msg->_impl_.entryexitanimation_;
}
const ::TLoopAnimation&
TDataProvider::_Internal::loopanimation(const TDataProvider* msg) {
  return *msg->_impl_.loopanimation_;
}
void TDataProvider::clear_variant() {
  if (_impl_.variant_ != nullptr) _impl_.variant_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
TDataProvider::TDataProvider(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TDataProvider)
}
TDataProvider::TDataProvider(const TDataProvider& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TDataProvider* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{}
    , decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variant_){nullptr}
    , decltype(_impl_.operation_){nullptr}
    , decltype(_impl_.lightweightanimation_){nullptr}
    , decltype(_impl_.entryexitanimation_){nullptr}
    , decltype(_impl_.loopanimation_){nullptr}
    , decltype(_impl_.source_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  if (from._internal_has_variant()) {
    _this->_impl_.variant_ = new ::TVariant(*from._impl_.variant_);
  }
  if (from._internal_has_operation()) {
    _this->_impl_.operation_ = new ::TOperation(*from._impl_.operation_);
  }
  if (from._internal_has_lightweightanimation()) {
    _this->_impl_.lightweightanimation_ = new ::TLightweightAnimation(*from._impl_.lightweightanimation_);
  }
  if (from._internal_has_entryexitanimation()) {
    _this->_impl_.entryexitanimation_ = new ::TEntryExitAnimation(*from._impl_.entryexitanimation_);
  }
  if (from._internal_has_loopanimation()) {
    _this->_impl_.loopanimation_ = new ::TLoopAnimation(*from._impl_.loopanimation_);
  }
  _this->_impl_.source_ = from._impl_.source_;
  // @@protoc_insertion_point(copy_constructor:TDataProvider)
}

inline void TDataProvider::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      /*decltype(_impl_._extensions_)*/{::_pbi::ArenaInitialized(), arena}
    , decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.variant_){nullptr}
    , decltype(_impl_.operation_){nullptr}
    , decltype(_impl_.lightweightanimation_){nullptr}
    , decltype(_impl_.entryexitanimation_){nullptr}
    , decltype(_impl_.loopanimation_){nullptr}
    , decltype(_impl_.source_){0}
  };
}

TDataProvider::~TDataProvider() {
  // @@protoc_insertion_point(destructor:TDataProvider)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TDataProvider::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_._extensions_.~ExtensionSet();
  if (this != internal_default_instance()) delete _impl_.variant_;
  if (this != internal_default_instance()) delete _impl_.operation_;
  if (this != internal_default_instance()) delete _impl_.lightweightanimation_;
  if (this != internal_default_instance()) delete _impl_.entryexitanimation_;
  if (this != internal_default_instance()) delete _impl_.loopanimation_;
}

void TDataProvider::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TDataProvider::Clear() {
// @@protoc_insertion_point(message_clear_start:TDataProvider)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_._extensions_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.variant_ != nullptr);
      _impl_.variant_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.operation_ != nullptr);
      _impl_.operation_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(_impl_.lightweightanimation_ != nullptr);
      _impl_.lightweightanimation_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      GOOGLE_DCHECK(_impl_.entryexitanimation_ != nullptr);
      _impl_.entryexitanimation_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      GOOGLE_DCHECK(_impl_.loopanimation_ != nullptr);
      _impl_.loopanimation_->Clear();
    }
  }
  _impl_.source_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TDataProvider::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TVariant variant = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_variant(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TEProviderSource source = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEProviderSource_IsValid(val))) {
            _internal_set_source(static_cast<::TEProviderSource>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(4, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // optional .TOperation operation = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_operation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TLightweightAnimation lightweightAnimation = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_lightweightanimation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TEntryExitAnimation entryExitAnimation = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_entryexitanimation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TLoopAnimation loopAnimation = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_loopanimation(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    if ((80u <= tag && tag < 248u)) {
      ptr = _impl_._extensions_.ParseField(tag, ptr, internal_default_instance(), &_internal_metadata_, ctx);
      CHK_(ptr != nullptr);
      continue;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TDataProvider::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TDataProvider)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TVariant variant = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::variant(this),
        _Internal::variant(this).GetCachedSize(), target, stream);
  }

  // optional .TEProviderSource source = 4;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      4, this->_internal_source(), target);
  }

  // optional .TOperation operation = 5;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(5, _Internal::operation(this),
        _Internal::operation(this).GetCachedSize(), target, stream);
  }

  // optional .TLightweightAnimation lightweightAnimation = 6;
  if (cached_has_bits & 0x00000004u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::lightweightanimation(this),
        _Internal::lightweightanimation(this).GetCachedSize(), target, stream);
  }

  // optional .TEntryExitAnimation entryExitAnimation = 7;
  if (cached_has_bits & 0x00000008u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, _Internal::entryexitanimation(this),
        _Internal::entryexitanimation(this).GetCachedSize(), target, stream);
  }

  // optional .TLoopAnimation loopAnimation = 8;
  if (cached_has_bits & 0x00000010u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(8, _Internal::loopanimation(this),
        _Internal::loopanimation(this).GetCachedSize(), target, stream);
  }

  // Extension range [10, 31)
  target = _impl_._extensions_._InternalSerialize(
  internal_default_instance(), 10, 31, target, stream);

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TDataProvider)
  return target;
}

size_t TDataProvider::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TDataProvider)
  size_t total_size = 0;

  total_size += _impl_._extensions_.ByteSize();

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    // optional .TVariant variant = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.variant_);
    }

    // optional .TOperation operation = 5;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.operation_);
    }

    // optional .TLightweightAnimation lightweightAnimation = 6;
    if (cached_has_bits & 0x00000004u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.lightweightanimation_);
    }

    // optional .TEntryExitAnimation entryExitAnimation = 7;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entryexitanimation_);
    }

    // optional .TLoopAnimation loopAnimation = 8;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.loopanimation_);
    }

    // optional .TEProviderSource source = 4;
    if (cached_has_bits & 0x00000020u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_source());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TDataProvider::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TDataProvider::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TDataProvider::GetClassData() const { return &_class_data_; }


void TDataProvider::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TDataProvider*>(&to_msg);
  auto& from = static_cast<const TDataProvider&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TDataProvider)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_variant()->::TVariant::MergeFrom(
          from._internal_variant());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_operation()->::TOperation::MergeFrom(
          from._internal_operation());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_internal_mutable_lightweightanimation()->::TLightweightAnimation::MergeFrom(
          from._internal_lightweightanimation());
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_internal_mutable_entryexitanimation()->::TEntryExitAnimation::MergeFrom(
          from._internal_entryexitanimation());
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_internal_mutable_loopanimation()->::TLoopAnimation::MergeFrom(
          from._internal_loopanimation());
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.source_ = from._impl_.source_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_impl_._extensions_.MergeFrom(internal_default_instance(), from._impl_._extensions_);
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TDataProvider::CopyFrom(const TDataProvider& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TDataProvider)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TDataProvider::IsInitialized() const {
  if (!_impl_._extensions_.IsInitialized()) {
    return false;
  }

  if (_internal_has_variant()) {
    if (!_impl_.variant_->IsInitialized()) return false;
  }
  if (_internal_has_operation()) {
    if (!_impl_.operation_->IsInitialized()) return false;
  }
  if (_internal_has_lightweightanimation()) {
    if (!_impl_.lightweightanimation_->IsInitialized()) return false;
  }
  if (_internal_has_entryexitanimation()) {
    if (!_impl_.entryexitanimation_->IsInitialized()) return false;
  }
  if (_internal_has_loopanimation()) {
    if (!_impl_.loopanimation_->IsInitialized()) return false;
  }
  return true;
}

void TDataProvider::InternalSwap(TDataProvider* other) {
  using std::swap;
  _impl_._extensions_.InternalSwap(&other->_impl_._extensions_);
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TDataProvider, _impl_.source_)
      + sizeof(TDataProvider::_impl_.source_)
      - PROTOBUF_FIELD_OFFSET(TDataProvider, _impl_.variant_)>(
          reinterpret_cast<char*>(&_impl_.variant_),
          reinterpret_cast<char*>(&other->_impl_.variant_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TDataProvider::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HmiBase_2eproto_getter, &descriptor_table_HmiBase_2eproto_once,
      file_level_metadata_HmiBase_2eproto[2]);
}

// ===================================================================

class TOperation::_Internal {
 public:
  using HasBits = decltype(std::declval<TOperation>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TOperation, _impl_._has_bits_);
  static void set_has_operator_(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static bool MissingRequiredFields(const HasBits& has_bits) {
    return ((has_bits[0] & 0x00000001) ^ 0x00000001) != 0;
  }
};

TOperation::TOperation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TOperation)
}
TOperation::TOperation(const TOperation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TOperation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.datatype_){from._impl_.datatype_}
    , decltype(_impl_.operand_){from._impl_.operand_}
    , decltype(_impl_.operator__){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  _this->_impl_.operator__ = from._impl_.operator__;
  // @@protoc_insertion_point(copy_constructor:TOperation)
}

inline void TOperation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.datatype_){arena}
    , decltype(_impl_.operand_){arena}
    , decltype(_impl_.operator__){0}
  };
}

TOperation::~TOperation() {
  // @@protoc_insertion_point(destructor:TOperation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TOperation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  _impl_.datatype_.~RepeatedField();
  _impl_.operand_.~RepeatedPtrField();
}

void TOperation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TOperation::Clear() {
// @@protoc_insertion_point(message_clear_start:TOperation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.datatype_.Clear();
  _impl_.operand_.Clear();
  _impl_.operator__ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TOperation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // required .TEOperatorType operator = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEOperatorType_IsValid(val))) {
            _internal_set_operator_(static_cast<::TEOperatorType>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(1, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      // repeated .TEDataType dataType = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          ptr -= 1;
          do {
            ptr += 1;
            uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
            CHK_(ptr);
            if (PROTOBUF_PREDICT_TRUE(::TEDataType_IsValid(val))) {
              _internal_add_datatype(static_cast<::TEDataType>(val));
            } else {
              ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(2, val, mutable_unknown_fields());
            }
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<16>(ptr));
        } else if (static_cast<uint8_t>(tag) == 18) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedEnumParser<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(_internal_mutable_datatype(), ptr, ctx, ::TEDataType_IsValid, &_internal_metadata_, 2);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .TDataBinding operand = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_operand(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TOperation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TOperation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // required .TEOperatorType operator = 1;
  if (cached_has_bits & 0x00000001u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      1, this->_internal_operator_(), target);
  }

  // repeated .TEDataType dataType = 2;
  for (int i = 0, n = this->_internal_datatype_size(); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
        2, this->_internal_datatype(i), target);
  }

  // repeated .TDataBinding operand = 3;
  for (unsigned i = 0,
      n = static_cast<unsigned>(this->_internal_operand_size()); i < n; i++) {
    const auto& repfield = this->_internal_operand(i);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
        InternalWriteMessage(3, repfield, repfield.GetCachedSize(), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TOperation)
  return target;
}

size_t TOperation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TOperation)
  size_t total_size = 0;

  // required .TEOperatorType operator = 1;
  if (_internal_has_operator_()) {
    total_size += 1 +
      ::_pbi::WireFormatLite::EnumSize(this->_internal_operator_());
  }
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .TEDataType dataType = 2;
  {
    size_t data_size = 0;
    unsigned int count = static_cast<unsigned int>(this->_internal_datatype_size());for (unsigned int i = 0; i < count; i++) {
      data_size += ::_pbi::WireFormatLite::EnumSize(
        this->_internal_datatype(static_cast<int>(i)));
    }
    total_size += (1UL * count) + data_size;
  }

  // repeated .TDataBinding operand = 3;
  total_size += 1UL * this->_internal_operand_size();
  for (const auto& msg : this->_impl_.operand_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TOperation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TOperation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TOperation::GetClassData() const { return &_class_data_; }


void TOperation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TOperation*>(&to_msg);
  auto& from = static_cast<const TOperation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TOperation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_impl_.datatype_.MergeFrom(from._impl_.datatype_);
  _this->_impl_.operand_.MergeFrom(from._impl_.operand_);
  if (from._internal_has_operator_()) {
    _this->_internal_set_operator_(from._internal_operator_());
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TOperation::CopyFrom(const TOperation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TOperation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TOperation::IsInitialized() const {
  if (_Internal::MissingRequiredFields(_impl_._has_bits_)) return false;
  if (!::PROTOBUF_NAMESPACE_ID::internal::AllAreInitialized(_impl_.operand_))
    return false;
  return true;
}

void TOperation::InternalSwap(TOperation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.datatype_.InternalSwap(&other->_impl_.datatype_);
  _impl_.operand_.InternalSwap(&other->_impl_.operand_);
  swap(_impl_.operator__, other->_impl_.operator__);
}

::PROTOBUF_NAMESPACE_ID::Metadata TOperation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HmiBase_2eproto_getter, &descriptor_table_HmiBase_2eproto_once,
      file_level_metadata_HmiBase_2eproto[3]);
}

// ===================================================================

class TLightweightAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<TLightweightAnimation>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TLightweightAnimation, _impl_._has_bits_);
  static const ::TDataBinding& target(const TLightweightAnimation* msg);
  static void set_has_target(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_init(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
  static void set_has_distance(HasBits* has_bits) {
    (*has_bits)[0] |= 16u;
  }
  static void set_has_updateinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 32u;
  }
  static const ::TDataBinding& skip(const TLightweightAnimation* msg);
  static void set_has_skip(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_interpolator(HasBits* has_bits) {
    (*has_bits)[0] |= 64u;
  }
};

const ::TDataBinding&
TLightweightAnimation::_Internal::target(const TLightweightAnimation* msg) {
  return *msg->_impl_.target_;
}
const ::TDataBinding&
TLightweightAnimation::_Internal::skip(const TLightweightAnimation* msg) {
  return *msg->_impl_.skip_;
}
TLightweightAnimation::TLightweightAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TLightweightAnimation)
}
TLightweightAnimation::TLightweightAnimation(const TLightweightAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TLightweightAnimation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.skip_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.init_){}
    , decltype(_impl_.distance_){}
    , decltype(_impl_.updateinterval_){}
    , decltype(_impl_.interpolator_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_target()) {
    _this->_impl_.target_ = new ::TDataBinding(*from._impl_.target_);
  }
  if (from._internal_has_skip()) {
    _this->_impl_.skip_ = new ::TDataBinding(*from._impl_.skip_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.interpolator_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.interpolator_));
  // @@protoc_insertion_point(copy_constructor:TLightweightAnimation)
}

inline void TLightweightAnimation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.target_){nullptr}
    , decltype(_impl_.skip_){nullptr}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.init_){0}
    , decltype(_impl_.distance_){0}
    , decltype(_impl_.updateinterval_){0u}
    , decltype(_impl_.interpolator_){0}
  };
}

TLightweightAnimation::~TLightweightAnimation() {
  // @@protoc_insertion_point(destructor:TLightweightAnimation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TLightweightAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.target_;
  if (this != internal_default_instance()) delete _impl_.skip_;
}

void TLightweightAnimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TLightweightAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:TLightweightAnimation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(_impl_.target_ != nullptr);
      _impl_.target_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(_impl_.skip_ != nullptr);
      _impl_.skip_->Clear();
    }
  }
  if (cached_has_bits & 0x0000007cu) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.interpolator_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.interpolator_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLightweightAnimation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TDataBinding target = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_target(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float init = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 29)) {
          _Internal::set_has_init(&has_bits);
          _impl_.init_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional float distance = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_distance(&has_bits);
          _impl_.distance_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 updateInterval = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          _Internal::set_has_updateinterval(&has_bits);
          _impl_.updateinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TDataBinding skip = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_skip(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional .TEAnimationInterpolator interpolator = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          if (PROTOBUF_PREDICT_TRUE(::TEAnimationInterpolator_IsValid(val))) {
            _internal_set_interpolator(static_cast<::TEAnimationInterpolator>(val));
          } else {
            ::PROTOBUF_NAMESPACE_ID::internal::WriteVarint(7, val, mutable_unknown_fields());
          }
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLightweightAnimation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TLightweightAnimation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TDataBinding target = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::target(this),
        _Internal::target(this).GetCachedSize(), target, stream);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional float init = 3;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(3, this->_internal_init(), target);
  }

  // optional float distance = 4;
  if (cached_has_bits & 0x00000010u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_distance(), target);
  }

  // optional uint32 updateInterval = 5;
  if (cached_has_bits & 0x00000020u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(5, this->_internal_updateinterval(), target);
  }

  // optional .TDataBinding skip = 6;
  if (cached_has_bits & 0x00000002u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, _Internal::skip(this),
        _Internal::skip(this).GetCachedSize(), target, stream);
  }

  // optional .TEAnimationInterpolator interpolator = 7;
  if (cached_has_bits & 0x00000040u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteEnumToArray(
      7, this->_internal_interpolator(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TLightweightAnimation)
  return target;
}

size_t TLightweightAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TLightweightAnimation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    // optional .TDataBinding target = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.target_);
    }

    // optional .TDataBinding skip = 6;
    if (cached_has_bits & 0x00000002u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.skip_);
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional float init = 3;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

    // optional float distance = 4;
    if (cached_has_bits & 0x00000010u) {
      total_size += 1 + 4;
    }

    // optional uint32 updateInterval = 5;
    if (cached_has_bits & 0x00000020u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_updateinterval());
    }

    // optional .TEAnimationInterpolator interpolator = 7;
    if (cached_has_bits & 0x00000040u) {
      total_size += 1 +
        ::_pbi::WireFormatLite::EnumSize(this->_internal_interpolator());
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLightweightAnimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TLightweightAnimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLightweightAnimation::GetClassData() const { return &_class_data_; }


void TLightweightAnimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TLightweightAnimation*>(&to_msg);
  auto& from = static_cast<const TLightweightAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TLightweightAnimation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000007fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_target()->::TDataBinding::MergeFrom(
          from._internal_target());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_mutable_skip()->::TDataBinding::MergeFrom(
          from._internal_skip());
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.init_ = from._impl_.init_;
    }
    if (cached_has_bits & 0x00000010u) {
      _this->_impl_.distance_ = from._impl_.distance_;
    }
    if (cached_has_bits & 0x00000020u) {
      _this->_impl_.updateinterval_ = from._impl_.updateinterval_;
    }
    if (cached_has_bits & 0x00000040u) {
      _this->_impl_.interpolator_ = from._impl_.interpolator_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLightweightAnimation::CopyFrom(const TLightweightAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TLightweightAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLightweightAnimation::IsInitialized() const {
  if (_internal_has_target()) {
    if (!_impl_.target_->IsInitialized()) return false;
  }
  if (_internal_has_skip()) {
    if (!_impl_.skip_->IsInitialized()) return false;
  }
  return true;
}

void TLightweightAnimation::InternalSwap(TLightweightAnimation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLightweightAnimation, _impl_.interpolator_)
      + sizeof(TLightweightAnimation::_impl_.interpolator_)
      - PROTOBUF_FIELD_OFFSET(TLightweightAnimation, _impl_.target_)>(
          reinterpret_cast<char*>(&_impl_.target_),
          reinterpret_cast<char*>(&other->_impl_.target_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLightweightAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HmiBase_2eproto_getter, &descriptor_table_HmiBase_2eproto_once,
      file_level_metadata_HmiBase_2eproto[4]);
}

// ===================================================================

class TEntryExitAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<TEntryExitAnimation>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TEntryExitAnimation, _impl_._has_bits_);
  static const ::TDataBinding& entry(const TEntryExitAnimation* msg);
  static void set_has_entry(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_updateinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_threshold(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TDataBinding&
TEntryExitAnimation::_Internal::entry(const TEntryExitAnimation* msg) {
  return *msg->_impl_.entry_;
}
TEntryExitAnimation::TEntryExitAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TEntryExitAnimation)
}
TEntryExitAnimation::TEntryExitAnimation(const TEntryExitAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TEntryExitAnimation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entry_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.updateinterval_){}
    , decltype(_impl_.threshold_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_entry()) {
    _this->_impl_.entry_ = new ::TDataBinding(*from._impl_.entry_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.threshold_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.threshold_));
  // @@protoc_insertion_point(copy_constructor:TEntryExitAnimation)
}

inline void TEntryExitAnimation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.entry_){nullptr}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.updateinterval_){0u}
    , decltype(_impl_.threshold_){0}
  };
}

TEntryExitAnimation::~TEntryExitAnimation() {
  // @@protoc_insertion_point(destructor:TEntryExitAnimation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TEntryExitAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.entry_;
}

void TEntryExitAnimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TEntryExitAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:TEntryExitAnimation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.entry_ != nullptr);
    _impl_.entry_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.threshold_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.threshold_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TEntryExitAnimation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TDataBinding entry = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_entry(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 updateInterval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_updateinterval(&has_bits);
          _impl_.updateinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional float threshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 37)) {
          _Internal::set_has_threshold(&has_bits);
          _impl_.threshold_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TEntryExitAnimation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TEntryExitAnimation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TDataBinding entry = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::entry(this),
        _Internal::entry(this).GetCachedSize(), target, stream);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional uint32 updateInterval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updateinterval(), target);
  }

  // optional float threshold = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteFloatToArray(4, this->_internal_threshold(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TEntryExitAnimation)
  return target;
}

size_t TEntryExitAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TEntryExitAnimation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TDataBinding entry = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.entry_);
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional uint32 updateInterval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_updateinterval());
    }

    // optional float threshold = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 4;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TEntryExitAnimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TEntryExitAnimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TEntryExitAnimation::GetClassData() const { return &_class_data_; }


void TEntryExitAnimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TEntryExitAnimation*>(&to_msg);
  auto& from = static_cast<const TEntryExitAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TEntryExitAnimation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_entry()->::TDataBinding::MergeFrom(
          from._internal_entry());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.updateinterval_ = from._impl_.updateinterval_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.threshold_ = from._impl_.threshold_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TEntryExitAnimation::CopyFrom(const TEntryExitAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TEntryExitAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TEntryExitAnimation::IsInitialized() const {
  if (_internal_has_entry()) {
    if (!_impl_.entry_->IsInitialized()) return false;
  }
  return true;
}

void TEntryExitAnimation::InternalSwap(TEntryExitAnimation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TEntryExitAnimation, _impl_.threshold_)
      + sizeof(TEntryExitAnimation::_impl_.threshold_)
      - PROTOBUF_FIELD_OFFSET(TEntryExitAnimation, _impl_.entry_)>(
          reinterpret_cast<char*>(&_impl_.entry_),
          reinterpret_cast<char*>(&other->_impl_.entry_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TEntryExitAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HmiBase_2eproto_getter, &descriptor_table_HmiBase_2eproto_once,
      file_level_metadata_HmiBase_2eproto[5]);
}

// ===================================================================

class TLoopAnimation::_Internal {
 public:
  using HasBits = decltype(std::declval<TLoopAnimation>()._impl_._has_bits_);
  static constexpr int32_t kHasBitsOffset =
    8 * PROTOBUF_FIELD_OFFSET(TLoopAnimation, _impl_._has_bits_);
  static const ::TDataBinding& play(const TLoopAnimation* msg);
  static void set_has_play(HasBits* has_bits) {
    (*has_bits)[0] |= 1u;
  }
  static void set_has_duration(HasBits* has_bits) {
    (*has_bits)[0] |= 2u;
  }
  static void set_has_updateinterval(HasBits* has_bits) {
    (*has_bits)[0] |= 4u;
  }
  static void set_has_alternate(HasBits* has_bits) {
    (*has_bits)[0] |= 8u;
  }
};

const ::TDataBinding&
TLoopAnimation::_Internal::play(const TLoopAnimation* msg) {
  return *msg->_impl_.play_;
}
TLoopAnimation::TLoopAnimation(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor(arena, is_message_owned);
  // @@protoc_insertion_point(arena_constructor:TLoopAnimation)
}
TLoopAnimation::TLoopAnimation(const TLoopAnimation& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  TLoopAnimation* const _this = this; (void)_this;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){from._impl_._has_bits_}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.play_){nullptr}
    , decltype(_impl_.duration_){}
    , decltype(_impl_.updateinterval_){}
    , decltype(_impl_.alternate_){}};

  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_play()) {
    _this->_impl_.play_ = new ::TDataBinding(*from._impl_.play_);
  }
  ::memcpy(&_impl_.duration_, &from._impl_.duration_,
    static_cast<size_t>(reinterpret_cast<char*>(&_impl_.alternate_) -
    reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.alternate_));
  // @@protoc_insertion_point(copy_constructor:TLoopAnimation)
}

inline void TLoopAnimation::SharedCtor(
    ::_pb::Arena* arena, bool is_message_owned) {
  (void)arena;
  (void)is_message_owned;
  new (&_impl_) Impl_{
      decltype(_impl_._has_bits_){}
    , /*decltype(_impl_._cached_size_)*/{}
    , decltype(_impl_.play_){nullptr}
    , decltype(_impl_.duration_){0u}
    , decltype(_impl_.updateinterval_){0u}
    , decltype(_impl_.alternate_){false}
  };
}

TLoopAnimation::~TLoopAnimation() {
  // @@protoc_insertion_point(destructor:TLoopAnimation)
  if (auto *arena = _internal_metadata_.DeleteReturnArena<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>()) {
  (void)arena;
    return;
  }
  SharedDtor();
}

inline void TLoopAnimation::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete _impl_.play_;
}

void TLoopAnimation::SetCachedSize(int size) const {
  _impl_._cached_size_.Set(size);
}

void TLoopAnimation::Clear() {
// @@protoc_insertion_point(message_clear_start:TLoopAnimation)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    GOOGLE_DCHECK(_impl_.play_ != nullptr);
    _impl_.play_->Clear();
  }
  if (cached_has_bits & 0x0000000eu) {
    ::memset(&_impl_.duration_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&_impl_.alternate_) -
        reinterpret_cast<char*>(&_impl_.duration_)) + sizeof(_impl_.alternate_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* TLoopAnimation::_InternalParse(const char* ptr, ::_pbi::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  _Internal::HasBits has_bits{};
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::_pbi::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // optional .TDataBinding play = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_play(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 duration = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          _Internal::set_has_duration(&has_bits);
          _impl_.duration_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional uint32 updateInterval = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          _Internal::set_has_updateinterval(&has_bits);
          _impl_.updateinterval_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // optional bool alternate = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          _Internal::set_has_alternate(&has_bits);
          _impl_.alternate_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  _impl_._has_bits_.Or(has_bits);
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* TLoopAnimation::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:TLoopAnimation)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  // optional .TDataBinding play = 1;
  if (cached_has_bits & 0x00000001u) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, _Internal::play(this),
        _Internal::play(this).GetCachedSize(), target, stream);
  }

  // optional uint32 duration = 2;
  if (cached_has_bits & 0x00000002u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(2, this->_internal_duration(), target);
  }

  // optional uint32 updateInterval = 3;
  if (cached_has_bits & 0x00000004u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteUInt32ToArray(3, this->_internal_updateinterval(), target);
  }

  // optional bool alternate = 4;
  if (cached_has_bits & 0x00000008u) {
    target = stream->EnsureSpace(target);
    target = ::_pbi::WireFormatLite::WriteBoolToArray(4, this->_internal_alternate(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:TLoopAnimation)
  return target;
}

size_t TLoopAnimation::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:TLoopAnimation)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    // optional .TDataBinding play = 1;
    if (cached_has_bits & 0x00000001u) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *_impl_.play_);
    }

    // optional uint32 duration = 2;
    if (cached_has_bits & 0x00000002u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_duration());
    }

    // optional uint32 updateInterval = 3;
    if (cached_has_bits & 0x00000004u) {
      total_size += ::_pbi::WireFormatLite::UInt32SizePlusOne(this->_internal_updateinterval());
    }

    // optional bool alternate = 4;
    if (cached_has_bits & 0x00000008u) {
      total_size += 1 + 1;
    }

  }
  return MaybeComputeUnknownFieldsSize(total_size, &_impl_._cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData TLoopAnimation::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSourceCheck,
    TLoopAnimation::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*TLoopAnimation::GetClassData() const { return &_class_data_; }


void TLoopAnimation::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message& to_msg, const ::PROTOBUF_NAMESPACE_ID::Message& from_msg) {
  auto* const _this = static_cast<TLoopAnimation*>(&to_msg);
  auto& from = static_cast<const TLoopAnimation&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:TLoopAnimation)
  GOOGLE_DCHECK_NE(&from, _this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_mutable_play()->::TDataBinding::MergeFrom(
          from._internal_play());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.duration_ = from._impl_.duration_;
    }
    if (cached_has_bits & 0x00000004u) {
      _this->_impl_.updateinterval_ = from._impl_.updateinterval_;
    }
    if (cached_has_bits & 0x00000008u) {
      _this->_impl_.alternate_ = from._impl_.alternate_;
    }
    _this->_impl_._has_bits_[0] |= cached_has_bits;
  }
  _this->_internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void TLoopAnimation::CopyFrom(const TLoopAnimation& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:TLoopAnimation)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TLoopAnimation::IsInitialized() const {
  if (_internal_has_play()) {
    if (!_impl_.play_->IsInitialized()) return false;
  }
  return true;
}

void TLoopAnimation::InternalSwap(TLoopAnimation* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TLoopAnimation, _impl_.alternate_)
      + sizeof(TLoopAnimation::_impl_.alternate_)
      - PROTOBUF_FIELD_OFFSET(TLoopAnimation, _impl_.play_)>(
          reinterpret_cast<char*>(&_impl_.play_),
          reinterpret_cast<char*>(&other->_impl_.play_));
}

::PROTOBUF_NAMESPACE_ID::Metadata TLoopAnimation::GetMetadata() const {
  return ::_pbi::AssignDescriptors(
      &descriptor_table_HmiBase_2eproto_getter, &descriptor_table_HmiBase_2eproto_once,
      file_level_metadata_HmiBase_2eproto[6]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::TVariantFlag*
Arena::CreateMaybeMessage< ::TVariantFlag >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TVariantFlag >(arena);
}
template<> PROTOBUF_NOINLINE ::TDataBinding*
Arena::CreateMaybeMessage< ::TDataBinding >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDataBinding >(arena);
}
template<> PROTOBUF_NOINLINE ::TDataProvider*
Arena::CreateMaybeMessage< ::TDataProvider >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TDataProvider >(arena);
}
template<> PROTOBUF_NOINLINE ::TOperation*
Arena::CreateMaybeMessage< ::TOperation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TOperation >(arena);
}
template<> PROTOBUF_NOINLINE ::TLightweightAnimation*
Arena::CreateMaybeMessage< ::TLightweightAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TLightweightAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::TEntryExitAnimation*
Arena::CreateMaybeMessage< ::TEntryExitAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TEntryExitAnimation >(arena);
}
template<> PROTOBUF_NOINLINE ::TLoopAnimation*
Arena::CreateMaybeMessage< ::TLoopAnimation >(Arena* arena) {
  return Arena::CreateMessageInternal< ::TLoopAnimation >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
